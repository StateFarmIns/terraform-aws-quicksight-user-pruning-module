// This file is committed because Terraform needs it to be there. Source code is in src folder
(()=>{"use strict";var e,t={181:e=>{e.exports=require("buffer")},244:(e,t,n)=>{function s(e,t,n){return e.$source||(e.$source={}),e.$source[t]=n,e}n.d(t,{g:()=>s})},290:e=>{e.exports=require("async_hooks")},468:(e,t,n)=>{n.d(t,{m:()=>s});const s={}},589:(e,t,n)=>{n.d(t,{$H:()=>i,Jj:()=>a});var s=n(9896);const{readFile:r}=s.promises,o={},a={},i=(e,t)=>void 0!==a[e]?a[e]:(o[e]&&!t?.ignoreCache||(o[e]=r(e,"utf8")),o[e])},612:(e,t,n)=>{n.d(t,{h:()=>s});class s{constructor(e){this.authSchemes=new Map;for(const[t,n]of Object.entries(e))void 0!==n&&this.authSchemes.set(t,n)}getIdentityProvider(e){return this.authSchemes.get(e)}}},643:(e,t,n)=>{n.d(t,{UF:()=>u,vL:()=>c});var s=n(468),r=n(8883),o=n(1466);const a=(e,t=!1)=>{if(t){for(const t of e.split("."))if(!a(t))return!1;return!0}return!(!(0,r.X)(e)||e.length<3||e.length>63||e!==e.toLowerCase()||(0,o.o)(e))};let i=JSON.parse('{"partitions":[{"id":"aws","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","implicitGlobalRegion":"us-east-1","name":"aws","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^(us|eu|ap|sa|ca|me|af|il|mx)\\\\-\\\\w+\\\\-\\\\d+$","regions":{"af-south-1":{"description":"Africa (Cape Town)"},"ap-east-1":{"description":"Asia Pacific (Hong Kong)"},"ap-east-2":{"description":"Asia Pacific (Taipei)"},"ap-northeast-1":{"description":"Asia Pacific (Tokyo)"},"ap-northeast-2":{"description":"Asia Pacific (Seoul)"},"ap-northeast-3":{"description":"Asia Pacific (Osaka)"},"ap-south-1":{"description":"Asia Pacific (Mumbai)"},"ap-south-2":{"description":"Asia Pacific (Hyderabad)"},"ap-southeast-1":{"description":"Asia Pacific (Singapore)"},"ap-southeast-2":{"description":"Asia Pacific (Sydney)"},"ap-southeast-3":{"description":"Asia Pacific (Jakarta)"},"ap-southeast-4":{"description":"Asia Pacific (Melbourne)"},"ap-southeast-5":{"description":"Asia Pacific (Malaysia)"},"ap-southeast-6":{"description":"Asia Pacific (New Zealand)"},"ap-southeast-7":{"description":"Asia Pacific (Thailand)"},"aws-global":{"description":"aws global region"},"ca-central-1":{"description":"Canada (Central)"},"ca-west-1":{"description":"Canada West (Calgary)"},"eu-central-1":{"description":"Europe (Frankfurt)"},"eu-central-2":{"description":"Europe (Zurich)"},"eu-north-1":{"description":"Europe (Stockholm)"},"eu-south-1":{"description":"Europe (Milan)"},"eu-south-2":{"description":"Europe (Spain)"},"eu-west-1":{"description":"Europe (Ireland)"},"eu-west-2":{"description":"Europe (London)"},"eu-west-3":{"description":"Europe (Paris)"},"il-central-1":{"description":"Israel (Tel Aviv)"},"me-central-1":{"description":"Middle East (UAE)"},"me-south-1":{"description":"Middle East (Bahrain)"},"mx-central-1":{"description":"Mexico (Central)"},"sa-east-1":{"description":"South America (Sao Paulo)"},"us-east-1":{"description":"US East (N. Virginia)"},"us-east-2":{"description":"US East (Ohio)"},"us-west-1":{"description":"US West (N. California)"},"us-west-2":{"description":"US West (Oregon)"}}},{"id":"aws-cn","outputs":{"dnsSuffix":"amazonaws.com.cn","dualStackDnsSuffix":"api.amazonwebservices.com.cn","implicitGlobalRegion":"cn-northwest-1","name":"aws-cn","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^cn\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-cn-global":{"description":"aws-cn global region"},"cn-north-1":{"description":"China (Beijing)"},"cn-northwest-1":{"description":"China (Ningxia)"}}},{"id":"aws-eusc","outputs":{"dnsSuffix":"amazonaws.eu","dualStackDnsSuffix":"api.amazonwebservices.eu","implicitGlobalRegion":"eusc-de-east-1","name":"aws-eusc","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^eusc\\\\-(de)\\\\-\\\\w+\\\\-\\\\d+$","regions":{"eusc-de-east-1":{"description":"EU (Germany)"}}},{"id":"aws-iso","outputs":{"dnsSuffix":"c2s.ic.gov","dualStackDnsSuffix":"api.aws.ic.gov","implicitGlobalRegion":"us-iso-east-1","name":"aws-iso","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-global":{"description":"aws-iso global region"},"us-iso-east-1":{"description":"US ISO East"},"us-iso-west-1":{"description":"US ISO WEST"}}},{"id":"aws-iso-b","outputs":{"dnsSuffix":"sc2s.sgov.gov","dualStackDnsSuffix":"api.aws.scloud","implicitGlobalRegion":"us-isob-east-1","name":"aws-iso-b","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-b-global":{"description":"aws-iso-b global region"},"us-isob-east-1":{"description":"US ISOB East (Ohio)"}}},{"id":"aws-iso-e","outputs":{"dnsSuffix":"cloud.adc-e.uk","dualStackDnsSuffix":"api.cloud-aws.adc-e.uk","implicitGlobalRegion":"eu-isoe-west-1","name":"aws-iso-e","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^eu\\\\-isoe\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-e-global":{"description":"aws-iso-e global region"},"eu-isoe-west-1":{"description":"EU ISOE West"}}},{"id":"aws-iso-f","outputs":{"dnsSuffix":"csp.hci.ic.gov","dualStackDnsSuffix":"api.aws.hci.ic.gov","implicitGlobalRegion":"us-isof-south-1","name":"aws-iso-f","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^us\\\\-isof\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-f-global":{"description":"aws-iso-f global region"},"us-isof-east-1":{"description":"US ISOF EAST"},"us-isof-south-1":{"description":"US ISOF SOUTH"}}},{"id":"aws-us-gov","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","implicitGlobalRegion":"us-gov-west-1","name":"aws-us-gov","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-us-gov-global":{"description":"aws-us-gov global region"},"us-gov-east-1":{"description":"AWS GovCloud (US-East)"},"us-gov-west-1":{"description":"AWS GovCloud (US-West)"}}}],"version":"1.1"}');const c=()=>"",u={isVirtualHostableS3Bucket:a,parseArn:e=>{const t=e.split(":");if(t.length<6)return null;const[n,s,r,o,a,...i]=t;return"arn"!==n||""===s||""===r||""===i.join(":")?null:{partition:s,service:r,region:o,accountId:a,resourceId:i.map(e=>e.split("/")).flat()}},partition:e=>{const{partitions:t}=i;for(const n of t){const{regions:t,outputs:s}=n;for(const[n,r]of Object.entries(t))if(n===e)return{...s,...r}}for(const n of t){const{regionRegex:t,outputs:s}=n;if(new RegExp(t).test(e))return{...s}}const n=t.find(e=>"aws"===e.id);if(!n)throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");return{...n.outputs}}};s.m.aws=u},649:(e,t,n)=>{n.d(t,{vK:()=>a});var s=n(7324);const r="content-length",o={step:"build",tags:["SET_CONTENT_LENGTH","CONTENT_LENGTH"],name:"contentLengthMiddleware",override:!0},a=e=>({applyToStack:t=>{var n;t.add((n=e.bodyLengthChecker,e=>async t=>{const o=t.request;if(s.K.isInstance(o)){const{body:e,headers:t}=o;if(e&&-1===Object.keys(t).map(e=>e.toLowerCase()).indexOf(r))try{const t=n(e);o.headers={...o.headers,[r]:String(t)}}catch(e){}}return e({...t,request:o})}),o)}})},666:(e,t,n)=>{n.d(t,{l:()=>s});const s=e=>{switch(e){case"standard":case"cross-region":return{retryMode:"standard",connectionTimeout:3100};case"in-region":return{retryMode:"standard",connectionTimeout:1100};case"mobile":return{retryMode:"standard",connectionTimeout:3e4};default:return{}}}},839:(e,t,n)=>{n.d(t,{r:()=>m});var s=n(1698),r=n(2067),o=n(6116);const a=/^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/,i=/(\d+\.){3}\d+/,c=/\.\./,u=(e,t,n)=>{const s=async()=>{const s=n[e]??n[t];return"function"==typeof s?s():s};return"credentialScope"===e||"CredentialScope"===t?async()=>{const e="function"==typeof n.credentials?await n.credentials():n.credentials;return e?.credentialScope??e?.CredentialScope}:"accountId"===e||"AccountId"===t?async()=>{const e="function"==typeof n.credentials?await n.credentials():n.credentials;return e?.accountId??e?.AccountId}:"endpoint"===e||"endpoint"===t?async()=>{if(!1===n.isCustomEndpoint)return;const e=await s();if(e&&"object"==typeof e){if("url"in e)return e.url.href;if("hostname"in e){const{protocol:t,hostname:n,port:s,path:r}=e;return`${t}//${n}${s?":"+s:""}${r}`}}return e}:s};var l=n(8829),d=n(8462);const p=async(e,t,n)=>{const s={},r=t?.getEndpointParameterInstructions?.()||{};for(const[t,o]of Object.entries(r))switch(o.type){case"staticContextParams":s[t]=o.value;break;case"contextParams":s[t]=e[o.name];break;case"clientContextParams":case"builtInParams":s[t]=await u(o.name,t,n)();break;case"operationContextParams":s[t]=o.get(e);break;default:throw new Error("Unrecognized endpoint parameter instruction: "+JSON.stringify(o))}return 0===Object.keys(r).length&&Object.assign(s,n),"s3"===String(n.serviceId).toLowerCase()&&await(async e=>{const t=e?.Bucket||"";if("string"==typeof e.Bucket&&(e.Bucket=t.replace(/#/g,encodeURIComponent("#")).replace(/\?/g,encodeURIComponent("?"))),(e=>{const[t,n,s,,,r]=e.split(":"),o="arn"===t&&e.split(":").length>=6,a=Boolean(o&&n&&s&&r);if(o&&!a)throw new Error(`Invalid ARN: ${e} was an invalid ARN.`);return a})(t)){if(!0===e.ForcePathStyle)throw new Error("Path-style addressing cannot be used with ARN buckets")}else n=t,(!a.test(n)||i.test(n)||c.test(n)||-1!==t.indexOf(".")&&!String(e.Endpoint).startsWith("http:")||t.toLowerCase()!==t||t.length<3)&&(e.ForcePathStyle=!0);var n;return e.DisableMultiRegionAccessPoints&&(e.disableMultiRegionAccessPoints=!0,e.DisableMRAP=!0),e})(s),s},h={step:"serialize",tags:["ENDPOINT_PARAMETERS","ENDPOINT_V2","ENDPOINT"],name:"endpointV2Middleware",override:!0,relation:"before",toMiddleware:s.Ou.name},m=(e,t)=>({applyToStack:n=>{n.addRelativeTo((({config:e,instructions:t})=>(n,s)=>async a=>{e.isCustomEndpoint&&(0,r.J)(s,"ENDPOINT_OVERRIDE","N");const i=await(async(e,t,n,s)=>{if(!n.isCustomEndpoint){let e;e=n.serviceConfiguredEndpoint?await n.serviceConfiguredEndpoint():await(0,l.k)(n.serviceId),e&&(n.endpoint=()=>Promise.resolve((0,d.a)(e)),n.isCustomEndpoint=!0)}const r=await p(e,t,n);if("function"!=typeof n.endpointProvider)throw new Error("config.endpointProvider is not set.");return n.endpointProvider(r,s)})(a.input,{getEndpointParameterInstructions:()=>t},{...e},s);s.endpointV2=i,s.authSchemes=i.properties?.authSchemes;const c=s.authSchemes?.[0];if(c){s.signing_region=c.signingRegion,s.signing_service=c.signingName;const e=(0,o.u)(s),t=e?.selectedHttpAuthScheme?.httpAuthOption;t&&(t.signingProperties=Object.assign(t.signingProperties||{},{signing_region:c.signingRegion,signingRegion:c.signingRegion,signing_service:c.signingName,signingName:c.signingName,signingRegionSet:c.signingRegionSet},c.properties))}return n({...a})})({config:e,instructions:t}),h)}})},857:e=>{e.exports=require("os")},1071:(e,t,n)=>{n.d(t,{P:()=>c});var s=n(9718),r=n(1395),o=n(7638),a=n(7459);class i extends Uint8Array{static fromString(e,t="utf-8"){if("string"==typeof e)return function(e,t){return"base64"===t?i.mutate((0,r.E)(e)):i.mutate((0,a.a)(e))}(e,t);throw new Error(`Unsupported conversion from ${typeof e} to Uint8ArrayBlobAdapter.`)}static mutate(e){return Object.setPrototypeOf(e,i.prototype),e}transformToString(e="utf-8"){return function(e,t="utf-8"){return"base64"===t?(0,s.n)(e):(0,o.P)(e)}(this,e)}}const c=async(e=new Uint8Array,t)=>{if(e instanceof Uint8Array)return i.mutate(e);if(!e)return i.mutate(new Uint8Array);const n=t.streamCollector(e);return i.mutate(await n)}},1095:(e,t,n)=>{n.d(t,{OV:()=>r,TC:()=>a});var s=n(7324);function r(e){return e}const o={name:"hostHeaderMiddleware",step:"build",priority:"low",tags:["HOST"],override:!0},a=e=>({applyToStack:t=>{t.add((e=>t=>async n=>{if(!s.K.isInstance(n.request))return t(n);const{request:r}=n,{handlerProtocol:o=""}=e.requestHandler.metadata||{};if(o.indexOf("h2")>=0&&!r.headers[":authority"])delete r.headers.host,r.headers[":authority"]=r.hostname+(r.port?":"+r.port:"");else if(!r.headers.host){let e=r.hostname;null!=r.port&&(e+=`:${r.port}`),r.headers.host=e}return t(n)})(e),o)}})},1226:(e,t,n)=>{function s(e,t,n){let s,r,i;if(void 0===t&&void 0===n)s={},i=e;else{if(s=e,"function"==typeof t)return r=t,i=n,o(s,r,i);i=t}for(const e of Object.keys(i))Array.isArray(i[e])?a(s,null,i,e):s[e]=i[e];return s}n.d(t,{Tj:()=>s,s:()=>r});const r=(e,t)=>{const n={};for(const s in t)a(n,e,t,s);return n},o=(e,t,n)=>s(e,Object.entries(n).reduce((e,[n,s])=>(Array.isArray(s)?e[n]=s:e[n]="function"==typeof s?[t,s()]:[t,s],e),{})),a=(e,t,n,s)=>{if(null!==t){let r=n[s];"function"==typeof r&&(r=[,r]);const[o=i,a=c,u=s]=r;return void(("function"==typeof o&&o(t[u])||"function"!=typeof o&&o)&&(e[s]=a(t[u])))}let[r,o]=n[s];if("function"==typeof o){let t;const n=void 0===r&&null!=(t=o()),a="function"==typeof r&&!!r(void 0)||"function"!=typeof r&&!!r;n?e[s]=t:a&&(e[s]=o())}else{const t=void 0===r&&null!=o,n="function"==typeof r&&!!r(o)||"function"!=typeof r&&!!r;(t||n)&&(e[s]=o)}},i=e=>null!=e,c=e=>e},1395:(e,t,n)=>{n.d(t,{E:()=>o});var s=n(9290);const r=/^[A-Za-z0-9+/]*={0,2}$/,o=e=>{if(3*e.length%4!=0)throw new TypeError("Incorrect padding on base64 string.");if(!r.exec(e))throw new TypeError("Invalid base64 string.");const t=(0,s.s)(e,"base64");return new Uint8Array(t.buffer,t.byteOffset,t.byteLength)}},1466:(e,t,n)=>{n.d(t,{o:()=>r});const s=new RegExp("^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$"),r=e=>s.test(e)||e.startsWith("[")&&e.endsWith("]")},1476:(e,t,n)=>{n.d(t,{A:()=>i});var s=n(5578),r=n(5546);const o=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,a=["__proto__","profile __proto__"],i=e=>{const t={};let n,i;for(const c of e.split(/\r?\n/)){const e=c.split(/(^|\s)[;#]/)[0].trim();if("["===e[0]&&"]"===e[e.length-1]){n=void 0,i=void 0;const t=e.substring(1,e.length-1),c=o.exec(t);if(c){const[,e,,t]=c;Object.values(s.I).includes(e)&&(n=[e,t].join(r.Q))}else n=t;if(a.includes(t))throw new Error(`Found invalid profile name "${t}"`)}else if(n){const s=e.indexOf("=");if(![0,-1].includes(s)){const[o,a]=[e.substring(0,s).trim(),e.substring(s+1).trim()];if(""===a)i=o;else{i&&c.trimStart()===c&&(i=void 0),t[n]=t[n]||{};const e=i?[i,o].join(r.Q):o;t[n][e]=a}}}}return t}},1478:(e,t,n)=>{n.d(t,{pi:()=>a,sF:()=>i,yG:()=>o});var s=n(244),r=n(3052);const o="AWS_ACCESS_KEY_ID",a="AWS_SECRET_ACCESS_KEY",i=e=>async()=>{e?.logger?.debug("@aws-sdk/credential-provider-env - fromEnv");const t=process.env[o],n=process.env[a],i=process.env.AWS_SESSION_TOKEN,c=process.env.AWS_CREDENTIAL_EXPIRATION,u=process.env.AWS_CREDENTIAL_SCOPE,l=process.env.AWS_ACCOUNT_ID;if(t&&n){const e={accessKeyId:t,secretAccessKey:n,...i&&{sessionToken:i},...c&&{expiration:new Date(c)},...u&&{credentialScope:u},...l&&{accountId:l}};return(0,s.g)(e,"CREDENTIALS_ENV_VARS","g"),e}throw new r.C("Unable to find environment variable credentials.",{logger:e?.logger})}},1620:(e,t,n)=>{n.d(t,{I:()=>l});var s=n(4836),r=n(4013),o=n(3783);const a="AWS_REGION",i="AWS_DEFAULT_REGION",c=["in-region","cross-region","mobile","standard","legacy"],u={environmentVariableSelector:e=>e.AWS_DEFAULTS_MODE,configFileSelector:e=>e.defaults_mode,default:"legacy"},l=({region:e=(0,r.Z)(s.GG),defaultsMode:t=(0,r.Z)(u)}={})=>(0,o.B)(async()=>{const n="function"==typeof t?await t():t;switch(n?.toLowerCase()){case"auto":return d(e);case"in-region":case"cross-region":case"mobile":case"standard":case"legacy":return Promise.resolve(n?.toLocaleLowerCase());case void 0:return Promise.resolve("legacy");default:throw new Error(`Invalid parameter for "defaultsMode", expect ${c.join(", ")}, got ${n}`)}}),d=async e=>{if(e){const t="function"==typeof e?await e():e,n=await p();return n?t===n?"in-region":"cross-region":"standard"}return"standard"},p=async()=>{if(process.env.AWS_EXECUTION_ENV&&(process.env[a]||process.env[i]))return process.env[a]??process.env[i];if(!process.env.AWS_EC2_METADATA_DISABLED)try{const{getInstanceMetadataEndpoint:e,httpRequest:t}=await n.e(897).then(n.bind(n,7897)),s=await e();return(await t({...s,path:"/latest/meta-data/placement/region"})).toString()}catch(e){}}},1671:(e,t,n)=>{n.d(t,{o:()=>o});const s=(e,t)=>{const n=[];if(e&&n.push(e),t)for(const e of t)n.push(e);return n},r=(e,t)=>`${e||"anonymous"}${t&&t.length>0?` (a.k.a. ${t.join(",")})`:""}`,o=()=>{let e=[],t=[],n=!1;const c=new Set,u=n=>(e.forEach(e=>{n.add(e.middleware,{...e})}),t.forEach(e=>{n.addRelativeTo(e.middleware,{...e})}),n.identifyOnResolve?.(p.identifyOnResolve()),n),l=e=>{const t=[];return e.before.forEach(e=>{0===e.before.length&&0===e.after.length?t.push(e):t.push(...l(e))}),t.push(e),e.after.reverse().forEach(e=>{0===e.before.length&&0===e.after.length?t.push(e):t.push(...l(e))}),t},d=(n=!1)=>{const o=[],c=[],u={};e.forEach(e=>{const t={...e,before:[],after:[]};for(const e of s(t.name,t.aliases))u[e]=t;o.push(t)}),t.forEach(e=>{const t={...e,before:[],after:[]};for(const e of s(t.name,t.aliases))u[e]=t;c.push(t)}),c.forEach(e=>{if(e.toMiddleware){const t=u[e.toMiddleware];if(void 0===t){if(n)return;throw new Error(`${e.toMiddleware} is not found when adding ${r(e.name,e.aliases)} middleware ${e.relation} ${e.toMiddleware}`)}"after"===e.relation&&t.after.push(e),"before"===e.relation&&t.before.push(e)}});const d=(p=o,p.sort((e,t)=>a[t.step]-a[e.step]||i[t.priority||"normal"]-i[e.priority||"normal"])).map(l).reduce((e,t)=>(e.push(...t),e),[]);var p;return d},p={add:(t,n={})=>{const{name:o,override:a,aliases:i}=n,u={step:"initialize",priority:"normal",middleware:t,...n},l=s(o,i);if(l.length>0){if(l.some(e=>c.has(e))){if(!a)throw new Error(`Duplicate middleware name '${r(o,i)}'`);for(const t of l){const n=e.findIndex(e=>e.name===t||e.aliases?.some(e=>e===t));if(-1===n)continue;const s=e[n];if(s.step!==u.step||u.priority!==s.priority)throw new Error(`"${r(s.name,s.aliases)}" middleware with ${s.priority} priority in ${s.step} step cannot be overridden by "${r(o,i)}" middleware with ${u.priority} priority in ${u.step} step.`);e.splice(n,1)}}for(const e of l)c.add(e)}e.push(u)},addRelativeTo:(e,n)=>{const{name:o,override:a,aliases:i}=n,u={middleware:e,...n},l=s(o,i);if(l.length>0){if(l.some(e=>c.has(e))){if(!a)throw new Error(`Duplicate middleware name '${r(o,i)}'`);for(const e of l){const n=t.findIndex(t=>t.name===e||t.aliases?.some(t=>t===e));if(-1===n)continue;const s=t[n];if(s.toMiddleware!==u.toMiddleware||s.relation!==u.relation)throw new Error(`"${r(s.name,s.aliases)}" middleware ${s.relation} "${s.toMiddleware}" middleware cannot be overridden by "${r(o,i)}" middleware ${u.relation} "${u.toMiddleware}" middleware.`);t.splice(n,1)}}for(const e of l)c.add(e)}t.push(u)},clone:()=>u(o()),use:e=>{e.applyToStack(p)},remove:n=>"string"==typeof n?(n=>{let r=!1;const o=e=>{const t=s(e.name,e.aliases);if(t.includes(n)){r=!0;for(const e of t)c.delete(e);return!1}return!0};return e=e.filter(o),t=t.filter(o),r})(n):(n=>{let r=!1;const o=e=>{if(e.middleware===n){r=!0;for(const t of s(e.name,e.aliases))c.delete(t);return!1}return!0};return e=e.filter(o),t=t.filter(o),r})(n),removeByTag:n=>{let r=!1;const o=e=>{const{tags:t,name:o,aliases:a}=e;if(t&&t.includes(n)){const e=s(o,a);for(const t of e)c.delete(t);return r=!0,!1}return!0};return e=e.filter(o),t=t.filter(o),r},concat:e=>{const t=u(o());return t.use(e),t.identifyOnResolve(n||t.identifyOnResolve()||(e.identifyOnResolve?.()??!1)),t},applyToStack:u,identify:()=>d(!0).map(e=>{const t=e.step??e.relation+" "+e.toMiddleware;return r(e.name,e.aliases)+" - "+t}),identifyOnResolve:e=>("boolean"==typeof e&&(n=e),n),resolve:(e,t)=>{for(const n of d().map(e=>e.middleware).reverse())e=n(e,t);return n&&console.log(p.identify()),e}};return p},a={initialize:5,serialize:4,build:3,finalizeRequest:2,deserialize:1},i={high:3,normal:2,low:1}},1698:(e,t,n)=>{n.d(t,{TM:()=>u,Ou:()=>c});var s=n(4094);const r=(e,t)=>(n,r)=>async a=>{const{response:i}=await n(a);try{return{response:i,output:await t(i,e)}}catch(e){if(Object.defineProperty(e,"$response",{value:i}),!("$metadata"in e)){const t="Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.";try{e.message+="\n  "+t}catch(e){r.logger&&"NoOpLogger"!==r.logger?.constructor?.name?r.logger?.warn?.(t):console.warn(t)}void 0!==e.$responseBodyText&&e.$response&&(e.$response.body=e.$responseBodyText);try{if(s.c.isInstance(i)){const{headers:t={}}=i,n=Object.entries(t);e.$metadata={httpStatusCode:i.statusCode,requestId:o(/^x-[\w-]+-request-?id$/,n),extendedRequestId:o(/^x-[\w-]+-id-2$/,n),cfId:o(/^x-[\w-]+-cf-id$/,n)}}}catch(e){}}throw e}},o=(e,t)=>(t.find(([t])=>t.match(e))||[void 0,void 0])[1],a=(e,t)=>(n,s)=>async r=>{const o=e,a=s.endpointV2?.url&&o.urlParser?async()=>o.urlParser(s.endpointV2.url):o.endpoint;if(!a)throw new Error("No valid endpoint provider available.");const i=await t(r.input,{...e,endpoint:a});return n({...r,request:i})},i={name:"deserializerMiddleware",step:"deserialize",tags:["DESERIALIZER"],override:!0},c={name:"serializerMiddleware",step:"serialize",tags:["SERIALIZER"],override:!0};function u(e,t,n){return{applyToStack:s=>{s.add(r(e,n),i),s.add(a(e,t),c)}}}},1701:(e,t,n)=>{n.d(t,{V:()=>i});var s=n(9290),r=n(4424),o=n(181),a=n(6982);class i{constructor(e,t){this.algorithmIdentifier=e,this.secret=t,this.reset()}update(e,t){this.hash.update((0,r.F)(c(e,t)))}digest(){return Promise.resolve(this.hash.digest())}reset(){this.hash=this.secret?(0,a.createHmac)(this.algorithmIdentifier,c(this.secret)):(0,a.createHash)(this.algorithmIdentifier)}}function c(e,t){return o.Buffer.isBuffer(e)?e:"string"==typeof e?(0,s.s)(e,t):ArrayBuffer.isView(e)?(0,s.Q)(e.buffer,e.byteOffset,e.byteLength):(0,s.Q)(e)}},1724:(e,t,n)=>{t.A=void 0;const s=n(290),r="1"===process.env.AWS_LAMBDA_NODEJS_NO_GLOBAL_AWSLAMBDA||"true"===process.env.AWS_LAMBDA_NODEJS_NO_GLOBAL_AWSLAMBDA;r||(globalThis.awslambda=globalThis.awslambda||{});const o={REQUEST_ID:Symbol("_AWS_LAMBDA_REQUEST_ID"),X_RAY_TRACE_ID:Symbol("_AWS_LAMBDA_X_RAY_TRACE_ID")};class a{static storage=new s.AsyncLocalStorage;static PROTECTED_KEYS=o;static run(e,t){return this.storage.run({...e},t)}static getContext(){return this.storage.getStore()}static get(e){const t=this.storage.getStore();return t?.[e]}static set(e,t){if(this.isProtectedKey(e))throw new Error("Cannot modify protected Lambda context field");const n=this.storage.getStore();n&&(n[e]=t)}static getRequestId(){return this.get(this.PROTECTED_KEYS.REQUEST_ID)??"-"}static getXRayTraceId(){return this.get(this.PROTECTED_KEYS.X_RAY_TRACE_ID)}static hasContext(){return void 0!==this.storage.getStore()}static isProtectedKey(e){return e===this.PROTECTED_KEYS.REQUEST_ID||e===this.PROTECTED_KEYS.X_RAY_TRACE_ID}}let i;!r&&globalThis.awslambda?.InvokeStore?i=globalThis.awslambda.InvokeStore:(i=a,!r&&globalThis.awslambda&&(globalThis.awslambda.InvokeStore=i)),t.A=i},1871:(e,t,n)=>{n.d(t,{EI:()=>a,l3:()=>u,t_:()=>c});var s=n(6460);const r=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],o=new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/),a=e=>{if(null==e)return;if("string"!=typeof e)throw new TypeError("RFC-3339 date-times must be expressed as strings");const t=o.exec(e);if(!t)throw new TypeError("Invalid RFC-3339 date-time value");const[n,r,a,i,c,u,d,p]=t,h=(0,s.zi)(y(r)),f=m(a,"month",1,12),g=m(i,"day",1,31);return l(h,f,g,{hours:c,minutes:u,seconds:d,fractionalMilliseconds:p})},i=new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/),c=e=>{if(null==e)return;if("string"!=typeof e)throw new TypeError("RFC-3339 date-times must be expressed as strings");const t=i.exec(e);if(!t)throw new TypeError("Invalid RFC-3339 date-time value");const[n,r,o,a,c,u,d,p,h]=t,f=(0,s.zi)(y(r)),w=m(o,"month",1,12),E=m(a,"day",1,31),b=l(f,w,E,{hours:c,minutes:u,seconds:d,fractionalMilliseconds:p});return"Z"!=h.toUpperCase()&&b.setTime(b.getTime()-g(h)),b},u=e=>{if(null==e)return;let t;if("number"==typeof e)t=e;else if("string"==typeof e)t=(0,s.OZ)(e);else{if("object"!=typeof e||1!==e.tag)throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");t=e.value}if(Number.isNaN(t)||t===1/0||t===-1/0)throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");return new Date(Math.round(1e3*t))},l=(e,t,n,s)=>{const r=t-1;return p(e,r,n),new Date(Date.UTC(e,r,n,m(s.hours,"hour",0,23),m(s.minutes,"minute",0,59),m(s.seconds,"seconds",0,60),f(s.fractionalMilliseconds)))},d=[31,28,31,30,31,30,31,31,30,31,30,31],p=(e,t,n)=>{let s=d[t];if(1===t&&h(e)&&(s=29),n>s)throw new TypeError(`Invalid day for ${r[t]} in ${e}: ${n}`)},h=e=>e%4==0&&(e%100!=0||e%400==0),m=(e,t,n,r)=>{const o=(0,s.tW)(y(e));if(o<n||o>r)throw new TypeError(`${t} must be between ${n} and ${r}, inclusive`);return o},f=e=>null==e?0:1e3*(0,s.UO)("0."+e),g=e=>{const t=e[0];let n=1;if("+"==t)n=1;else{if("-"!=t)throw new TypeError(`Offset direction, ${t}, must be "+" or "-"`);n=-1}return n*(60*Number(e.substring(1,3))+Number(e.substring(4,6)))*60*1e3},y=e=>{let t=0;for(;t<e.length-1&&"0"===e.charAt(t);)t++;return 0===t?e:e.slice(t)}},1919:(e,t,n)=>{n.d(t,{CG:()=>o,Y2:()=>r,cJ:()=>a});var s=n(8218);const r=(e,t)=>(0,s.w)(e,t).then(e=>{if(e.length)try{return JSON.parse(e)}catch(t){throw"SyntaxError"===t?.name&&Object.defineProperty(t,"$responseBodyText",{value:e}),t}return{}}),o=async(e,t)=>{const n=await r(e,t);return n.message=n.message??n.Message,n},a=(e,t)=>{const n=(e,t)=>Object.keys(e).find(e=>e.toLowerCase()===t.toLowerCase()),s=e=>{let t=e;return"number"==typeof t&&(t=t.toString()),t.indexOf(",")>=0&&(t=t.split(",")[0]),t.indexOf(":")>=0&&(t=t.split(":")[0]),t.indexOf("#")>=0&&(t=t.split("#")[1]),t},r=n(e.headers,"x-amzn-errortype");if(void 0!==r)return s(e.headers[r]);if(t&&"object"==typeof t){const e=n(t,"code");if(e&&void 0!==t[e])return s(t[e]);if(void 0!==t.__type)return s(t.__type)}}},1943:e=>{e.exports=require("fs/promises")},2067:(e,t,n)=>{function s(e,t,n){e.__smithy_context?e.__smithy_context.features||(e.__smithy_context.features={}):e.__smithy_context={features:{}},e.__smithy_context.features[t]=n}n.d(t,{J:()=>s})},2184:(e,t,n)=>{n.d(t,{e$:()=>o});var s=n(5938),r=n(3466);const o={environmentVariableSelector:e=>(0,s.Q)(e,"AWS_USE_DUALSTACK_ENDPOINT",r.c.ENV),configFileSelector:e=>(0,s.Q)(e,"use_dualstack_endpoint",r.c.CONFIG),default:!1}},2203:e=>{e.exports=require("stream")},2291:(e,t,n)=>{n.d(t,{n:()=>r});var s=n(9896);const r=e=>{if(!e)return 0;if("string"==typeof e)return Buffer.byteLength(e);if("number"==typeof e.byteLength)return e.byteLength;if("number"==typeof e.size)return e.size;if("number"==typeof e.start&&"number"==typeof e.end)return e.end+1-e.start;if("string"==typeof e.path||Buffer.isBuffer(e.path))return(0,s.lstatSync)(e.path).size;if("number"==typeof e.fd)return(0,s.fstatSync)(e.fd).size;throw new Error(`Body Length computation failed for ${e}`)}},2339:(e,t,n)=>{n.d(t,{I:()=>r});let s=!1;const r=e=>{e&&!s&&parseInt(e.substring(1,e.indexOf(".")))<16&&(s=!0)}},2404:(e,t,n)=>{n.d(t,{w:()=>o});var s=n(6116);const r={step:"serialize",tags:["HTTP_AUTH_SCHEME"],name:"httpAuthSchemeMiddleware",override:!0,relation:"before",toMiddleware:"endpointV2Middleware"},o=(e,{httpAuthSchemeParametersProvider:t,identityProviderConfigProvider:n})=>({applyToStack:o=>{o.addRelativeTo(((e,t)=>(n,r)=>async o=>{const a=((e,t)=>{if(!t||0===t.length)return e;const n=[];for(const s of t)for(const t of e)t.schemeId.split("#")[1]===s&&n.push(t);for(const t of e)n.find(({schemeId:e})=>e===t.schemeId)||n.push(t);return n})(e.httpAuthSchemeProvider(await t.httpAuthSchemeParametersProvider(e,r,o.input)),e.authSchemePreference?await e.authSchemePreference():[]),i=function(e){const t=new Map;for(const n of e)t.set(n.schemeId,n);return t}(e.httpAuthSchemes),c=(0,s.u)(r),u=[];for(const n of a){const s=i.get(n.schemeId);if(!s){u.push(`HttpAuthScheme \`${n.schemeId}\` was not enabled for this service.`);continue}const o=s.identityProvider(await t.identityProviderConfigProvider(e));if(!o){u.push(`HttpAuthScheme \`${n.schemeId}\` did not have an IdentityProvider configured.`);continue}const{identityProperties:a={},signingProperties:l={}}=n.propertiesExtractor?.(e,r)||{};n.identityProperties=Object.assign(n.identityProperties||{},a),n.signingProperties=Object.assign(n.signingProperties||{},l),c.selectedHttpAuthScheme={httpAuthOption:n,identity:await o(n.identityProperties),signer:s.signer};break}if(!c.selectedHttpAuthScheme)throw new Error(u.join("\n"));return n(o)})(e,{httpAuthSchemeParametersProvider:t,identityProviderConfigProvider:n}),r)}})},2432:(e,t,n)=>{n.d(t,{g:()=>o});var s=n(6928),r=n(7029);const o=()=>process.env.AWS_CONFIG_FILE||(0,s.join)((0,r.R)(),".aws","config")},2531:(e,t,n)=>{n.d(t,{o:()=>s});const s=e=>encodeURIComponent(e).replace(/[!'()*]/g,r),r=e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`},2641:(e,t,n)=>{n.d(t,{D:()=>s});const s=e=>{if("string"==typeof e)return s(new URL(e));const{hostname:t,pathname:n,port:r,protocol:o,search:a}=e;let i;return a&&(i=function(e){const t={};if(e=e.replace(/^\?/,""))for(const n of e.split("&")){let[e,s=null]=n.split("=");e=decodeURIComponent(e),s&&(s=decodeURIComponent(s)),e in t?Array.isArray(t[e])?t[e].push(s):t[e]=[t[e],s]:t[e]=s}return t}(a)),{hostname:t,port:r?parseInt(r):void 0,protocol:o,path:n,query:i}}},2795:(e,t,n)=>{n.d(t,{C:()=>a});var s=n(8947),r=n(8829),o=n(8462);const a=e=>{const t=e.tls??!0,{endpoint:n,useDualstackEndpoint:a,useFipsEndpoint:i}=e,c=null!=n?async()=>(0,o.a)(await(0,s.t)(n)()):void 0,u=!!n,l=Object.assign(e,{endpoint:c,tls:t,isCustomEndpoint:u,useDualstackEndpoint:(0,s.t)(a??!1),useFipsEndpoint:(0,s.t)(i??!1)});let d;return l.serviceConfiguredEndpoint=async()=>(e.serviceId&&!d&&(d=(0,r.k)(e.serviceId)),d),l}},2864:(e,t,n)=>{n.d(t,{w:()=>p,$:()=>h});var s=n(4094),r=n(2531),o=n(8611);const a=require("https"),i=["ECONNRESET","EPIPE","ETIMEDOUT"],c=e=>{const t={};for(const n of Object.keys(e)){const s=e[n];t[n]=Array.isArray(s)?s.join(","):s}return t},u=(e,t)=>setTimeout(e,t),l=e=>clearTimeout(e);var d=n(2203);const p=0;class h{static create(e){return"function"==typeof e?.handle?e:new h(e)}static checkSocketUsage(e,t,n=console){const{sockets:s,requests:r,maxSockets:o}=e;if("number"!=typeof o||o===1/0)return t;if(Date.now()-15e3<t)return t;if(s&&r)for(const e in s){const t=s[e]?.length??0,a=r[e]?.length??0;if(t>=o&&a>=2*o)return n?.warn?.(`@smithy/node-http-handler:WARN - socket usage at capacity=${t} and ${a} additional requests are enqueued.\nSee https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-configuring-maxsockets.html\nor increase socketAcquisitionWarningTimeout=(millis) in the NodeHttpHandler config.`),Date.now()}return t}constructor(e){this.socketWarningTimestamp=0,this.metadata={handlerProtocol:"http/1.1"},this.configProvider=new Promise((t,n)=>{"function"==typeof e?e().then(e=>{t(this.resolveDefaultConfig(e))}).catch(n):t(this.resolveDefaultConfig(e))})}resolveDefaultConfig(e){const{requestTimeout:t,connectionTimeout:n,socketTimeout:s,socketAcquisitionWarningTimeout:r,httpAgent:i,httpsAgent:c}=e||{},u=!0;return{connectionTimeout:n,requestTimeout:t??s,socketAcquisitionWarningTimeout:r,httpAgent:i instanceof o.Agent||"function"==typeof i?.destroy?i:new o.Agent({keepAlive:u,maxSockets:50,...i}),httpsAgent:c instanceof a.Agent||"function"==typeof c?.destroy?c:new a.Agent({keepAlive:u,maxSockets:50,...c}),logger:console}}destroy(){this.config?.httpAgent?.destroy(),this.config?.httpsAgent?.destroy()}async handle(e,{abortSignal:t,requestTimeout:n}={}){return this.config||(this.config=await this.configProvider),new Promise((m,f)=>{let g;const y=[],w=async e=>{await g,y.forEach(l),f(e)};if(!this.config)throw new Error("Node HTTP request handler config is not resolved");if(t?.aborted){const e=new Error("Request aborted");return e.name="AbortError",void w(e)}const E="https:"===e.protocol,b=E?this.config.httpsAgent:this.config.httpAgent;y.push(u(()=>{this.socketWarningTimestamp=h.checkSocketUsage(b,this.socketWarningTimestamp,this.config.logger)},this.config.socketAcquisitionWarningTimeout??(this.config.requestTimeout??2e3)+(this.config.connectionTimeout??1e3)));const x=function(e){const t=[];for(let n of Object.keys(e).sort()){const s=e[n];if(n=(0,r.o)(n),Array.isArray(s))for(let e=0,o=s.length;e<o;e++)t.push(`${n}=${(0,r.o)(s[e])}`);else{let e=n;(s||"string"==typeof s)&&(e+=`=${(0,r.o)(s)}`),t.push(e)}}return t.join("&")}(e.query||{});let v;null==e.username&&null==e.password||(v=`${e.username??""}:${e.password??""}`);let S=e.path;x&&(S+=`?${x}`),e.fragment&&(S+=`#${e.fragment}`);let I=e.hostname??"";I="["===I[0]&&I.endsWith("]")?e.hostname.slice(1,-1):e.hostname;const M={headers:e.headers,host:I,method:e.method,path:S,port:e.port,agent:b,auth:v},P=(E?a.request:o.request)(M,e=>{(async e=>{await g,y.forEach(l),m(e)})({response:new s.c({statusCode:e.statusCode||-1,reason:e.statusMessage,headers:c(e.headers),body:e})})});if(P.on("error",e=>{i.includes(e.code)?w(Object.assign(e,{name:"TimeoutError"})):w(e)}),t){const e=()=>{P.destroy();const e=new Error("Request aborted");e.name="AbortError",w(e)};if("function"==typeof t.addEventListener){const n=t;n.addEventListener("abort",e,{once:!0}),P.once("close",()=>n.removeEventListener("abort",e))}else t.onabort=e}const O=n??this.config.requestTimeout;y.push(((e,t,n=0)=>{if(!n)return-1;const s=s=>{const r=u(()=>{e.destroy(),t(Object.assign(new Error(`Socket timed out without establishing a connection within ${n} ms`),{name:"TimeoutError"}))},n-s),o=e=>{e?.connecting?e.on("connect",()=>{l(r)}):l(r)};e.socket?o(e.socket):e.on("socket",o)};return n<2e3?(s(0),0):u(s.bind(null,1e3),1e3)})(P,w,this.config.connectionTimeout)),y.push(((e,t,n=p)=>{const s=s=>{const r=n-s,o=()=>{e.destroy(),t(Object.assign(new Error(`Connection timed out after ${n} ms`),{name:"TimeoutError"}))};e.socket?(e.socket.setTimeout(r,o),e.on("close",()=>e.socket?.removeListener("timeout",o))):e.setTimeout(r,o)};return 0<n&&n<6e3?(s(0),0):u(s.bind(null,0===n?0:3e3),3e3)})(P,w,O));const $=M.agent;"object"==typeof $&&"keepAlive"in $&&y.push(((e,{keepAlive:t,keepAliveMsecs:n},s=3e3)=>{if(!0!==t)return-1;const r=()=>{e.socket?e.socket.setKeepAlive(t,n||0):e.on("socket",e=>{e.setKeepAlive(t,n||0)})};return 0===s?(r(),0):u(r,s)})(P,{keepAlive:$.keepAlive,keepAliveMsecs:$.keepAliveMsecs})),g=async function(e,t,n=6e3){const s=t.headers??{},r=s.Expect||s.expect;let o=-1,a=!0;"100-continue"===r&&(a=await Promise.race([new Promise(e=>{o=Number(u(()=>e(!0),Math.max(6e3,n)))}),new Promise(t=>{e.on("continue",()=>{l(o),t(!0)}),e.on("response",()=>{l(o),t(!1)}),e.on("error",()=>{l(o),t(!1)})})])),a&&function(e,t){if(t instanceof d.Readable)t.pipe(e);else{if(t){if(Buffer.isBuffer(t)||"string"==typeof t)return void e.end(t);const n=t;return"object"==typeof n&&n.buffer&&"number"==typeof n.byteOffset&&"number"==typeof n.byteLength?void e.end(Buffer.from(n.buffer,n.byteOffset,n.byteLength)):void e.end(Buffer.from(t))}e.end()}}(e,t.body)}(P,e,O).catch(e=>(y.forEach(l),f(e)))})}updateHttpClientConfig(e,t){this.config=void 0,this.configProvider=this.configProvider.then(n=>({...n,[e]:t}))}httpHandlerConfigs(){return this.config??{}}}},2927:(e,t,n)=>{n.d(t,{e:()=>s,j:()=>r});const s=e=>({setHttpHandler(t){e.httpHandler=t},httpHandler:()=>e.httpHandler,updateHttpClientConfig(t,n){e.httpHandler?.updateHttpClientConfig(t,n)},httpHandlerConfigs:()=>e.httpHandler.httpHandlerConfigs()}),r=e=>({httpHandler:e.httpHandler()})},2967:(e,t,n)=>{n.d(t,{j:()=>r});var s=n(4384);const r=e=>({output:t,parsedBody:n,errorCode:r})=>{(({output:e,parsedBody:t,exceptionCtor:n,errorCode:r})=>{const a=o(e),i=a.httpStatusCode?a.httpStatusCode+"":void 0,c=new n({name:t?.code||t?.Code||r||i||"UnknownError",$fault:"client",$metadata:a});throw(0,s.M)(c,t)})({output:t,parsedBody:n,exceptionCtor:e,errorCode:r})},o=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]})},3052:(e,t,n)=>{n.d(t,{C:()=>r});var s=n(6014);class r extends s.m{constructor(e,t=!0){super(e,t),this.name="CredentialsProviderError",Object.setPrototypeOf(this,r.prototype)}}},3466:(e,t,n)=>{var s;n.d(t,{c:()=>s}),function(e){e.ENV="env",e.CONFIG="shared config entry"}(s||(s={}))},3695:(e,t,n)=>{n.d(t,{m:()=>s});const s=e=>"function"==typeof ArrayBuffer&&e instanceof ArrayBuffer||"[object ArrayBuffer]"===Object.prototype.toString.call(e)},3783:(e,t,n)=>{n.d(t,{B:()=>s});const s=(e,t,n)=>{let s,r,o,a=!1;const i=async()=>{r||(r=e());try{s=await r,o=!0,a=!1}finally{r=void 0}return s};return void 0===t?async e=>(o&&!e?.forceRefresh||(s=await i()),s):async e=>(o&&!e?.forceRefresh||(s=await i()),a?s:n&&!n(s)?(a=!0,s):t(s)?(await i(),s):s)}},4013:(e,t,n)=>{n.d(t,{Z:()=>u});var s=n(3783),r=n(8062),o=n(3052);function a(e){try{const t=new Set(Array.from(e.match(/([A-Z_]){3,}/g)??[]));return t.delete("CONFIG"),t.delete("CONFIG_PREFIX_SEPARATOR"),t.delete("ENV"),[...t].join(", ")}catch(t){return e}}var i=n(6437),c=n(5546);const u=({environmentVariableSelector:e,configFileSelector:t,default:n},u={})=>{const{signingName:l,logger:d}=u,p={signingName:l,logger:d};return(0,s.B)((0,r.c)((h=e,m=p,async()=>{try{const e=h(process.env,m);if(void 0===e)throw new Error;return e}catch(e){throw new o.C(e.message||`Not found in ENV: ${a(h.toString())}`,{logger:m?.logger})}}),((e,{preferredFile:t="config",...n}={})=>async()=>{const s=(0,i.Bz)(n),{configFile:r,credentialsFile:u}=await(0,c.p)(n),l=u[s]||{},d=r[s]||{},p="config"===t?{...l,...d}:{...d,...l};try{const n=e(p,"config"===t?r:u);if(void 0===n)throw new Error;return n}catch(t){throw new o.C(t.message||`Not found in config files w/ profile [${s}]: ${a(e.toString())}`,{logger:n.logger})}})(t,u),(e=>{return"function"==typeof e?async()=>await e():(t=e,()=>Promise.resolve(t));var t})(n)));var h,m}},4094:(e,t,n)=>{n.d(t,{c:()=>s});class s{constructor(e){this.statusCode=e.statusCode,this.reason=e.reason,this.headers=e.headers||{},this.body=e.body}static isInstance(e){if(!e)return!1;const t=e;return"number"==typeof t.statusCode&&"object"==typeof t.headers}}},4098:(e,t,n)=>{n.d(t,{N:()=>s});class s{trace(){}debug(){}info(){}warn(){}error(){}}},4163:(e,t,n)=>{n.d(t,{$:()=>r,R:()=>s});const s=e=>({setRegion(t){e.region=t},region:()=>e.region}),r=e=>({region:e.region()})},4303:(e,t,n)=>{n.d(t,{T:()=>o});const s=e=>"string"==typeof e&&(e.startsWith("fips-")||e.endsWith("-fips")),r=e=>s(e)?["fips-aws-global","aws-fips"].includes(e)?"us-east-1":e.replace(/fips-(dkr-|prod-)?|-fips/,""):e,o=e=>{const{region:t,useFipsEndpoint:n}=e;if(!t)throw new Error("Region is missing");return Object.assign(e,{region:async()=>{if("string"==typeof t)return r(t);const e=await t();return r(e)},useFipsEndpoint:async()=>{const e="string"==typeof t?t:await t();return!!s(e)||("function"!=typeof n?Promise.resolve(!!n):n())}})}},4367:(e,t,n)=>{n.d(t,{t:()=>s});const s=e=>{if("function"==typeof e)return e;const t=Promise.resolve(e);return()=>t}},4384:(e,t,n)=>{n.d(t,{M:()=>r,T:()=>s});class s extends Error{constructor(e){super(e.message),Object.setPrototypeOf(this,Object.getPrototypeOf(this).constructor.prototype),this.name=e.name,this.$fault=e.$fault,this.$metadata=e.$metadata}static isInstance(e){if(!e)return!1;const t=e;return s.prototype.isPrototypeOf(t)||Boolean(t.$fault)&&Boolean(t.$metadata)&&("client"===t.$fault||"server"===t.$fault)}static[Symbol.hasInstance](e){if(!e)return!1;const t=e;return this===s?s.isInstance(e):!!s.isInstance(e)&&(t.name&&this.name?this.prototype.isPrototypeOf(e)||t.name===this.name:this.prototype.isPrototypeOf(e))}}const r=(e,t={})=>{Object.entries(t).filter(([,e])=>void 0!==e).forEach(([t,n])=>{null!=e[t]&&""!==e[t]||(e[t]=n)});const n=e.message||e.Message||"UnknownError";return e.message=n,delete e.Message,e}},4424:(e,t,n)=>{n.d(t,{F:()=>r});var s=n(7459);const r=e=>"string"==typeof e?(0,s.a)(e):ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e)},4472:(e,t,n)=>{n.d(t,{$:()=>a});const s=e=>"string"==typeof e&&e.length>0?e.split(",").map(e=>e.trim()):[],r="AWS_AUTH_SCHEME_PREFERENCE",o="auth_scheme_preference",a={environmentVariableSelector:(e,t)=>t?.signingName&&`AWS_BEARER_TOKEN_${t.signingName.replace(/[\s-]/g,"_").toUpperCase()}`in e?["httpBearerAuth"]:r in e?s(e[r]):void 0,configFileSelector:e=>{if(o in e)return s(e[o])},default:[]}},4542:(e,t,n)=>{n.d(t,{GQ:()=>l,Qb:()=>c,bV:()=>u});const s=["BandwidthLimitExceeded","EC2ThrottledException","LimitExceededException","PriorRequestNotComplete","ProvisionedThroughputExceededException","RequestLimitExceeded","RequestThrottled","RequestThrottledException","SlowDown","ThrottledException","Throttling","ThrottlingException","TooManyRequestsException","TransactionInProgressException"],r=["TimeoutError","RequestTimeout","RequestTimeoutException"],o=[500,502,503,504],a=["ECONNRESET","ECONNREFUSED","EPIPE","ETIMEDOUT"],i=["EHOSTUNREACH","ENETUNREACH","ENOTFOUND"],c=e=>429===e.$metadata?.httpStatusCode||s.includes(e.name)||1==e.$retryable?.throttling,u=(e,t=0)=>(e=>void 0!==e?.$retryable)(e)||(e=>e.$metadata?.clockSkewCorrected)(e)||r.includes(e.name)||a.includes(e?.code||"")||i.includes(e?.code||"")||o.includes(e.$metadata?.httpStatusCode||0)||(e=>{const t=new Set(["Failed to fetch","NetworkError when attempting to fetch resource","The Internet connection appears to be offline","Load failed","Network request failed"]);return!!(e&&e instanceof TypeError)&&t.has(e.message)})(e)||void 0!==e.cause&&t<=10&&u(e.cause,t+1),l=e=>{if(void 0!==e.$metadata?.httpStatusCode){const t=e.$metadata.httpStatusCode;return 500<=t&&t<=599&&!u(e)}return!1}},4570:(e,t,n)=>{n.d(t,{Ko:()=>o});var s=n(5938),r=n(3466);const o={environmentVariableSelector:e=>(0,s.Q)(e,"AWS_USE_FIPS_ENDPOINT",r.c.ENV),configFileSelector:e=>(0,s.Q)(e,"use_fips_endpoint",r.c.CONFIG),default:!1}},4836:(e,t,n)=>{n.d(t,{GG:()=>s,zH:()=>r});const s={environmentVariableSelector:e=>e.AWS_REGION,configFileSelector:e=>e.region,default:()=>{throw new Error("Region is missing")}},r={preferredFile:"credentials"}},5122:(e,t,n)=>{n.d(t,{I:()=>r});const s={warningEmitted:!1},r=e=>{e&&!s.warningEmitted&&parseInt(e.substring(1,e.indexOf(".")))<18&&(s.warningEmitted=!0,process.emitWarning("NodeDeprecationWarning: The AWS SDK for JavaScript (v3) will\nno longer support Node.js 16.x on January 6, 2025.\n\nTo continue receiving updates to AWS services, bug fixes, and security\nupdates please upgrade to a supported Node.js LTS version.\n\nMore information can be found at: https://a.co/74kJMmI"))}},5144:(e,t,n)=>{n.d(t,{ey:()=>E});var s=n(7324),r=n(4094),o=n(4542),a=n(4098),i=n(7072),c=n(6982),u=n.n(c);const l=u().randomUUID.bind(u()),d=Array.from({length:256},(e,t)=>t.toString(16).padStart(2,"0"));var p=n(2203);const h=e=>e?.body instanceof p.Readable||"undefined"!=typeof ReadableStream&&e?.body instanceof ReadableStream,m=e=>e instanceof Error?e:e instanceof Object?Object.assign(new Error,e):"string"==typeof e?new Error(e):new Error(`AWS SDK error wrapper for ${e}`),f=e=>void 0!==e.acquireInitialRetryToken&&void 0!==e.refreshRetryTokenForRetry&&void 0!==e.recordSuccess,g=e=>{const t={error:e,errorType:y(e)},n=b(e.$response);return n&&(t.retryAfterHint=n),t},y=e=>(0,o.Qb)(e)?"THROTTLING":(0,o.bV)(e)?"TRANSIENT":(0,o.GQ)(e)?"SERVER_ERROR":"CLIENT_ERROR",w={name:"retryMiddleware",tags:["RETRY"],step:"finalizeRequest",priority:"high",override:!0},E=e=>({applyToStack:t=>{t.add((e=>(t,n)=>async r=>{let o=await e.retryStrategy();const c=await e.maxAttempts();if(!f(o))return o?.mode&&(n.userAgent=[...n.userAgent||[],["cfg/retry-mode",o.mode]]),o.retry(t,r);{let e=await o.acquireInitialRetryToken(n.partition_id),u=new Error,p=0,f=0;const{request:y}=r,w=s.K.isInstance(y);for(w&&(y.headers[i.l5]=(()=>{if(l)return l();const e=new Uint8Array(16);return crypto.getRandomValues(e),e[6]=15&e[6]|64,e[8]=63&e[8]|128,d[e[0]]+d[e[1]]+d[e[2]]+d[e[3]]+"-"+d[e[4]]+d[e[5]]+"-"+d[e[6]]+d[e[7]]+"-"+d[e[8]]+d[e[9]]+"-"+d[e[10]]+d[e[11]]+d[e[12]]+d[e[13]]+d[e[14]]+d[e[15]]})());;)try{w&&(y.headers[i.ok]=`attempt=${p+1}; max=${c}`);const{response:n,output:s}=await t(r);return o.recordSuccess(e),s.$metadata.attempts=p+1,s.$metadata.totalRetryDelay=f,{response:n,output:s}}catch(t){const s=g(t);if(u=m(t),w&&h(y))throw(n.logger instanceof a.N?console:n.logger)?.warn("An error was encountered in a non-retryable streaming request."),u;try{e=await o.refreshRetryTokenForRetry(e,s)}catch(e){throw u.$metadata||(u.$metadata={}),u.$metadata.attempts=p+1,u.$metadata.totalRetryDelay=f,u}p=e.getRetryCount();const r=e.getRetryDelay();f+=r,await new Promise(e=>setTimeout(e,r))}}})(e),w)}}),b=e=>{if(!r.c.isInstance(e))return;const t=Object.keys(e.headers).find(e=>"retry-after"===e.toLowerCase());if(!t)return;const n=e.headers[t],s=Number(n);return Number.isNaN(s)?new Date(n):new Date(1e3*s)}},5172:(e,t,n)=>{n.d(t,{l:()=>c});var s=n(7324),r=n(6116);const o=e=>e=>{throw e},a=(e,t)=>{},i={step:"finalizeRequest",tags:["HTTP_SIGNING"],name:"httpSigningMiddleware",aliases:["apiKeyMiddleware","tokenMiddleware","awsAuthMiddleware"],override:!0,relation:"after",toMiddleware:"retryMiddleware"},c=e=>({applyToStack:e=>{e.addRelativeTo((e,t)=>async n=>{if(!s.K.isInstance(n.request))return e(n);const i=(0,r.u)(t).selectedHttpAuthScheme;if(!i)throw new Error("No HttpAuthScheme was selected: unable to sign request");const{httpAuthOption:{signingProperties:c={}},identity:u,signer:l}=i,d=await e({...n,request:await l.sign(n.request,u,c)}).catch((l.errorHandler||o)(c));return(l.successHandler||a)(d.response,c),d},i)}})},5178:(e,t,n)=>{n.d(t,{k:()=>o});var s=n(2203);class r extends s.Writable{constructor(){super(...arguments),this.bufferedBytes=[]}_write(e,t,n){this.bufferedBytes.push(e),n()}}const o=e=>a(e)?async function(e){const t=[],n=e.getReader();let s=!1,r=0;for(;!s;){const{done:e,value:o}=await n.read();o&&(t.push(o),r+=o.length),s=e}const o=new Uint8Array(r);let a=0;for(const e of t)o.set(e,a),a+=e.length;return o}(e):new Promise((t,n)=>{const s=new r;e.pipe(s),e.on("error",e=>{s.end(),n(e)}),s.on("error",n),s.on("finish",function(){const e=new Uint8Array(Buffer.concat(this.bufferedBytes));t(e)})}),a=e=>"function"==typeof ReadableStream&&e instanceof ReadableStream},5317:e=>{e.exports=require("child_process")},5546:(e,t,n)=>{n.d(t,{Q:()=>p,p:()=>h});var s=n(6928),r=n(5578);const o=e=>Object.entries(e).filter(([e])=>{const t=e.indexOf(p);return-1!==t&&Object.values(r.I).includes(e.substring(0,t))}).reduce((e,[t,n])=>{const s=t.indexOf(p);return e[t.substring(0,s)===r.I.PROFILE?t.substring(s+1):t]=n,e},{...e.default&&{default:e.default}});var a=n(2432),i=n(7029);const c=()=>process.env.AWS_SHARED_CREDENTIALS_FILE||(0,s.join)((0,i.R)(),".aws","credentials");var u=n(1476),l=n(589);const d=()=>({}),p=".",h=async(e={})=>{const{filepath:t=c(),configFilepath:n=(0,a.g)()}=e,r=(0,i.R)();let p=t;t.startsWith("~/")&&(p=(0,s.join)(r,t.slice(2)));let h=n;n.startsWith("~/")&&(h=(0,s.join)(r,n.slice(2)));const m=await Promise.all([(0,l.$H)(h,{ignoreCache:e.ignoreCache}).then(u.A).then(o).catch(d),(0,l.$H)(p,{ignoreCache:e.ignoreCache}).then(u.A).catch(d)]);return{configFile:m[0],credentialsFile:m[1]}}},5578:(e,t,n)=>{var s;n.d(t,{I:()=>s}),function(e){e.PROFILE="profile",e.SSO_SESSION="sso-session",e.SERVICES="services"}(s||(s={}))},5904:(e,t,n)=>{n.d(t,{t_:()=>oe,FI:()=>ae});const s={preserveOrder:!1,attributeNamePrefix:"@_",attributesGroupName:!1,textNodeName:"#text",ignoreAttributes:!0,removeNSPrefix:!1,allowBooleanAttributes:!1,parseTagValue:!0,parseAttributeValue:!1,trimValues:!0,cdataPropName:!1,numberParseOptions:{hex:!0,leadingZeros:!0,eNotation:!0},tagValueProcessor:function(e,t){return t},attributeValueProcessor:function(e,t){return t},stopNodes:[],alwaysCreateTextNode:!1,isArray:()=>!1,commentPropName:!1,unpairedTags:[],processEntities:!0,htmlEntities:!1,ignoreDeclaration:!1,ignorePiTags:!1,transformTagName:!1,transformAttributeName:!1,updateTag:function(e,t,n){return e},captureMetaData:!1},r=":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",o=new RegExp("^["+r+"]["+r+"\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$");function a(e,t){const n=[];let s=t.exec(e);for(;s;){const r=[];r.startIndex=t.lastIndex-s[0].length;const o=s.length;for(let e=0;e<o;e++)r.push(s[e]);n.push(r),s=t.exec(e)}return n}const i=function(e){return!(null==o.exec(e))};let c;c="function"!=typeof Symbol?"@@xmlMetadata":Symbol("XML Node Metadata");class u{constructor(e){this.tagname=e,this.child=[],this[":@"]={}}add(e,t){"__proto__"===e&&(e="#__proto__"),this.child.push({[e]:t})}addChild(e,t){"__proto__"===e.tagname&&(e.tagname="#__proto__"),e[":@"]&&Object.keys(e[":@"]).length>0?this.child.push({[e.tagname]:e.child,":@":e[":@"]}):this.child.push({[e.tagname]:e.child}),void 0!==t&&(this.child[this.child.length-1][c]={startIndex:t})}static getMetaDataSymbol(){return c}}function l(e,t){const n={};if("O"!==e[t+3]||"C"!==e[t+4]||"T"!==e[t+5]||"Y"!==e[t+6]||"P"!==e[t+7]||"E"!==e[t+8])throw new Error("Invalid Tag instead of DOCTYPE");{t+=9;let s=1,r=!1,o=!1,a="";for(;t<e.length;t++)if("<"!==e[t]||o)if(">"===e[t]){if(o?"-"===e[t-1]&&"-"===e[t-2]&&(o=!1,s--):s--,0===s)break}else"["===e[t]?r=!0:a+=e[t];else{if(r&&g(e,"!ENTITY",t)){let s,r;t+=7,[s,r,t]=p(e,t+1),-1===r.indexOf("&")&&(n[s]={regx:RegExp(`&${s};`,"g"),val:r})}else if(r&&g(e,"!ELEMENT",t)){t+=8;const{index:n}=f(e,t+1);t=n}else if(r&&g(e,"!ATTLIST",t))t+=8;else if(r&&g(e,"!NOTATION",t)){t+=9;const{index:n}=h(e,t+1);t=n}else{if(!g(e,"!--",t))throw new Error("Invalid DOCTYPE");o=!0}s++,a=""}if(0!==s)throw new Error("Unclosed DOCTYPE")}return{entities:n,i:t}}const d=(e,t)=>{for(;t<e.length&&/\s/.test(e[t]);)t++;return t};function p(e,t){t=d(e,t);let n="";for(;t<e.length&&!/\s/.test(e[t])&&'"'!==e[t]&&"'"!==e[t];)n+=e[t],t++;if(y(n),t=d(e,t),"SYSTEM"===e.substring(t,t+6).toUpperCase())throw new Error("External entities are not supported");if("%"===e[t])throw new Error("Parameter entities are not supported");let s="";return[t,s]=m(e,t,"entity"),[n,s,--t]}function h(e,t){t=d(e,t);let n="";for(;t<e.length&&!/\s/.test(e[t]);)n+=e[t],t++;y(n),t=d(e,t);const s=e.substring(t,t+6).toUpperCase();if("SYSTEM"!==s&&"PUBLIC"!==s)throw new Error(`Expected SYSTEM or PUBLIC, found "${s}"`);t+=s.length,t=d(e,t);let r=null,o=null;if("PUBLIC"===s)[t,r]=m(e,t,"publicIdentifier"),'"'!==e[t=d(e,t)]&&"'"!==e[t]||([t,o]=m(e,t,"systemIdentifier"));else if("SYSTEM"===s&&([t,o]=m(e,t,"systemIdentifier"),!o))throw new Error("Missing mandatory system identifier for SYSTEM notation");return{notationName:n,publicIdentifier:r,systemIdentifier:o,index:--t}}function m(e,t,n){let s="";const r=e[t];if('"'!==r&&"'"!==r)throw new Error(`Expected quoted string, found "${r}"`);for(t++;t<e.length&&e[t]!==r;)s+=e[t],t++;if(e[t]!==r)throw new Error(`Unterminated ${n} value`);return[++t,s]}function f(e,t){t=d(e,t);let n="";for(;t<e.length&&!/\s/.test(e[t]);)n+=e[t],t++;if(!y(n))throw new Error(`Invalid element name: "${n}"`);let s="";if("E"===e[t=d(e,t)]&&g(e,"MPTY",t))t+=4;else if("A"===e[t]&&g(e,"NY",t))t+=2;else{if("("!==e[t])throw new Error(`Invalid Element Expression, found "${e[t]}"`);for(t++;t<e.length&&")"!==e[t];)s+=e[t],t++;if(")"!==e[t])throw new Error("Unterminated content model")}return{elementName:n,contentModel:s.trim(),index:t}}function g(e,t,n){for(let s=0;s<t.length;s++)if(t[s]!==e[n+s+1])return!1;return!0}function y(e){if(i(e))return e;throw new Error(`Invalid entity name ${e}`)}const w=/^[-+]?0x[a-fA-F0-9]+$/,E=/^([\-\+])?(0*)([0-9]*(\.[0-9]*)?)$/,b={hex:!0,leadingZeros:!0,decimalPoint:".",eNotation:!0};const x=/^([-+])?(0*)(\d*(\.\d*)?[eE][-\+]?\d+)$/;class v{constructor(e){var t;this.options=e,this.currentNode=null,this.tagsNodeStack=[],this.docTypeEntities={},this.lastEntities={apos:{regex:/&(apos|#39|#x27);/g,val:"'"},gt:{regex:/&(gt|#62|#x3E);/g,val:">"},lt:{regex:/&(lt|#60|#x3C);/g,val:"<"},quot:{regex:/&(quot|#34|#x22);/g,val:'"'}},this.ampEntity={regex:/&(amp|#38|#x26);/g,val:"&"},this.htmlEntities={space:{regex:/&(nbsp|#160);/g,val:" "},cent:{regex:/&(cent|#162);/g,val:"¢"},pound:{regex:/&(pound|#163);/g,val:"£"},yen:{regex:/&(yen|#165);/g,val:"¥"},euro:{regex:/&(euro|#8364);/g,val:"€"},copyright:{regex:/&(copy|#169);/g,val:"©"},reg:{regex:/&(reg|#174);/g,val:"®"},inr:{regex:/&(inr|#8377);/g,val:"₹"},num_dec:{regex:/&#([0-9]{1,7});/g,val:(e,t)=>String.fromCodePoint(Number.parseInt(t,10))},num_hex:{regex:/&#x([0-9a-fA-F]{1,6});/g,val:(e,t)=>String.fromCodePoint(Number.parseInt(t,16))}},this.addExternalEntities=S,this.parseXml=$,this.parseTextData=I,this.resolveNameSpace=M,this.buildAttributesMap=O,this.isItStopNode=C,this.replaceEntitiesValue=T,this.readStopNodeData=k,this.saveTextToParentTag=N,this.addChild=A,this.ignoreAttributesFn="function"==typeof(t=this.options.ignoreAttributes)?t:Array.isArray(t)?e=>{for(const n of t){if("string"==typeof n&&e===n)return!0;if(n instanceof RegExp&&n.test(e))return!0}}:()=>!1}}function S(e){const t=Object.keys(e);for(let n=0;n<t.length;n++){const s=t[n];this.lastEntities[s]={regex:new RegExp("&"+s+";","g"),val:e[s]}}}function I(e,t,n,s,r,o,a){if(void 0!==e&&(this.options.trimValues&&!s&&(e=e.trim()),e.length>0)){a||(e=this.replaceEntitiesValue(e));const s=this.options.tagValueProcessor(t,e,n,r,o);return null==s?e:typeof s!=typeof e||s!==e?s:this.options.trimValues||e.trim()===e?j(e,this.options.parseTagValue,this.options.numberParseOptions):e}}function M(e){if(this.options.removeNSPrefix){const t=e.split(":"),n="/"===e.charAt(0)?"/":"";if("xmlns"===t[0])return"";2===t.length&&(e=n+t[1])}return e}const P=new RegExp("([^\\s=]+)\\s*(=\\s*(['\"])([\\s\\S]*?)\\3)?","gm");function O(e,t,n){if(!0!==this.options.ignoreAttributes&&"string"==typeof e){const n=a(e,P),s=n.length,r={};for(let e=0;e<s;e++){const s=this.resolveNameSpace(n[e][1]);if(this.ignoreAttributesFn(s,t))continue;let o=n[e][4],a=this.options.attributeNamePrefix+s;if(s.length)if(this.options.transformAttributeName&&(a=this.options.transformAttributeName(a)),"__proto__"===a&&(a="#__proto__"),void 0!==o){this.options.trimValues&&(o=o.trim()),o=this.replaceEntitiesValue(o);const e=this.options.attributeValueProcessor(s,o,t);r[a]=null==e?o:typeof e!=typeof o||e!==o?e:j(o,this.options.parseAttributeValue,this.options.numberParseOptions)}else this.options.allowBooleanAttributes&&(r[a]=!0)}if(!Object.keys(r).length)return;if(this.options.attributesGroupName){const e={};return e[this.options.attributesGroupName]=r,e}return r}}const $=function(e){e=e.replace(/\r\n?/g,"\n");const t=new u("!xml");let n=t,s="",r="";for(let o=0;o<e.length;o++)if("<"===e[o])if("/"===e[o+1]){const t=R(e,">",o,"Closing Tag is not closed.");let a=e.substring(o+2,t).trim();if(this.options.removeNSPrefix){const e=a.indexOf(":");-1!==e&&(a=a.substr(e+1))}this.options.transformTagName&&(a=this.options.transformTagName(a)),n&&(s=this.saveTextToParentTag(s,n,r));const i=r.substring(r.lastIndexOf(".")+1);if(a&&-1!==this.options.unpairedTags.indexOf(a))throw new Error(`Unpaired tag can not be used as closing tag: </${a}>`);let c=0;i&&-1!==this.options.unpairedTags.indexOf(i)?(c=r.lastIndexOf(".",r.lastIndexOf(".")-1),this.tagsNodeStack.pop()):c=r.lastIndexOf("."),r=r.substring(0,c),n=this.tagsNodeStack.pop(),s="",o=t}else if("?"===e[o+1]){let t=D(e,o,!1,"?>");if(!t)throw new Error("Pi Tag is not closed.");if(s=this.saveTextToParentTag(s,n,r),this.options.ignoreDeclaration&&"?xml"===t.tagName||this.options.ignorePiTags);else{const e=new u(t.tagName);e.add(this.options.textNodeName,""),t.tagName!==t.tagExp&&t.attrExpPresent&&(e[":@"]=this.buildAttributesMap(t.tagExp,r,t.tagName)),this.addChild(n,e,r,o)}o=t.closeIndex+1}else if("!--"===e.substr(o+1,3)){const t=R(e,"--\x3e",o+4,"Comment is not closed.");if(this.options.commentPropName){const a=e.substring(o+4,t-2);s=this.saveTextToParentTag(s,n,r),n.add(this.options.commentPropName,[{[this.options.textNodeName]:a}])}o=t}else if("!D"===e.substr(o+1,2)){const t=l(e,o);this.docTypeEntities=t.entities,o=t.i}else if("!["===e.substr(o+1,2)){const t=R(e,"]]>",o,"CDATA is not closed.")-2,a=e.substring(o+9,t);s=this.saveTextToParentTag(s,n,r);let i=this.parseTextData(a,n.tagname,r,!0,!1,!0,!0);null==i&&(i=""),this.options.cdataPropName?n.add(this.options.cdataPropName,[{[this.options.textNodeName]:a}]):n.add(this.options.textNodeName,i),o=t+2}else{let a=D(e,o,this.options.removeNSPrefix),i=a.tagName;const c=a.rawTagName;let l=a.tagExp,d=a.attrExpPresent,p=a.closeIndex;this.options.transformTagName&&(i=this.options.transformTagName(i)),n&&s&&"!xml"!==n.tagname&&(s=this.saveTextToParentTag(s,n,r,!1));const h=n;h&&-1!==this.options.unpairedTags.indexOf(h.tagname)&&(n=this.tagsNodeStack.pop(),r=r.substring(0,r.lastIndexOf("."))),i!==t.tagname&&(r+=r?"."+i:i);const m=o;if(this.isItStopNode(this.options.stopNodes,r,i)){let t="";if(l.length>0&&l.lastIndexOf("/")===l.length-1)"/"===i[i.length-1]?(i=i.substr(0,i.length-1),r=r.substr(0,r.length-1),l=i):l=l.substr(0,l.length-1),o=a.closeIndex;else if(-1!==this.options.unpairedTags.indexOf(i))o=a.closeIndex;else{const n=this.readStopNodeData(e,c,p+1);if(!n)throw new Error(`Unexpected end of ${c}`);o=n.i,t=n.tagContent}const s=new u(i);i!==l&&d&&(s[":@"]=this.buildAttributesMap(l,r,i)),t&&(t=this.parseTextData(t,i,r,!0,d,!0,!0)),r=r.substr(0,r.lastIndexOf(".")),s.add(this.options.textNodeName,t),this.addChild(n,s,r,m)}else{if(l.length>0&&l.lastIndexOf("/")===l.length-1){"/"===i[i.length-1]?(i=i.substr(0,i.length-1),r=r.substr(0,r.length-1),l=i):l=l.substr(0,l.length-1),this.options.transformTagName&&(i=this.options.transformTagName(i));const e=new u(i);i!==l&&d&&(e[":@"]=this.buildAttributesMap(l,r,i)),this.addChild(n,e,r,m),r=r.substr(0,r.lastIndexOf("."))}else{const e=new u(i);this.tagsNodeStack.push(n),i!==l&&d&&(e[":@"]=this.buildAttributesMap(l,r,i)),this.addChild(n,e,r,m),n=e}s="",o=p}}else s+=e[o];return t.child};function A(e,t,n,s){this.options.captureMetaData||(s=void 0);const r=this.options.updateTag(t.tagname,n,t[":@"]);!1===r||("string"==typeof r?(t.tagname=r,e.addChild(t,s)):e.addChild(t,s))}const T=function(e){if(this.options.processEntities){for(let t in this.docTypeEntities){const n=this.docTypeEntities[t];e=e.replace(n.regx,n.val)}for(let t in this.lastEntities){const n=this.lastEntities[t];e=e.replace(n.regex,n.val)}if(this.options.htmlEntities)for(let t in this.htmlEntities){const n=this.htmlEntities[t];e=e.replace(n.regex,n.val)}e=e.replace(this.ampEntity.regex,this.ampEntity.val)}return e};function N(e,t,n,s){return e&&(void 0===s&&(s=0===t.child.length),void 0!==(e=this.parseTextData(e,t.tagname,n,!1,!!t[":@"]&&0!==Object.keys(t[":@"]).length,s))&&""!==e&&t.add(this.options.textNodeName,e),e=""),e}function C(e,t,n){const s="*."+n;for(const n in e){const r=e[n];if(s===r||t===r)return!0}return!1}function R(e,t,n,s){const r=e.indexOf(t,n);if(-1===r)throw new Error(s);return r+t.length-1}function D(e,t,n,s=">"){const r=function(e,t,n=">"){let s,r="";for(let o=t;o<e.length;o++){let t=e[o];if(s)t===s&&(s="");else if('"'===t||"'"===t)s=t;else if(t===n[0]){if(!n[1])return{data:r,index:o};if(e[o+1]===n[1])return{data:r,index:o}}else"\t"===t&&(t=" ");r+=t}}(e,t+1,s);if(!r)return;let o=r.data;const a=r.index,i=o.search(/\s/);let c=o,u=!0;-1!==i&&(c=o.substring(0,i),o=o.substring(i+1).trimStart());const l=c;if(n){const e=c.indexOf(":");-1!==e&&(c=c.substr(e+1),u=c!==r.data.substr(e+1))}return{tagName:c,tagExp:o,closeIndex:a,attrExpPresent:u,rawTagName:l}}function k(e,t,n){const s=n;let r=1;for(;n<e.length;n++)if("<"===e[n])if("/"===e[n+1]){const o=R(e,">",n,`${t} is not closed`);if(e.substring(n+2,o).trim()===t&&(r--,0===r))return{tagContent:e.substring(s,n),i:o};n=o}else if("?"===e[n+1])n=R(e,"?>",n+1,"StopNode is not closed.");else if("!--"===e.substr(n+1,3))n=R(e,"--\x3e",n+3,"StopNode is not closed.");else if("!["===e.substr(n+1,2))n=R(e,"]]>",n,"StopNode is not closed.")-2;else{const s=D(e,n,">");s&&((s&&s.tagName)===t&&"/"!==s.tagExp[s.tagExp.length-1]&&r++,n=s.closeIndex)}}function j(e,t,n){if(t&&"string"==typeof e){const t=e.trim();return"true"===t||"false"!==t&&function(e,t={}){if(t=Object.assign({},b,t),!e||"string"!=typeof e)return e;let n=e.trim();if(void 0!==t.skipLike&&t.skipLike.test(n))return e;if("0"===e)return 0;if(t.hex&&w.test(n))return function(e){if(parseInt)return parseInt(e,16);if(Number.parseInt)return Number.parseInt(e,16);if(window&&window.parseInt)return window.parseInt(e,16);throw new Error("parseInt, Number.parseInt, window.parseInt are not supported")}(n);if(-1!==n.search(/.+[eE].+/))return function(e,t,n){if(!n.eNotation)return e;const s=t.match(x);if(s){let r=s[1]||"";const o=-1===s[3].indexOf("e")?"E":"e",a=s[2],i=r?e[a.length+1]===o:e[a.length]===o;return a.length>1&&i?e:1!==a.length||!s[3].startsWith(`.${o}`)&&s[3][0]!==o?n.leadingZeros&&!i?(t=(s[1]||"")+s[3],Number(t)):e:Number(t)}return e}(e,n,t);{const r=E.exec(n);if(r){const o=r[1]||"",a=r[2];let i=(s=r[3])&&-1!==s.indexOf(".")?("."===(s=s.replace(/0+$/,""))?s="0":"."===s[0]?s="0"+s:"."===s[s.length-1]&&(s=s.substring(0,s.length-1)),s):s;const c=o?"."===e[a.length+1]:"."===e[a.length];if(!t.leadingZeros&&(a.length>1||1===a.length&&!c))return e;{const s=Number(n),r=String(s);if(0===s)return s;if(-1!==r.search(/[eE]/))return t.eNotation?s:e;if(-1!==n.indexOf("."))return"0"===r||r===i||r===`${o}${i}`?s:e;let c=a?i:n;return a?c===r||o+c===r?s:e:c===r||c===o+r?s:e}}return e}var s}(e,n)}return function(e){return void 0!==e}(e)?e:""}const _=u.getMetaDataSymbol();function F(e,t){return z(e,t)}function z(e,t,n){let s;const r={};for(let o=0;o<e.length;o++){const a=e[o],i=q(a);let c="";if(c=void 0===n?i:n+"."+i,i===t.textNodeName)void 0===s?s=a[i]:s+=""+a[i];else{if(void 0===i)continue;if(a[i]){let e=z(a[i],t,c);const n=U(e,t);void 0!==a[_]&&(e[_]=a[_]),a[":@"]?L(e,a[":@"],c,t):1!==Object.keys(e).length||void 0===e[t.textNodeName]||t.alwaysCreateTextNode?0===Object.keys(e).length&&(t.alwaysCreateTextNode?e[t.textNodeName]="":e=""):e=e[t.textNodeName],void 0!==r[i]&&r.hasOwnProperty(i)?(Array.isArray(r[i])||(r[i]=[r[i]]),r[i].push(e)):t.isArray(i,c,n)?r[i]=[e]:r[i]=e}}}return"string"==typeof s?s.length>0&&(r[t.textNodeName]=s):void 0!==s&&(r[t.textNodeName]=s),r}function q(e){const t=Object.keys(e);for(let e=0;e<t.length;e++){const n=t[e];if(":@"!==n)return n}}function L(e,t,n,s){if(t){const r=Object.keys(t),o=r.length;for(let a=0;a<o;a++){const o=r[a];s.isArray(o,n+"."+o,!0,!0)?e[o]=[t[o]]:e[o]=t[o]}}}function U(e,t){const{textNodeName:n}=t,s=Object.keys(e).length;return 0===s||!(1!==s||!e[n]&&"boolean"!=typeof e[n]&&0!==e[n])}const K={allowBooleanAttributes:!1,unpairedTags:[]};function V(e){return" "===e||"\t"===e||"\n"===e||"\r"===e}function B(e,t){const n=t;for(;t<e.length;t++)if("?"==e[t]||" "==e[t]){const s=e.substr(n,t-n);if(t>5&&"xml"===s)return Y("InvalidXml","XML declaration allowed only at the start of the document.",ee(e,t));if("?"==e[t]&&">"==e[t+1]){t++;break}continue}return t}function H(e,t){if(e.length>t+5&&"-"===e[t+1]&&"-"===e[t+2]){for(t+=3;t<e.length;t++)if("-"===e[t]&&"-"===e[t+1]&&">"===e[t+2]){t+=2;break}}else if(e.length>t+8&&"D"===e[t+1]&&"O"===e[t+2]&&"C"===e[t+3]&&"T"===e[t+4]&&"Y"===e[t+5]&&"P"===e[t+6]&&"E"===e[t+7]){let n=1;for(t+=8;t<e.length;t++)if("<"===e[t])n++;else if(">"===e[t]&&(n--,0===n))break}else if(e.length>t+9&&"["===e[t+1]&&"C"===e[t+2]&&"D"===e[t+3]&&"A"===e[t+4]&&"T"===e[t+5]&&"A"===e[t+6]&&"["===e[t+7])for(t+=8;t<e.length;t++)if("]"===e[t]&&"]"===e[t+1]&&">"===e[t+2]){t+=2;break}return t}function W(e,t){let n="",s="",r=!1;for(;t<e.length;t++){if('"'===e[t]||"'"===e[t])""===s?s=e[t]:s!==e[t]||(s="");else if(">"===e[t]&&""===s){r=!0;break}n+=e[t]}return""===s&&{value:n,index:t,tagClosed:r}}const G=new RegExp("(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['\"])(([\\s\\S])*?)\\5)?","g");function Q(e,t){const n=a(e,G),s={};for(let e=0;e<n.length;e++){if(0===n[e][1].length)return Y("InvalidAttr","Attribute '"+n[e][2]+"' has no space in starting.",te(n[e]));if(void 0!==n[e][3]&&void 0===n[e][4])return Y("InvalidAttr","Attribute '"+n[e][2]+"' is without value.",te(n[e]));if(void 0===n[e][3]&&!t.allowBooleanAttributes)return Y("InvalidAttr","boolean attribute '"+n[e][2]+"' is not allowed.",te(n[e]));const r=n[e][2];if(!X(r))return Y("InvalidAttr","Attribute '"+r+"' is an invalid name.",te(n[e]));if(s.hasOwnProperty(r))return Y("InvalidAttr","Attribute '"+r+"' is repeated.",te(n[e]));s[r]=1}return!0}function Z(e,t){if(";"===e[++t])return-1;if("#"===e[t])return function(e,t){let n=/\d/;for("x"===e[t]&&(t++,n=/[\da-fA-F]/);t<e.length;t++){if(";"===e[t])return t;if(!e[t].match(n))break}return-1}(e,++t);let n=0;for(;t<e.length;t++,n++)if(!(e[t].match(/\w/)&&n<20)){if(";"===e[t])break;return-1}return t}function Y(e,t,n){return{err:{code:e,msg:t,line:n.line||n,col:n.col}}}function X(e){return i(e)}function J(e){return i(e)}function ee(e,t){const n=e.substring(0,t).split(/\r?\n/);return{line:n.length,col:n[n.length-1].length+1}}function te(e){return e.startIndex+e[1].length}const ne=new class{constructor(e){this.externalEntities={},this.options=function(e){return Object.assign({},s,e)}(e)}parse(e,t){if("string"==typeof e);else{if(!e.toString)throw new Error("XML data is accepted in String or Bytes[] form.");e=e.toString()}if(t){!0===t&&(t={});const n=function(e,t){t=Object.assign({},K,t);const n=[];let s=!1,r=!1;"\ufeff"===e[0]&&(e=e.substr(1));for(let o=0;o<e.length;o++)if("<"===e[o]&&"?"===e[o+1]){if(o+=2,o=B(e,o),o.err)return o}else{if("<"!==e[o]){if(V(e[o]))continue;return Y("InvalidChar","char '"+e[o]+"' is not expected.",ee(e,o))}{let a=o;if(o++,"!"===e[o]){o=H(e,o);continue}{let i=!1;"/"===e[o]&&(i=!0,o++);let c="";for(;o<e.length&&">"!==e[o]&&" "!==e[o]&&"\t"!==e[o]&&"\n"!==e[o]&&"\r"!==e[o];o++)c+=e[o];if(c=c.trim(),"/"===c[c.length-1]&&(c=c.substring(0,c.length-1),o--),!J(c)){let t;return t=0===c.trim().length?"Invalid space after '<'.":"Tag '"+c+"' is an invalid name.",Y("InvalidTag",t,ee(e,o))}const u=W(e,o);if(!1===u)return Y("InvalidAttr","Attributes for '"+c+"' have open quote.",ee(e,o));let l=u.value;if(o=u.index,"/"===l[l.length-1]){const n=o-l.length;l=l.substring(0,l.length-1);const r=Q(l,t);if(!0!==r)return Y(r.err.code,r.err.msg,ee(e,n+r.err.line));s=!0}else if(i){if(!u.tagClosed)return Y("InvalidTag","Closing tag '"+c+"' doesn't have proper closing.",ee(e,o));if(l.trim().length>0)return Y("InvalidTag","Closing tag '"+c+"' can't have attributes or invalid starting.",ee(e,a));if(0===n.length)return Y("InvalidTag","Closing tag '"+c+"' has not been opened.",ee(e,a));{const t=n.pop();if(c!==t.tagName){let n=ee(e,t.tagStartPos);return Y("InvalidTag","Expected closing tag '"+t.tagName+"' (opened in line "+n.line+", col "+n.col+") instead of closing tag '"+c+"'.",ee(e,a))}0==n.length&&(r=!0)}}else{const i=Q(l,t);if(!0!==i)return Y(i.err.code,i.err.msg,ee(e,o-l.length+i.err.line));if(!0===r)return Y("InvalidXml","Multiple possible root nodes found.",ee(e,o));-1!==t.unpairedTags.indexOf(c)||n.push({tagName:c,tagStartPos:a}),s=!0}for(o++;o<e.length;o++)if("<"===e[o]){if("!"===e[o+1]){o++,o=H(e,o);continue}if("?"!==e[o+1])break;if(o=B(e,++o),o.err)return o}else if("&"===e[o]){const t=Z(e,o);if(-1==t)return Y("InvalidChar","char '&' is not expected.",ee(e,o));o=t}else if(!0===r&&!V(e[o]))return Y("InvalidXml","Extra text at the end",ee(e,o));"<"===e[o]&&o--}}}return s?1==n.length?Y("InvalidTag","Unclosed tag '"+n[0].tagName+"'.",ee(e,n[0].tagStartPos)):!(n.length>0)||Y("InvalidXml","Invalid '"+JSON.stringify(n.map(e=>e.tagName),null,4).replace(/\r?\n/g,"")+"' found.",{line:1,col:1}):Y("InvalidXml","Start tag expected.",1)}(e,t);if(!0!==n)throw Error(`${n.err.msg}:${n.err.line}:${n.err.col}`)}const n=new v(this.options);n.addExternalEntities(this.externalEntities);const s=n.parseXml(e);return this.options.preserveOrder||void 0===s?s:F(s,this.options)}addEntity(e,t){if(-1!==t.indexOf("&"))throw new Error("Entity value can't have '&'");if(-1!==e.indexOf("&")||-1!==e.indexOf(";"))throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");if("&"===t)throw new Error("An entity with value '&' is not permitted");this.externalEntities[e]=t}static getMetaDataSymbol(){return u.getMetaDataSymbol()}}({attributeNamePrefix:"",htmlEntities:!0,ignoreAttributes:!1,ignoreDeclaration:!0,parseTagValue:!1,trimValues:!1,tagValueProcessor:(e,t)=>""===t.trim()&&t.includes("\n")?"":void 0});ne.addEntity("#xD","\r"),ne.addEntity("#10","\n");const se=e=>{const t="#text";for(const n in e)e.hasOwnProperty(n)&&void 0!==e[n][t]?e[n]=e[n][t]:"object"==typeof e[n]&&null!==e[n]&&(e[n]=se(e[n]));return e};var re=n(8218);const oe=(e,t)=>(0,re.w)(e,t).then(e=>{if(e.length){let n;try{t=e,n=ne.parse(t,!0)}catch(t){throw t&&"object"==typeof t&&Object.defineProperty(t,"$responseBodyText",{value:e}),t}const s="#text",r=Object.keys(n)[0],o=n[r];return o[s]&&(o[r]=o[s],delete o[s]),se(o)}var t;return{}}),ae=async(e,t)=>{const n=await oe(e,t);return n.Error&&(n.Error.message=n.Error.message??n.Error.Message),n}},5938:(e,t,n)=>{n.d(t,{Q:()=>s});const s=(e,t,n)=>{if(t in e){if("true"===e[t])return!0;if("false"===e[t])return!1;throw new Error(`Cannot load ${n} "${t}". Expected "true" or "false", got ${e[t]}.`)}}},5963:(e,t,n)=>{n.d(t,{qs:()=>h,kN:()=>f,$z:()=>m});var s=n(8947),r=n(7355),o=n(4542);class a{constructor(e){this.currentCapacity=0,this.enabled=!1,this.lastMaxRate=0,this.measuredTxRate=0,this.requestCount=0,this.lastTimestamp=0,this.timeWindow=0,this.beta=e?.beta??.7,this.minCapacity=e?.minCapacity??1,this.minFillRate=e?.minFillRate??.5,this.scaleConstant=e?.scaleConstant??.4,this.smooth=e?.smooth??.8;const t=this.getCurrentTimeInSeconds();this.lastThrottleTime=t,this.lastTxRateBucket=Math.floor(this.getCurrentTimeInSeconds()),this.fillRate=this.minFillRate,this.maxCapacity=this.minCapacity}getCurrentTimeInSeconds(){return Date.now()/1e3}async getSendToken(){return this.acquireTokenBucket(1)}async acquireTokenBucket(e){if(this.enabled){if(this.refillTokenBucket(),e>this.currentCapacity){const t=(e-this.currentCapacity)/this.fillRate*1e3;await new Promise(e=>a.setTimeoutFn(e,t))}this.currentCapacity=this.currentCapacity-e}}refillTokenBucket(){const e=this.getCurrentTimeInSeconds();if(!this.lastTimestamp)return void(this.lastTimestamp=e);const t=(e-this.lastTimestamp)*this.fillRate;this.currentCapacity=Math.min(this.maxCapacity,this.currentCapacity+t),this.lastTimestamp=e}updateClientSendingRate(e){let t;if(this.updateMeasuredRate(),(0,o.Qb)(e)){const e=this.enabled?Math.min(this.measuredTxRate,this.fillRate):this.measuredTxRate;this.lastMaxRate=e,this.calculateTimeWindow(),this.lastThrottleTime=this.getCurrentTimeInSeconds(),t=this.cubicThrottle(e),this.enableTokenBucket()}else this.calculateTimeWindow(),t=this.cubicSuccess(this.getCurrentTimeInSeconds());const n=Math.min(t,2*this.measuredTxRate);this.updateTokenBucketRate(n)}calculateTimeWindow(){this.timeWindow=this.getPrecise(Math.pow(this.lastMaxRate*(1-this.beta)/this.scaleConstant,1/3))}cubicThrottle(e){return this.getPrecise(e*this.beta)}cubicSuccess(e){return this.getPrecise(this.scaleConstant*Math.pow(e-this.lastThrottleTime-this.timeWindow,3)+this.lastMaxRate)}enableTokenBucket(){this.enabled=!0}updateTokenBucketRate(e){this.refillTokenBucket(),this.fillRate=Math.max(e,this.minFillRate),this.maxCapacity=Math.max(e,this.minCapacity),this.currentCapacity=Math.min(this.currentCapacity,this.maxCapacity)}updateMeasuredRate(){const e=this.getCurrentTimeInSeconds(),t=Math.floor(2*e)/2;if(this.requestCount++,t>this.lastTxRateBucket){const e=this.requestCount/(t-this.lastTxRateBucket);this.measuredTxRate=this.getPrecise(e*this.smooth+this.measuredTxRate*(1-this.smooth)),this.requestCount=0,this.lastTxRateBucket=t}}getPrecise(e){return parseFloat(e.toFixed(8))}}a.setTimeoutFn=setTimeout;var i=n(7072);const c=({retryDelay:e,retryCount:t,retryCost:n})=>({getRetryCount:()=>t,getRetryDelay:()=>Math.min(i.G8,e),getRetryCost:()=>n});class u{constructor(e){this.maxAttempts=e,this.mode=r.cm.STANDARD,this.capacity=i.Df,this.retryBackoffStrategy=(()=>{let e=i.bp;return{computeNextBackoffDelay:t=>Math.floor(Math.min(i.G8,Math.random()*2**t*e)),setDelayBase:t=>{e=t}}})(),this.maxAttemptsProvider="function"==typeof e?e:async()=>e}async acquireInitialRetryToken(e){return c({retryDelay:i.bp,retryCount:0})}async refreshRetryTokenForRetry(e,t){const n=await this.getMaxAttempts();if(this.shouldRetry(e,t,n)){const n=t.errorType;this.retryBackoffStrategy.setDelayBase("THROTTLING"===n?i.jh:i.bp);const s=this.retryBackoffStrategy.computeNextBackoffDelay(e.getRetryCount()),r=t.retryAfterHint?Math.max(t.retryAfterHint.getTime()-Date.now()||0,s):s,o=this.getCapacityCost(n);return this.capacity-=o,c({retryDelay:r,retryCount:e.getRetryCount()+1,retryCost:o})}throw new Error("No retry token available")}recordSuccess(e){this.capacity=Math.max(i.Df,this.capacity+(e.getRetryCost()??i.XP))}getCapacity(){return this.capacity}async getMaxAttempts(){try{return await this.maxAttemptsProvider()}catch(e){return console.warn(`Max attempts provider could not resolve. Using default of ${r.Gz}`),r.Gz}}shouldRetry(e,t,n){return e.getRetryCount()+1<n&&this.capacity>=this.getCapacityCost(t.errorType)&&this.isRetryableError(t.errorType)}getCapacityCost(e){return"TRANSIENT"===e?i.Rn:i.XS}isRetryableError(e){return"THROTTLING"===e||"TRANSIENT"===e}}class l{constructor(e,t){this.maxAttemptsProvider=e,this.mode=r.cm.ADAPTIVE;const{rateLimiter:n}=t??{};this.rateLimiter=n??new a,this.standardRetryStrategy=new u(e)}async acquireInitialRetryToken(e){return await this.rateLimiter.getSendToken(),this.standardRetryStrategy.acquireInitialRetryToken(e)}async refreshRetryTokenForRetry(e,t){return this.rateLimiter.updateClientSendingRate(t),this.standardRetryStrategy.refreshRetryTokenForRetry(e,t)}recordSuccess(e){this.rateLimiter.updateClientSendingRate({}),this.standardRetryStrategy.recordSuccess(e)}}const d="AWS_MAX_ATTEMPTS",p="max_attempts",h={environmentVariableSelector:e=>{const t=e[d];if(!t)return;const n=parseInt(t);if(Number.isNaN(n))throw new Error(`Environment variable ${d} mast be a number, got "${t}"`);return n},configFileSelector:e=>{const t=e[p];if(!t)return;const n=parseInt(t);if(Number.isNaN(n))throw new Error(`Shared config file entry ${p} mast be a number, got "${t}"`);return n},default:r.Gz},m=e=>{const{retryStrategy:t,retryMode:n,maxAttempts:o}=e,a=(0,s.t)(o??r.Gz);return Object.assign(e,{maxAttempts:a,retryStrategy:async()=>t||(await(0,s.t)(n)()===r.cm.ADAPTIVE?new l(a):new u(a))})},f={environmentVariableSelector:e=>e.AWS_RETRY_MODE,configFileSelector:e=>e.retry_mode,default:r.L0}},6014:(e,t,n)=>{n.d(t,{m:()=>s});class s extends Error{constructor(e,t=!0){let n,r=!0;"boolean"==typeof t?(n=void 0,r=t):null!=t&&"object"==typeof t&&(n=t.logger,r=t.tryNextLink??!0),super(e),this.name="ProviderError",this.tryNextLink=r,Object.setPrototypeOf(this,s.prototype),n?.debug?.(`@smithy/property-provider ${r?"->":"(!)"} ${e}`)}static from(e,t=!0){return Object.assign(new this(e.message,t),e)}}},6116:(e,t,n)=>{n.d(t,{u:()=>r});var s=n(7267);const r=e=>e[s.V]||(e[s.V]={})},6228:(e,t,n)=>{n.d(t,{f2:()=>u});var s=n(7324);const r=e=>new Date(Date.now()+e);var o=n(4094);const a=e=>o.c.isInstance(e)?e.headers?.date??e.headers?.Date:void 0,i=(e,t)=>{const n=Date.parse(e);return((e,t)=>Math.abs(r(t).getTime()-e)>=3e5)(n,t)?n-Date.now():t},c=(e,t)=>{if(!t)throw new Error(`Property \`${e}\` is not resolved for AWS SDK SigV4Auth`);return t};class u{async sign(e,t,n){if(!s.K.isInstance(e))throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");const o=await(async e=>{const t=c("context",e.context),n=c("config",e.config),s=t.endpointV2?.properties?.authSchemes?.[0],r=c("signer",n.signer),o=await r(s),a=e?.signingRegion,i=e?.signingRegionSet,u=e?.signingName;return{config:n,signer:o,signingRegion:a,signingRegionSet:i,signingName:u}})(n),{config:a,signer:i}=o;let{signingRegion:u,signingName:l}=o;const d=n.context;if(d?.authSchemes?.length){const[e,t]=d.authSchemes;"sigv4a"===e?.name&&"sigv4"===t?.name&&(u=t?.signingRegion??u,l=t?.signingName??l)}return await i.sign(e,{signingDate:r(a.systemClockOffset),signingRegion:u,signingService:l})}errorHandler(e){return t=>{const n=t.ServerTime??a(t.$response);if(n){const s=c("config",e.config),r=s.systemClockOffset;s.systemClockOffset=i(n,s.systemClockOffset),s.systemClockOffset!==r&&t.$metadata&&(t.$metadata.clockSkewCorrected=!0)}throw t}}successHandler(e,t){const n=a(e);if(n){const e=c("config",t.config);e.systemClockOffset=i(n,e.systemClockOffset)}}}},6437:(e,t,n)=>{n.d(t,{Bz:()=>r,Ch:()=>s});const s="AWS_PROFILE",r=e=>e.profile||process.env[s]||"default"},6460:(e,t,n)=>{n.d(t,{ET:()=>o,OZ:()=>d,UO:()=>p,Xk:()=>u,Y0:()=>c,lK:()=>l,r$:()=>s,tW:()=>y,xW:()=>f,zi:()=>g});const s=e=>{if(null!=e){if("string"==typeof e){const t=parseFloat(e);if(!Number.isNaN(t))return String(t)!==String(e)&&E.warn(w(`Expected number but observed string: ${e}`)),t}if("number"==typeof e)return e;throw new TypeError(`Expected number, got ${typeof e}: ${e}`)}},r=Math.ceil(2**127*(2-2**-23)),o=e=>a(e,32),a=(e,t)=>{const n=(e=>{if(null!=e){if(Number.isInteger(e)&&!Number.isNaN(e))return e;throw new TypeError(`Expected integer, got ${typeof e}: ${e}`)}})(e);if(void 0!==n&&i(n,t)!==n)throw new TypeError(`Expected ${t}-bit integer, got ${e}`);return n},i=(e,t)=>{switch(t){case 32:return Int32Array.of(e)[0];case 16:return Int16Array.of(e)[0];case 8:return Int8Array.of(e)[0]}},c=(e,t)=>{if(null==e){if(t)throw new TypeError(`Expected a non-null value for ${t}`);throw new TypeError("Expected a non-null value")}return e},u=e=>{if(null==e)return;if("object"==typeof e&&!Array.isArray(e))return e;const t=Array.isArray(e)?"array":typeof e;throw new TypeError(`Expected object, got ${t}: ${e}`)},l=e=>{if(null!=e){if("string"==typeof e)return e;if(["boolean","number","bigint"].includes(typeof e))return E.warn(w(`Expected string, got ${typeof e}: ${e}`)),String(e);throw new TypeError(`Expected string, got ${typeof e}: ${e}`)}},d=e=>s("string"==typeof e?m(e):e),p=e=>(e=>{const t=s(e);if(void 0!==t&&!Number.isNaN(t)&&t!==1/0&&t!==-1/0&&Math.abs(t)>r)throw new TypeError(`Expected 32-bit float, got ${e}`);return t})("string"==typeof e?m(e):e),h=/(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g,m=e=>{const t=e.match(h);if(null===t||t[0].length!==e.length)throw new TypeError("Expected real number, got implicit NaN");return parseFloat(e)},f=e=>o("string"==typeof e?m(e):e),g=e=>(e=>a(e,16))("string"==typeof e?m(e):e),y=e=>(e=>a(e,8))("string"==typeof e?m(e):e),w=e=>String(new TypeError(e).stack||e).split("\n").slice(0,5).filter(e=>!e.includes("stackTraceWarning")).join("\n"),E={warn:console.warn}},6928:e=>{e.exports=require("path")},6982:e=>{e.exports=require("crypto")},7016:e=>{e.exports=require("url")},7029:(e,t,n)=>{n.d(t,{R:()=>a});var s=n(857),r=n(6928);const o={},a=()=>{const{HOME:e,USERPROFILE:t,HOMEPATH:n,HOMEDRIVE:a=`C:${r.sep}`}=process.env;if(e)return e;if(t)return t;if(n)return`${a}${n}`;const i=process&&process.geteuid?`${process.geteuid()}`:"DEFAULT";return o[i]||(o[i]=(0,s.homedir)()),o[i]}},7072:(e,t,n)=>{n.d(t,{Df:()=>a,G8:()=>r,Rn:()=>c,XP:()=>u,XS:()=>i,bp:()=>s,jh:()=>o,l5:()=>l,ok:()=>d});const s=100,r=2e4,o=500,a=500,i=5,c=10,u=1,l="amz-sdk-invocation-id",d="amz-sdk-request"},7167:(e,t,n)=>{n.d(t,{s:()=>P});const s="endpoints";function r(e){return"object"!=typeof e||null==e?e:"ref"in e?`$${r(e.ref)}`:"fn"in e?`${e.fn}(${(e.argv||[]).map(r).join(", ")})`:JSON.stringify(e,null,2)}class o extends Error{constructor(e){super(e),this.name="EndpointError"}}var a=n(468);const i=(e,t)=>(e=>{const t=e.split("."),n=[];for(const s of t){const t=s.indexOf("[");if(-1!==t){if(s.indexOf("]")!==s.length-1)throw new o(`Path: '${e}' does not end with ']'`);const r=s.slice(t+1,-1);if(Number.isNaN(parseInt(r)))throw new o(`Invalid array index: '${r}' in path: '${e}'`);0!==t&&n.push(s.slice(0,t)),n.push(r)}else n.push(s)}return n})(t).reduce((n,s)=>{if("object"!=typeof n)throw new o(`Index '${s}' in '${t}' not found in '${JSON.stringify(e)}'`);return Array.isArray(n)?n[parseInt(s)]:n[s]},e);var c,u=n(8883);!function(e){e.HTTP="http",e.HTTPS="https"}(c||(c={}));var l=n(1466);const d={[c.HTTP]:80,[c.HTTPS]:443},p={booleanEquals:(e,t)=>e===t,getAttr:i,isSet:e=>null!=e,isValidHostLabel:u.X,not:e=>!e,parseURL:e=>{const t=(()=>{try{if(e instanceof URL)return e;if("object"==typeof e&&"hostname"in e){const{hostname:t,port:n,protocol:s="",path:r="",query:o={}}=e,a=new URL(`${s}//${t}${n?`:${n}`:""}${r}`);return a.search=Object.entries(o).map(([e,t])=>`${e}=${t}`).join("&"),a}return new URL(e)}catch(e){return null}})();if(!t)return console.error(`Unable to parse ${JSON.stringify(e)} as a whatwg URL.`),null;const n=t.href,{host:s,hostname:r,pathname:o,protocol:a,search:i}=t;if(i)return null;const u=a.slice(0,-1);if(!Object.values(c).includes(u))return null;const p=(0,l.o)(r);return{scheme:u,authority:`${s}${n.includes(`${s}:${d[u]}`)||"string"==typeof e&&e.includes(`${s}:${d[u]}`)?`:${d[u]}`:""}`,path:o,normalizedPath:o.endsWith("/")?o:`${o}/`,isIp:p}},stringEquals:(e,t)=>e===t,substring:(e,t,n,s)=>t>=n||e.length<n?null:s?e.substring(e.length-n,e.length-t):e.substring(t,n),uriEncode:e=>encodeURIComponent(e).replace(/[!*'()]/g,e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`)},h=(e,t)=>{const n=[],s={...t.endpointParams,...t.referenceRecord};let r=0;for(;r<e.length;){const t=e.indexOf("{",r);if(-1===t){n.push(e.slice(r));break}n.push(e.slice(r,t));const o=e.indexOf("}",t);if(-1===o){n.push(e.slice(t));break}"{"===e[t+1]&&"}"===e[o+1]&&(n.push(e.slice(t+1,o)),r=o+2);const a=e.substring(t+1,o);if(a.includes("#")){const[e,t]=a.split("#");n.push(i(s[e],t))}else n.push(s[a]);r=o+1}return n.join("")},m=(e,t,n)=>{if("string"==typeof e)return h(e,n);if(e.fn)return f(e,n);if(e.ref)return(({ref:e},t)=>({...t.endpointParams,...t.referenceRecord}[e]))(e,n);throw new o(`'${t}': ${String(e)} is not a string, function or reference.`)},f=({fn:e,argv:t},n)=>{const s=t.map(e=>["boolean","number"].includes(typeof e)?e:m(e,"arg",n)),r=e.split(".");return r[0]in a.m&&null!=r[1]?a.m[r[0]][r[1]](...s):p[e](...s)},g=({assign:e,...t},n)=>{if(e&&e in n.referenceRecord)throw new o(`'${e}' is already defined in Reference Record.`);const a=f(t,n);return n.logger?.debug?.(`${s} evaluateCondition: ${r(t)} = ${r(a)}`),{result:""===a||!!a,...null!=e&&{toAssign:{name:e,value:a}}}},y=(e=[],t)=>{const n={};for(const o of e){const{result:e,toAssign:a}=g(o,{...t,referenceRecord:{...t.referenceRecord,...n}});if(!e)return{result:e};a&&(n[a.name]=a.value,t.logger?.debug?.(`${s} assign: ${a.name} := ${r(a.value)}`))}return{result:!0,referenceRecord:n}},w=(e,t)=>Object.entries(e).reduce((e,[n,s])=>({...e,[n]:s.map(e=>{const s=m(e,"Header value entry",t);if("string"!=typeof s)throw new o(`Header '${n}' value '${s}' is not a string`);return s})}),{}),E=(e,t)=>{if(Array.isArray(e))return e.map(e=>E(e,t));switch(typeof e){case"string":return h(e,t);case"object":if(null===e)throw new o(`Unexpected endpoint property: ${e}`);return b(e,t);case"boolean":return e;default:throw new o("Unexpected endpoint property type: "+typeof e)}},b=(e,t)=>Object.entries(e).reduce((e,[n,s])=>({...e,[n]:E(s,t)}),{}),x=(e,t)=>{const n=m(e,"Endpoint URL",t);if("string"==typeof n)try{return new URL(n)}catch(e){throw console.error(`Failed to construct URL with ${n}`,e),e}throw new o("Endpoint URL must be a string, got "+typeof n)},v=(e,t)=>{const{conditions:n,endpoint:o}=e,{result:a,referenceRecord:i}=y(n,t);if(!a)return;const c={...t,referenceRecord:{...t.referenceRecord,...i}},{url:u,properties:l,headers:d}=o;return t.logger?.debug?.(`${s} Resolving endpoint from template: ${r(o)}`),{...null!=d&&{headers:w(d,c)},...null!=l&&{properties:b(l,c)},url:x(u,c)}},S=(e,t)=>{const{conditions:n,error:s}=e,{result:r,referenceRecord:a}=y(n,t);if(r)throw new o(m(s,"Error",{...t,referenceRecord:{...t.referenceRecord,...a}}))},I=(e,t)=>{const{conditions:n,rules:s}=e,{result:r,referenceRecord:o}=y(n,t);if(r)return M(s,{...t,referenceRecord:{...t.referenceRecord,...o}})},M=(e,t)=>{for(const n of e)if("endpoint"===n.type){const e=v(n,t);if(e)return e}else if("error"===n.type)S(n,t);else{if("tree"!==n.type)throw new o(`Unknown endpoint rule: ${n}`);{const e=I(n,t);if(e)return e}}throw new o("Rules evaluation failed")},P=(e,t)=>{const{endpointParams:n,logger:a}=t,{parameters:i,rules:c}=e;t.logger?.debug?.(`${s} Initial EndpointParams: ${r(n)}`);const u=Object.entries(i).filter(([,e])=>null!=e.default).map(([e,t])=>[e,t.default]);if(u.length>0)for(const[e,t]of u)n[e]=n[e]??t;const l=Object.entries(i).filter(([,e])=>e.required).map(([e])=>e);for(const e of l)if(null==n[e])throw new o(`Missing required parameter: '${e}'`);const d=M(c,{endpointParams:n,logger:a,referenceRecord:{}});return t.logger?.debug?.(`${s} Resolved endpoint: ${r(d)}`),d}},7267:(e,t,n)=>{n.d(t,{V:()=>s});const s="__smithy_context"},7268:(e,t,n)=>{n.d(t,{S:()=>s});const s=e=>{if(null==e)return{};if(Array.isArray(e))return e.filter(e=>null!=e).map(s);if("object"==typeof e){const t={};for(const n of Object.keys(e))null!=e[n]&&(t[n]=s(e[n]));return t}return e}},7287:(e,t,n)=>{n.d(t,{D:()=>o,b:()=>r});var s=n(4367);const r=void 0;function o(e){const t=(0,s.t)(e.userAgentAppId??r),{customUserAgent:n}=e;return Object.assign(e,{customUserAgent:"string"==typeof n?[[n]]:n,userAgentAppId:async()=>{const n=await t();if(!function(e){return void 0===e||"string"==typeof e&&e.length<=50}(n)){const t="NoOpLogger"!==e.logger?.constructor?.name&&e.logger?e.logger:console;"string"!=typeof n?t?.warn("userAgentAppId must be a string or undefined."):n.length>50&&t?.warn("The provided userAgentAppId exceeds the maximum length of 50 characters.")}return n}})}},7324:(e,t,n)=>{n.d(t,{K:()=>s});class s{constructor(e){this.method=e.method||"GET",this.hostname=e.hostname||"localhost",this.port=e.port,this.query=e.query||{},this.headers=e.headers||{},this.body=e.body,this.protocol=e.protocol?":"!==e.protocol.slice(-1)?`${e.protocol}:`:e.protocol:"https:",this.path=e.path?"/"!==e.path.charAt(0)?`/${e.path}`:e.path:"/",this.username=e.username,this.password=e.password,this.fragment=e.fragment}static clone(e){const t=new s({...e,headers:{...e.headers}});var n;return t.query&&(t.query=(n=t.query,Object.keys(n).reduce((e,t)=>{const s=n[t];return{...e,[t]:Array.isArray(s)?[...s]:s}},{}))),t}static isInstance(e){if(!e)return!1;const t=e;return"method"in t&&"protocol"in t&&"hostname"in t&&"path"in t&&"object"==typeof t.query&&"object"==typeof t.headers}clone(){return s.clone(this)}}},7355:(e,t,n)=>{var s;n.d(t,{Gz:()=>r,L0:()=>o,cm:()=>s}),function(e){e.STANDARD="standard",e.ADAPTIVE="adaptive"}(s||(s={}));const r=3,o=s.STANDARD},7459:(e,t,n)=>{n.d(t,{a:()=>r});var s=n(9290);const r=e=>{const t=(0,s.s)(e,"utf8");return new Uint8Array(t.buffer,t.byteOffset,t.byteLength/Uint8Array.BYTES_PER_ELEMENT)}},7461:(e,t,n)=>{n.d(t,{k:()=>s});class s{constructor({size:e,params:t}){this.data=new Map,this.parameters=[],this.capacity=e??50,t&&(this.parameters=t)}get(e,t){const n=this.hash(e);if(!1===n)return t();if(!this.data.has(n)){if(this.data.size>this.capacity+10){const e=this.data.keys();let t=0;for(;;){const{value:n,done:s}=e.next();if(this.data.delete(n),s||++t>10)break}}this.data.set(n,t())}return this.data.get(n)}size(){return this.data.size}hash(e){let t="";const{parameters:n}=this;if(0===n.length)return!1;for(const s of n){const n=String(e[s]??"");if(n.includes("|;"))return!1;t+=n+"|;"}return t}}},7638:(e,t,n)=>{n.d(t,{P:()=>r});var s=n(9290);const r=e=>{if("string"==typeof e)return e;if("object"!=typeof e||"number"!=typeof e.byteOffset||"number"!=typeof e.byteLength)throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");return(0,s.Q)(e.buffer,e.byteOffset,e.byteLength).toString("utf8")}},7813:(e,t,n)=>{n.d(t,{Y7:()=>r});const s={name:"loggerMiddleware",tags:["LOGGER"],step:"initialize",override:!0},r=e=>({applyToStack:e=>{e.add((e,t)=>async n=>{try{const s=await e(n),{clientName:r,commandName:o,logger:a,dynamoDbDocumentClientOptions:i={}}=t,{overrideInputFilterSensitiveLog:c,overrideOutputFilterSensitiveLog:u}=i,l=c??t.inputFilterSensitiveLog,d=u??t.outputFilterSensitiveLog,{$metadata:p,...h}=s.output;return a?.info?.({clientName:r,commandName:o,input:l(n.input),output:d(h),metadata:p}),s}catch(e){const{clientName:s,commandName:r,logger:o,dynamoDbDocumentClientOptions:a={}}=t,{overrideInputFilterSensitiveLog:i}=a,c=i??t.inputFilterSensitiveLog;throw o?.error?.({clientName:s,commandName:r,input:c(n.input),error:e,metadata:e.$metadata}),e}},s)}})},7821:(e,t,n)=>{n.d(t,{K:()=>r});var s=n(1671);class r{constructor(e){this.config=e,this.middlewareStack=(0,s.o)()}send(e,t,n){const s="function"!=typeof t?t:void 0,r="function"==typeof t?t:n;let o;if(void 0===s&&!0===this.config.cacheMiddleware){this.handlers||(this.handlers=new WeakMap);const t=this.handlers;t.has(e.constructor)?o=t.get(e.constructor):(o=e.resolveMiddleware(this.middlewareStack,this.config,s),t.set(e.constructor,o))}else delete this.handlers,o=e.resolveMiddleware(this.middlewareStack,this.config,s);if(!r)return o(e).then(e=>e.output);o(e).then(e=>r(null,e.output),e=>r(e)).catch(()=>{})}destroy(){this.config?.requestHandler?.destroy?.(),delete this.handlers}}},7916:(e,t,n)=>{function s(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}n.d(t,{$:()=>s})},7966:(e,t,n)=>{n.d(t,{n:()=>i});const s={step:"build",tags:["RECURSION_DETECTION"],name:"recursionDetectionMiddleware",override:!0,priority:"low"};var r=n(1724),o=n(7324);const a="X-Amzn-Trace-Id",i=e=>({applyToStack:e=>{e.add(e=>async t=>{const{request:n}=t;if(!o.K.isInstance(n))return e(t);const s=Object.keys(n.headers??{}).find(e=>e.toLowerCase()===a.toLowerCase())??a;if(n.headers.hasOwnProperty(s))return e(t);const i=process.env.AWS_LAMBDA_FUNCTION_NAME,c=process.env._X_AMZN_TRACE_ID,u=r.A.getXRayTraceId()??c,l=e=>"string"==typeof e&&e.length>0;return l(i)&&l(u)&&(n.headers[a]=u),e({...t,request:n})},s)}})},7973:(e,t,n)=>{n.d(t,{h:()=>K});var s=n(244),r=n(4367);const o=e=>a(e)&&e.expiration.getTime()-Date.now()<3e5;const a=e=>void 0!==e.expiration;var i=n(8004),c=n(4424);const u="X-Amz-Date",l="X-Amz-Signature",d="X-Amz-Security-Token",p="authorization",h=u.toLowerCase(),m=[p,h,"date"],f=l.toLowerCase(),g="x-amz-content-sha256",y=d.toLowerCase(),w={authorization:!0,"cache-control":!0,connection:!0,expect:!0,from:!0,"keep-alive":!0,"max-forwards":!0,pragma:!0,referer:!0,te:!0,trailer:!0,"transfer-encoding":!0,upgrade:!0,"user-agent":!0,"x-amzn-trace-id":!0},E=/^proxy-/,b=/^sec-/,x="AWS4-HMAC-SHA256",v="AWS4-HMAC-SHA256-PAYLOAD",S="aws4_request",I={},M=[],P=(e,t,n)=>`${e}/${t}/${n}/${S}`,O=(e,t,n)=>{const s=new e(t);return s.update((0,c.F)(n)),s.digest()},$=({headers:e},t,n)=>{const s={};for(const r of Object.keys(e).sort()){if(null==e[r])continue;const o=r.toLowerCase();(o in w||t?.has(o)||E.test(o)||b.test(o))&&(!n||n&&!n.has(o))||(s[o]=e[r].trim().replace(/\s+/g," "))}return s};var A=n(3695);const T=async({headers:e,body:t},n)=>{for(const t of Object.keys(e))if(t.toLowerCase()===g)return e[t];if(null==t)return"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";if("string"==typeof t||ArrayBuffer.isView(t)||(0,A.m)(t)){const e=new n;return e.update((0,c.F)(t)),(0,i.n)(await e.digest())}return"UNSIGNED-PAYLOAD"};var N,C=n(7459);class R{format(e){const t=[];for(const n of Object.keys(e)){const s=(0,C.a)(n);t.push(Uint8Array.from([s.byteLength]),s,this.formatHeaderValue(e[n]))}const n=new Uint8Array(t.reduce((e,t)=>e+t.byteLength,0));let s=0;for(const e of t)n.set(e,s),s+=e.byteLength;return n}formatHeaderValue(e){switch(e.type){case"boolean":return Uint8Array.from([e.value?0:1]);case"byte":return Uint8Array.from([2,e.value]);case"short":const t=new DataView(new ArrayBuffer(3));return t.setUint8(0,3),t.setInt16(1,e.value,!1),new Uint8Array(t.buffer);case"integer":const n=new DataView(new ArrayBuffer(5));return n.setUint8(0,4),n.setInt32(1,e.value,!1),new Uint8Array(n.buffer);case"long":const s=new Uint8Array(9);return s[0]=5,s.set(e.value.bytes,1),s;case"binary":const r=new DataView(new ArrayBuffer(3+e.value.byteLength));r.setUint8(0,6),r.setUint16(1,e.value.byteLength,!1);const o=new Uint8Array(r.buffer);return o.set(e.value,3),o;case"string":const a=(0,C.a)(e.value),c=new DataView(new ArrayBuffer(3+a.byteLength));c.setUint8(0,7),c.setUint16(1,a.byteLength,!1);const u=new Uint8Array(c.buffer);return u.set(a,3),u;case"timestamp":const l=new Uint8Array(9);return l[0]=8,l.set(k.fromNumber(e.value.valueOf()).bytes,1),l;case"uuid":if(!D.test(e.value))throw new Error(`Invalid UUID received: ${e.value}`);const d=new Uint8Array(17);return d[0]=9,d.set((0,i.a)(e.value.replace(/\-/g,"")),1),d}}}!function(e){e[e.boolTrue=0]="boolTrue",e[e.boolFalse=1]="boolFalse",e[e.byte=2]="byte",e[e.short=3]="short",e[e.integer=4]="integer",e[e.long=5]="long",e[e.byteArray=6]="byteArray",e[e.string=7]="string",e[e.timestamp=8]="timestamp",e[e.uuid=9]="uuid"}(N||(N={}));const D=/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;class k{constructor(e){if(this.bytes=e,8!==e.byteLength)throw new Error("Int64 buffers must be exactly 8 bytes")}static fromNumber(e){if(e>0x8000000000000000||e<-0x8000000000000000)throw new Error(`${e} is too large (or, if negative, too small) to represent as an Int64`);const t=new Uint8Array(8);for(let n=7,s=Math.abs(Math.round(e));n>-1&&s>0;n--,s/=256)t[n]=s;return e<0&&j(t),new k(t)}valueOf(){const e=this.bytes.slice(0),t=128&e[0];return t&&j(e),parseInt((0,i.n)(e),16)*(t?-1:1)}toString(){return String(this.valueOf())}}function j(e){for(let t=0;t<8;t++)e[t]^=255;for(let t=7;t>-1&&(e[t]++,0===e[t]);t--);}var _=n(7324);const F=e=>{e=_.K.clone(e);for(const t of Object.keys(e.headers))m.indexOf(t.toLowerCase())>-1&&delete e.headers[t];return e};var z=n(8947),q=n(2531);class L{constructor({applyChecksum:e,credentials:t,region:n,service:s,sha256:r,uriEscapePath:o=!0}){this.service=s,this.sha256=r,this.uriEscapePath=o,this.applyChecksum="boolean"!=typeof e||e,this.regionProvider=(0,z.t)(n),this.credentialProvider=(0,z.t)(t)}createCanonicalRequest(e,t,n){const s=Object.keys(t).sort();return`${e.method}\n${this.getCanonicalPath(e)}\n${(({query:e={}})=>{const t=[],n={};for(const s of Object.keys(e)){if(s.toLowerCase()===f)continue;const r=(0,q.o)(s);t.push(r);const o=e[s];"string"==typeof o?n[r]=`${r}=${(0,q.o)(o)}`:Array.isArray(o)&&(n[r]=o.slice(0).reduce((e,t)=>e.concat([`${r}=${(0,q.o)(t)}`]),[]).sort().join("&"))}return t.sort().map(e=>n[e]).filter(e=>e).join("&")})(e)}\n${s.map(e=>`${e}:${t[e]}`).join("\n")}\n\n${s.join(";")}\n${n}`}async createStringToSign(e,t,n,s){const r=new this.sha256;r.update((0,c.F)(n));const o=await r.digest();return`${s}\n${e}\n${t}\n${(0,i.n)(o)}`}getCanonicalPath({path:e}){if(this.uriEscapePath){const t=[];for(const n of e.split("/"))0!==n?.length&&"."!==n&&(".."===n?t.pop():t.push(n));const n=`${e?.startsWith("/")?"/":""}${t.join("/")}${t.length>0&&e?.endsWith("/")?"/":""}`;return(0,q.o)(n).replace(/%2F/g,"/")}return e}validateResolvedCredentials(e){if("object"!=typeof e||"string"!=typeof e.accessKeyId||"string"!=typeof e.secretAccessKey)throw new Error("Resolved credential object is not valid")}formatDate(e){const t=(n=e,(e=>"number"==typeof e?new Date(1e3*e):"string"==typeof e?Number(e)?new Date(1e3*Number(e)):new Date(e):e)(n).toISOString().replace(/\.\d{3}Z$/,"Z")).replace(/[\-:]/g,"");var n;return{longDate:t,shortDate:t.slice(0,8)}}getCanonicalHeaderList(e){return Object.keys(e).sort().join(";")}}class U extends L{constructor({applyChecksum:e,credentials:t,region:n,service:s,sha256:r,uriEscapePath:o=!0}){super({applyChecksum:e,credentials:t,region:n,service:s,sha256:r,uriEscapePath:o}),this.headerFormatter=new R}async presign(e,t={}){const{signingDate:n=new Date,expiresIn:s=3600,unsignableHeaders:r,unhoistableHeaders:o,signableHeaders:a,hoistableHeaders:i,signingRegion:c,signingService:p}=t,h=await this.credentialProvider();this.validateResolvedCredentials(h);const m=c??await this.regionProvider(),{longDate:f,shortDate:g}=this.formatDate(n);if(s>604800)return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");const y=P(g,m,p??this.service),w=((e,t={})=>{const{headers:n,query:s={}}=_.K.clone(e);for(const e of Object.keys(n)){const r=e.toLowerCase();("x-amz-"===r.slice(0,6)&&!t.unhoistableHeaders?.has(r)||t.hoistableHeaders?.has(r))&&(s[e]=n[e],delete n[e])}return{...e,headers:n,query:s}})(F(e),{unhoistableHeaders:o,hoistableHeaders:i});h.sessionToken&&(w.query[d]=h.sessionToken),w.query["X-Amz-Algorithm"]=x,w.query["X-Amz-Credential"]=`${h.accessKeyId}/${y}`,w.query[u]=f,w.query["X-Amz-Expires"]=s.toString(10);const E=$(w,r,a);return w.query["X-Amz-SignedHeaders"]=this.getCanonicalHeaderList(E),w.query[l]=await this.getSignature(f,y,this.getSigningKey(h,m,g,p),this.createCanonicalRequest(w,E,await T(e,this.sha256))),w}async sign(e,t){return"string"==typeof e?this.signString(e,t):e.headers&&e.payload?this.signEvent(e,t):e.message?this.signMessage(e,t):this.signRequest(e,t)}async signEvent({headers:e,payload:t},{signingDate:n=new Date,priorSignature:s,signingRegion:r,signingService:o}){const a=r??await this.regionProvider(),{shortDate:c,longDate:u}=this.formatDate(n),l=P(c,a,o??this.service),d=await T({headers:{},body:t},this.sha256),p=new this.sha256;p.update(e);const h=(0,i.n)(await p.digest()),m=[v,u,l,s,h,d].join("\n");return this.signString(m,{signingDate:n,signingRegion:a,signingService:o})}async signMessage(e,{signingDate:t=new Date,signingRegion:n,signingService:s}){return this.signEvent({headers:this.headerFormatter.format(e.message.headers),payload:e.message.body},{signingDate:t,signingRegion:n,signingService:s,priorSignature:e.priorSignature}).then(t=>({message:e.message,signature:t}))}async signString(e,{signingDate:t=new Date,signingRegion:n,signingService:s}={}){const r=await this.credentialProvider();this.validateResolvedCredentials(r);const o=n??await this.regionProvider(),{shortDate:a}=this.formatDate(t),u=new this.sha256(await this.getSigningKey(r,o,a,s));return u.update((0,c.F)(e)),(0,i.n)(await u.digest())}async signRequest(e,{signingDate:t=new Date,signableHeaders:n,unsignableHeaders:s,signingRegion:r,signingService:o}={}){const a=await this.credentialProvider();this.validateResolvedCredentials(a);const i=r??await this.regionProvider(),c=F(e),{longDate:u,shortDate:l}=this.formatDate(t),d=P(l,i,o??this.service);c.headers[h]=u,a.sessionToken&&(c.headers[y]=a.sessionToken);const m=await T(c,this.sha256);!((e,t)=>{e=e.toLowerCase();for(const n of Object.keys(t))if(e===n.toLowerCase())return!0;return!1})(g,c.headers)&&this.applyChecksum&&(c.headers[g]=m);const f=$(c,s,n),w=await this.getSignature(u,d,this.getSigningKey(a,i,l,o),this.createCanonicalRequest(c,f,m));return c.headers[p]=`${x} Credential=${a.accessKeyId}/${d}, SignedHeaders=${this.getCanonicalHeaderList(f)}, Signature=${w}`,c}async getSignature(e,t,n,s){const r=await this.createStringToSign(e,t,s,x),o=new this.sha256(await n);return o.update((0,c.F)(r)),(0,i.n)(await o.digest())}getSigningKey(e,t,n,s){return(async(e,t,n,s,r)=>{const o=await O(e,t.secretAccessKey,t.accessKeyId),a=`${n}:${s}:${r}:${(0,i.n)(o)}:${t.sessionToken}`;if(a in I)return I[a];for(M.push(a);M.length>50;)delete I[M.shift()];let c=`AWS4${t.secretAccessKey}`;for(const t of[n,s,r,S])c=await O(e,c,t);return I[a]=c})(this.sha256,e,n,t,s||this.service)}}const K=e=>{let t,n=e.credentials,i=!!e.credentials;Object.defineProperty(e,"credentials",{set(c){c&&c!==n&&c!==t&&(i=!0),n=c;const u=function(e,{credentials:t,credentialDefaultProvider:n}){let s;return s=t?t?.memoized?t:((e,t,n)=>{if(void 0===e)return;const s="function"!=typeof e?async()=>Promise.resolve(e):e;let r,o,a,i=!1;const c=async e=>{o||(o=s(e));try{r=await o,a=!0,i=!1}finally{o=void 0}return r};return void 0===t?async e=>(a&&!e?.forceRefresh||(r=await c(e)),r):async e=>(a&&!e?.forceRefresh||(r=await c(e)),i?r:n(r)?t(r)?(await c(e),r):r:(i=!0,r))})(t,o,a):n?(0,r.t)(n(Object.assign({},e,{parentClientConfig:e}))):async()=>{throw new Error("@aws-sdk/core::resolveAwsSdkSigV4Config - `credentials` not provided and no credentialDefaultProvider was configured.")},s.memoized=!0,s}(e,{credentials:n,credentialDefaultProvider:e.credentialDefaultProvider}),l=function(e,t){if(t.configBound)return t;const n=async n=>t({...n,callerClientConfig:e});return n.memoized=t.memoized,n.configBound=!0,n}(e,u);i&&!l.attributed?(t=async e=>l(e).then(e=>(0,s.g)(e,"CREDENTIALS_CODE","e")),t.memoized=l.memoized,t.configBound=l.configBound,t.attributed=!0):t=l},get:()=>t,enumerable:!0,configurable:!0}),e.credentials=n;const{signingEscapePath:c=!0,systemClockOffset:u=e.systemClockOffset||0,sha256:l}=e;let d;return d=e.signer?(0,r.t)(e.signer):e.regionInfoProvider?()=>(0,r.t)(e.region)().then(async t=>[await e.regionInfoProvider(t,{useFipsEndpoint:await e.useFipsEndpoint(),useDualstackEndpoint:await e.useDualstackEndpoint()})||{},t]).then(([t,n])=>{const{signingRegion:s,signingService:r}=t;e.signingRegion=e.signingRegion||s||n,e.signingName=e.signingName||r||e.serviceId;const o={...e,credentials:e.credentials,region:e.signingRegion,service:e.signingName,sha256:l,uriEscapePath:c};return new(e.signerConstructor||U)(o)}):async t=>{const n=(t=Object.assign({},{name:"sigv4",signingName:e.signingName||e.defaultSigningName,signingRegion:await(0,r.t)(e.region)(),properties:{}},t)).signingRegion,s=t.signingName;e.signingRegion=e.signingRegion||n,e.signingName=e.signingName||s||e.serviceId;const o={...e,credentials:e.credentials,region:e.signingRegion,service:e.signingName,sha256:l,uriEscapePath:c};return new(e.signerConstructor||U)(o)},Object.assign(e,{systemClockOffset:u,signingEscapePath:c,signer:d})}},8004:(e,t,n)=>{n.d(t,{a:()=>o,n:()=>a});const s={},r={};for(let e=0;e<256;e++){let t=e.toString(16).toLowerCase();1===t.length&&(t=`0${t}`),s[e]=t,r[t]=e}function o(e){if(e.length%2!=0)throw new Error("Hex encoded strings must have an even number length");const t=new Uint8Array(e.length/2);for(let n=0;n<e.length;n+=2){const s=e.slice(n,n+2).toLowerCase();if(!(s in r))throw new Error(`Cannot decode unrecognized sequence ${s} as hexadecimal`);t[n/2]=r[s]}return t}function a(e){let t="";for(let n=0;n<e.byteLength;n++)t+=s[e[n]];return t}},8059:(e,t,n)=>{n.d(t,{sM:()=>h});var s=n(643),r=n(7324);function o(e,t,n){e.__aws_sdk_context?e.__aws_sdk_context.features||(e.__aws_sdk_context.features={}):e.__aws_sdk_context={features:{}},e.__aws_sdk_context.features[t]=n}const a=/\d{12}\.ddb/,i="user-agent",c="x-amz-user-agent",u=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g,l=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g,d=e=>{const t=e[0].split("/").map(e=>e.replace(u,"-")).join("/"),n=e[1]?.replace(l,"-"),s=t.indexOf("/"),r=t.substring(0,s);let o=t.substring(s+1);return"api"===r&&(o=o.toLowerCase()),[r,o,n].filter(e=>e&&e.length>0).reduce((e,t,n)=>{switch(n){case 0:return t;case 1:return`${e}/${t}`;default:return`${e}#${t}`}},"")},p={name:"getUserAgentMiddleware",step:"build",priority:"low",tags:["SET_USER_AGENT","USER_AGENT"],override:!0},h=e=>({applyToStack:t=>{var n;t.add((n=e,(e,t)=>async u=>{const{request:l}=u;if(!r.K.isInstance(l))return e(u);const{headers:p}=l,h=t?.userAgent?.map(d)||[],m=(await n.defaultUserAgentProvider()).map(d);await async function(e,t,n){const s=n.request;if("rpc-v2-cbor"===s?.headers?.["smithy-protocol"]&&o(e,"PROTOCOL_RPC_V2_CBOR","M"),"function"==typeof t.retryStrategy){const n=await t.retryStrategy();"function"==typeof n.acquireInitialRetryToken?n.constructor?.name?.includes("Adaptive")?o(e,"RETRY_MODE_ADAPTIVE","F"):o(e,"RETRY_MODE_STANDARD","E"):o(e,"RETRY_MODE_LEGACY","D")}if("function"==typeof t.accountIdEndpointMode){const n=e.endpointV2;switch(String(n?.url?.hostname).match(a)&&o(e,"ACCOUNT_ID_ENDPOINT","O"),await(t.accountIdEndpointMode?.())){case"disabled":o(e,"ACCOUNT_ID_MODE_DISABLED","Q");break;case"preferred":o(e,"ACCOUNT_ID_MODE_PREFERRED","P");break;case"required":o(e,"ACCOUNT_ID_MODE_REQUIRED","R")}}const r=e.__smithy_context?.selectedHttpAuthScheme?.identity;if(r?.$source){const t=r;t.accountId&&o(e,"RESOLVED_ACCOUNT_ID","T");for(const[n,s]of Object.entries(t.$source??{}))o(e,n,s)}}(t,n,u);const f=t;m.push(`m/${function(e){let t="";for(const n in e){const s=e[n];if(!(t.length+s.length+1<=1024))break;t.length?t+=","+s:t+=s}return t}(Object.assign({},t.__smithy_context?.features,f.__aws_sdk_context?.features))}`);const g=n?.customUserAgent?.map(d)||[],y=await n.userAgentAppId();y&&m.push(d([`app/${y}`]));const w=(0,s.vL)(),E=(w?[w]:[]).concat([...m,...h,...g]).join(" "),b=[...m.filter(e=>e.startsWith("aws-sdk-")),...g].join(" ");return"browser"!==n.runtime?(b&&(p[c]=p[c]?`${p[i]} ${b}`:b),p[i]=E):p[c]=E,e({...u,request:l})}),p)}})},8062:(e,t,n)=>{n.d(t,{c:()=>r});var s=n(6014);const r=(...e)=>async()=>{if(0===e.length)throw new s.m("No providers in chain");let t;for(const n of e)try{return await n()}catch(e){if(t=e,e?.tryNextLink)continue;throw e}throw t}},8218:(e,t,n)=>{n.d(t,{w:()=>o});var s=n(1071),r=n(7638);const o=(e,t)=>(0,s.P)(e,t).then(e=>(t?.utf8Encoder??r.P)(e))},8246:(e,t,n)=>{n.d(t,{pf:()=>o});var s=n(857);const r=require("process"),o=({serviceId:e,clientVersion:t})=>async n=>{const o=[["aws-sdk-js",t],["ua","2.1"],[`os/${(0,s.platform)()}`,(0,s.release)()],["lang/js"],["md/nodejs",`${r.versions.node}`]];e&&o.push([`api/${e}`,t]),r.env.AWS_EXECUTION_ENV&&o.push([`exec-env/${r.env.AWS_EXECUTION_ENV}`]);const a=await(n?.userAgentAppId?.());return a?[...o,[`app/${a}`]]:[...o]}},8462:(e,t,n)=>{n.d(t,{a:()=>r});var s=n(2641);const r=e=>"object"==typeof e?"url"in e?(0,s.D)(e.url):e:(0,s.D)(e)},8603:(e,t,n)=>{n.d(t,{u:()=>g});var s=n(1671),r=n(7267);const o=e=>"function"==typeof e?e():e;class a{constructor(e,t=new Map,n=new Map){this.namespace=e,this.schemas=t,this.exceptions=n}static for(e){return a.registries.has(e)||a.registries.set(e,new a(e)),a.registries.get(e)}register(e,t){const n=this.normalizeShapeId(e);this.schemas.set(n,t)}getSchema(e){const t=this.normalizeShapeId(e);if(!this.schemas.has(t))throw new Error(`@smithy/core/schema - schema not found for ${t}`);return this.schemas.get(t)}registerError(e,t){this.exceptions.set(e,t)}getErrorCtor(e){return this.exceptions.get(e)}getBaseException(){for(const[e,t]of this.schemas.entries())if(e.startsWith("smithy.ts.sdk.synthetic.")&&e.endsWith("ServiceException"))return t}find(e){return[...this.schemas.values()].find(e)}clear(){this.schemas.clear(),this.exceptions.clear()}normalizeShapeId(e){return e.includes("#")?e:this.namespace+"#"+e}getNamespace(e){return this.normalizeShapeId(e).split("#")[0]}}a.registries=new Map;class i{static assign(e,t){const n=Object.assign(e,t);return a.for(n.namespace).register(n.name,n),n}static[Symbol.hasInstance](e){const t=this.prototype.isPrototypeOf(e);return t||"object"!=typeof e||null===e?t:e.symbol===this.symbol}getName(){return this.namespace+"#"+this.name}}class c extends i{constructor(){super(...arguments),this.symbol=c.symbol}}c.symbol=Symbol.for("@smithy/lis");class u extends i{constructor(){super(...arguments),this.symbol=u.symbol}}u.symbol=Symbol.for("@smithy/map");const l={BLOB:21,STREAMING_BLOB:42,BOOLEAN:2,STRING:0,NUMERIC:1,BIG_INTEGER:17,BIG_DECIMAL:19,DOCUMENT:15,TIMESTAMP_DEFAULT:4,TIMESTAMP_DATE_TIME:5,TIMESTAMP_HTTP_DATE:6,TIMESTAMP_EPOCH_SECONDS:7,LIST_MODIFIER:64,MAP_MODIFIER:128};class d extends i{constructor(){super(...arguments),this.symbol=d.symbol}}d.symbol=Symbol.for("@smithy/sim");class p extends i{constructor(){super(...arguments),this.symbol=p.symbol}}p.symbol=Symbol.for("@smithy/str");class h{constructor(e,t){this.ref=e,this.memberName=t,this.symbol=h.symbol;const n=[];let s=e,r=e;for(this._isMemberSchema=!1;Array.isArray(s);)n.push(s[1]),s=s[0],r=o(s),this._isMemberSchema=!0;if(n.length>0){this.memberTraits={};for(let e=n.length-1;e>=0;--e){const t=n[e];Object.assign(this.memberTraits,h.translateTraits(t))}}else this.memberTraits=0;if(r instanceof h){const e=this.memberTraits;return Object.assign(this,r),this.memberTraits=Object.assign({},e,r.getMemberTraits(),this.getMemberTraits()),this.normalizedTraits=void 0,void(this.memberName=t??r.memberName)}if(this.schema=o(r),this.schema&&"object"==typeof this.schema?this.traits=this.schema?.traits??{}:this.traits=0,this.name=(this.schema instanceof i?this.schema.getName?.():void 0)??this.memberName??this.getSchemaName(),this._isMemberSchema&&!t)throw new Error(`@smithy/core/schema - NormalizedSchema member init ${this.getName(!0)} missing member name.`)}static[Symbol.hasInstance](e){return i[Symbol.hasInstance].bind(this)(e)}static of(e){if(e instanceof h)return e;if(Array.isArray(e)){const[t,n]=e;if(t instanceof h)return Object.assign(t.getMergedTraits(),h.translateTraits(n)),t;throw new Error(`@smithy/core/schema - may not init unwrapped member schema=${JSON.stringify(e,null,2)}.`)}return new h(e)}static translateTraits(e){if("object"==typeof e)return e;e|=0;const t={};let n=0;for(const s of["httpLabel","idempotent","idempotencyToken","sensitive","httpPayload","httpResponseCode","httpQueryParams"])1==(e>>n++&1)&&(t[s]=1);return t}getSchema(){return this.schema instanceof h?(Object.assign(this,{schema:this.schema.getSchema()}),this.schema):this.schema instanceof d?o(this.schema.schemaRef):o(this.schema)}getName(e=!1){return!e&&this.name&&this.name.includes("#")?this.name.split("#")[1]:this.name||void 0}getMemberName(){if(!this.isMemberSchema())throw new Error(`@smithy/core/schema - non-member schema: ${this.getName(!0)}`);return this.memberName}isMemberSchema(){return this._isMemberSchema}isUnitSchema(){return"unit"===this.getSchema()}isListSchema(){const e=this.getSchema();return"number"==typeof e?e>=l.LIST_MODIFIER&&e<l.MAP_MODIFIER:e instanceof c}isMapSchema(){const e=this.getSchema();return"number"==typeof e?e>=l.MAP_MODIFIER&&e<=255:e instanceof u}isStructSchema(){const e=this.getSchema();return null!==e&&"object"==typeof e&&"members"in e||e instanceof p}isBlobSchema(){return this.getSchema()===l.BLOB||this.getSchema()===l.STREAMING_BLOB}isTimestampSchema(){const e=this.getSchema();return"number"==typeof e&&e>=l.TIMESTAMP_DEFAULT&&e<=l.TIMESTAMP_EPOCH_SECONDS}isDocumentSchema(){return this.getSchema()===l.DOCUMENT}isStringSchema(){return this.getSchema()===l.STRING}isBooleanSchema(){return this.getSchema()===l.BOOLEAN}isNumericSchema(){return this.getSchema()===l.NUMERIC}isBigIntegerSchema(){return this.getSchema()===l.BIG_INTEGER}isBigDecimalSchema(){return this.getSchema()===l.BIG_DECIMAL}isStreaming(){return!!this.getMergedTraits().streaming||this.getSchema()===l.STREAMING_BLOB}isIdempotencyToken(){if(this.normalizedTraits)return!!this.normalizedTraits.idempotencyToken;for(const e of[this.traits,this.memberTraits])if("number"==typeof e){if(!(4&~e))return!0}else if("object"==typeof e&&e.idempotencyToken)return!0;return!1}getMergedTraits(){return this.normalizedTraits??(this.normalizedTraits={...this.getOwnTraits(),...this.getMemberTraits()})}getMemberTraits(){return h.translateTraits(this.memberTraits)}getOwnTraits(){return h.translateTraits(this.traits)}getKeySchema(){if(this.isDocumentSchema())return this.memberFrom([l.DOCUMENT,0],"key");if(!this.isMapSchema())throw new Error(`@smithy/core/schema - cannot get key for non-map: ${this.getName(!0)}`);const e=this.getSchema();return"number"==typeof e?this.memberFrom([63&e,0],"key"):this.memberFrom([e.keySchema,0],"key")}getValueSchema(){const e=this.getSchema();if("number"==typeof e){if(this.isMapSchema())return this.memberFrom([63&e,0],"value");if(this.isListSchema())return this.memberFrom([63&e,0],"member")}if(e&&"object"==typeof e){if(this.isStructSchema())throw new Error(`may not getValueSchema() on structure ${this.getName(!0)}`);const t=e;if("valueSchema"in t){if(this.isMapSchema())return this.memberFrom([t.valueSchema,0],"value");if(this.isListSchema())return this.memberFrom([t.valueSchema,0],"member")}}if(this.isDocumentSchema())return this.memberFrom([l.DOCUMENT,0],"value");throw new Error(`@smithy/core/schema - ${this.getName(!0)} has no value member.`)}hasMemberSchema(e){return!!this.isStructSchema()&&this.getSchema().memberNames.includes(e)}getMemberSchema(e){if(this.isStructSchema()){const t=this.getSchema();if(!t.memberNames.includes(e))throw new Error(`@smithy/core/schema - ${this.getName(!0)} has no member=${e}.`);const n=t.memberNames.indexOf(e),s=t.memberList[n];return this.memberFrom(Array.isArray(s)?s:[s,0],e)}if(this.isDocumentSchema())return this.memberFrom([l.DOCUMENT,0],e);throw new Error(`@smithy/core/schema - ${this.getName(!0)} has no members.`)}getMemberSchemas(){const e={};try{for(const[t,n]of this.structIterator())e[t]=n}catch(e){}return e}getEventStreamMember(){if(this.isStructSchema())for(const[e,t]of this.structIterator())if(t.isStreaming()&&t.isStructSchema())return e;return""}*structIterator(){if(this.isUnitSchema())return;if(!this.isStructSchema())throw new Error("@smithy/core/schema - cannot iterate non-struct schema.");const e=this.getSchema();for(let t=0;t<e.memberNames.length;++t)yield[e.memberNames[t],this.memberFrom([e.memberList[t],0],e.memberNames[t])]}memberFrom(e,t){return e instanceof h?Object.assign(e,{memberName:t,_isMemberSchema:!0}):new h(e,t)}getSchemaName(){const e=this.getSchema();if("number"==typeof e){const t=63&e,n=192&e,s=Object.entries(l).find(([,e])=>e===t)?.[0]??"Unknown";switch(n){case l.MAP_MODIFIER:return`${s}Map`;case l.LIST_MODIFIER:return`${s}List`;case 0:return s}}return"Unknown"}}h.symbol=Symbol.for("@smithy/nor");const m="***SensitiveInformation***";function f(e,t){if(null==t)return t;const n=h.of(e);if(n.getMergedTraits().sensitive)return m;if(n.isListSchema()){if(n.getValueSchema().getMergedTraits().sensitive)return m}else if(n.isMapSchema()){if(n.getKeySchema().getMergedTraits().sensitive||n.getValueSchema().getMergedTraits().sensitive)return m}else if(n.isStructSchema()&&"object"==typeof t){const e=t,s={};for(const[t,r]of n.structIterator())null!=e[t]&&(s[t]=f(r,e[t]));return s}return t}class g{constructor(){this.middlewareStack=(0,s.o)()}static classBuilder(){return new y}resolveMiddlewareWithContext(e,t,n,{middlewareFn:s,clientName:o,commandName:a,inputFilterSensitiveLog:i,outputFilterSensitiveLog:c,smithyContext:u,additionalContext:l,CommandCtor:d}){for(const r of s.bind(this)(d,e,t,n))this.middlewareStack.use(r);const p=e.concat(this.middlewareStack),{logger:h}=t,m={logger:h,clientName:o,commandName:a,inputFilterSensitiveLog:i,outputFilterSensitiveLog:c,[r.V]:{commandInstance:this,...u},...l},{requestHandler:f}=t;return p.resolve(e=>f.handle(e.request,n||{}),m)}}class y{constructor(){this._init=()=>{},this._ep={},this._middlewareFn=()=>[],this._commandName="",this._clientName="",this._additionalContext={},this._smithyContext={},this._inputFilterSensitiveLog=void 0,this._outputFilterSensitiveLog=void 0,this._serializer=null,this._deserializer=null}init(e){this._init=e}ep(e){return this._ep=e,this}m(e){return this._middlewareFn=e,this}s(e,t,n={}){return this._smithyContext={service:e,operation:t,...n},this}c(e={}){return this._additionalContext=e,this}n(e,t){return this._clientName=e,this._commandName=t,this}f(e=e=>e,t=e=>e){return this._inputFilterSensitiveLog=e,this._outputFilterSensitiveLog=t,this}ser(e){return this._serializer=e,this}de(e){return this._deserializer=e,this}sc(e){return this._operationSchema=e,this._smithyContext.operationSchema=e,this}build(){const e=this;let t;return t=class extends g{static getEndpointParameterInstructions(){return e._ep}constructor(...[t]){super(),this.serialize=e._serializer,this.deserialize=e._deserializer,this.input=t??{},e._init(this),this.schema=e._operationSchema}resolveMiddleware(n,s,r){return this.resolveMiddlewareWithContext(n,s,r,{CommandCtor:t,middlewareFn:e._middlewareFn,clientName:e._clientName,commandName:e._commandName,inputFilterSensitiveLog:e._inputFilterSensitiveLog??(e._operationSchema?f.bind(null,e._operationSchema.input):e=>e),outputFilterSensitiveLog:e._outputFilterSensitiveLog??(e._operationSchema?f.bind(null,e._operationSchema.output):e=>e),smithyContext:e._smithyContext,additionalContext:e._additionalContext})}}}}},8611:e=>{e.exports=require("http")},8829:(e,t,n)=>{n.d(t,{k:()=>i});var s=n(4013),r=n(5546);const o="AWS_ENDPOINT_URL",a="endpoint_url",i=async e=>(0,s.Z)((e=>({environmentVariableSelector:t=>{const n=e.split(" ").map(e=>e.toUpperCase()),s=t[[o,...n].join("_")];return s||(t[o]||void 0)},configFileSelector:(t,n)=>{if(n&&t.services){const s=n[["services",t.services].join(r.Q)];if(s){const t=e.split(" ").map(e=>e.toLowerCase()),n=s[[t.join("_"),a].join(r.Q)];if(n)return n}}const s=t[a];if(s)return s},default:void 0}))(e??""))()},8883:(e,t,n)=>{n.d(t,{X:()=>r});const s=new RegExp("^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$"),r=(e,t=!1)=>{if(!t)return s.test(e);const n=e.split(".");for(const e of n)if(!r(e))return!1;return!0}},8947:(e,t,n)=>{n.d(t,{t:()=>s});const s=e=>{if("function"==typeof e)return e;const t=Promise.resolve(e);return()=>t}},9023:e=>{e.exports=require("util")},9212:(e,t,n)=>{n.d(t,{l:()=>o});var s=n(7324),r=n(7916);function o(e,t){return new a(e,t)}class a{constructor(e,t){this.input=e,this.context=t,this.query={},this.method="",this.headers={},this.path="",this.body=null,this.hostname="",this.resolvePathStack=[]}async build(){const{hostname:e,protocol:t="https",port:n,path:r}=await this.context.endpoint();this.path=r;for(const e of this.resolvePathStack)e(this.path);return new s.K({protocol:t,hostname:this.hostname||e,port:n,method:this.method,path:this.path,query:this.query,body:this.body,headers:this.headers})}hn(e){return this.hostname=e,this}bp(e){return this.resolvePathStack.push(t=>{this.path=`${t?.endsWith("/")?t.slice(0,-1):t||""}`+e}),this}p(e,t,n,s){return this.resolvePathStack.push(o=>{this.path=((e,t,n,s,o,a)=>{if(null==t||void 0===t[n])throw new Error("No value provided for input HTTP label: "+n+".");{const t=s();if(t.length<=0)throw new Error("Empty value provided for input HTTP label: "+n+".");e=e.replace(o,a?t.split("/").map(e=>(0,r.$)(e)).join("/"):(0,r.$)(t))}return e})(o,this.input,e,t,n,s)}),this}h(e){return this.headers=e,this}q(e){return this.query=e,this}b(e){return this.body=e,this}m(e){return this.method=e,this}}},9290:(e,t,n)=>{n.d(t,{Q:()=>o,s:()=>a});var s=n(3695),r=n(181);const o=(e,t=0,n=e.byteLength-t)=>{if(!(0,s.m)(e))throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof e} (${e})`);return r.Buffer.from(e,t,n)},a=(e,t)=>{if("string"!=typeof e)throw new TypeError(`The "input" argument must be of type string. Received type ${typeof e} (${e})`);return t?r.Buffer.from(e,t):r.Buffer.from(e)}},9718:(e,t,n)=>{n.d(t,{n:()=>o});var s=n(9290),r=n(7459);const o=e=>{let t;if(t="string"==typeof e?(0,r.a)(e):e,"object"!=typeof t||"number"!=typeof t.byteOffset||"number"!=typeof t.byteLength)throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");return(0,s.Q)(t.buffer,t.byteOffset,t.byteLength).toString("base64")}},9896:e=>{e.exports=require("fs")},9915:(e,t,n)=>{n.d(t,{hV:()=>s});const s={environmentVariableSelector:e=>e.AWS_SDK_UA_APP_ID,configFileSelector:e=>e.sdk_ua_app_id??e["sdk-ua-app-id"],default:n(7287).b}},9984:(e,t,n)=>{var s;n.d(t,{xA:()=>r,uv:()=>o}),function(e){e.MD5="md5",e.CRC32="crc32",e.CRC32C="crc32c",e.SHA1="sha1",e.SHA256="sha256"}(s||(s={}));const r=e=>Object.assign((e=>{const t=[];for(const n in s){const r=s[n];void 0!==e[r]&&t.push({algorithmId:()=>r,checksumConstructor:()=>e[r]})}return{addChecksumAlgorithm(e){t.push(e)},checksumAlgorithms:()=>t}})(e),(e=>({setRetryStrategy(t){e.retryStrategy=t},retryStrategy:()=>e.retryStrategy}))(e)),o=e=>Object.assign((e=>{const t={};return e.checksumAlgorithms().forEach(e=>{t[e.algorithmId()]=e.checksumConstructor()}),t})(e),(e=>{const t={};return t.retryStrategy=e.retryStrategy(),t})(e))}},n={};function s(e){var r=n[e];if(void 0!==r)return r.exports;var o=n[e]={exports:{}};return t[e](o,o.exports,s),o.exports}s.m=t,s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce((t,n)=>(s.f[n](e,t),t),[])),s.u=e=>e+".js",s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},e={167:1},s.f.require=(t,n)=>{if(!e[t]){var r=require("./"+s.u(t));e[t]||(t=>{var n=t.modules,r=t.ids,o=t.runtime;for(var a in n)s.o(n,a)&&(s.m[a]=n[a]);o&&o(s);for(var i=0;i<r.length;i++)e[r[i]]=1})(r)}};var r={};s.r(r),s.d(r,{default:()=>lp});var o=s(1095),a=s(7813),i=s(7966),c=s(7287),u=s(8059),l=s(4303),d=s(2404),p=s(612),h=s(5172),m=s(649),f=s(2795),g=s(5963),y=s(5144),w=s(7821),E=s(7973),b=s(6116),x=s(8947);const v=async(e,t,n)=>({operation:(0,b.u)(t).operation,region:await(0,x.t)(e.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()}),S=e=>{const t=[];return e.operation,t.push(function(e){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"cloudtrail",region:e.region},propertiesExtractor:(e,t)=>({signingProperties:{config:e,context:t}})}}(e)),t},I={UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}};var M=s(5122),P=s(4472),O=s(1478),$=s(3783),A=s(8062),T=s(3052),N=s(6437);const C="AWS_EC2_METADATA_DISABLED";let R=!1;const D=(e={})=>(0,$.B)((0,A.c)(async()=>{if(e.profile??process.env[N.Ch])throw process.env[O.yG]&&process.env[O.pi]&&!R&&((e.logger?.warn&&"NoOpLogger"!==e.logger?.constructor?.name?e.logger.warn.bind(e.logger):console.warn)("@aws-sdk/credential-provider-node - defaultProvider::fromEnv WARNING:\n    Multiple credential sources detected: \n    Both AWS_PROFILE and the pair AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY static credentials are set.\n    This SDK will proceed with the AWS_PROFILE value.\n    \n    However, a future version may change this behavior to prefer the ENV static credentials.\n    Please ensure that your environment only sets either the AWS_PROFILE or the\n    AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY pair.\n"),R=!0),new T.C("AWS_PROFILE is set, skipping fromEnv provider.",{logger:e.logger,tryNextLink:!0});return e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromEnv"),(0,O.sF)(e)()},async()=>{e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromSSO");const{ssoStartUrl:t,ssoAccountId:n,ssoRegion:r,ssoRoleName:o,ssoSession:a}=e;if(!(t||n||r||o||a))throw new T.C("Skipping SSO provider in default chain (inputs do not include SSO fields).",{logger:e.logger});const{fromSSO:i}=await s.e(305).then(s.bind(s,1305));return i(e)()},async()=>{e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromIni");const{fromIni:t}=await s.e(789).then(s.bind(s,2789));return t(e)()},async()=>{e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromProcess");const{fromProcess:t}=await s.e(109).then(s.bind(s,5109));return t(e)()},async()=>{e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromTokenFile");const{fromTokenFile:t}=await s.e(819).then(s.bind(s,7819));return t(e)()},async()=>(e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::remoteProvider"),(await(async e=>{const{ENV_CMDS_FULL_URI:t,ENV_CMDS_RELATIVE_URI:n,fromContainerMetadata:r,fromInstanceMetadata:o}=await s.e(897).then(s.bind(s,7897));if(process.env[n]||process.env[t]){e.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromHttp/fromContainerMetadata");const{fromHttp:t}=await s.e(703).then(s.bind(s,8703));return(0,A.c)(t(e),r(e))}return process.env[C]&&"false"!==process.env[C]?async()=>{throw new T.C("EC2 Instance Metadata Service access disabled",{logger:e.logger})}:(e.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromInstanceMetadata"),o(e))})(e))()),async()=>{throw new T.C("Could not load credentials from any providers",{tryNextLink:!1,logger:e.logger})}),j,k),k=e=>void 0!==e?.expiration,j=e=>void 0!==e?.expiration&&e.expiration.getTime()-Date.now()<3e5;var _=s(8246),F=s(9915),z=s(4836),q=s(2184),L=s(4570),U=s(1701),K=s(4013),V=s(2864),B=s(5178),H=s(2291),W=s(7355),G=s(6228),Q=s(4098),Z=s(2641),Y=s(1395),X=s(9718),J=s(7459),ee=s(7638),te=s(643),ne=s(7461),se=s(7167),re=s(468);const oe="required",ae="fn",ie="argv",ce="ref",ue=!0,le="isSet",de="booleanEquals",pe="error",he="endpoint",me="tree",fe="PartitionResult",ge="stringEquals",ye={[oe]:!1,type:"String"},we={[oe]:!0,default:!1,type:"Boolean"},Ee={[ce]:"Endpoint"},be={[ae]:de,[ie]:[{[ce]:"UseFIPS"},!0]},xe={[ae]:de,[ie]:[{[ce]:"UseDualStack"},!0]},ve={},Se={[ce]:"Region"},Ie={[ae]:"getAttr",[ie]:[{[ce]:fe},"supportsFIPS"]},Me={[ae]:de,[ie]:[!0,{[ae]:"getAttr",[ie]:[{[ce]:fe},"supportsDualStack"]}]},Pe=[be],Oe=[xe],$e=[Se],Ae={version:"1.0",parameters:{Region:ye,UseDualStack:we,UseFIPS:we,Endpoint:ye},rules:[{conditions:[{[ae]:le,[ie]:[Ee]}],rules:[{conditions:Pe,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:pe},{conditions:Oe,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:pe},{endpoint:{url:Ee,properties:ve,headers:ve},type:he}],type:me},{conditions:[{[ae]:le,[ie]:$e}],rules:[{conditions:[{[ae]:"aws.partition",[ie]:$e,assign:fe}],rules:[{conditions:[be,xe],rules:[{conditions:[{[ae]:de,[ie]:[ue,Ie]},Me],rules:[{endpoint:{url:"https://cloudtrail-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:ve,headers:ve},type:he}],type:me},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:pe}],type:me},{conditions:Pe,rules:[{conditions:[{[ae]:de,[ie]:[Ie,ue]}],rules:[{conditions:[{[ae]:ge,[ie]:[Se,"us-gov-east-1"]}],endpoint:{url:"https://cloudtrail.us-gov-east-1.amazonaws.com",properties:ve,headers:ve},type:he},{conditions:[{[ae]:ge,[ie]:[Se,"us-gov-west-1"]}],endpoint:{url:"https://cloudtrail.us-gov-west-1.amazonaws.com",properties:ve,headers:ve},type:he},{endpoint:{url:"https://cloudtrail-fips.{Region}.{PartitionResult#dnsSuffix}",properties:ve,headers:ve},type:he}],type:me},{error:"FIPS is enabled but this partition does not support FIPS",type:pe}],type:me},{conditions:Oe,rules:[{conditions:[Me],rules:[{endpoint:{url:"https://cloudtrail.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:ve,headers:ve},type:he}],type:me},{error:"DualStack is enabled but this partition does not support DualStack",type:pe}],type:me},{endpoint:{url:"https://cloudtrail.{Region}.{PartitionResult#dnsSuffix}",properties:ve,headers:ve},type:he}],type:me}],type:me},{error:"Invalid Configuration: Missing Region",type:pe}]},Te=new ne.k({size:50,params:["Endpoint","Region","UseDualStack","UseFIPS"]}),Ne=(e,t={})=>Te.get(e,()=>(0,se.s)(Ae,{endpointParams:e,logger:t.logger}));re.m.aws=te.UF;var Ce=s(666),Re=s(1620),De=s(2339);var ke=s(4163),je=s(2927),_e=s(9984);class Fe extends w.K{config;constructor(...[e]){const t=(e=>{(0,De.I)(process.version);const t=(0,Re.I)(e),n=()=>t().then(Ce.l),s=(e=>({apiVersion:"2013-11-01",base64Decoder:e?.base64Decoder??Y.E,base64Encoder:e?.base64Encoder??X.n,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??Ne,extensions:e?.extensions??[],httpAuthSchemeProvider:e?.httpAuthSchemeProvider??S,httpAuthSchemes:e?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:e=>e.getIdentityProvider("aws.auth#sigv4"),signer:new G.f2}],logger:e?.logger??new Q.N,serviceId:e?.serviceId??"CloudTrail",urlParser:e?.urlParser??Z.D,utf8Decoder:e?.utf8Decoder??J.a,utf8Encoder:e?.utf8Encoder??ee.P}))(e);(0,M.I)(process.version);const r={profile:e?.profile,logger:s.logger};return{...s,...e,runtime:"node",defaultsMode:t,authSchemePreference:e?.authSchemePreference??(0,K.Z)(P.$,r),bodyLengthChecker:e?.bodyLengthChecker??H.n,credentialDefaultProvider:e?.credentialDefaultProvider??D,defaultUserAgentProvider:e?.defaultUserAgentProvider??(0,_.pf)({serviceId:s.serviceId,clientVersion:"3.896.0"}),maxAttempts:e?.maxAttempts??(0,K.Z)(g.qs,e),region:e?.region??(0,K.Z)(z.GG,{...z.zH,...r}),requestHandler:V.$.create(e?.requestHandler??n),retryMode:e?.retryMode??(0,K.Z)({...g.kN,default:async()=>(await n()).retryMode||W.L0},e),sha256:e?.sha256??U.V.bind(null,"sha256"),streamCollector:e?.streamCollector??B.k,useDualstackEndpoint:e?.useDualstackEndpoint??(0,K.Z)(q.e$,r),useFipsEndpoint:e?.useFipsEndpoint??(0,K.Z)(L.Ko,r),userAgentAppId:e?.userAgentAppId??(0,K.Z)(F.hV,r)}})(e||{});super(t),this.initConfig=t;const n=(s=t,Object.assign(s,{useDualstackEndpoint:s.useDualstackEndpoint??!1,useFipsEndpoint:s.useFipsEndpoint??!1,defaultSigningName:"cloudtrail"}));var s;const r=(0,c.D)(n),w=(0,g.$z)(r),b=(0,l.T)(w),I=(0,o.OV)(b),O=((e,t)=>{const n=Object.assign((0,ke.R)(e),(0,_e.xA)(e),(0,je.e)(e),(e=>{const t=e.httpAuthSchemes;let n=e.httpAuthSchemeProvider,s=e.credentials;return{setHttpAuthScheme(e){const n=t.findIndex(t=>t.schemeId===e.schemeId);-1===n?t.push(e):t.splice(n,1,e)},httpAuthSchemes:()=>t,setHttpAuthSchemeProvider(e){n=e},httpAuthSchemeProvider:()=>n,setCredentials(e){s=e},credentials:()=>s}})(e));return t.forEach(e=>e.configure(n)),Object.assign(e,(0,ke.$)(n),(0,_e.uv)(n),(0,je.j)(n),{httpAuthSchemes:(s=n).httpAuthSchemes(),httpAuthSchemeProvider:s.httpAuthSchemeProvider(),credentials:s.credentials()});var s})((e=>{const t=(0,E.h)(e);return Object.assign(t,{authSchemePreference:(0,x.t)(e.authSchemePreference??[])})})((0,f.C)(I)),e?.extensions||[]);this.config=O,this.middlewareStack.use((0,u.sM)(this.config)),this.middlewareStack.use((0,y.ey)(this.config)),this.middlewareStack.use((0,m.vK)(this.config)),this.middlewareStack.use((0,o.TC)(this.config)),this.middlewareStack.use((0,a.Y7)(this.config)),this.middlewareStack.use((0,i.n)(this.config)),this.middlewareStack.use((0,d.w)(this.config,{httpAuthSchemeParametersProvider:v,identityProviderConfigProvider:async e=>new p.h({"aws.auth#sigv4":e.credentials})})),this.middlewareStack.use((0,h.l)(this.config))}destroy(){super.destroy()}}var ze=s(839),qe=s(1698),Le=s(8603),Ue=s(1919),Ke=s(7324),Ve=s(7268),Be=s(4384),He=s(1226),We=s(6460),Ge=s(1871),Qe=s(2967);class Ze extends Be.T{constructor(e){super(e),Object.setPrototypeOf(this,Ze.prototype)}}class Ye extends Ze{name="AccessDeniedException";$fault="client";Message;constructor(e){super({name:"AccessDeniedException",$fault:"client",...e}),Object.setPrototypeOf(this,Ye.prototype),this.Message=e.Message}}class Xe extends Ze{name="AccountHasOngoingImportException";$fault="client";Message;constructor(e){super({name:"AccountHasOngoingImportException",$fault:"client",...e}),Object.setPrototypeOf(this,Xe.prototype),this.Message=e.Message}}class Je extends Ze{name="AccountNotFoundException";$fault="client";Message;constructor(e){super({name:"AccountNotFoundException",$fault:"client",...e}),Object.setPrototypeOf(this,Je.prototype),this.Message=e.Message}}class et extends Ze{name="AccountNotRegisteredException";$fault="client";Message;constructor(e){super({name:"AccountNotRegisteredException",$fault:"client",...e}),Object.setPrototypeOf(this,et.prototype),this.Message=e.Message}}class tt extends Ze{name="AccountRegisteredException";$fault="client";Message;constructor(e){super({name:"AccountRegisteredException",$fault:"client",...e}),Object.setPrototypeOf(this,tt.prototype),this.Message=e.Message}}class nt extends Ze{name="ChannelARNInvalidException";$fault="client";Message;constructor(e){super({name:"ChannelARNInvalidException",$fault:"client",...e}),Object.setPrototypeOf(this,nt.prototype),this.Message=e.Message}}class st extends Ze{name="ChannelNotFoundException";$fault="client";Message;constructor(e){super({name:"ChannelNotFoundException",$fault:"client",...e}),Object.setPrototypeOf(this,st.prototype),this.Message=e.Message}}class rt extends Ze{name="CloudTrailARNInvalidException";$fault="client";Message;constructor(e){super({name:"CloudTrailARNInvalidException",$fault:"client",...e}),Object.setPrototypeOf(this,rt.prototype),this.Message=e.Message}}class ot extends Ze{name="ConflictException";$fault="client";Message;constructor(e){super({name:"ConflictException",$fault:"client",...e}),Object.setPrototypeOf(this,ot.prototype),this.Message=e.Message}}class at extends Ze{name="EventDataStoreARNInvalidException";$fault="client";Message;constructor(e){super({name:"EventDataStoreARNInvalidException",$fault:"client",...e}),Object.setPrototypeOf(this,at.prototype),this.Message=e.Message}}class it extends Ze{name="EventDataStoreNotFoundException";$fault="client";Message;constructor(e){super({name:"EventDataStoreNotFoundException",$fault:"client",...e}),Object.setPrototypeOf(this,it.prototype),this.Message=e.Message}}class ct extends Ze{name="InactiveEventDataStoreException";$fault="client";Message;constructor(e){super({name:"InactiveEventDataStoreException",$fault:"client",...e}),Object.setPrototypeOf(this,ct.prototype),this.Message=e.Message}}class ut extends Ze{name="InvalidTagParameterException";$fault="client";Message;constructor(e){super({name:"InvalidTagParameterException",$fault:"client",...e}),Object.setPrototypeOf(this,ut.prototype),this.Message=e.Message}}class lt extends Ze{name="InvalidTrailNameException";$fault="client";Message;constructor(e){super({name:"InvalidTrailNameException",$fault:"client",...e}),Object.setPrototypeOf(this,lt.prototype),this.Message=e.Message}}class dt extends Ze{name="NoManagementAccountSLRExistsException";$fault="client";Message;constructor(e){super({name:"NoManagementAccountSLRExistsException",$fault:"client",...e}),Object.setPrototypeOf(this,dt.prototype),this.Message=e.Message}}class pt extends Ze{name="NotOrganizationMasterAccountException";$fault="client";Message;constructor(e){super({name:"NotOrganizationMasterAccountException",$fault:"client",...e}),Object.setPrototypeOf(this,pt.prototype),this.Message=e.Message}}class ht extends Ze{name="OperationNotPermittedException";$fault="client";Message;constructor(e){super({name:"OperationNotPermittedException",$fault:"client",...e}),Object.setPrototypeOf(this,ht.prototype),this.Message=e.Message}}class mt extends Ze{name="ResourceNotFoundException";$fault="client";Message;constructor(e){super({name:"ResourceNotFoundException",$fault:"client",...e}),Object.setPrototypeOf(this,mt.prototype),this.Message=e.Message}}class ft extends Ze{name="ResourceTypeNotSupportedException";$fault="client";Message;constructor(e){super({name:"ResourceTypeNotSupportedException",$fault:"client",...e}),Object.setPrototypeOf(this,ft.prototype),this.Message=e.Message}}class gt extends Ze{name="TagsLimitExceededException";$fault="client";Message;constructor(e){super({name:"TagsLimitExceededException",$fault:"client",...e}),Object.setPrototypeOf(this,gt.prototype),this.Message=e.Message}}class yt extends Ze{name="UnsupportedOperationException";$fault="client";Message;constructor(e){super({name:"UnsupportedOperationException",$fault:"client",...e}),Object.setPrototypeOf(this,yt.prototype),this.Message=e.Message}}class wt extends Ze{name="InactiveQueryException";$fault="client";Message;constructor(e){super({name:"InactiveQueryException",$fault:"client",...e}),Object.setPrototypeOf(this,wt.prototype),this.Message=e.Message}}class Et extends Ze{name="InvalidParameterException";$fault="client";Message;constructor(e){super({name:"InvalidParameterException",$fault:"client",...e}),Object.setPrototypeOf(this,Et.prototype),this.Message=e.Message}}class bt extends Ze{name="QueryIdNotFoundException";$fault="client";Message;constructor(e){super({name:"QueryIdNotFoundException",$fault:"client",...e}),Object.setPrototypeOf(this,bt.prototype),this.Message=e.Message}}class xt extends Ze{name="CannotDelegateManagementAccountException";$fault="client";Message;constructor(e){super({name:"CannotDelegateManagementAccountException",$fault:"client",...e}),Object.setPrototypeOf(this,xt.prototype),this.Message=e.Message}}class vt extends Ze{name="ChannelAlreadyExistsException";$fault="client";Message;constructor(e){super({name:"ChannelAlreadyExistsException",$fault:"client",...e}),Object.setPrototypeOf(this,vt.prototype),this.Message=e.Message}}class St extends Ze{name="ChannelExistsForEDSException";$fault="client";Message;constructor(e){super({name:"ChannelExistsForEDSException",$fault:"client",...e}),Object.setPrototypeOf(this,St.prototype),this.Message=e.Message}}class It extends Ze{name="ChannelMaxLimitExceededException";$fault="client";Message;constructor(e){super({name:"ChannelMaxLimitExceededException",$fault:"client",...e}),Object.setPrototypeOf(this,It.prototype),this.Message=e.Message}}class Mt extends Ze{name="InvalidEventDataStoreCategoryException";$fault="client";Message;constructor(e){super({name:"InvalidEventDataStoreCategoryException",$fault:"client",...e}),Object.setPrototypeOf(this,Mt.prototype),this.Message=e.Message}}class Pt extends Ze{name="InvalidSourceException";$fault="client";Message;constructor(e){super({name:"InvalidSourceException",$fault:"client",...e}),Object.setPrototypeOf(this,Pt.prototype),this.Message=e.Message}}class Ot extends Ze{name="InsufficientEncryptionPolicyException";$fault="client";Message;constructor(e){super({name:"InsufficientEncryptionPolicyException",$fault:"client",...e}),Object.setPrototypeOf(this,Ot.prototype),this.Message=e.Message}}class $t extends Ze{name="InvalidQueryStatementException";$fault="client";Message;constructor(e){super({name:"InvalidQueryStatementException",$fault:"client",...e}),Object.setPrototypeOf(this,$t.prototype),this.Message=e.Message}}class At extends Ze{name="ServiceQuotaExceededException";$fault="client";Message;constructor(e){super({name:"ServiceQuotaExceededException",$fault:"client",...e}),Object.setPrototypeOf(this,At.prototype),this.Message=e.Message}}class Tt extends Ze{name="CloudTrailAccessNotEnabledException";$fault="client";Message;constructor(e){super({name:"CloudTrailAccessNotEnabledException",$fault:"client",...e}),Object.setPrototypeOf(this,Tt.prototype),this.Message=e.Message}}class Nt extends Ze{name="EventDataStoreAlreadyExistsException";$fault="client";Message;constructor(e){super({name:"EventDataStoreAlreadyExistsException",$fault:"client",...e}),Object.setPrototypeOf(this,Nt.prototype),this.Message=e.Message}}class Ct extends Ze{name="EventDataStoreMaxLimitExceededException";$fault="client";Message;constructor(e){super({name:"EventDataStoreMaxLimitExceededException",$fault:"client",...e}),Object.setPrototypeOf(this,Ct.prototype),this.Message=e.Message}}class Rt extends Ze{name="InsufficientDependencyServiceAccessPermissionException";$fault="client";Message;constructor(e){super({name:"InsufficientDependencyServiceAccessPermissionException",$fault:"client",...e}),Object.setPrototypeOf(this,Rt.prototype),this.Message=e.Message}}class Dt extends Ze{name="InvalidEventSelectorsException";$fault="client";Message;constructor(e){super({name:"InvalidEventSelectorsException",$fault:"client",...e}),Object.setPrototypeOf(this,Dt.prototype),this.Message=e.Message}}class kt extends Ze{name="InvalidKmsKeyIdException";$fault="client";Message;constructor(e){super({name:"InvalidKmsKeyIdException",$fault:"client",...e}),Object.setPrototypeOf(this,kt.prototype),this.Message=e.Message}}class jt extends Ze{name="KmsException";$fault="client";Message;constructor(e){super({name:"KmsException",$fault:"client",...e}),Object.setPrototypeOf(this,jt.prototype),this.Message=e.Message}}class _t extends Ze{name="KmsKeyNotFoundException";$fault="client";Message;constructor(e){super({name:"KmsKeyNotFoundException",$fault:"client",...e}),Object.setPrototypeOf(this,_t.prototype),this.Message=e.Message}}class Ft extends Ze{name="OrganizationNotInAllFeaturesModeException";$fault="client";Message;constructor(e){super({name:"OrganizationNotInAllFeaturesModeException",$fault:"client",...e}),Object.setPrototypeOf(this,Ft.prototype),this.Message=e.Message}}class zt extends Ze{name="OrganizationsNotInUseException";$fault="client";Message;constructor(e){super({name:"OrganizationsNotInUseException",$fault:"client",...e}),Object.setPrototypeOf(this,zt.prototype),this.Message=e.Message}}class qt extends Ze{name="CloudTrailInvalidClientTokenIdException";$fault="client";Message;constructor(e){super({name:"CloudTrailInvalidClientTokenIdException",$fault:"client",...e}),Object.setPrototypeOf(this,qt.prototype),this.Message=e.Message}}class Lt extends Ze{name="CloudWatchLogsDeliveryUnavailableException";$fault="client";Message;constructor(e){super({name:"CloudWatchLogsDeliveryUnavailableException",$fault:"client",...e}),Object.setPrototypeOf(this,Lt.prototype),this.Message=e.Message}}class Ut extends Ze{name="InsufficientS3BucketPolicyException";$fault="client";Message;constructor(e){super({name:"InsufficientS3BucketPolicyException",$fault:"client",...e}),Object.setPrototypeOf(this,Ut.prototype),this.Message=e.Message}}class Kt extends Ze{name="InsufficientSnsTopicPolicyException";$fault="client";Message;constructor(e){super({name:"InsufficientSnsTopicPolicyException",$fault:"client",...e}),Object.setPrototypeOf(this,Kt.prototype),this.Message=e.Message}}class Vt extends Ze{name="InvalidCloudWatchLogsLogGroupArnException";$fault="client";Message;constructor(e){super({name:"InvalidCloudWatchLogsLogGroupArnException",$fault:"client",...e}),Object.setPrototypeOf(this,Vt.prototype),this.Message=e.Message}}class Bt extends Ze{name="InvalidCloudWatchLogsRoleArnException";$fault="client";Message;constructor(e){super({name:"InvalidCloudWatchLogsRoleArnException",$fault:"client",...e}),Object.setPrototypeOf(this,Bt.prototype),this.Message=e.Message}}class Ht extends Ze{name="InvalidParameterCombinationException";$fault="client";Message;constructor(e){super({name:"InvalidParameterCombinationException",$fault:"client",...e}),Object.setPrototypeOf(this,Ht.prototype),this.Message=e.Message}}class Wt extends Ze{name="InvalidS3BucketNameException";$fault="client";Message;constructor(e){super({name:"InvalidS3BucketNameException",$fault:"client",...e}),Object.setPrototypeOf(this,Wt.prototype),this.Message=e.Message}}class Gt extends Ze{name="InvalidS3PrefixException";$fault="client";Message;constructor(e){super({name:"InvalidS3PrefixException",$fault:"client",...e}),Object.setPrototypeOf(this,Gt.prototype),this.Message=e.Message}}class Qt extends Ze{name="InvalidSnsTopicNameException";$fault="client";Message;constructor(e){super({name:"InvalidSnsTopicNameException",$fault:"client",...e}),Object.setPrototypeOf(this,Qt.prototype),this.Message=e.Message}}class Zt extends Ze{name="KmsKeyDisabledException";$fault="client";Message;constructor(e){super({name:"KmsKeyDisabledException",$fault:"client",...e}),Object.setPrototypeOf(this,Zt.prototype),this.Message=e.Message}}class Yt extends Ze{name="MaximumNumberOfTrailsExceededException";$fault="client";Message;constructor(e){super({name:"MaximumNumberOfTrailsExceededException",$fault:"client",...e}),Object.setPrototypeOf(this,Yt.prototype),this.Message=e.Message}}class Xt extends Ze{name="S3BucketDoesNotExistException";$fault="client";Message;constructor(e){super({name:"S3BucketDoesNotExistException",$fault:"client",...e}),Object.setPrototypeOf(this,Xt.prototype),this.Message=e.Message}}class Jt extends Ze{name="ThrottlingException";$fault="client";Message;constructor(e){super({name:"ThrottlingException",$fault:"client",...e}),Object.setPrototypeOf(this,Jt.prototype),this.Message=e.Message}}class en extends Ze{name="TrailAlreadyExistsException";$fault="client";Message;constructor(e){super({name:"TrailAlreadyExistsException",$fault:"client",...e}),Object.setPrototypeOf(this,en.prototype),this.Message=e.Message}}class tn extends Ze{name="TrailNotProvidedException";$fault="client";Message;constructor(e){super({name:"TrailNotProvidedException",$fault:"client",...e}),Object.setPrototypeOf(this,tn.prototype),this.Message=e.Message}}class nn extends Ze{name="EventDataStoreFederationEnabledException";$fault="client";Message;constructor(e){super({name:"EventDataStoreFederationEnabledException",$fault:"client",...e}),Object.setPrototypeOf(this,nn.prototype),this.Message=e.Message}}class sn extends Ze{name="EventDataStoreHasOngoingImportException";$fault="client";Message;constructor(e){super({name:"EventDataStoreHasOngoingImportException",$fault:"client",...e}),Object.setPrototypeOf(this,sn.prototype),this.Message=e.Message}}class rn extends Ze{name="EventDataStoreTerminationProtectedException";$fault="client";Message;constructor(e){super({name:"EventDataStoreTerminationProtectedException",$fault:"client",...e}),Object.setPrototypeOf(this,rn.prototype),this.Message=e.Message}}class on extends Ze{name="ResourceARNNotValidException";$fault="client";Message;constructor(e){super({name:"ResourceARNNotValidException",$fault:"client",...e}),Object.setPrototypeOf(this,on.prototype),this.Message=e.Message}}class an extends Ze{name="ResourcePolicyNotFoundException";$fault="client";Message;constructor(e){super({name:"ResourcePolicyNotFoundException",$fault:"client",...e}),Object.setPrototypeOf(this,an.prototype),this.Message=e.Message}}class cn extends Ze{name="InvalidHomeRegionException";$fault="client";Message;constructor(e){super({name:"InvalidHomeRegionException",$fault:"client",...e}),Object.setPrototypeOf(this,cn.prototype),this.Message=e.Message}}class un extends Ze{name="TrailNotFoundException";$fault="client";Message;constructor(e){super({name:"TrailNotFoundException",$fault:"client",...e}),Object.setPrototypeOf(this,un.prototype),this.Message=e.Message}}class ln extends Ze{name="NotOrganizationManagementAccountException";$fault="client";Message;constructor(e){super({name:"NotOrganizationManagementAccountException",$fault:"client",...e}),Object.setPrototypeOf(this,ln.prototype),this.Message=e.Message}}class dn extends Ze{name="ConcurrentModificationException";$fault="client";Message;constructor(e){super({name:"ConcurrentModificationException",$fault:"client",...e}),Object.setPrototypeOf(this,dn.prototype),this.Message=e.Message}}class pn extends Ze{name="GenerateResponseException";$fault="client";Message;constructor(e){super({name:"GenerateResponseException",$fault:"client",...e}),Object.setPrototypeOf(this,pn.prototype),this.Message=e.Message}}class hn extends Ze{name="InvalidEventDataStoreStatusException";$fault="client";Message;constructor(e){super({name:"InvalidEventDataStoreStatusException",$fault:"client",...e}),Object.setPrototypeOf(this,hn.prototype),this.Message=e.Message}}class mn extends Ze{name="ImportNotFoundException";$fault="client";Message;constructor(e){super({name:"ImportNotFoundException",$fault:"client",...e}),Object.setPrototypeOf(this,mn.prototype),this.Message=e.Message}}class fn extends Ze{name="InsightNotEnabledException";$fault="client";Message;constructor(e){super({name:"InsightNotEnabledException",$fault:"client",...e}),Object.setPrototypeOf(this,fn.prototype),this.Message=e.Message}}class gn extends Ze{name="InvalidMaxResultsException";$fault="client";Message;constructor(e){super({name:"InvalidMaxResultsException",$fault:"client",...e}),Object.setPrototypeOf(this,gn.prototype),this.Message=e.Message}}class yn extends Ze{name="InvalidNextTokenException";$fault="client";Message;constructor(e){super({name:"InvalidNextTokenException",$fault:"client",...e}),Object.setPrototypeOf(this,yn.prototype),this.Message=e.Message}}class wn extends Ze{name="InvalidTimeRangeException";$fault="client";Message;constructor(e){super({name:"InvalidTimeRangeException",$fault:"client",...e}),Object.setPrototypeOf(this,wn.prototype),this.Message=e.Message}}class En extends Ze{name="InvalidTokenException";$fault="client";Message;constructor(e){super({name:"InvalidTokenException",$fault:"client",...e}),Object.setPrototypeOf(this,En.prototype),this.Message=e.Message}}class bn extends Ze{name="InvalidDateRangeException";$fault="client";Message;constructor(e){super({name:"InvalidDateRangeException",$fault:"client",...e}),Object.setPrototypeOf(this,bn.prototype),this.Message=e.Message}}class xn extends Ze{name="InvalidQueryStatusException";$fault="client";Message;constructor(e){super({name:"InvalidQueryStatusException",$fault:"client",...e}),Object.setPrototypeOf(this,xn.prototype),this.Message=e.Message}}class vn extends Ze{name="InvalidEventCategoryException";$fault="client";Message;constructor(e){super({name:"InvalidEventCategoryException",$fault:"client",...e}),Object.setPrototypeOf(this,vn.prototype),this.Message=e.Message}}class Sn extends Ze{name="InvalidLookupAttributesException";$fault="client";Message;constructor(e){super({name:"InvalidLookupAttributesException",$fault:"client",...e}),Object.setPrototypeOf(this,Sn.prototype),this.Message=e.Message}}class In extends Ze{name="InsufficientIAMAccessPermissionException";$fault="client";Message;constructor(e){super({name:"InsufficientIAMAccessPermissionException",$fault:"client",...e}),Object.setPrototypeOf(this,In.prototype),this.Message=e.Message}}class Mn extends Ze{name="InvalidInsightSelectorsException";$fault="client";Message;constructor(e){super({name:"InvalidInsightSelectorsException",$fault:"client",...e}),Object.setPrototypeOf(this,Mn.prototype),this.Message=e.Message}}class Pn extends Ze{name="ResourcePolicyNotValidException";$fault="client";Message;constructor(e){super({name:"ResourcePolicyNotValidException",$fault:"client",...e}),Object.setPrototypeOf(this,Pn.prototype),this.Message=e.Message}}class On extends Ze{name="DelegatedAdminAccountLimitExceededException";$fault="client";Message;constructor(e){super({name:"DelegatedAdminAccountLimitExceededException",$fault:"client",...e}),Object.setPrototypeOf(this,On.prototype),this.Message=e.Message}}class $n extends Ze{name="InvalidImportSourceException";$fault="client";Message;constructor(e){super({name:"InvalidImportSourceException",$fault:"client",...e}),Object.setPrototypeOf(this,$n.prototype),this.Message=e.Message}}class An extends Ze{name="MaxConcurrentQueriesException";$fault="client";Message;constructor(e){super({name:"MaxConcurrentQueriesException",$fault:"client",...e}),Object.setPrototypeOf(this,An.prototype),this.Message=e.Message}}const Tn=async(e,t)=>{const n={"content-type":"application/x-amz-json-1.1","x-amz-target":`CloudTrail_20131101.${"LookupEvents"}`};let s;return s=JSON.stringify(dr(e,t)),fr(t,n,"/",void 0,s)},Nn=async(e,t)=>{if(e.statusCode>=300)return Cn(e,t);const n=await(0,Ue.Y2)(e.body,t);let s={};return s=pr(n,t),{$metadata:hr(e),...s}},Cn=async(e,t)=>{const n={...e,body:await(0,Ue.CG)(e.body,t)},s=(0,Ue.cJ)(e,n.body);switch(s){case"ChannelARNInvalidException":case"com.amazonaws.cloudtrail#ChannelARNInvalidException":throw await qn(n,t);case"ChannelNotFoundException":case"com.amazonaws.cloudtrail#ChannelNotFoundException":throw await Kn(n,t);case"CloudTrailARNInvalidException":case"com.amazonaws.cloudtrail#CloudTrailARNInvalidException":throw await Bn(n,t);case"ConflictException":case"com.amazonaws.cloudtrail#ConflictException":throw await Qn(n,t);case"EventDataStoreARNInvalidException":case"com.amazonaws.cloudtrail#EventDataStoreARNInvalidException":throw await Xn(n,t);case"EventDataStoreNotFoundException":case"com.amazonaws.cloudtrail#EventDataStoreNotFoundException":throw await ns(n,t);case"InactiveEventDataStoreException":case"com.amazonaws.cloudtrail#InactiveEventDataStoreException":throw await as(n,t);case"InvalidTagParameterException":case"com.amazonaws.cloudtrail#InvalidTagParameterException":throw await js(n,t);case"InvalidTrailNameException":case"com.amazonaws.cloudtrail#InvalidTrailNameException":throw await zs(n,t);case"NoManagementAccountSLRExistsException":case"com.amazonaws.cloudtrail#NoManagementAccountSLRExistsException":throw await Bs(n,t);case"NotOrganizationMasterAccountException":case"com.amazonaws.cloudtrail#NotOrganizationMasterAccountException":throw await Ws(n,t);case"OperationNotPermittedException":case"com.amazonaws.cloudtrail#OperationNotPermittedException":throw await Gs(n,t);case"ResourceNotFoundException":case"com.amazonaws.cloudtrail#ResourceNotFoundException":throw await Js(n,t);case"ResourceTypeNotSupportedException":case"com.amazonaws.cloudtrail#ResourceTypeNotSupportedException":throw await nr(n,t);case"TagsLimitExceededException":case"com.amazonaws.cloudtrail#TagsLimitExceededException":throw await or(n,t);case"UnsupportedOperationException":case"com.amazonaws.cloudtrail#UnsupportedOperationException":throw await lr(n,t);case"InactiveQueryException":case"com.amazonaws.cloudtrail#InactiveQueryException":throw await is(n,t);case"InvalidParameterException":case"com.amazonaws.cloudtrail#InvalidParameterException":throw await As(n,t);case"QueryIdNotFoundException":case"com.amazonaws.cloudtrail#QueryIdNotFoundException":throw await Ys(n,t);case"ChannelAlreadyExistsException":case"com.amazonaws.cloudtrail#ChannelAlreadyExistsException":throw await zn(n,t);case"ChannelMaxLimitExceededException":case"com.amazonaws.cloudtrail#ChannelMaxLimitExceededException":throw await Un(n,t);case"InvalidEventDataStoreCategoryException":case"com.amazonaws.cloudtrail#InvalidEventDataStoreCategoryException":throw await ws(n,t);case"InvalidSourceException":case"com.amazonaws.cloudtrail#InvalidSourceException":throw await ks(n,t);case"InsufficientEncryptionPolicyException":case"com.amazonaws.cloudtrail#InsufficientEncryptionPolicyException":throw await ls(n,t);case"InvalidQueryStatementException":case"com.amazonaws.cloudtrail#InvalidQueryStatementException":throw await Ts(n,t);case"ServiceQuotaExceededException":case"com.amazonaws.cloudtrail#ServiceQuotaExceededException":throw await rr(n,t);case"CloudTrailAccessNotEnabledException":case"com.amazonaws.cloudtrail#CloudTrailAccessNotEnabledException":throw await Vn(n,t);case"EventDataStoreAlreadyExistsException":case"com.amazonaws.cloudtrail#EventDataStoreAlreadyExistsException":throw await Yn(n,t);case"EventDataStoreMaxLimitExceededException":case"com.amazonaws.cloudtrail#EventDataStoreMaxLimitExceededException":throw await ts(n,t);case"InsufficientDependencyServiceAccessPermissionException":case"com.amazonaws.cloudtrail#InsufficientDependencyServiceAccessPermissionException":throw await us(n,t);case"InvalidEventSelectorsException":case"com.amazonaws.cloudtrail#InvalidEventSelectorsException":throw await bs(n,t);case"InvalidKmsKeyIdException":case"com.amazonaws.cloudtrail#InvalidKmsKeyIdException":throw await Is(n,t);case"KmsException":case"com.amazonaws.cloudtrail#KmsException":throw await qs(n,t);case"KmsKeyNotFoundException":case"com.amazonaws.cloudtrail#KmsKeyNotFoundException":throw await Us(n,t);case"OrganizationNotInAllFeaturesModeException":case"com.amazonaws.cloudtrail#OrganizationNotInAllFeaturesModeException":throw await Qs(n,t);case"OrganizationsNotInUseException":case"com.amazonaws.cloudtrail#OrganizationsNotInUseException":throw await Zs(n,t);case"CloudTrailInvalidClientTokenIdException":case"com.amazonaws.cloudtrail#CloudTrailInvalidClientTokenIdException":throw await Hn(n,t);case"CloudWatchLogsDeliveryUnavailableException":case"com.amazonaws.cloudtrail#CloudWatchLogsDeliveryUnavailableException":throw await Wn(n,t);case"InsufficientS3BucketPolicyException":case"com.amazonaws.cloudtrail#InsufficientS3BucketPolicyException":throw await ps(n,t);case"InsufficientSnsTopicPolicyException":case"com.amazonaws.cloudtrail#InsufficientSnsTopicPolicyException":throw await hs(n,t);case"InvalidCloudWatchLogsLogGroupArnException":case"com.amazonaws.cloudtrail#InvalidCloudWatchLogsLogGroupArnException":throw await ms(n,t);case"InvalidCloudWatchLogsRoleArnException":case"com.amazonaws.cloudtrail#InvalidCloudWatchLogsRoleArnException":throw await fs(n,t);case"InvalidParameterCombinationException":case"com.amazonaws.cloudtrail#InvalidParameterCombinationException":throw await $s(n,t);case"InvalidS3BucketNameException":case"com.amazonaws.cloudtrail#InvalidS3BucketNameException":throw await Cs(n,t);case"InvalidS3PrefixException":case"com.amazonaws.cloudtrail#InvalidS3PrefixException":throw await Rs(n,t);case"InvalidSnsTopicNameException":case"com.amazonaws.cloudtrail#InvalidSnsTopicNameException":throw await Ds(n,t);case"KmsKeyDisabledException":case"com.amazonaws.cloudtrail#KmsKeyDisabledException":throw await Ls(n,t);case"MaximumNumberOfTrailsExceededException":case"com.amazonaws.cloudtrail#MaximumNumberOfTrailsExceededException":throw await Vs(n,t);case"S3BucketDoesNotExistException":case"com.amazonaws.cloudtrail#S3BucketDoesNotExistException":throw await sr(n,t);case"ThrottlingException":case"com.amazonaws.cloudtrail#ThrottlingException":throw await ar(n,t);case"TrailAlreadyExistsException":case"com.amazonaws.cloudtrail#TrailAlreadyExistsException":throw await ir(n,t);case"TrailNotProvidedException":case"com.amazonaws.cloudtrail#TrailNotProvidedException":throw await ur(n,t);case"ChannelExistsForEDSException":case"com.amazonaws.cloudtrail#ChannelExistsForEDSException":throw await Ln(n,t);case"EventDataStoreFederationEnabledException":case"com.amazonaws.cloudtrail#EventDataStoreFederationEnabledException":throw await Jn(n,t);case"EventDataStoreHasOngoingImportException":case"com.amazonaws.cloudtrail#EventDataStoreHasOngoingImportException":throw await es(n,t);case"EventDataStoreTerminationProtectedException":case"com.amazonaws.cloudtrail#EventDataStoreTerminationProtectedException":throw await ss(n,t);case"ResourceARNNotValidException":case"com.amazonaws.cloudtrail#ResourceARNNotValidException":throw await Xs(n,t);case"ResourcePolicyNotFoundException":case"com.amazonaws.cloudtrail#ResourcePolicyNotFoundException":throw await er(n,t);case"InvalidHomeRegionException":case"com.amazonaws.cloudtrail#InvalidHomeRegionException":throw await xs(n,t);case"TrailNotFoundException":case"com.amazonaws.cloudtrail#TrailNotFoundException":throw await cr(n,t);case"AccountNotFoundException":case"com.amazonaws.cloudtrail#AccountNotFoundException":throw await kn(n,t);case"AccountNotRegisteredException":case"com.amazonaws.cloudtrail#AccountNotRegisteredException":throw await jn(n,t);case"NotOrganizationManagementAccountException":case"com.amazonaws.cloudtrail#NotOrganizationManagementAccountException":throw await Hs(n,t);case"AccessDeniedException":case"com.amazonaws.cloudtrail#AccessDeniedException":throw await Rn(n,t);case"ConcurrentModificationException":case"com.amazonaws.cloudtrail#ConcurrentModificationException":throw await Gn(n,t);case"GenerateResponseException":case"com.amazonaws.cloudtrail#GenerateResponseException":throw await rs(n,t);case"InvalidEventDataStoreStatusException":case"com.amazonaws.cloudtrail#InvalidEventDataStoreStatusException":throw await Es(n,t);case"ImportNotFoundException":case"com.amazonaws.cloudtrail#ImportNotFoundException":throw await os(n,t);case"InsightNotEnabledException":case"com.amazonaws.cloudtrail#InsightNotEnabledException":throw await cs(n,t);case"InvalidMaxResultsException":case"com.amazonaws.cloudtrail#InvalidMaxResultsException":throw await Ps(n,t);case"InvalidNextTokenException":case"com.amazonaws.cloudtrail#InvalidNextTokenException":throw await Os(n,t);case"InvalidTimeRangeException":case"com.amazonaws.cloudtrail#InvalidTimeRangeException":throw await _s(n,t);case"InvalidTokenException":case"com.amazonaws.cloudtrail#InvalidTokenException":throw await Fs(n,t);case"InvalidDateRangeException":case"com.amazonaws.cloudtrail#InvalidDateRangeException":throw await gs(n,t);case"InvalidQueryStatusException":case"com.amazonaws.cloudtrail#InvalidQueryStatusException":throw await Ns(n,t);case"InvalidEventCategoryException":case"com.amazonaws.cloudtrail#InvalidEventCategoryException":throw await ys(n,t);case"InvalidLookupAttributesException":case"com.amazonaws.cloudtrail#InvalidLookupAttributesException":throw await Ms(n,t);case"InsufficientIAMAccessPermissionException":case"com.amazonaws.cloudtrail#InsufficientIAMAccessPermissionException":throw await ds(n,t);case"InvalidInsightSelectorsException":case"com.amazonaws.cloudtrail#InvalidInsightSelectorsException":throw await Ss(n,t);case"ResourcePolicyNotValidException":case"com.amazonaws.cloudtrail#ResourcePolicyNotValidException":throw await tr(n,t);case"AccountRegisteredException":case"com.amazonaws.cloudtrail#AccountRegisteredException":throw await _n(n,t);case"CannotDelegateManagementAccountException":case"com.amazonaws.cloudtrail#CannotDelegateManagementAccountException":throw await Fn(n,t);case"DelegatedAdminAccountLimitExceededException":case"com.amazonaws.cloudtrail#DelegatedAdminAccountLimitExceededException":throw await Zn(n,t);case"AccountHasOngoingImportException":case"com.amazonaws.cloudtrail#AccountHasOngoingImportException":throw await Dn(n,t);case"InvalidImportSourceException":case"com.amazonaws.cloudtrail#InvalidImportSourceException":throw await vs(n,t);case"MaxConcurrentQueriesException":case"com.amazonaws.cloudtrail#MaxConcurrentQueriesException":throw await Ks(n,t);default:const r=n.body;return mr({output:e,parsedBody:r,errorCode:s})}},Rn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Ye({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Dn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Xe({$metadata:hr(e),...s});return(0,Be.M)(r,n)},kn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Je({$metadata:hr(e),...s});return(0,Be.M)(r,n)},jn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new et({$metadata:hr(e),...s});return(0,Be.M)(r,n)},_n=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new tt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Fn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new xt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},zn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new vt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},qn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new nt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Ln=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new St({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Un=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new It({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Kn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new st({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Vn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Tt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Bn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new rt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Hn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new qt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Wn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Lt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Gn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new dn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Qn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new ot({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Zn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new On({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Yn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Nt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Xn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new at({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Jn=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new nn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},es=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new sn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},ts=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Ct({$metadata:hr(e),...s});return(0,Be.M)(r,n)},ns=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new it({$metadata:hr(e),...s});return(0,Be.M)(r,n)},ss=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new rn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},rs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new pn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},os=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new mn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},as=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new ct({$metadata:hr(e),...s});return(0,Be.M)(r,n)},is=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new wt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},cs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new fn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},us=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Rt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},ls=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Ot({$metadata:hr(e),...s});return(0,Be.M)(r,n)},ds=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new In({$metadata:hr(e),...s});return(0,Be.M)(r,n)},ps=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Ut({$metadata:hr(e),...s});return(0,Be.M)(r,n)},hs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Kt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},ms=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Vt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},fs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Bt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},gs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new bn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},ys=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new vn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},ws=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Mt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Es=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new hn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},bs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Dt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},xs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new cn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},vs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new $n({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Ss=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Mn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Is=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new kt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Ms=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Sn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Ps=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new gn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Os=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new yn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},$s=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Ht({$metadata:hr(e),...s});return(0,Be.M)(r,n)},As=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Et({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Ts=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new $t({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Ns=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new xn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Cs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Wt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Rs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Gt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Ds=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Qt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},ks=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Pt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},js=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new ut({$metadata:hr(e),...s});return(0,Be.M)(r,n)},_s=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new wn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Fs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new En({$metadata:hr(e),...s});return(0,Be.M)(r,n)},zs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new lt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},qs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new jt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Ls=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Zt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Us=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new _t({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Ks=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new An({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Vs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Yt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Bs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new dt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Hs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new ln({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Ws=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new pt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Gs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new ht({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Qs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Ft({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Zs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new zt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Ys=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new bt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Xs=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new on({$metadata:hr(e),...s});return(0,Be.M)(r,n)},Js=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new mt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},er=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new an({$metadata:hr(e),...s});return(0,Be.M)(r,n)},tr=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Pn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},nr=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new ft({$metadata:hr(e),...s});return(0,Be.M)(r,n)},sr=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Xt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},rr=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new At({$metadata:hr(e),...s});return(0,Be.M)(r,n)},or=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new gt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},ar=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new Jt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},ir=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new en({$metadata:hr(e),...s});return(0,Be.M)(r,n)},cr=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new un({$metadata:hr(e),...s});return(0,Be.M)(r,n)},ur=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new tn({$metadata:hr(e),...s});return(0,Be.M)(r,n)},lr=async(e,t)=>{const n=e.body,s=(0,Ve.S)(n),r=new yt({$metadata:hr(e),...s});return(0,Be.M)(r,n)},dr=(e,t)=>(0,He.s)(e,{EndTime:e=>e.getTime()/1e3,EventCategory:[],LookupAttributes:Ve.S,MaxResults:[],NextToken:[],StartTime:e=>e.getTime()/1e3}),pr=(e,t)=>(0,He.s)(e,{Events:e=>(e=>{const t=(e||[]).filter(e=>null!=e).map(e=>(e=>(0,He.s)(e,{AccessKeyId:We.lK,CloudTrailEvent:We.lK,EventId:We.lK,EventName:We.lK,EventSource:We.lK,EventTime:e=>(0,We.Y0)((0,Ge.l3)((0,We.r$)(e))),ReadOnly:We.lK,Resources:Ve.S,Username:We.lK}))(e));return t})(e),NextToken:We.lK}),hr=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),mr=(0,Qe.j)(Ze),fr=async(e,t,n,s,r)=>{const{hostname:o,protocol:a="https",port:i,path:c}=await e.endpoint(),u={protocol:a,hostname:o,port:i,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==s&&(u.hostname=s),void 0!==r&&(u.body=r),new Ke.K(u)};class gr extends(Le.u.classBuilder().ep(I).m(function(e,t,n,s){return[(0,qe.TM)(n,this.serialize,this.deserialize),(0,ze.r)(n,e.getEndpointParameterInstructions())]}).s("CloudTrail_20131101","LookupEvents",{}).n("CloudTrailClient","LookupEventsCommand").f(void 0,void 0).ser(Tn).de(Nn).build()){}var yr=function(e){var t=JSON.parse(e.CloudTrailEvent).userIdentity.arn.split("/").slice(1),n=t[0],s=t[1];this.iamRole=n,this.stsSession=s,this.eventTime=e.EventTime},wr=function(){function e(){this.cloudTrailClient=new Fe({})}return e.prototype.retrieveQuickSightUserEvents=function(e){return t=this,n=void 0,r=function(){var t,n,s,r;return function(e,t){var n,s,r,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=i(0),a.throw=i(1),a.return=i(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,i[0]&&(o=0)),o;)try{if(n=1,s&&(r=2&i[0]?s.return:i[0]?s.throw||((r=s.return)&&r.call(s),0):s.next)&&!(r=r.call(s,i[1])).done)return r;switch(s=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,s=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){o.label=i[1];break}if(6===i[0]&&o.label<r[1]){o.label=r[1],r=i;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(i);break}r[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],s=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}(this,function(o){switch(o.label){case 0:t=[],n=null,o.label=1;case 1:return s=new gr({LookupAttributes:[{AttributeKey:"EventSource",AttributeValue:"quicksight.amazonaws.com"}],StartTime:e,NextToken:n}),[4,this.cloudTrailClient.send(s)];case 2:r=o.sent(),n=r.NextToken,r.Events.forEach(function(e){return t.push(new yr(e))}),o.label=3;case 3:if(n)return[3,1];o.label=4;case 4:return[2,t]}})},new((s=void 0)||(s=Promise))(function(e,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function i(e){try{c(r.throw(e))}catch(e){o(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof s?n:new s(function(e){e(n)})).then(a,i)}c((r=r.apply(t,n||[])).next())});var t,n,s,r},e.prototype.getLastAccessDate=function(e,t){var n=t.filter(function(t){return e.iamRole===t.iamRole&&e.stsSession===t.stsSession});if(0===n.length)return console.debug("".concat(e.iamRole,"/").concat(e.stsSession," no CloudTrail events found")),new Date(0);var s=n.sort(function(e,t){return e.eventTime<=t.eventTime?1:-1})[0];return console.debug("".concat(e.iamRole,"/").concat(e.stsSession," latest event: ").concat(JSON.stringify(s,null,1))),s.eventTime},e}();const Er=async(e,t,n)=>({operation:(0,b.u)(t).operation,region:await(0,x.t)(e.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()}),br=e=>{const t=[];return e.operation,t.push(function(e){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"monitoring",region:e.region},propertiesExtractor:(e,t)=>({signingProperties:{config:e,context:t}})}}(e)),t},xr={UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}};var vr=s(5938),Sr=s(3466);const Ir={environmentVariableSelector:e=>(0,vr.Q)(e,"AWS_DISABLE_REQUEST_COMPRESSION",Sr.c.ENV),configFileSelector:e=>(0,vr.Q)(e,"disable_request_compression",Sr.c.CONFIG),default:!1},Mr=(e,t,n)=>{if(!(t in e))return;const s=parseInt(e[t],10);if(Number.isNaN(s))throw new TypeError(`Cannot load ${n} '${t}'. Expected number, got '${e[t]}'.`);return s},Pr={environmentVariableSelector:e=>Mr(e,"AWS_REQUEST_MIN_COMPRESSION_SIZE_BYTES",Sr.c.ENV),configFileSelector:e=>Mr(e,"request_min_compression_size_bytes",Sr.c.CONFIG),default:10240},Or="required",$r="fn",Ar="argv",Tr="ref",Nr="properties",Cr="headers",Rr=!0,Dr="isSet",kr="booleanEquals",jr="error",_r="endpoint",Fr="tree",zr="PartitionResult",qr={[Or]:!0,default:!1,type:"Boolean"},Lr={[Or]:!1,type:"String"},Ur={[Tr]:"Endpoint"},Kr={[$r]:kr,[Ar]:[{[Tr]:"UseFIPS"},!0]},Vr={[Tr]:"UseFIPS"},Br={[$r]:kr,[Ar]:[{[Tr]:"UseDualStack"},!0]},Hr={},Wr={[$r]:"stringEquals",[Ar]:[{[$r]:"getAttr",[Ar]:[{[Tr]:zr},"name"]},"aws-us-gov"]},Gr={[$r]:kr,[Ar]:[{[Tr]:"UseDualStack"},!1]},Qr={url:"https://monitoring.{Region}.{PartitionResult#dnsSuffix}",[Nr]:{},[Cr]:{}},Zr={url:"https://monitoring.{Region}.{PartitionResult#dualStackDnsSuffix}",[Nr]:{},[Cr]:{}},Yr={[$r]:"getAttr",[Ar]:[{[Tr]:zr},"supportsFIPS"]},Xr={[$r]:kr,[Ar]:[!0,{[$r]:"getAttr",[Ar]:[{[Tr]:zr},"supportsDualStack"]}]},Jr=[{[Tr]:"Region"}],eo={version:"1.0",parameters:{UseDualStack:qr,UseFIPS:qr,Endpoint:Lr,Region:Lr},rules:[{conditions:[{[$r]:Dr,[Ar]:[Ur]}],rules:[{conditions:[Kr],error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:jr},{rules:[{conditions:[Br],error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:jr},{endpoint:{url:Ur,[Nr]:Hr,[Cr]:Hr},type:_r}],type:Fr}],type:Fr},{rules:[{conditions:[{[$r]:Dr,[Ar]:Jr}],rules:[{conditions:[{[$r]:"aws.partition",[Ar]:Jr,assign:zr}],rules:[{conditions:[Wr,Kr,Gr],endpoint:Qr,type:_r},{conditions:[Wr,Kr,Br],endpoint:Zr,type:_r},{conditions:[Kr,Br],rules:[{conditions:[{[$r]:kr,[Ar]:[Rr,Yr]},Xr],rules:[{endpoint:{url:"https://monitoring-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",[Nr]:Hr,[Cr]:Hr},type:_r}],type:Fr},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:jr}],type:Fr},{conditions:[Kr,Gr],rules:[{conditions:[{[$r]:kr,[Ar]:[Yr,Rr]}],rules:[{endpoint:{url:"https://monitoring-fips.{Region}.{PartitionResult#dnsSuffix}",[Nr]:Hr,[Cr]:Hr},type:_r}],type:Fr},{error:"FIPS is enabled but this partition does not support FIPS",type:jr}],type:Fr},{conditions:[{[$r]:kr,[Ar]:[Vr,!1]},Br],rules:[{conditions:[Xr],rules:[{endpoint:Zr,type:_r}],type:Fr},{error:"DualStack is enabled but this partition does not support DualStack",type:jr}],type:Fr},{endpoint:Qr,type:_r}],type:Fr}],type:Fr},{error:"Invalid Configuration: Missing Region",type:jr}],type:Fr}]},to=new ne.k({size:50,params:["Endpoint","Region","UseDualStack","UseFIPS"]}),no=(e,t={})=>to.get(e,()=>(0,se.s)(eo,{endpointParams:e,logger:t.logger}));re.m.aws=te.UF;class so extends w.K{config;constructor(...[e]){const t=(e=>{(0,De.I)(process.version);const t=(0,Re.I)(e),n=()=>t().then(Ce.l),s=(e=>({apiVersion:"2010-08-01",base64Decoder:e?.base64Decoder??Y.E,base64Encoder:e?.base64Encoder??X.n,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??no,extensions:e?.extensions??[],httpAuthSchemeProvider:e?.httpAuthSchemeProvider??br,httpAuthSchemes:e?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:e=>e.getIdentityProvider("aws.auth#sigv4"),signer:new G.f2}],logger:e?.logger??new Q.N,serviceId:e?.serviceId??"CloudWatch",urlParser:e?.urlParser??Z.D,utf8Decoder:e?.utf8Decoder??J.a,utf8Encoder:e?.utf8Encoder??ee.P}))(e);(0,M.I)(process.version);const r={profile:e?.profile,logger:s.logger};return{...s,...e,runtime:"node",defaultsMode:t,authSchemePreference:e?.authSchemePreference??(0,K.Z)(P.$,r),bodyLengthChecker:e?.bodyLengthChecker??H.n,credentialDefaultProvider:e?.credentialDefaultProvider??D,defaultUserAgentProvider:e?.defaultUserAgentProvider??(0,_.pf)({serviceId:s.serviceId,clientVersion:"3.896.0"}),disableRequestCompression:e?.disableRequestCompression??(0,K.Z)(Ir,e),maxAttempts:e?.maxAttempts??(0,K.Z)(g.qs,e),region:e?.region??(0,K.Z)(z.GG,{...z.zH,...r}),requestHandler:V.$.create(e?.requestHandler??n),requestMinCompressionSizeBytes:e?.requestMinCompressionSizeBytes??(0,K.Z)(Pr,e),retryMode:e?.retryMode??(0,K.Z)({...g.kN,default:async()=>(await n()).retryMode||W.L0},e),sha256:e?.sha256??U.V.bind(null,"sha256"),streamCollector:e?.streamCollector??B.k,useDualstackEndpoint:e?.useDualstackEndpoint??(0,K.Z)(q.e$,r),useFipsEndpoint:e?.useFipsEndpoint??(0,K.Z)(L.Ko,r),userAgentAppId:e?.userAgentAppId??(0,K.Z)(F.hV,r)}})(e||{});super(t),this.initConfig=t;const n=(s=t,Object.assign(s,{useDualstackEndpoint:s.useDualstackEndpoint??!1,useFipsEndpoint:s.useFipsEndpoint??!1,defaultSigningName:"monitoring"}));var s;const r=(0,c.D)(n),w=(0,g.$z)(r),b=(0,l.T)(w),v=(0,o.OV)(b),S=((e,t)=>{const n=Object.assign((0,ke.R)(e),(0,_e.xA)(e),(0,je.e)(e),(e=>{const t=e.httpAuthSchemes;let n=e.httpAuthSchemeProvider,s=e.credentials;return{setHttpAuthScheme(e){const n=t.findIndex(t=>t.schemeId===e.schemeId);-1===n?t.push(e):t.splice(n,1,e)},httpAuthSchemes:()=>t,setHttpAuthSchemeProvider(e){n=e},httpAuthSchemeProvider:()=>n,setCredentials(e){s=e},credentials:()=>s}})(e));return t.forEach(e=>e.configure(n)),Object.assign(e,(0,ke.$)(n),(0,_e.uv)(n),(0,je.j)(n),{httpAuthSchemes:(s=n).httpAuthSchemes(),httpAuthSchemeProvider:s.httpAuthSchemeProvider(),credentials:s.credentials()});var s})((e=>{const{disableRequestCompression:t,requestMinCompressionSizeBytes:n}=e;return Object.assign(e,{disableRequestCompression:(0,x.t)(t),requestMinCompressionSizeBytes:async()=>{const e=await(0,x.t)(n)();if(e<0||e>10485760)throw new RangeError(`The value for requestMinCompressionSizeBytes must be between 0 and 10485760 inclusive. The provided value ${e} is outside this range."`);return e}})})((e=>{const t=(0,E.h)(e);return Object.assign(t,{authSchemePreference:(0,x.t)(e.authSchemePreference??[])})})((0,f.C)(v))),e?.extensions||[]);this.config=S,this.middlewareStack.use((0,u.sM)(this.config)),this.middlewareStack.use((0,y.ey)(this.config)),this.middlewareStack.use((0,m.vK)(this.config)),this.middlewareStack.use((0,o.TC)(this.config)),this.middlewareStack.use((0,a.Y7)(this.config)),this.middlewareStack.use((0,i.n)(this.config)),this.middlewareStack.use((0,d.w)(this.config,{httpAuthSchemeParametersProvider:Er,identityProviderConfigProvider:async e=>new p.h({"aws.auth#sigv4":e.credentials})})),this.middlewareStack.use((0,h.l)(this.config))}destroy(){super.destroy()}}var ro=s(2067);const oo=require("zlib"),ao=async e=>e.pipe((0,oo.createGzip)());var io=s(4424);const co=(0,s(9023).promisify)(oo.gzip),uo=async e=>{try{const t=await co((0,io.F)(e||""));return(0,io.F)(t)}catch(e){throw new Error("Failure during compression: "+e.message)}};var lo;!function(e){e.GZIP="gzip"}(lo||(lo={}));const po=[lo.GZIP];var ho=s(3695);const mo=e=>void 0!==e&&"string"!=typeof e&&!ArrayBuffer.isView(e)&&!(0,ho.m)(e),fo={name:"compressionMiddleware",step:"build",tags:["REQUEST_BODY_COMPRESSION","GZIP"],override:!0,priority:"high"},go=(e,t)=>({applyToStack:n=>{n.add(((e,t)=>(n,s)=>async r=>{if(!Ke.K.isInstance(r.request))return n(r);if(await e.disableRequestCompression())return n(r);const{request:o}=r,{body:a,headers:i}=o,{encodings:c,streamRequiresLength:u}=t;let l=a,d=i;for(const t of c)if(po.includes(t)){let n=!1;if(mo(a)){if(u)throw new Error("Compression is not supported for streaming blobs that require a length.");l=await ao(a),n=!0}else{const t=e.bodyLengthChecker(a),s=await e.requestMinCompressionSizeBytes();t&&t>=s&&(l=await uo(a),n=!0)}if(n){d=i["content-encoding"]?{...i,"content-encoding":`${i["content-encoding"]}, ${t}`}:{...i,"content-encoding":t},d["content-encoding"].includes("gzip")&&(0,ro.J)(s,"GZIP_REQUEST_COMPRESSION","L");break}}return n({...r,request:{...o,body:l,headers:d}})})(e,t),fo)}});var yo=s(5904),wo=s(1071);const Eo=e=>{if(e!=e)return"NaN";switch(e){case 1/0:return"Infinity";case-1/0:return"-Infinity";default:return e}};var bo=s(7916);class xo extends Be.T{constructor(e){super(e),Object.setPrototypeOf(this,xo.prototype)}}class vo extends xo{name="ConcurrentModificationException";$fault="client";Message;constructor(e){super({name:"ConcurrentModificationException",$fault:"client",...e}),Object.setPrototypeOf(this,vo.prototype),this.Message=e.Message}}class So extends xo{name="ConflictException";$fault="client";Message;constructor(e){super({name:"ConflictException",$fault:"client",...e}),Object.setPrototypeOf(this,So.prototype),this.Message=e.Message}}class Io extends xo{name="DashboardInvalidInputError";$fault="client";dashboardValidationMessages;constructor(e){super({name:"DashboardInvalidInputError",$fault:"client",...e}),Object.setPrototypeOf(this,Io.prototype),this.dashboardValidationMessages=e.dashboardValidationMessages}}class Mo extends xo{name="ResourceNotFound";$fault="client";constructor(e){super({name:"ResourceNotFound",$fault:"client",...e}),Object.setPrototypeOf(this,Mo.prototype)}}class Po extends xo{name="InternalServiceFault";$fault="server";Message;constructor(e){super({name:"InternalServiceFault",$fault:"server",...e}),Object.setPrototypeOf(this,Po.prototype),this.Message=e.Message}}class Oo extends xo{name="InvalidParameterCombinationException";$fault="client";constructor(e){super({name:"InvalidParameterCombinationException",$fault:"client",...e}),Object.setPrototypeOf(this,Oo.prototype)}}class $o extends xo{name="InvalidParameterValueException";$fault="client";constructor(e){super({name:"InvalidParameterValueException",$fault:"client",...e}),Object.setPrototypeOf(this,$o.prototype)}}class Ao extends xo{name="MissingRequiredParameterException";$fault="client";constructor(e){super({name:"MissingRequiredParameterException",$fault:"client",...e}),Object.setPrototypeOf(this,Ao.prototype)}}class To extends xo{name="ResourceNotFoundException";$fault="client";ResourceType;ResourceId;Message;constructor(e){super({name:"ResourceNotFoundException",$fault:"client",...e}),Object.setPrototypeOf(this,To.prototype),this.ResourceType=e.ResourceType,this.ResourceId=e.ResourceId,this.Message=e.Message}}class No extends xo{name="InvalidNextToken";$fault="client";constructor(e){super({name:"InvalidNextToken",$fault:"client",...e}),Object.setPrototypeOf(this,No.prototype)}}class Co extends xo{name="LimitExceededException";$fault="client";Message;constructor(e){super({name:"LimitExceededException",$fault:"client",...e}),Object.setPrototypeOf(this,Co.prototype),this.Message=e.Message}}class Ro extends xo{name="LimitExceededFault";$fault="client";constructor(e){super({name:"LimitExceededFault",$fault:"client",...e}),Object.setPrototypeOf(this,Ro.prototype)}}class Do extends xo{name="InvalidFormatFault";$fault="client";constructor(e){super({name:"InvalidFormatFault",$fault:"client",...e}),Object.setPrototypeOf(this,Do.prototype)}}const ko=async(e,t)=>{const n=xa;let s;return s=ei({...ta(e,t),[Sa]:Fa,[Ga]:va}),ba(t,n,"/",void 0,s)},jo=async(e,t)=>e.statusCode>=300?_o(e,t):(await(0,wo.P)(e.body,t),{$metadata:wa(e)}),_o=async(e,t)=>{const n={...e,body:await(0,yo.FI)(e.body,t)},s=ti(e,n.body);switch(s){case"ResourceNotFound":case"com.amazonaws.cloudwatch#ResourceNotFound":throw await Qo(n,t);case"InternalServiceError":case"com.amazonaws.cloudwatch#InternalServiceFault":throw await Lo(n,t);case"InvalidParameterCombination":case"com.amazonaws.cloudwatch#InvalidParameterCombinationException":throw await Vo(n,t);case"InvalidParameterValue":case"com.amazonaws.cloudwatch#InvalidParameterValueException":throw await Bo(n,t);case"MissingParameter":case"com.amazonaws.cloudwatch#MissingRequiredParameterException":throw await Go(n,t);case"ResourceNotFoundException":case"com.amazonaws.cloudwatch#ResourceNotFoundException":throw await Zo(n,t);case"ConflictException":case"com.amazonaws.cloudwatch#ConflictException":throw await zo(n,t);case"InvalidNextToken":case"com.amazonaws.cloudwatch#InvalidNextToken":throw await Ko(n,t);case"LimitExceededException":case"com.amazonaws.cloudwatch#LimitExceededException":throw await Ho(n,t);case"LimitExceeded":case"com.amazonaws.cloudwatch#LimitExceededFault":throw await Wo(n,t);case"InvalidParameterInput":case"com.amazonaws.cloudwatch#DashboardInvalidInputError":throw await qo(n,t);case"ConcurrentModificationException":case"com.amazonaws.cloudwatch#ConcurrentModificationException":throw await Fo(n,t);case"InvalidFormat":case"com.amazonaws.cloudwatch#InvalidFormatFault":throw await Uo(n,t);default:const r=n.body;return Ea({output:e,parsedBody:r.Error,errorCode:s})}},Fo=async(e,t)=>{const n=e.body,s=ra(n.Error,t),r=new vo({$metadata:wa(e),...s});return(0,Be.M)(r,n)},zo=async(e,t)=>{const n=e.body,s=oa(n.Error,t),r=new So({$metadata:wa(e),...s});return(0,Be.M)(r,n)},qo=async(e,t)=>{const n=e.body,s=aa(n.Error,t),r=new Io({$metadata:wa(e),...s});return(0,Be.M)(r,n)},Lo=async(e,t)=>{const n=e.body,s=ca(n.Error,t),r=new Po({$metadata:wa(e),...s});return(0,Be.M)(r,n)},Uo=async(e,t)=>{const n=e.body,s=ua(n.Error,t),r=new Do({$metadata:wa(e),...s});return(0,Be.M)(r,n)},Ko=async(e,t)=>{const n=e.body,s=la(n.Error,t),r=new No({$metadata:wa(e),...s});return(0,Be.M)(r,n)},Vo=async(e,t)=>{const n=e.body,s=da(n.Error,t),r=new Oo({$metadata:wa(e),...s});return(0,Be.M)(r,n)},Bo=async(e,t)=>{const n=e.body,s=pa(n.Error,t),r=new $o({$metadata:wa(e),...s});return(0,Be.M)(r,n)},Ho=async(e,t)=>{const n=e.body,s=ha(n.Error,t),r=new Co({$metadata:wa(e),...s});return(0,Be.M)(r,n)},Wo=async(e,t)=>{const n=e.body,s=ma(n.Error,t),r=new Ro({$metadata:wa(e),...s});return(0,Be.M)(r,n)},Go=async(e,t)=>{const n=e.body,s=fa(n.Error,t),r=new Ao({$metadata:wa(e),...s});return(0,Be.M)(r,n)},Qo=async(e,t)=>{const n=e.body,s=ga(n.Error,t),r=new Mo({$metadata:wa(e),...s});return(0,Be.M)(r,n)},Zo=async(e,t)=>{const n=e.body,s=ya(n.Error,t),r=new To({$metadata:wa(e),...s});return(0,Be.M)(r,n)},Yo=(e,t)=>{const n={};return null!=e[_a]&&(n[_a]=e[_a]),null!=e[Qa]&&(n[Qa]=e[Qa]),n},Xo=(e,t)=>{const n={};if(null!=e[$a]){const t=(e=>{const t={};if(null!=e[Ta]){const n=(e=>{const t={};let n=1;return Object.keys(e).filter(t=>null!=e[t]).forEach(s=>{t[`entry.${n}.key`]=s,t[`entry.${n}.value`]=e[s],n++}),t})(e[Ta]);Object.entries(n).forEach(([e,n])=>{t[`KeyAttributes.${e}`]=n})}if(null!=e[Ia]){const n=(e=>{const t={};let n=1;return Object.keys(e).filter(t=>null!=e[t]).forEach(s=>{t[`entry.${n}.key`]=s,t[`entry.${n}.value`]=e[s],n++}),t})(e[Ia]);Object.entries(n).forEach(([e,n])=>{t[`Attributes.${e}`]=n})}return t})(e[$a]);Object.entries(t).forEach(([e,t])=>{n[`Entity.${e}`]=t})}if(null!=e[Na]){const s=Jo(e[Na],t);0===e[Na]?.length&&(n.MetricData=[]),Object.entries(s).forEach(([e,t])=>{n[`MetricData.${e}`]=t})}return n},Jo=(e,t)=>{const n={};let s=1;for(const r of e){if(null===r)continue;const e=ea(r,t);Object.entries(e).forEach(([e,t])=>{n[`member.${s}.${e}`]=t}),s++}return n},ea=(e,t)=>{const n={};if(null!=e[Ca]&&(n[Ca]=e[Ca]),null!=e[Pa]){const t=(e=>{const t={};let n=1;for(const s of e){if(null===s)continue;const e=Yo(s);Object.entries(e).forEach(([e,s])=>{t[`member.${n}.${e}`]=s}),n++}return t})(e[Pa]);0===e[Pa]?.length&&(n.Dimensions=[]),Object.entries(t).forEach(([e,t])=>{n[`Dimensions.${e}`]=t})}if(null!=e[Ha]&&(n[Ha]=e[Ha].toISOString().replace(".000Z","Z")),null!=e[Qa]&&(n[Qa]=Eo(e[Qa])),null!=e[Va]){const s=na(e[Va],t);Object.entries(s).forEach(([e,t])=>{n[`StatisticValues.${e}`]=t})}if(null!=e[Za]){const s=sa(e[Za],t);0===e[Za]?.length&&(n.Values=[]),Object.entries(s).forEach(([e,t])=>{n[`Values.${e}`]=t})}if(null!=e[Ma]){const t=(e=>{const t={};let n=1;for(const s of e)null!==s&&(t[`member.${n}`]=Eo(s),n++);return t})(e[Ma]);0===e[Ma]?.length&&(n.Counts=[]),Object.entries(t).forEach(([e,t])=>{n[`Counts.${e}`]=t})}return null!=e[Wa]&&(n[Wa]=e[Wa]),null!=e[Ka]&&(n[Ka]=e[Ka]),n},ta=(e,t)=>{const n={};if(null!=e[ja]&&(n[ja]=e[ja]),null!=e[Na]){const s=Jo(e[Na],t);0===e[Na]?.length&&(n.MetricData=[]),Object.entries(s).forEach(([e,t])=>{n[`MetricData.${e}`]=t})}if(null!=e[Aa]){const s=((e,t)=>{const n={};let s=1;for(const r of e){if(null===r)continue;const e=Xo(r,t);Object.entries(e).forEach(([e,t])=>{n[`member.${s}.${e}`]=t}),s++}return n})(e[Aa],t);0===e[Aa]?.length&&(n.EntityMetricData=[]),Object.entries(s).forEach(([e,t])=>{n[`EntityMetricData.${e}`]=t})}return null!=e[Ua]&&(n[Ua]=e[Ua]),n},na=(e,t)=>{const n={};return null!=e[La]&&(n[La]=Eo(e[La])),null!=e[Ba]&&(n[Ba]=Eo(e[Ba])),null!=e[ka]&&(n[ka]=Eo(e[ka])),null!=e[Ra]&&(n[Ra]=Eo(e[Ra])),n},sa=(e,t)=>{const n={};let s=1;for(const t of e)null!==t&&(n[`member.${s}`]=Eo(t),s++);return n},ra=(e,t)=>{const n={};return null!=e[Da]&&(n[Da]=(0,We.lK)(e[Da])),n},oa=(e,t)=>{const n={};return null!=e[Da]&&(n[Da]=(0,We.lK)(e[Da])),n},aa=(e,t)=>{const n={};var s;return null!=e[Ja]&&(n[Ja]=(0,We.lK)(e[Ja])),""===String(e.dashboardValidationMessages).trim()?n[Ya]=[]:null!=e[Ya]&&null!=e[Ya][Xa]&&(n[Ya]=ia((s=e[Ya][Xa],Array.isArray(s)?s:[s]),t)),n},ia=(e,t)=>(e||[]).filter(e=>null!=e).map(e=>(e=>{const t={};return null!=e[Oa]&&(t[Oa]=(0,We.lK)(e[Oa])),null!=e[Da]&&(t[Da]=(0,We.lK)(e[Da])),t})(e)),ca=(e,t)=>{const n={};return null!=e[Da]&&(n[Da]=(0,We.lK)(e[Da])),n},ua=(e,t)=>{const n={};return null!=e[Ja]&&(n[Ja]=(0,We.lK)(e[Ja])),n},la=(e,t)=>{const n={};return null!=e[Ja]&&(n[Ja]=(0,We.lK)(e[Ja])),n},da=(e,t)=>{const n={};return null!=e[Ja]&&(n[Ja]=(0,We.lK)(e[Ja])),n},pa=(e,t)=>{const n={};return null!=e[Ja]&&(n[Ja]=(0,We.lK)(e[Ja])),n},ha=(e,t)=>{const n={};return null!=e[Da]&&(n[Da]=(0,We.lK)(e[Da])),n},ma=(e,t)=>{const n={};return null!=e[Ja]&&(n[Ja]=(0,We.lK)(e[Ja])),n},fa=(e,t)=>{const n={};return null!=e[Ja]&&(n[Ja]=(0,We.lK)(e[Ja])),n},ga=(e,t)=>{const n={};return null!=e[Ja]&&(n[Ja]=(0,We.lK)(e[Ja])),n},ya=(e,t)=>{const n={};return null!=e[qa]&&(n[qa]=(0,We.lK)(e[qa])),null!=e[za]&&(n[za]=(0,We.lK)(e[za])),null!=e[Da]&&(n[Da]=(0,We.lK)(e[Da])),n},wa=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Ea=(0,Qe.j)(xo),ba=async(e,t,n,s,r)=>{const{hostname:o,protocol:a="https",port:i,path:c}=await e.endpoint(),u={protocol:a,hostname:o,port:i,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==s&&(u.hostname=s),void 0!==r&&(u.body=r),new Ke.K(u)},xa={"content-type":"application/x-www-form-urlencoded"},va="2010-08-01",Sa="Action",Ia="Attributes",Ma="Counts",Pa="Dimensions",Oa="DataPath",$a="Entity",Aa="EntityMetricData",Ta="KeyAttributes",Na="MetricData",Ca="MetricName",Ra="Maximum",Da="Message",ka="Minimum",ja="Namespace",_a="Name",Fa="PutMetricData",za="ResourceId",qa="ResourceType",La="SampleCount",Ua="StrictEntityValidation",Ka="StorageResolution",Va="StatisticValues",Ba="Sum",Ha="Timestamp",Wa="Unit",Ga="Version",Qa="Value",Za="Values",Ya="dashboardValidationMessages",Xa="member",Ja="message",ei=e=>Object.entries(e).map(([e,t])=>(0,bo.$)(e)+"="+(0,bo.$)(t)).join("&"),ti=(e,t)=>void 0!==t.Error?.Code?t.Error.Code:404==e.statusCode?"NotFound":void 0;class ni extends(Le.u.classBuilder().ep(xr).m(function(e,t,n,s){return[(0,qe.TM)(n,this.serialize,this.deserialize),(0,ze.r)(n,e.getEndpointParameterInstructions()),go(n,{encodings:["gzip"]})]}).s("GraniteServiceVersion20100801","PutMetricData",{}).n("CloudWatchClient","PutMetricDataCommand").f(void 0,void 0).ser(ko).de(jo).build()){}var si=function(){function e(){this.metricData=[],this.cloudWatchClient=new so({})}return e.prototype.queueMetric=function(e){this.metricData.push(e)},e.prototype.emitQueuedMetrics=function(){return e=this,t=void 0,s=function(){var e;return function(e,t){var n,s,r,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=i(0),a.throw=i(1),a.return=i(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,i[0]&&(o=0)),o;)try{if(n=1,s&&(r=2&i[0]?s.return:i[0]?s.throw||((r=s.return)&&r.call(s),0):s.next)&&!(r=r.call(s,i[1])).done)return r;switch(s=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,s=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){o.label=i[1];break}if(6===i[0]&&o.label<r[1]){o.label=r[1],r=i;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(i);break}r[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],s=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}(this,function(t){switch(t.label){case 0:return e=new ni({Namespace:process.env.AWS_LAMBDA_FUNCTION_NAME,MetricData:this.metricData}),console.debug("Emitting metrics:\n".concat(JSON.stringify(e.input,null,2))),[4,this.cloudWatchClient.send(e)];case 1:return t.sent(),this.metricData=[],[2]}})},new((n=void 0)||(n=Promise))(function(r,o){function a(e){try{c(s.next(e))}catch(e){o(e)}}function i(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,i)}c((s=s.apply(e,t||[])).next())});var e,t,n,s},e}();const ri=async(e,t,n)=>({operation:(0,b.u)(t).operation,region:await(0,x.t)(e.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()}),oi=e=>{const t=[];return e.operation,t.push(function(e){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"ses",region:e.region},propertiesExtractor:(e,t)=>({signingProperties:{config:e,context:t}})}}(e)),t},ai={UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}},ii="required",ci="fn",ui="argv",li="ref",di=!0,pi="isSet",hi="booleanEquals",mi="error",fi="endpoint",gi="tree",yi="PartitionResult",wi={[ii]:!1,type:"String"},Ei={[ii]:!0,default:!1,type:"Boolean"},bi={[li]:"Endpoint"},xi={[ci]:hi,[ui]:[{[li]:"UseFIPS"},!0]},vi={[ci]:hi,[ui]:[{[li]:"UseDualStack"},!0]},Si={},Ii={[ci]:"getAttr",[ui]:[{[li]:yi},"supportsFIPS"]},Mi={[ci]:hi,[ui]:[!0,{[ci]:"getAttr",[ui]:[{[li]:yi},"supportsDualStack"]}]},Pi=[xi],Oi=[vi],$i=[{[li]:"Region"}],Ai={version:"1.0",parameters:{Region:wi,UseDualStack:Ei,UseFIPS:Ei,Endpoint:wi},rules:[{conditions:[{[ci]:pi,[ui]:[bi]}],rules:[{conditions:Pi,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:mi},{conditions:Oi,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:mi},{endpoint:{url:bi,properties:Si,headers:Si},type:fi}],type:gi},{conditions:[{[ci]:pi,[ui]:$i}],rules:[{conditions:[{[ci]:"aws.partition",[ui]:$i,assign:yi}],rules:[{conditions:[xi,vi],rules:[{conditions:[{[ci]:hi,[ui]:[di,Ii]},Mi],rules:[{endpoint:{url:"https://email-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Si,headers:Si},type:fi}],type:gi},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:mi}],type:gi},{conditions:Pi,rules:[{conditions:[{[ci]:hi,[ui]:[Ii,di]}],rules:[{endpoint:{url:"https://email-fips.{Region}.{PartitionResult#dnsSuffix}",properties:Si,headers:Si},type:fi}],type:gi},{error:"FIPS is enabled but this partition does not support FIPS",type:mi}],type:gi},{conditions:Oi,rules:[{conditions:[Mi],rules:[{endpoint:{url:"https://email.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Si,headers:Si},type:fi}],type:gi},{error:"DualStack is enabled but this partition does not support DualStack",type:mi}],type:gi},{endpoint:{url:"https://email.{Region}.{PartitionResult#dnsSuffix}",properties:Si,headers:Si},type:fi}],type:gi}],type:gi},{error:"Invalid Configuration: Missing Region",type:mi}]},Ti=new ne.k({size:50,params:["Endpoint","Region","UseDualStack","UseFIPS"]}),Ni=(e,t={})=>Ti.get(e,()=>(0,se.s)(Ai,{endpointParams:e,logger:t.logger}));re.m.aws=te.UF;class Ci extends w.K{config;constructor(...[e]){const t=(e=>{(0,De.I)(process.version);const t=(0,Re.I)(e),n=()=>t().then(Ce.l),s=(e=>({apiVersion:"2010-12-01",base64Decoder:e?.base64Decoder??Y.E,base64Encoder:e?.base64Encoder??X.n,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??Ni,extensions:e?.extensions??[],httpAuthSchemeProvider:e?.httpAuthSchemeProvider??oi,httpAuthSchemes:e?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:e=>e.getIdentityProvider("aws.auth#sigv4"),signer:new G.f2}],logger:e?.logger??new Q.N,serviceId:e?.serviceId??"SES",urlParser:e?.urlParser??Z.D,utf8Decoder:e?.utf8Decoder??J.a,utf8Encoder:e?.utf8Encoder??ee.P}))(e);(0,M.I)(process.version);const r={profile:e?.profile,logger:s.logger};return{...s,...e,runtime:"node",defaultsMode:t,authSchemePreference:e?.authSchemePreference??(0,K.Z)(P.$,r),bodyLengthChecker:e?.bodyLengthChecker??H.n,credentialDefaultProvider:e?.credentialDefaultProvider??D,defaultUserAgentProvider:e?.defaultUserAgentProvider??(0,_.pf)({serviceId:s.serviceId,clientVersion:"3.896.0"}),maxAttempts:e?.maxAttempts??(0,K.Z)(g.qs,e),region:e?.region??(0,K.Z)(z.GG,{...z.zH,...r}),requestHandler:V.$.create(e?.requestHandler??n),retryMode:e?.retryMode??(0,K.Z)({...g.kN,default:async()=>(await n()).retryMode||W.L0},e),sha256:e?.sha256??U.V.bind(null,"sha256"),streamCollector:e?.streamCollector??B.k,useDualstackEndpoint:e?.useDualstackEndpoint??(0,K.Z)(q.e$,r),useFipsEndpoint:e?.useFipsEndpoint??(0,K.Z)(L.Ko,r),userAgentAppId:e?.userAgentAppId??(0,K.Z)(F.hV,r)}})(e||{});super(t),this.initConfig=t;const n=(s=t,Object.assign(s,{useDualstackEndpoint:s.useDualstackEndpoint??!1,useFipsEndpoint:s.useFipsEndpoint??!1,defaultSigningName:"ses"}));var s;const r=(0,c.D)(n),w=(0,g.$z)(r),b=(0,l.T)(w),v=(0,o.OV)(b),S=((e,t)=>{const n=Object.assign((0,ke.R)(e),(0,_e.xA)(e),(0,je.e)(e),(e=>{const t=e.httpAuthSchemes;let n=e.httpAuthSchemeProvider,s=e.credentials;return{setHttpAuthScheme(e){const n=t.findIndex(t=>t.schemeId===e.schemeId);-1===n?t.push(e):t.splice(n,1,e)},httpAuthSchemes:()=>t,setHttpAuthSchemeProvider(e){n=e},httpAuthSchemeProvider:()=>n,setCredentials(e){s=e},credentials:()=>s}})(e));return t.forEach(e=>e.configure(n)),Object.assign(e,(0,ke.$)(n),(0,_e.uv)(n),(0,je.j)(n),{httpAuthSchemes:(s=n).httpAuthSchemes(),httpAuthSchemeProvider:s.httpAuthSchemeProvider(),credentials:s.credentials()});var s})((e=>{const t=(0,E.h)(e);return Object.assign(t,{authSchemePreference:(0,x.t)(e.authSchemePreference??[])})})((0,f.C)(v)),e?.extensions||[]);this.config=S,this.middlewareStack.use((0,u.sM)(this.config)),this.middlewareStack.use((0,y.ey)(this.config)),this.middlewareStack.use((0,m.vK)(this.config)),this.middlewareStack.use((0,o.TC)(this.config)),this.middlewareStack.use((0,a.Y7)(this.config)),this.middlewareStack.use((0,i.n)(this.config)),this.middlewareStack.use((0,d.w)(this.config,{httpAuthSchemeParametersProvider:ri,identityProviderConfigProvider:async e=>new p.h({"aws.auth#sigv4":e.credentials})})),this.middlewareStack.use((0,h.l)(this.config))}destroy(){super.destroy()}}class Ri extends Be.T{constructor(e){super(e),Object.setPrototypeOf(this,Ri.prototype)}}class Di extends Ri{name="AccountSendingPausedException";$fault="client";constructor(e){super({name:"AccountSendingPausedException",$fault:"client",...e}),Object.setPrototypeOf(this,Di.prototype)}}class ki extends Ri{name="AlreadyExistsException";$fault="client";Name;constructor(e){super({name:"AlreadyExistsException",$fault:"client",...e}),Object.setPrototypeOf(this,ki.prototype),this.Name=e.Name}}class ji extends Ri{name="CannotDeleteException";$fault="client";Name;constructor(e){super({name:"CannotDeleteException",$fault:"client",...e}),Object.setPrototypeOf(this,ji.prototype),this.Name=e.Name}}class _i extends Ri{name="LimitExceededException";$fault="client";constructor(e){super({name:"LimitExceededException",$fault:"client",...e}),Object.setPrototypeOf(this,_i.prototype)}}class Fi extends Ri{name="RuleSetDoesNotExistException";$fault="client";Name;constructor(e){super({name:"RuleSetDoesNotExistException",$fault:"client",...e}),Object.setPrototypeOf(this,Fi.prototype),this.Name=e.Name}}class zi extends Ri{name="ConfigurationSetAlreadyExistsException";$fault="client";ConfigurationSetName;constructor(e){super({name:"ConfigurationSetAlreadyExistsException",$fault:"client",...e}),Object.setPrototypeOf(this,zi.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class qi extends Ri{name="ConfigurationSetDoesNotExistException";$fault="client";ConfigurationSetName;constructor(e){super({name:"ConfigurationSetDoesNotExistException",$fault:"client",...e}),Object.setPrototypeOf(this,qi.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class Li extends Ri{name="ConfigurationSetSendingPausedException";$fault="client";ConfigurationSetName;constructor(e){super({name:"ConfigurationSetSendingPausedException",$fault:"client",...e}),Object.setPrototypeOf(this,Li.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class Ui extends Ri{name="InvalidConfigurationSetException";$fault="client";constructor(e){super({name:"InvalidConfigurationSetException",$fault:"client",...e}),Object.setPrototypeOf(this,Ui.prototype)}}class Ki extends Ri{name="EventDestinationAlreadyExistsException";$fault="client";ConfigurationSetName;EventDestinationName;constructor(e){super({name:"EventDestinationAlreadyExistsException",$fault:"client",...e}),Object.setPrototypeOf(this,Ki.prototype),this.ConfigurationSetName=e.ConfigurationSetName,this.EventDestinationName=e.EventDestinationName}}class Vi extends Ri{name="InvalidCloudWatchDestinationException";$fault="client";ConfigurationSetName;EventDestinationName;constructor(e){super({name:"InvalidCloudWatchDestinationException",$fault:"client",...e}),Object.setPrototypeOf(this,Vi.prototype),this.ConfigurationSetName=e.ConfigurationSetName,this.EventDestinationName=e.EventDestinationName}}class Bi extends Ri{name="InvalidFirehoseDestinationException";$fault="client";ConfigurationSetName;EventDestinationName;constructor(e){super({name:"InvalidFirehoseDestinationException",$fault:"client",...e}),Object.setPrototypeOf(this,Bi.prototype),this.ConfigurationSetName=e.ConfigurationSetName,this.EventDestinationName=e.EventDestinationName}}class Hi extends Ri{name="InvalidSNSDestinationException";$fault="client";ConfigurationSetName;EventDestinationName;constructor(e){super({name:"InvalidSNSDestinationException",$fault:"client",...e}),Object.setPrototypeOf(this,Hi.prototype),this.ConfigurationSetName=e.ConfigurationSetName,this.EventDestinationName=e.EventDestinationName}}class Wi extends Ri{name="InvalidTrackingOptionsException";$fault="client";constructor(e){super({name:"InvalidTrackingOptionsException",$fault:"client",...e}),Object.setPrototypeOf(this,Wi.prototype)}}class Gi extends Ri{name="TrackingOptionsAlreadyExistsException";$fault="client";ConfigurationSetName;constructor(e){super({name:"TrackingOptionsAlreadyExistsException",$fault:"client",...e}),Object.setPrototypeOf(this,Gi.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class Qi extends Ri{name="CustomVerificationEmailInvalidContentException";$fault="client";constructor(e){super({name:"CustomVerificationEmailInvalidContentException",$fault:"client",...e}),Object.setPrototypeOf(this,Qi.prototype)}}class Zi extends Ri{name="CustomVerificationEmailTemplateAlreadyExistsException";$fault="client";CustomVerificationEmailTemplateName;constructor(e){super({name:"CustomVerificationEmailTemplateAlreadyExistsException",$fault:"client",...e}),Object.setPrototypeOf(this,Zi.prototype),this.CustomVerificationEmailTemplateName=e.CustomVerificationEmailTemplateName}}class Yi extends Ri{name="FromEmailAddressNotVerifiedException";$fault="client";FromEmailAddress;constructor(e){super({name:"FromEmailAddressNotVerifiedException",$fault:"client",...e}),Object.setPrototypeOf(this,Yi.prototype),this.FromEmailAddress=e.FromEmailAddress}}class Xi extends Ri{name="InvalidLambdaFunctionException";$fault="client";FunctionArn;constructor(e){super({name:"InvalidLambdaFunctionException",$fault:"client",...e}),Object.setPrototypeOf(this,Xi.prototype),this.FunctionArn=e.FunctionArn}}class Ji extends Ri{name="InvalidS3ConfigurationException";$fault="client";Bucket;constructor(e){super({name:"InvalidS3ConfigurationException",$fault:"client",...e}),Object.setPrototypeOf(this,Ji.prototype),this.Bucket=e.Bucket}}class ec extends Ri{name="InvalidSnsTopicException";$fault="client";Topic;constructor(e){super({name:"InvalidSnsTopicException",$fault:"client",...e}),Object.setPrototypeOf(this,ec.prototype),this.Topic=e.Topic}}class tc extends Ri{name="RuleDoesNotExistException";$fault="client";Name;constructor(e){super({name:"RuleDoesNotExistException",$fault:"client",...e}),Object.setPrototypeOf(this,tc.prototype),this.Name=e.Name}}class nc extends Ri{name="InvalidTemplateException";$fault="client";TemplateName;constructor(e){super({name:"InvalidTemplateException",$fault:"client",...e}),Object.setPrototypeOf(this,nc.prototype),this.TemplateName=e.TemplateName}}class sc extends Ri{name="CustomVerificationEmailTemplateDoesNotExistException";$fault="client";CustomVerificationEmailTemplateName;constructor(e){super({name:"CustomVerificationEmailTemplateDoesNotExistException",$fault:"client",...e}),Object.setPrototypeOf(this,sc.prototype),this.CustomVerificationEmailTemplateName=e.CustomVerificationEmailTemplateName}}class rc extends Ri{name="EventDestinationDoesNotExistException";$fault="client";ConfigurationSetName;EventDestinationName;constructor(e){super({name:"EventDestinationDoesNotExistException",$fault:"client",...e}),Object.setPrototypeOf(this,rc.prototype),this.ConfigurationSetName=e.ConfigurationSetName,this.EventDestinationName=e.EventDestinationName}}class oc extends Ri{name="TrackingOptionsDoesNotExistException";$fault="client";ConfigurationSetName;constructor(e){super({name:"TrackingOptionsDoesNotExistException",$fault:"client",...e}),Object.setPrototypeOf(this,oc.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class ac extends Ri{name="TemplateDoesNotExistException";$fault="client";TemplateName;constructor(e){super({name:"TemplateDoesNotExistException",$fault:"client",...e}),Object.setPrototypeOf(this,ac.prototype),this.TemplateName=e.TemplateName}}class ic extends Ri{name="InvalidDeliveryOptionsException";$fault="client";constructor(e){super({name:"InvalidDeliveryOptionsException",$fault:"client",...e}),Object.setPrototypeOf(this,ic.prototype)}}class cc extends Ri{name="InvalidPolicyException";$fault="client";constructor(e){super({name:"InvalidPolicyException",$fault:"client",...e}),Object.setPrototypeOf(this,cc.prototype)}}class uc extends Ri{name="InvalidRenderingParameterException";$fault="client";TemplateName;constructor(e){super({name:"InvalidRenderingParameterException",$fault:"client",...e}),Object.setPrototypeOf(this,uc.prototype),this.TemplateName=e.TemplateName}}class lc extends Ri{name="MailFromDomainNotVerifiedException";$fault="client";constructor(e){super({name:"MailFromDomainNotVerifiedException",$fault:"client",...e}),Object.setPrototypeOf(this,lc.prototype)}}class dc extends Ri{name="MessageRejected";$fault="client";constructor(e){super({name:"MessageRejected",$fault:"client",...e}),Object.setPrototypeOf(this,dc.prototype)}}class pc extends Ri{name="MissingRenderingAttributeException";$fault="client";TemplateName;constructor(e){super({name:"MissingRenderingAttributeException",$fault:"client",...e}),Object.setPrototypeOf(this,pc.prototype),this.TemplateName=e.TemplateName}}class hc extends Ri{name="ProductionAccessNotGrantedException";$fault="client";constructor(e){super({name:"ProductionAccessNotGrantedException",$fault:"client",...e}),Object.setPrototypeOf(this,hc.prototype)}}const mc=async(e,t)=>{const n=zu;let s;return s=El({...eu(e,t),[Lu]:cl,[gl]:qu}),Fu(t,n,"/",void 0,s)},fc=async(e,t)=>{if(e.statusCode>=300)return gc(e,t);const n=await(0,yo.t_)(e.body,t);let s={};return s=Cu(n.SendEmailResult,t),{$metadata:ju(e),...s}},gc=async(e,t)=>{const n={...e,body:await(0,yo.FI)(e.body,t)},s=bl(e,n.body);switch(s){case"AlreadyExists":case"com.amazonaws.ses#AlreadyExistsException":throw await wc(n,t);case"LimitExceeded":case"com.amazonaws.ses#LimitExceededException":throw await Lc(n,t);case"RuleSetDoesNotExist":case"com.amazonaws.ses#RuleSetDoesNotExistException":throw await Wc(n,t);case"ConfigurationSetAlreadyExists":case"com.amazonaws.ses#ConfigurationSetAlreadyExistsException":throw await bc(n,t);case"InvalidConfigurationSet":case"com.amazonaws.ses#InvalidConfigurationSetException":throw await Tc(n,t);case"ConfigurationSetDoesNotExist":case"com.amazonaws.ses#ConfigurationSetDoesNotExistException":throw await xc(n,t);case"EventDestinationAlreadyExists":case"com.amazonaws.ses#EventDestinationAlreadyExistsException":throw await Pc(n,t);case"InvalidCloudWatchDestination":case"com.amazonaws.ses#InvalidCloudWatchDestinationException":throw await Ac(n,t);case"InvalidFirehoseDestination":case"com.amazonaws.ses#InvalidFirehoseDestinationException":throw await Cc(n,t);case"InvalidSNSDestination":case"com.amazonaws.ses#InvalidSNSDestinationException":throw await _c(n,t);case"InvalidTrackingOptions":case"com.amazonaws.ses#InvalidTrackingOptionsException":throw await qc(n,t);case"TrackingOptionsAlreadyExistsException":case"com.amazonaws.ses#TrackingOptionsAlreadyExistsException":throw await Qc(n,t);case"CustomVerificationEmailInvalidContent":case"com.amazonaws.ses#CustomVerificationEmailInvalidContentException":throw await Sc(n,t);case"CustomVerificationEmailTemplateAlreadyExists":case"com.amazonaws.ses#CustomVerificationEmailTemplateAlreadyExistsException":throw await Ic(n,t);case"FromEmailAddressNotVerified":case"com.amazonaws.ses#FromEmailAddressNotVerifiedException":throw await $c(n,t);case"InvalidLambdaFunction":case"com.amazonaws.ses#InvalidLambdaFunctionException":throw await Rc(n,t);case"InvalidS3Configuration":case"com.amazonaws.ses#InvalidS3ConfigurationException":throw await jc(n,t);case"InvalidSnsTopic":case"com.amazonaws.ses#InvalidSnsTopicException":throw await Fc(n,t);case"RuleDoesNotExist":case"com.amazonaws.ses#RuleDoesNotExistException":throw await Hc(n,t);case"InvalidTemplate":case"com.amazonaws.ses#InvalidTemplateException":throw await zc(n,t);case"EventDestinationDoesNotExist":case"com.amazonaws.ses#EventDestinationDoesNotExistException":throw await Oc(n,t);case"TrackingOptionsDoesNotExistException":case"com.amazonaws.ses#TrackingOptionsDoesNotExistException":throw await Zc(n,t);case"CannotDelete":case"com.amazonaws.ses#CannotDeleteException":throw await Ec(n,t);case"CustomVerificationEmailTemplateDoesNotExist":case"com.amazonaws.ses#CustomVerificationEmailTemplateDoesNotExistException":throw await Mc(n,t);case"TemplateDoesNotExist":case"com.amazonaws.ses#TemplateDoesNotExistException":throw await Gc(n,t);case"InvalidDeliveryOptions":case"com.amazonaws.ses#InvalidDeliveryOptionsException":throw await Nc(n,t);case"InvalidPolicy":case"com.amazonaws.ses#InvalidPolicyException":throw await Dc(n,t);case"MessageRejected":case"com.amazonaws.ses#MessageRejected":throw await Kc(n,t);case"AccountSendingPausedException":case"com.amazonaws.ses#AccountSendingPausedException":throw await yc(n,t);case"ConfigurationSetSendingPausedException":case"com.amazonaws.ses#ConfigurationSetSendingPausedException":throw await vc(n,t);case"MailFromDomainNotVerifiedException":case"com.amazonaws.ses#MailFromDomainNotVerifiedException":throw await Uc(n,t);case"ProductionAccessNotGranted":case"com.amazonaws.ses#ProductionAccessNotGrantedException":throw await Bc(n,t);case"InvalidRenderingParameter":case"com.amazonaws.ses#InvalidRenderingParameterException":throw await kc(n,t);case"MissingRenderingAttribute":case"com.amazonaws.ses#MissingRenderingAttributeException":throw await Vc(n,t);default:const r=n.body;return _u({output:e,parsedBody:r.Error,errorCode:s})}},yc=async(e,t)=>{const n=e.body,s=tu(n.Error,t),r=new Di({$metadata:ju(e),...s});return(0,Be.M)(r,n)},wc=async(e,t)=>{const n=e.body,s=nu(n.Error,t),r=new ki({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Ec=async(e,t)=>{const n=e.body,s=su(n.Error,t),r=new ji({$metadata:ju(e),...s});return(0,Be.M)(r,n)},bc=async(e,t)=>{const n=e.body,s=ru(n.Error,t),r=new zi({$metadata:ju(e),...s});return(0,Be.M)(r,n)},xc=async(e,t)=>{const n=e.body,s=ou(n.Error,t),r=new qi({$metadata:ju(e),...s});return(0,Be.M)(r,n)},vc=async(e,t)=>{const n=e.body,s=au(n.Error,t),r=new Li({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Sc=async(e,t)=>{const n=e.body,s=iu(n.Error,t),r=new Qi({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Ic=async(e,t)=>{const n=e.body,s=cu(n.Error,t),r=new Zi({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Mc=async(e,t)=>{const n=e.body,s=uu(n.Error,t),r=new sc({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Pc=async(e,t)=>{const n=e.body,s=lu(n.Error,t),r=new Ki({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Oc=async(e,t)=>{const n=e.body,s=du(n.Error,t),r=new rc({$metadata:ju(e),...s});return(0,Be.M)(r,n)},$c=async(e,t)=>{const n=e.body,s=pu(n.Error,t),r=new Yi({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Ac=async(e,t)=>{const n=e.body,s=hu(n.Error,t),r=new Vi({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Tc=async(e,t)=>{const n=e.body,s=mu(n.Error,t),r=new Ui({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Nc=async(e,t)=>{const n=e.body,s=fu(n.Error,t),r=new ic({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Cc=async(e,t)=>{const n=e.body,s=gu(n.Error,t),r=new Bi({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Rc=async(e,t)=>{const n=e.body,s=yu(n.Error,t),r=new Xi({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Dc=async(e,t)=>{const n=e.body,s=wu(n.Error,t),r=new cc({$metadata:ju(e),...s});return(0,Be.M)(r,n)},kc=async(e,t)=>{const n=e.body,s=Eu(n.Error,t),r=new uc({$metadata:ju(e),...s});return(0,Be.M)(r,n)},jc=async(e,t)=>{const n=e.body,s=bu(n.Error,t),r=new Ji({$metadata:ju(e),...s});return(0,Be.M)(r,n)},_c=async(e,t)=>{const n=e.body,s=xu(n.Error,t),r=new Hi({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Fc=async(e,t)=>{const n=e.body,s=vu(n.Error,t),r=new ec({$metadata:ju(e),...s});return(0,Be.M)(r,n)},zc=async(e,t)=>{const n=e.body,s=Su(n.Error,t),r=new nc({$metadata:ju(e),...s});return(0,Be.M)(r,n)},qc=async(e,t)=>{const n=e.body,s=Iu(n.Error,t),r=new Wi({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Lc=async(e,t)=>{const n=e.body,s=Mu(n.Error,t),r=new _i({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Uc=async(e,t)=>{const n=e.body,s=Pu(n.Error,t),r=new lc({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Kc=async(e,t)=>{const n=e.body,s=Ou(n.Error,t),r=new dc({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Vc=async(e,t)=>{const n=e.body,s=$u(n.Error,t),r=new pc({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Bc=async(e,t)=>{const n=e.body,s=Au(n.Error,t),r=new hc({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Hc=async(e,t)=>{const n=e.body,s=Tu(n.Error,t),r=new tc({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Wc=async(e,t)=>{const n=e.body,s=Nu(n.Error,t),r=new Fi({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Gc=async(e,t)=>{const n=e.body,s=Ru(n.Error,t),r=new ac({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Qc=async(e,t)=>{const n=e.body,s=Du(n.Error,t),r=new Gi({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Zc=async(e,t)=>{const n=e.body,s=ku(n.Error,t),r=new oc({$metadata:ju(e),...s});return(0,Be.M)(r,n)},Yc=(e,t)=>{const n={};let s=1;for(const t of e)null!==t&&(n[`member.${s}`]=t,s++);return n},Xc=(e,t)=>{const n={};return null!=e[Zu]&&(n[Zu]=e[Zu]),null!=e[Bu]&&(n[Bu]=e[Bu]),n},Jc=(e,t)=>{const n={};return null!=e[sl]&&(n[sl]=e[sl]),null!=e[yl]&&(n[yl]=e[yl]),n},eu=(e,t)=>{const n={};if(null!=e[ul]&&(n[ul]=e[ul]),null!=e[Qu]){const t=(e=>{const t={};if(null!=e[pl]){const n=Yc(e[pl]);0===e[pl]?.length&&(t.ToAddresses=[]),Object.entries(n).forEach(([e,n])=>{t[`ToAddresses.${e}`]=n})}if(null!=e[Hu]){const n=Yc(e[Hu]);0===e[Hu]?.length&&(t.CcAddresses=[]),Object.entries(n).forEach(([e,n])=>{t[`CcAddresses.${e}`]=n})}if(null!=e[Ku]){const n=Yc(e[Ku]);0===e[Ku]?.length&&(t.BccAddresses=[]),Object.entries(n).forEach(([e,n])=>{t[`BccAddresses.${e}`]=n})}return t})(e[Qu]);Object.entries(t).forEach(([e,t])=>{n[`Destination.${e}`]=t})}if(null!=e[tl]){const t=(e=>{const t={};if(null!=e[ll]){const n=Xc(e[ll]);Object.entries(n).forEach(([e,n])=>{t[`Subject.${e}`]=n})}if(null!=e[Uu]){const n=(e=>{const t={};if(null!=e[dl]){const n=Xc(e[dl]);Object.entries(n).forEach(([e,n])=>{t[`Text.${e}`]=n})}if(null!=e[el]){const n=Xc(e[el]);Object.entries(n).forEach(([e,n])=>{t[`Html.${e}`]=n})}return t})(e[Uu]);Object.entries(n).forEach(([e,n])=>{t[`Body.${e}`]=n})}return t})(e[tl]);Object.entries(t).forEach(([e,t])=>{n[`Message.${e}`]=t})}if(null!=e[al]){const t=Yc(e[al]);0===e[al]?.length&&(n.ReplyToAddresses=[]),Object.entries(t).forEach(([e,t])=>{n[`ReplyToAddresses.${e}`]=t})}if(null!=e[rl]&&(n[rl]=e[rl]),null!=e[il]&&(n[il]=e[il]),null!=e[ol]&&(n[ol]=e[ol]),null!=e[ml]){const t=(e=>{const t={};let n=1;for(const s of e){if(null===s)continue;const e=Jc(s);Object.entries(e).forEach(([e,s])=>{t[`member.${n}.${e}`]=s}),n++}return t})(e[ml]);0===e[ml]?.length&&(n.Tags=[]),Object.entries(t).forEach(([e,t])=>{n[`Tags.${e}`]=t})}return null!=e[Wu]&&(n[Wu]=e[Wu]),n},tu=(e,t)=>{const n={};return null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},nu=(e,t)=>{const n={};return null!=e[sl]&&(n[sl]=(0,We.lK)(e[sl])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},su=(e,t)=>{const n={};return null!=e[sl]&&(n[sl]=(0,We.lK)(e[sl])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},ru=(e,t)=>{const n={};return null!=e[Wu]&&(n[Wu]=(0,We.lK)(e[Wu])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},ou=(e,t)=>{const n={};return null!=e[Wu]&&(n[Wu]=(0,We.lK)(e[Wu])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},au=(e,t)=>{const n={};return null!=e[Wu]&&(n[Wu]=(0,We.lK)(e[Wu])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},iu=(e,t)=>{const n={};return null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},cu=(e,t)=>{const n={};return null!=e[Gu]&&(n[Gu]=(0,We.lK)(e[Gu])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},uu=(e,t)=>{const n={};return null!=e[Gu]&&(n[Gu]=(0,We.lK)(e[Gu])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},lu=(e,t)=>{const n={};return null!=e[Wu]&&(n[Wu]=(0,We.lK)(e[Wu])),null!=e[Yu]&&(n[Yu]=(0,We.lK)(e[Yu])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},du=(e,t)=>{const n={};return null!=e[Wu]&&(n[Wu]=(0,We.lK)(e[Wu])),null!=e[Yu]&&(n[Yu]=(0,We.lK)(e[Yu])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},pu=(e,t)=>{const n={};return null!=e[Ju]&&(n[Ju]=(0,We.lK)(e[Ju])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},hu=(e,t)=>{const n={};return null!=e[Wu]&&(n[Wu]=(0,We.lK)(e[Wu])),null!=e[Yu]&&(n[Yu]=(0,We.lK)(e[Yu])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},mu=(e,t)=>{const n={};return null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},fu=(e,t)=>{const n={};return null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},gu=(e,t)=>{const n={};return null!=e[Wu]&&(n[Wu]=(0,We.lK)(e[Wu])),null!=e[Yu]&&(n[Yu]=(0,We.lK)(e[Yu])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},yu=(e,t)=>{const n={};return null!=e[Xu]&&(n[Xu]=(0,We.lK)(e[Xu])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},wu=(e,t)=>{const n={};return null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},Eu=(e,t)=>{const n={};return null!=e[hl]&&(n[hl]=(0,We.lK)(e[hl])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},bu=(e,t)=>{const n={};return null!=e[Vu]&&(n[Vu]=(0,We.lK)(e[Vu])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},xu=(e,t)=>{const n={};return null!=e[Wu]&&(n[Wu]=(0,We.lK)(e[Wu])),null!=e[Yu]&&(n[Yu]=(0,We.lK)(e[Yu])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},vu=(e,t)=>{const n={};return null!=e[fl]&&(n[fl]=(0,We.lK)(e[fl])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},Su=(e,t)=>{const n={};return null!=e[hl]&&(n[hl]=(0,We.lK)(e[hl])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},Iu=(e,t)=>{const n={};return null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},Mu=(e,t)=>{const n={};return null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},Pu=(e,t)=>{const n={};return null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},Ou=(e,t)=>{const n={};return null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},$u=(e,t)=>{const n={};return null!=e[hl]&&(n[hl]=(0,We.lK)(e[hl])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},Au=(e,t)=>{const n={};return null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},Tu=(e,t)=>{const n={};return null!=e[sl]&&(n[sl]=(0,We.lK)(e[sl])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},Nu=(e,t)=>{const n={};return null!=e[sl]&&(n[sl]=(0,We.lK)(e[sl])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},Cu=(e,t)=>{const n={};return null!=e[nl]&&(n[nl]=(0,We.lK)(e[nl])),n},Ru=(e,t)=>{const n={};return null!=e[hl]&&(n[hl]=(0,We.lK)(e[hl])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},Du=(e,t)=>{const n={};return null!=e[Wu]&&(n[Wu]=(0,We.lK)(e[Wu])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},ku=(e,t)=>{const n={};return null!=e[Wu]&&(n[Wu]=(0,We.lK)(e[Wu])),null!=e[wl]&&(n[wl]=(0,We.lK)(e[wl])),n},ju=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),_u=(0,Qe.j)(Ri),Fu=async(e,t,n,s,r)=>{const{hostname:o,protocol:a="https",port:i,path:c}=await e.endpoint(),u={protocol:a,hostname:o,port:i,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==s&&(u.hostname=s),void 0!==r&&(u.body=r),new Ke.K(u)},zu={"content-type":"application/x-www-form-urlencoded"},qu="2010-12-01",Lu="Action",Uu="Body",Ku="BccAddresses",Vu="Bucket",Bu="Charset",Hu="CcAddresses",Wu="ConfigurationSetName",Gu="CustomVerificationEmailTemplateName",Qu="Destination",Zu="Data",Yu="EventDestinationName",Xu="FunctionArn",Ju="FromEmailAddress",el="Html",tl="Message",nl="MessageId",sl="Name",rl="ReturnPath",ol="ReturnPathArn",al="ReplyToAddresses",il="SourceArn",cl="SendEmail",ul="Source",ll="Subject",dl="Text",pl="ToAddresses",hl="TemplateName",ml="Tags",fl="Topic",gl="Version",yl="Value",wl="message",El=e=>Object.entries(e).map(([e,t])=>(0,bo.$)(e)+"="+(0,bo.$)(t)).join("&"),bl=(e,t)=>void 0!==t.Error?.Code?t.Error.Code:404==e.statusCode?"NotFound":void 0;class xl extends(Le.u.classBuilder().ep(ai).m(function(e,t,n,s){return[(0,qe.TM)(n,this.serialize,this.deserialize),(0,ze.r)(n,e.getEndpointParameterInstructions())]}).s("SimpleEmailService","SendEmail",{}).n("SESClient","SendEmailCommand").f(void 0,void 0).ser(mc).de(fc).build()){}var vl,Sl=function(){function e(){this.sesClient=new Ci({}),this.noLastAccessDate=new Date(0).toLocaleString()}return e.prototype.notifyUser=function(e){return t=this,n=void 0,r=function(){var t,n,s,r;return function(e,t){var n,s,r,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=i(0),a.throw=i(1),a.return=i(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,i[0]&&(o=0)),o;)try{if(n=1,s&&(r=2&i[0]?s.return:i[0]?s.throw||((r=s.return)&&r.call(s),0):s.next)&&!(r=r.call(s,i[1])).done)return r;switch(s=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,s=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){o.label=i[1];break}if(6===i[0]&&o.label<r[1]){o.label=r[1],r=i;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(i);break}r[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],s=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}(this,function(o){switch(o.label){case 0:return console.debug("Notifying ".concat(JSON.stringify(e,null,1))),t=e.lastAccess.toLocaleString()===this.noLastAccessDate?"not in the last ".concat(process.env.deleteDays," days"):e.lastAccess.toLocaleDateString(),n="I: QuickSight user ".concat(e.username," in account ").concat(process.env.accountAlias," will be deleted"),s='In order to <a href="https://aws.amazon.com/quicksight/pricing/">control costs ($24/month/user)</a>,\n    your AWS QuickSight user \''.concat(e.username,"' \n    will be deleted when you have not accessed QuickSight in ").concat(process.env.deleteDays," days. \n    CloudTrail records indicate that your last access was ").concat(t,".<br /><br />\n    \n    You can keep your user by logging in and taking actions in QuickSight. \n    Alternatively, you can do nothing, and your user will be automatically deleted. \n    Never fear, you simply log back into QuickSight and enter your e-mail, and your user gets recreated. \n    No dashboards or other resources will be deleted at this time (we may clean those up in the future, with notification, of course).<br /><br />\n    \n    Account Number: ").concat(process.env.awsAccountId,"<br />\n    Account Alias: ").concat(process.env.accountAlias,"<br />\n    Assumed Role: ").concat(e.iamRole,"<br />\n    Email: ").concat(e.email,'<br /><br />\n  \n    For further assistance, contact <a href="mailto:').concat(process.env.contact,'">').concat(process.env.contact,"</a>. Thank you and have a fantastically fun-filled day 🥳.\n    "),r=new xl({Source:"".concat(process.env.accountAlias," Cloud Account Administrator<").concat(process.env.from,">"),Destination:{ToAddresses:[e.email],CcAddresses:JSON.parse(process.env.cc)},ReplyToAddresses:[process.env.replyTo],SourceArn:process.env.sesArn,Message:{Subject:{Data:n},Body:{Html:{Data:s}}}}),[4,this.sesClient.send(r)];case 1:return o.sent(),[2]}})},new((s=void 0)||(s=Promise))(function(e,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function i(e){try{c(r.throw(e))}catch(e){o(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof s?n:new s(function(e){e(n)})).then(a,i)}c((r=r.apply(t,n||[])).next())});var t,n,s,r},e}(),Il=function(e){this.arn=e.Arn,this.email=e.Email,this.role=vl[e.Role],this.username=e.UserName,this.invalid="N/A"===this.username;var t=this.username.split("/"),n=t[0],s=t[1];this.iamRole=n,this.stsSession=s};!function(e){e.READER="READER",e.AUTHOR="AUTHOR",e.ADMIN="ADMIN"}(vl||(vl={}));const Ml=async(e,t,n)=>({operation:(0,b.u)(t).operation,region:await(0,x.t)(e.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()}),Pl=e=>{const t=[];return e.operation,t.push(function(e){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"quicksight",region:e.region},propertiesExtractor:(e,t)=>({signingProperties:{config:e,context:t}})}}(e)),t},Ol={UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}},$l="required",Al="fn",Tl="argv",Nl="ref",Cl=!0,Rl="isSet",Dl="booleanEquals",kl="error",jl="endpoint",_l="tree",Fl="PartitionResult",zl={[$l]:!1,type:"String"},ql={[$l]:!0,default:!1,type:"Boolean"},Ll={[Nl]:"Endpoint"},Ul={[Al]:Dl,[Tl]:[{[Nl]:"UseFIPS"},!0]},Kl={[Al]:Dl,[Tl]:[{[Nl]:"UseDualStack"},!0]},Vl={},Bl={[Al]:"getAttr",[Tl]:[{[Nl]:Fl},"supportsFIPS"]},Hl={[Al]:Dl,[Tl]:[!0,{[Al]:"getAttr",[Tl]:[{[Nl]:Fl},"supportsDualStack"]}]},Wl=[Ul],Gl=[Kl],Ql=[{[Nl]:"Region"}],Zl={version:"1.0",parameters:{Region:zl,UseDualStack:ql,UseFIPS:ql,Endpoint:zl},rules:[{conditions:[{[Al]:Rl,[Tl]:[Ll]}],rules:[{conditions:Wl,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:kl},{conditions:Gl,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:kl},{endpoint:{url:Ll,properties:Vl,headers:Vl},type:jl}],type:_l},{conditions:[{[Al]:Rl,[Tl]:Ql}],rules:[{conditions:[{[Al]:"aws.partition",[Tl]:Ql,assign:Fl}],rules:[{conditions:[Ul,Kl],rules:[{conditions:[{[Al]:Dl,[Tl]:[Cl,Bl]},Hl],rules:[{endpoint:{url:"https://quicksight-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Vl,headers:Vl},type:jl}],type:_l},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:kl}],type:_l},{conditions:Wl,rules:[{conditions:[{[Al]:Dl,[Tl]:[Bl,Cl]}],rules:[{endpoint:{url:"https://quicksight-fips.{Region}.{PartitionResult#dnsSuffix}",properties:Vl,headers:Vl},type:jl}],type:_l},{error:"FIPS is enabled but this partition does not support FIPS",type:kl}],type:_l},{conditions:Gl,rules:[{conditions:[Hl],rules:[{endpoint:{url:"https://quicksight.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Vl,headers:Vl},type:jl}],type:_l},{error:"DualStack is enabled but this partition does not support DualStack",type:kl}],type:_l},{endpoint:{url:"https://quicksight.{Region}.{PartitionResult#dnsSuffix}",properties:Vl,headers:Vl},type:jl}],type:_l}],type:_l},{error:"Invalid Configuration: Missing Region",type:kl}]},Yl=new ne.k({size:50,params:["Endpoint","Region","UseDualStack","UseFIPS"]}),Xl=(e,t={})=>Yl.get(e,()=>(0,se.s)(Zl,{endpointParams:e,logger:t.logger}));re.m.aws=te.UF;class Jl extends w.K{config;constructor(...[e]){const t=(e=>{(0,De.I)(process.version);const t=(0,Re.I)(e),n=()=>t().then(Ce.l),s=(e=>({apiVersion:"2018-04-01",base64Decoder:e?.base64Decoder??Y.E,base64Encoder:e?.base64Encoder??X.n,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??Xl,extensions:e?.extensions??[],httpAuthSchemeProvider:e?.httpAuthSchemeProvider??Pl,httpAuthSchemes:e?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:e=>e.getIdentityProvider("aws.auth#sigv4"),signer:new G.f2}],logger:e?.logger??new Q.N,serviceId:e?.serviceId??"QuickSight",urlParser:e?.urlParser??Z.D,utf8Decoder:e?.utf8Decoder??J.a,utf8Encoder:e?.utf8Encoder??ee.P}))(e);(0,M.I)(process.version);const r={profile:e?.profile,logger:s.logger};return{...s,...e,runtime:"node",defaultsMode:t,authSchemePreference:e?.authSchemePreference??(0,K.Z)(P.$,r),bodyLengthChecker:e?.bodyLengthChecker??H.n,credentialDefaultProvider:e?.credentialDefaultProvider??D,defaultUserAgentProvider:e?.defaultUserAgentProvider??(0,_.pf)({serviceId:s.serviceId,clientVersion:"3.896.0"}),maxAttempts:e?.maxAttempts??(0,K.Z)(g.qs,e),region:e?.region??(0,K.Z)(z.GG,{...z.zH,...r}),requestHandler:V.$.create(e?.requestHandler??n),retryMode:e?.retryMode??(0,K.Z)({...g.kN,default:async()=>(await n()).retryMode||W.L0},e),sha256:e?.sha256??U.V.bind(null,"sha256"),streamCollector:e?.streamCollector??B.k,useDualstackEndpoint:e?.useDualstackEndpoint??(0,K.Z)(q.e$,r),useFipsEndpoint:e?.useFipsEndpoint??(0,K.Z)(L.Ko,r),userAgentAppId:e?.userAgentAppId??(0,K.Z)(F.hV,r)}})(e||{});super(t),this.initConfig=t;const n=(s=t,Object.assign(s,{useDualstackEndpoint:s.useDualstackEndpoint??!1,useFipsEndpoint:s.useFipsEndpoint??!1,defaultSigningName:"quicksight"}));var s;const r=(0,c.D)(n),w=(0,g.$z)(r),b=(0,l.T)(w),v=(0,o.OV)(b),S=((e,t)=>{const n=Object.assign((0,ke.R)(e),(0,_e.xA)(e),(0,je.e)(e),(e=>{const t=e.httpAuthSchemes;let n=e.httpAuthSchemeProvider,s=e.credentials;return{setHttpAuthScheme(e){const n=t.findIndex(t=>t.schemeId===e.schemeId);-1===n?t.push(e):t.splice(n,1,e)},httpAuthSchemes:()=>t,setHttpAuthSchemeProvider(e){n=e},httpAuthSchemeProvider:()=>n,setCredentials(e){s=e},credentials:()=>s}})(e));return t.forEach(e=>e.configure(n)),Object.assign(e,(0,ke.$)(n),(0,_e.uv)(n),(0,je.j)(n),{httpAuthSchemes:(s=n).httpAuthSchemes(),httpAuthSchemeProvider:s.httpAuthSchemeProvider(),credentials:s.credentials()});var s})((e=>{const t=(0,E.h)(e);return Object.assign(t,{authSchemePreference:(0,x.t)(e.authSchemePreference??[])})})((0,f.C)(v)),e?.extensions||[]);this.config=S,this.middlewareStack.use((0,u.sM)(this.config)),this.middlewareStack.use((0,y.ey)(this.config)),this.middlewareStack.use((0,m.vK)(this.config)),this.middlewareStack.use((0,o.TC)(this.config)),this.middlewareStack.use((0,a.Y7)(this.config)),this.middlewareStack.use((0,i.n)(this.config)),this.middlewareStack.use((0,d.w)(this.config,{httpAuthSchemeParametersProvider:Ml,identityProviderConfigProvider:async e=>new p.h({"aws.auth#sigv4":e.credentials})})),this.middlewareStack.use((0,h.l)(this.config))}destroy(){super.destroy()}}var ed,td,nd,sd,rd=s(9212);class od extends Be.T{constructor(e){super(e),Object.setPrototypeOf(this,od.prototype)}}class ad extends od{name="AccessDeniedException";$fault="client";Message;RequestId;constructor(e){super({name:"AccessDeniedException",$fault:"client",...e}),Object.setPrototypeOf(this,ad.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}!function(e){e.visit=(e,t)=>void 0!==e.AmazonElasticsearchParameters?t.AmazonElasticsearchParameters(e.AmazonElasticsearchParameters):void 0!==e.AthenaParameters?t.AthenaParameters(e.AthenaParameters):void 0!==e.AuroraParameters?t.AuroraParameters(e.AuroraParameters):void 0!==e.AuroraPostgreSqlParameters?t.AuroraPostgreSqlParameters(e.AuroraPostgreSqlParameters):void 0!==e.AwsIotAnalyticsParameters?t.AwsIotAnalyticsParameters(e.AwsIotAnalyticsParameters):void 0!==e.JiraParameters?t.JiraParameters(e.JiraParameters):void 0!==e.MariaDbParameters?t.MariaDbParameters(e.MariaDbParameters):void 0!==e.MySqlParameters?t.MySqlParameters(e.MySqlParameters):void 0!==e.OracleParameters?t.OracleParameters(e.OracleParameters):void 0!==e.PostgreSqlParameters?t.PostgreSqlParameters(e.PostgreSqlParameters):void 0!==e.PrestoParameters?t.PrestoParameters(e.PrestoParameters):void 0!==e.RdsParameters?t.RdsParameters(e.RdsParameters):void 0!==e.RedshiftParameters?t.RedshiftParameters(e.RedshiftParameters):void 0!==e.S3Parameters?t.S3Parameters(e.S3Parameters):void 0!==e.ServiceNowParameters?t.ServiceNowParameters(e.ServiceNowParameters):void 0!==e.SnowflakeParameters?t.SnowflakeParameters(e.SnowflakeParameters):void 0!==e.SparkParameters?t.SparkParameters(e.SparkParameters):void 0!==e.SqlServerParameters?t.SqlServerParameters(e.SqlServerParameters):void 0!==e.TeradataParameters?t.TeradataParameters(e.TeradataParameters):void 0!==e.TwitterParameters?t.TwitterParameters(e.TwitterParameters):void 0!==e.AmazonOpenSearchParameters?t.AmazonOpenSearchParameters(e.AmazonOpenSearchParameters):void 0!==e.ExasolParameters?t.ExasolParameters(e.ExasolParameters):void 0!==e.DatabricksParameters?t.DatabricksParameters(e.DatabricksParameters):void 0!==e.StarburstParameters?t.StarburstParameters(e.StarburstParameters):void 0!==e.TrinoParameters?t.TrinoParameters(e.TrinoParameters):void 0!==e.BigQueryParameters?t.BigQueryParameters(e.BigQueryParameters):void 0!==e.ImpalaParameters?t.ImpalaParameters(e.ImpalaParameters):void 0!==e.CustomConnectionParameters?t.CustomConnectionParameters(e.CustomConnectionParameters):t._(e.$unknown[0],e.$unknown[1])}(ed||(ed={}));class id extends od{name="InternalFailureException";$fault="server";Message;RequestId;constructor(e){super({name:"InternalFailureException",$fault:"server",...e}),Object.setPrototypeOf(this,id.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class cd extends od{name="InvalidParameterValueException";$fault="client";Message;RequestId;constructor(e){super({name:"InvalidParameterValueException",$fault:"client",...e}),Object.setPrototypeOf(this,cd.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class ud extends od{name="ResourceNotFoundException";$fault="client";Message;ResourceType;RequestId;constructor(e){super({name:"ResourceNotFoundException",$fault:"client",...e}),Object.setPrototypeOf(this,ud.prototype),this.Message=e.Message,this.ResourceType=e.ResourceType,this.RequestId=e.RequestId}}class ld extends od{name="ThrottlingException";$fault="client";Message;RequestId;constructor(e){super({name:"ThrottlingException",$fault:"client",...e}),Object.setPrototypeOf(this,ld.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class dd extends od{name="ConflictException";$fault="client";Message;RequestId;constructor(e){super({name:"ConflictException",$fault:"client",...e}),Object.setPrototypeOf(this,dd.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}!function(e){e.visit=(e,t)=>void 0!==e.PublicUrl?t.PublicUrl(e.PublicUrl):void 0!==e.S3Uri?t.S3Uri(e.S3Uri):t._(e.$unknown[0],e.$unknown[1])}(td||(td={}));class pd extends od{name="ResourceExistsException";$fault="client";Message;ResourceType;RequestId;constructor(e){super({name:"ResourceExistsException",$fault:"client",...e}),Object.setPrototypeOf(this,pd.prototype),this.Message=e.Message,this.ResourceType=e.ResourceType,this.RequestId=e.RequestId}}class hd extends od{name="ConcurrentUpdatingException";$fault="server";Message;RequestId;constructor(e){super({name:"ConcurrentUpdatingException",$fault:"server",...e}),Object.setPrototypeOf(this,hd.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class md extends od{name="ResourceUnavailableException";$fault="server";Message;ResourceType;RequestId;constructor(e){super({name:"ResourceUnavailableException",$fault:"server",...e}),Object.setPrototypeOf(this,md.prototype),this.Message=e.Message,this.ResourceType=e.ResourceType,this.RequestId=e.RequestId}}class fd extends od{name="PreconditionNotMetException";$fault="client";Message;RequestId;constructor(e){super({name:"PreconditionNotMetException",$fault:"client",...e}),Object.setPrototypeOf(this,fd.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class gd extends od{name="LimitExceededException";$fault="client";Message;ResourceType;RequestId;constructor(e){super({name:"LimitExceededException",$fault:"client",...e}),Object.setPrototypeOf(this,gd.prototype),this.Message=e.Message,this.ResourceType=e.ResourceType,this.RequestId=e.RequestId}}class yd extends od{name="UnsupportedUserEditionException";$fault="client";Message;RequestId;constructor(e){super({name:"UnsupportedUserEditionException",$fault:"client",...e}),Object.setPrototypeOf(this,yd.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class wd extends od{name="InternalServerException";$fault="server";Message;constructor(e){super({name:"InternalServerException",$fault:"server",...e}),Object.setPrototypeOf(this,wd.prototype),this.Message=e.Message}}class Ed extends od{name="InvalidRequestException";$fault="client";Message;RequestId;constructor(e){super({name:"InvalidRequestException",$fault:"client",...e}),Object.setPrototypeOf(this,Ed.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}(nd||(nd={})).visit=(e,t)=>void 0!==e.ProjectOperation?t.ProjectOperation(e.ProjectOperation):void 0!==e.FilterOperation?t.FilterOperation(e.FilterOperation):void 0!==e.CreateColumnsOperation?t.CreateColumnsOperation(e.CreateColumnsOperation):void 0!==e.RenameColumnOperation?t.RenameColumnOperation(e.RenameColumnOperation):void 0!==e.CastColumnTypeOperation?t.CastColumnTypeOperation(e.CastColumnTypeOperation):void 0!==e.TagColumnOperation?t.TagColumnOperation(e.TagColumnOperation):void 0!==e.UntagColumnOperation?t.UntagColumnOperation(e.UntagColumnOperation):void 0!==e.OverrideDatasetParameterOperation?t.OverrideDatasetParameterOperation(e.OverrideDatasetParameterOperation):t._(e.$unknown[0],e.$unknown[1]),function(e){e.visit=(e,t)=>void 0!==e.RelationalTable?t.RelationalTable(e.RelationalTable):void 0!==e.CustomSql?t.CustomSql(e.CustomSql):void 0!==e.S3Source?t.S3Source(e.S3Source):t._(e.$unknown[0],e.$unknown[1])}(sd||(sd={}));class bd extends od{name="CustomerManagedKeyUnavailableException";$fault="client";Message;RequestId;constructor(e){super({name:"CustomerManagedKeyUnavailableException",$fault:"client",...e}),Object.setPrototypeOf(this,bd.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class xd extends od{name="InvalidNextTokenException";$fault="client";Message;RequestId;constructor(e){super({name:"InvalidNextTokenException",$fault:"client",...e}),Object.setPrototypeOf(this,xd.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class vd extends od{name="DomainNotWhitelistedException";$fault="client";Message;RequestId;constructor(e){super({name:"DomainNotWhitelistedException",$fault:"client",...e}),Object.setPrototypeOf(this,vd.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class Sd extends od{name="SessionLifetimeInMinutesInvalidException";$fault="client";Message;RequestId;constructor(e){super({name:"SessionLifetimeInMinutesInvalidException",$fault:"client",...e}),Object.setPrototypeOf(this,Sd.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class Id extends od{name="UnsupportedPricingPlanException";$fault="client";Message;RequestId;constructor(e){super({name:"UnsupportedPricingPlanException",$fault:"client",...e}),Object.setPrototypeOf(this,Id.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class Md extends od{name="QuickSightUserNotFoundException";$fault="client";Message;RequestId;constructor(e){super({name:"QuickSightUserNotFoundException",$fault:"client",...e}),Object.setPrototypeOf(this,Md.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class Pd extends od{name="IdentityTypeNotSupportedException";$fault="client";Message;RequestId;constructor(e){super({name:"IdentityTypeNotSupportedException",$fault:"client",...e}),Object.setPrototypeOf(this,Pd.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}const Od=async(e,t)=>{const n=(0,rd.l)(e,t);return n.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}"),n.p("UserName",()=>e.UserName,"{UserName}",!1),n.p("AwsAccountId",()=>e.AwsAccountId,"{AwsAccountId}",!1),n.p("Namespace",()=>e.Namespace,"{Namespace}",!1),n.m("DELETE").h({}).b(void 0),n.build()},$d=async(e,t)=>{const n=(0,rd.l)(e,t);n.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/users"),n.p("AwsAccountId",()=>e.AwsAccountId,"{AwsAccountId}",!1),n.p("Namespace",()=>e.Namespace,"{Namespace}",!1);const s=(0,He.Tj)({[rp]:[,e[np]],[sp]:[()=>void 0!==e.MaxResults,()=>e[tp].toString()]});return n.m("GET").h({}).q(s).b(void 0),n.build()},Ad=async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return Nd(e,t);const n=(0,He.Tj)({$metadata:ep(e)}),s=(0,We.Y0)((0,We.Xk)(await(0,Ue.Y2)(e.body,t)),"body"),r=(0,He.s)(s,{RequestId:We.lK});return Object.assign(n,r),(0,He.Tj)(n,{Status:[,e.statusCode]}),n},Td=async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return Nd(e,t);const n=(0,He.Tj)({$metadata:ep(e)}),s=(0,We.Y0)((0,We.Xk)(await(0,Ue.Y2)(e.body,t)),"body"),r=(0,He.s)(s,{NextToken:We.lK,RequestId:We.lK,UserList:Ve.S});return Object.assign(n,r),(0,He.Tj)(n,{Status:[,e.statusCode]}),n},Nd=async(e,t)=>{const n={...e,body:await(0,Ue.CG)(e.body,t)},s=(0,Ue.cJ)(e,n.body);switch(s){case"AccessDeniedException":case"com.amazonaws.quicksight#AccessDeniedException":throw await Rd(n,t);case"InternalFailureException":case"com.amazonaws.quicksight#InternalFailureException":throw await zd(n,t);case"InvalidParameterValueException":case"com.amazonaws.quicksight#InvalidParameterValueException":throw await Ud(n,t);case"ResourceNotFoundException":case"com.amazonaws.quicksight#ResourceNotFoundException":throw await Gd(n,t);case"ThrottlingException":case"com.amazonaws.quicksight#ThrottlingException":throw await Yd(n,t);case"ConflictException":case"com.amazonaws.quicksight#ConflictException":throw await kd(n,t);case"ResourceExistsException":case"com.amazonaws.quicksight#ResourceExistsException":throw await Wd(n,t);case"ResourceUnavailableException":case"com.amazonaws.quicksight#ResourceUnavailableException":throw await Qd(n,t);case"PreconditionNotMetException":case"com.amazonaws.quicksight#PreconditionNotMetException":throw await Bd(n,t);case"LimitExceededException":case"com.amazonaws.quicksight#LimitExceededException":throw await Vd(n,t);case"UnsupportedUserEditionException":case"com.amazonaws.quicksight#UnsupportedUserEditionException":throw await Jd(n,t);case"InternalServerException":case"com.amazonaws.quicksight#InternalServerException":throw await qd(n,t);case"InvalidRequestException":case"com.amazonaws.quicksight#InvalidRequestException":throw await Kd(n,t);case"CustomerManagedKeyUnavailableException":case"com.amazonaws.quicksight#CustomerManagedKeyUnavailableException":throw await jd(n,t);case"ConcurrentUpdatingException":case"com.amazonaws.quicksight#ConcurrentUpdatingException":throw await Dd(n,t);case"InvalidNextTokenException":case"com.amazonaws.quicksight#InvalidNextTokenException":throw await Ld(n,t);case"SessionLifetimeInMinutesInvalidException":case"com.amazonaws.quicksight#SessionLifetimeInMinutesInvalidException":throw await Zd(n,t);case"UnsupportedPricingPlanException":case"com.amazonaws.quicksight#UnsupportedPricingPlanException":throw await Xd(n,t);case"QuickSightUserNotFoundException":case"com.amazonaws.quicksight#QuickSightUserNotFoundException":throw await Hd(n,t);case"DomainNotWhitelistedException":case"com.amazonaws.quicksight#DomainNotWhitelistedException":throw await _d(n,t);case"IdentityTypeNotSupportedException":case"com.amazonaws.quicksight#IdentityTypeNotSupportedException":throw await Fd(n,t);default:const r=n.body;return Cd({output:e,parsedBody:r,errorCode:s})}},Cd=(0,Qe.j)(od),Rd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK});Object.assign(n,r);const o=new ad({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},Dd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK});Object.assign(n,r);const o=new hd({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},kd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK});Object.assign(n,r);const o=new dd({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},jd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK});Object.assign(n,r);const o=new bd({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},_d=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK});Object.assign(n,r);const o=new vd({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},Fd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK});Object.assign(n,r);const o=new Pd({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},zd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK});Object.assign(n,r);const o=new id({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},qd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK});Object.assign(n,r);const o=new wd({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},Ld=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK});Object.assign(n,r);const o=new xd({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},Ud=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK});Object.assign(n,r);const o=new cd({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},Kd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK});Object.assign(n,r);const o=new Ed({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},Vd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK,ResourceType:We.lK});Object.assign(n,r);const o=new gd({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},Bd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK});Object.assign(n,r);const o=new fd({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},Hd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK});Object.assign(n,r);const o=new Md({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},Wd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK,ResourceType:We.lK});Object.assign(n,r);const o=new pd({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},Gd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK,ResourceType:We.lK});Object.assign(n,r);const o=new ud({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},Qd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK,ResourceType:We.lK});Object.assign(n,r);const o=new md({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},Zd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK});Object.assign(n,r);const o=new Sd({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},Yd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK});Object.assign(n,r);const o=new ld({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},Xd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK});Object.assign(n,r);const o=new Id({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},Jd=async(e,t)=>{const n=(0,He.Tj)({}),s=e.body,r=(0,He.s)(s,{Message:We.lK,RequestId:We.lK});Object.assign(n,r);const o=new yd({$metadata:ep(e),...n});return(0,Be.M)(o,e.body)},ep=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),tp="MaxResults",np="NextToken",sp="max-results",rp="next-token";class op extends(Le.u.classBuilder().ep(Ol).m(function(e,t,n,s){return[(0,qe.TM)(n,this.serialize,this.deserialize),(0,ze.r)(n,e.getEndpointParameterInstructions())]}).s("QuickSight_20180401","ListUsers",{}).n("QuickSightClient","ListUsersCommand").f(void 0,void 0).ser($d).de(Td).build()){}class ap extends(Le.u.classBuilder().ep(Ol).m(function(e,t,n,s){return[(0,qe.TM)(n,this.serialize,this.deserialize),(0,ze.r)(n,e.getEndpointParameterInstructions())]}).s("QuickSight_20180401","DeleteUser",{}).n("QuickSightClient","DeleteUserCommand").f(void 0,void 0).ser(Od).de(Ad).build()){}var ip=function(e,t,n,s){return new(n||(n=Promise))(function(r,o){function a(e){try{c(s.next(e))}catch(e){o(e)}}function i(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,i)}c((s=s.apply(e,t||[])).next())})},cp=function(e,t){var n,s,r,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=i(0),a.throw=i(1),a.return=i(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,i[0]&&(o=0)),o;)try{if(n=1,s&&(r=2&i[0]?s.return:i[0]?s.throw||((r=s.return)&&r.call(s),0):s.next)&&!(r=r.call(s,i[1])).done)return r;switch(s=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,s=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){o.label=i[1];break}if(6===i[0]&&o.label<r[1]){o.label=r[1],r=i;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(i);break}r[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],s=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},up=function(){function e(){this.awsAccountId=process.env.awsAccountId,this.quickSightClient=new Jl({})}return e.prototype.retrieveUsers=function(){return ip(this,void 0,void 0,function(){var t,n,s,r;return cp(this,function(o){switch(o.label){case 0:t=[],n="",o.label=1;case 1:return s=new op({AwsAccountId:this.awsAccountId,Namespace:e.namespace,NextToken:n}),[4,this.quickSightClient.send(s)];case 2:r=o.sent(),n=r.NextToken,r.UserList.forEach(function(e){return t.push(new Il(e))}),o.label=3;case 3:if(n)return[3,1];o.label=4;case 4:return[2,t]}})})},e.prototype.deleteUser=function(t){return ip(this,void 0,void 0,function(){var n;return cp(this,function(s){switch(s.label){case 0:return console.debug("Deleting ".concat(JSON.stringify(t,null,1))),n=new ap({AwsAccountId:this.awsAccountId,Namespace:e.namespace,UserName:t.username}),[4,this.quickSightClient.send(n)];case 1:return s.sent(),[2]}})})},e.namespace="default",e}();const lp=function(){return e=void 0,t=void 0,s=function(){var e,t,n,s,r,o,a,i,c,u,l,d,p,h,m,f,g,y,w,E;return function(e,t){var n,s,r,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=i(0),a.throw=i(1),a.return=i(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,i[0]&&(o=0)),o;)try{if(n=1,s&&(r=2&i[0]?s.return:i[0]?s.throw||((r=s.return)&&r.call(s),0):s.next)&&!(r=r.call(s,i[1])).done)return r;switch(s=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,s=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){o.label=i[1];break}if(6===i[0]&&o.label<r[1]){o.label=r[1],r=i;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(i);break}r[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],s=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}(this,function(b){switch(b.label){case 0:return e=process.env,t=e.deleteDays,n=e.notifyDays,s="true"===process.env.enableNotification,r=new Date,o=new Date,r.setDate(r.getDate()-parseInt(t)),o.setDate(o.getDate()-parseInt(n)),console.info("Notifying users with last access date on: ".concat(o.toLocaleDateString()," (").concat(n," days ago).")),console.info("Deleting users with last access date on or before: ".concat(r.toLocaleDateString()," (").concat(t," days ago).")),console.info("Notification enabled? ".concat(s,".")),a=new up,i=new wr,c=new Sl,u=new si,[4,a.retrieveUsers()];case 1:return l=b.sent(),[4,i.retrieveQuickSightUserEvents(r)];case 2:for(d=b.sent(),p=0,h=l;p<h.length;p++)(E=h[p]).lastAccess=i.getLastAccessDate(E,d);console.debug("QuickSight Users:\n".concat(JSON.stringify(l,null,2))),u.queueMetric({MetricName:"PriorQuickSightUsersCount",Value:l.length}),m=0,f=0,g=0,y=0,w=l,b.label=3;case 3:return y<w.length?(E=w[y]).invalid?(console.warn("Invalid user: ".concat(JSON.stringify(E))),m++,[3,8]):[3,4]:[3,9];case 4:return E.lastAccess<r?(f++,[4,a.deleteUser(E)]):[3,6];case 5:return b.sent(),[3,8];case 6:return s&&E.role!==vl.READER&&E.lastAccess.toLocaleDateString()===o.toLocaleDateString()?(g++,[4,c.notifyUser(E)]):[3,8];case 7:b.sent(),b.label=8;case 8:return y++,[3,3];case 9:return u.queueMetric({MetricName:"InvalidUsersCount",Value:m}),u.queueMetric({MetricName:"UsersDeletedCount",Value:f}),u.queueMetric({MetricName:"NotificationsSentCount",Value:g}),u.queueMetric({MetricName:"RemainingQuickSightUsersCount",Value:l.length-f}),[4,u.emitQueuedMetrics()];case 10:return b.sent(),[2]}})},new((n=void 0)||(n=Promise))(function(r,o){function a(e){try{c(s.next(e))}catch(e){o(e)}}function i(e){try{c(s.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,i)}c((s=s.apply(e,t||[])).next())});var e,t,n,s};module.exports=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bnRpbWUvcmVxdWlyZSBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvZXh0ZXJuYWwgbm9kZS1jb21tb25qcyBcImJ1ZmZlclwiIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvY2xpZW50L3NldENyZWRlbnRpYWxGZWF0dXJlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvZXh0ZXJuYWwgbm9kZS1jb21tb25qcyBcImFzeW5jX2hvb2tzXCIiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvdXRpbHMvY3VzdG9tRW5kcG9pbnRGdW5jdGlvbnMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXIvZGlzdC1lcy9zbHVycEZpbGUuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy91dGlsLWlkZW50aXR5LWFuZC1hdXRoL0RlZmF1bHRJZGVudGl0eVByb3ZpZGVyQ29uZmlnLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy9saWIvYXdzL2lzVmlydHVhbEhvc3RhYmxlUzNCdWNrZXQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay91dGlsLWVuZHBvaW50cy9kaXN0LWVzL2xpYi9hd3MvcGFydGl0aW9uLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy9hd3MuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay91dGlsLWVuZHBvaW50cy9kaXN0LWVzL2xpYi9hd3MvcGFyc2VBcm4uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtY29udGVudC1sZW5ndGgvZGlzdC1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc21pdGh5LWNsaWVudC9kaXN0LWVzL2RlZmF1bHRzLW1vZGUuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtZW5kcG9pbnQvZGlzdC1lcy9zZXJ2aWNlLWN1c3RvbWl6YXRpb25zL3MzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50L2Rpc3QtZXMvYWRhcHRvcnMvY3JlYXRlQ29uZmlnVmFsdWVQcm92aWRlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludC9kaXN0LWVzL2FkYXB0b3JzL2dldEVuZHBvaW50RnJvbUluc3RydWN0aW9ucy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludC9kaXN0LWVzL2dldEVuZHBvaW50UGx1Z2luLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50L2Rpc3QtZXMvZW5kcG9pbnRNaWRkbGV3YXJlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvZXh0ZXJuYWwgbm9kZS1jb21tb25qcyBcIm9zXCIiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtc3RyZWFtL2Rpc3QtZXMvYmxvYi9VaW50OEFycmF5QmxvYkFkYXB0ZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtc3RyZWFtL2Rpc3QtZXMvYmxvYi90cmFuc2Zvcm1zLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9wcm90b2NvbHMvY29sbGVjdC1zdHJlYW0tYm9keS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL21pZGRsZXdhcmUtaG9zdC1oZWFkZXIvZGlzdC1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc21pdGh5LWNsaWVudC9kaXN0LWVzL29iamVjdC1tYXBwaW5nLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWJhc2U2NC9kaXN0LWVzL2Zyb21CYXNlNjQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvbGliL2lzSXBBZGRyZXNzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtZXMvcGFyc2VJbmkuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLWVudi9kaXN0LWVzL2Zyb21FbnYuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZGVmYXVsdHMtbW9kZS1ub2RlL2Rpc3QtZXMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWRlZmF1bHRzLW1vZGUtbm9kZS9kaXN0LWVzL2RlZmF1bHRzTW9kZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1kZWZhdWx0cy1tb2RlLW5vZGUvZGlzdC1lcy9yZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLXN0YWNrL2Rpc3QtZXMvTWlkZGxld2FyZVN0YWNrLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLXNlcmRlL2Rpc3QtZXMvZGVzZXJpYWxpemVyTWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1zZXJkZS9kaXN0LWVzL3NlcmlhbGl6ZXJNaWRkbGV3YXJlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLXNlcmRlL2Rpc3QtZXMvc2VyZGVQbHVnaW4uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2hhc2gtbm9kZS9kaXN0LWVzL2luZGV4LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy9sYW1iZGEtaW52b2tlLXN0b3JlL2Rpc3QvaW52b2tlLXN0b3JlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9zZXJkZS9kYXRlLXV0aWxzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvcHJvdG9jb2xzL2pzb24vcGFyc2VKc29uQm9keS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJmcy9wcm9taXNlc1wiIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc2V0RmVhdHVyZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29uZmlnLXJlc29sdmVyL2Rpc3QtZXMvZW5kcG9pbnRzQ29uZmlnL05vZGVVc2VEdWFsc3RhY2tFbmRwb2ludENvbmZpZ09wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwic3RyZWFtXCIiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtYm9keS1sZW5ndGgtbm9kZS9kaXN0LWVzL2NhbGN1bGF0ZUJvZHlMZW5ndGguanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NtaXRoeS1jbGllbnQvZGlzdC1lcy9lbWl0V2FybmluZ0lmVW5zdXBwb3J0ZWRWZXJzaW9uLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbWlkZGxld2FyZS1odHRwLWF1dGgtc2NoZW1lL2h0dHBBdXRoU2NoZW1lTWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL21pZGRsZXdhcmUtaHR0cC1hdXRoLXNjaGVtZS9nZXRIdHRwQXV0aFNjaGVtZUVuZHBvaW50UnVsZVNldFBsdWdpbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL21pZGRsZXdhcmUtaHR0cC1hdXRoLXNjaGVtZS9yZXNvbHZlQXV0aE9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXIvZGlzdC1lcy9nZXRDb25maWdGaWxlcGF0aC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC11cmktZXNjYXBlL2Rpc3QtZXMvZXNjYXBlLXVyaS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXJsLXBhcnNlci9kaXN0LWVzL2luZGV4LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9xdWVyeXN0cmluZy1wYXJzZXIvZGlzdC1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludC9kaXN0LWVzL3Jlc29sdmVFbmRwb2ludENvbmZpZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJodHRwc1wiIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9ub2RlLWh0dHAtaGFuZGxlci9kaXN0LWVzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbm9kZS1odHRwLWhhbmRsZXIvZGlzdC1lcy9nZXQtdHJhbnNmb3JtZWQtaGVhZGVycy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbm9kZS1odHRwLWhhbmRsZXIvZGlzdC1lcy90aW1pbmcuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L25vZGUtaHR0cC1oYW5kbGVyL2Rpc3QtZXMvbm9kZS1odHRwLWhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3F1ZXJ5c3RyaW5nLWJ1aWxkZXIvZGlzdC1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbm9kZS1odHRwLWhhbmRsZXIvZGlzdC1lcy9zZXQtY29ubmVjdGlvbi10aW1lb3V0LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9ub2RlLWh0dHAtaGFuZGxlci9kaXN0LWVzL3NldC1zb2NrZXQtdGltZW91dC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbm9kZS1odHRwLWhhbmRsZXIvZGlzdC1lcy9zZXQtc29ja2V0LWtlZXAtYWxpdmUuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L25vZGUtaHR0cC1oYW5kbGVyL2Rpc3QtZXMvd3JpdGUtcmVxdWVzdC1ib2R5LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9wcm90b2NvbC1odHRwL2Rpc3QtZXMvZXh0ZW5zaW9ucy9odHRwRXh0ZW5zaW9uQ29uZmlndXJhdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc21pdGh5LWNsaWVudC9kaXN0LWVzL2RlZmF1bHQtZXJyb3ItaGFuZGxlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvcHJvcGVydHktcHJvdmlkZXIvZGlzdC1lcy9DcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtY29uZmlnLXByb3ZpZGVyL2Rpc3QtZXMvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2lzLWFycmF5LWJ1ZmZlci9kaXN0LWVzL2luZGV4LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9wcm9wZXJ0eS1wcm92aWRlci9kaXN0LWVzL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyL2Rpc3QtZXMvZ2V0U2VsZWN0b3JOYW1lLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9ub2RlLWNvbmZpZy1wcm92aWRlci9kaXN0LWVzL2Zyb21TaGFyZWRDb25maWdGaWxlcy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbm9kZS1jb25maWctcHJvdmlkZXIvZGlzdC1lcy9jb25maWdMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyL2Rpc3QtZXMvZnJvbUVudi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbm9kZS1jb25maWctcHJvdmlkZXIvZGlzdC1lcy9mcm9tU3RhdGljLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9wcm9wZXJ0eS1wcm92aWRlci9kaXN0LWVzL2Zyb21TdGF0aWMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3Byb3RvY29sLWh0dHAvZGlzdC1lcy9odHRwUmVzcG9uc2UuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NtaXRoeS1jbGllbnQvZGlzdC1lcy9Ob09wTG9nZ2VyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvcmVnaW9uLWNvbmZpZy1yZXNvbHZlci9kaXN0LWVzL2V4dGVuc2lvbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvbmZpZy1yZXNvbHZlci9kaXN0LWVzL3JlZ2lvbkNvbmZpZy9pc0ZpcHNSZWdpb24uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvbmZpZy1yZXNvbHZlci9kaXN0LWVzL3JlZ2lvbkNvbmZpZy9nZXRSZWFsUmVnaW9uLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb25maWctcmVzb2x2ZXIvZGlzdC1lcy9yZWdpb25Db25maWcvcmVzb2x2ZVJlZ2lvbkNvbmZpZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL25vcm1hbGl6ZVByb3ZpZGVyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zbWl0aHktY2xpZW50L2Rpc3QtZXMvZXhjZXB0aW9ucy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC11dGY4L2Rpc3QtZXMvdG9VaW50OEFycmF5LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvaHR0cEF1dGhTY2hlbWVzL3V0aWxzL2dldEFycmF5Rm9yQ29tbWFTZXBhcmF0ZWRTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9odHRwQXV0aFNjaGVtZXMvYXdzX3Nkay9OT0RFX0FVVEhfU0NIRU1FX1BSRUZFUkVOQ0VfT1BUSU9OUy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NvcmUvZGlzdC1lcy9zdWJtb2R1bGVzL2h0dHBBdXRoU2NoZW1lcy91dGlscy9nZXRCZWFyZXJUb2tlbkVudktleS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2VydmljZS1lcnJvci1jbGFzc2lmaWNhdGlvbi9kaXN0LWVzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2VydmljZS1lcnJvci1jbGFzc2lmaWNhdGlvbi9kaXN0LWVzL2luZGV4LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb25maWctcmVzb2x2ZXIvZGlzdC1lcy9lbmRwb2ludHNDb25maWcvTm9kZVVzZUZpcHNFbmRwb2ludENvbmZpZ09wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvbmZpZy1yZXNvbHZlci9kaXN0LWVzL3JlZ2lvbkNvbmZpZy9jb25maWcuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9jbGllbnQvZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXVpZC9kaXN0LWVzL3JhbmRvbVVVSUQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V1aWQvZGlzdC1lcy92NC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1yZXRyeS9kaXN0LWVzL2lzU3RyZWFtaW5nUGF5bG9hZC9pc1N0cmVhbWluZ1BheWxvYWQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtcmV0cnkvZGlzdC1lcy91dGlsLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLXJldHJ5L2Rpc3QtZXMvcmV0cnlNaWRkbGV3YXJlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbWlkZGxld2FyZS1odHRwLXNpZ25pbmcvaHR0cFNpZ25pbmdNaWRkbGV3YXJlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvbWlkZGxld2FyZS1odHRwLXNpZ25pbmcvZ2V0SHR0cFNpZ25pbmdNaWRkbGV3YXJlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9ub2RlLWh0dHAtaGFuZGxlci9kaXN0LWVzL3N0cmVhbS1jb2xsZWN0b3IvY29sbGVjdG9yLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9ub2RlLWh0dHAtaGFuZGxlci9kaXN0LWVzL3N0cmVhbS1jb2xsZWN0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwiY2hpbGRfcHJvY2Vzc1wiIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyL2Rpc3QtZXMvZ2V0Q29uZmlnRGF0YS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlci9kaXN0LWVzL2dldENyZWRlbnRpYWxzRmlsZXBhdGguanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXIvZGlzdC1lcy9sb2FkU2hhcmVkQ29uZmlnRmlsZXMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3R5cGVzL2Rpc3QtZXMvcHJvZmlsZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMveG1scGFyc2VyL09wdGlvbnNCdWlsZGVyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy91dGlsLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIveG1sTm9kZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMveG1scGFyc2VyL0RvY1R5cGVSZWFkZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9zdHJudW0vc3RybnVtLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvT3JkZXJlZE9ialBhcnNlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMvaWdub3JlQXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMveG1scGFyc2VyL25vZGUyanNvbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMvdmFsaWRhdG9yLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsveG1sLWJ1aWxkZXIvZGlzdC1lcy94bWwtcGFyc2VyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvWE1MUGFyc2VyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zbWl0aHktY2xpZW50L2Rpc3QtZXMvZ2V0LXZhbHVlLWZyb20tdGV4dC1ub2RlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvcHJvdG9jb2xzL3htbC9wYXJzZVhtbEJvZHkuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtY29uZmlnLXByb3ZpZGVyL2Rpc3QtZXMvYm9vbGVhblNlbGVjdG9yLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXJldHJ5L2Rpc3QtZXMvRGVmYXVsdFJhdGVMaW1pdGVyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXJldHJ5L2Rpc3QtZXMvZGVmYXVsdFJldHJ5QmFja29mZlN0cmF0ZWd5LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXJldHJ5L2Rpc3QtZXMvZGVmYXVsdFJldHJ5VG9rZW4uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtcmV0cnkvZGlzdC1lcy9TdGFuZGFyZFJldHJ5U3RyYXRlZ3kuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtcmV0cnkvZGlzdC1lcy9BZGFwdGl2ZVJldHJ5U3RyYXRlZ3kuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtcmV0cnkvZGlzdC1lcy9jb25maWd1cmF0aW9ucy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvcHJvcGVydHktcHJvdmlkZXIvZGlzdC1lcy9Qcm92aWRlckVycm9yLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLW1pZGRsZXdhcmUvZGlzdC1lcy9nZXRTbWl0aHlDb250ZXh0LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvaHR0cEF1dGhTY2hlbWVzL3V0aWxzL2dldFNrZXdDb3JyZWN0ZWREYXRlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvaHR0cEF1dGhTY2hlbWVzL3V0aWxzL2dldERhdGVIZWFkZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9odHRwQXV0aFNjaGVtZXMvdXRpbHMvZ2V0VXBkYXRlZFN5c3RlbUNsb2NrT2Zmc2V0LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvaHR0cEF1dGhTY2hlbWVzL3V0aWxzL2lzQ2xvY2tTa2V3ZWQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9odHRwQXV0aFNjaGVtZXMvYXdzX3Nkay9Bd3NTZGtTaWdWNFNpZ25lci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlci9kaXN0LWVzL2dldFByb2ZpbGVOYW1lLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9zZXJkZS9wYXJzZS11dGlscy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJwYXRoXCIiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwiY3J5cHRvXCIiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwidXJsXCIiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXIvZGlzdC1lcy9nZXRIb21lRGlyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXJldHJ5L2Rpc3QtZXMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL2RlYnVnL2RlYnVnSWQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvZGVidWcvdG9EZWJ1Z1N0cmluZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy90eXBlcy9FbmRwb2ludEVycm9yLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL2xpYi9ib29sZWFuRXF1YWxzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL2xpYi9nZXRBdHRyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL2xpYi9nZXRBdHRyUGF0aExpc3QuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3R5cGVzL2Rpc3QtZXMvZW5kcG9pbnQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvbGliL3BhcnNlVVJMLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL3V0aWxzL2VuZHBvaW50RnVuY3Rpb25zLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL2xpYi9pc1NldC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy9saWIvbm90LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL2xpYi9zdHJpbmdFcXVhbHMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvbGliL3N1YnN0cmluZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy9saWIvdXJpRW5jb2RlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL3V0aWxzL2V2YWx1YXRlVGVtcGxhdGUuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvdXRpbHMvZXZhbHVhdGVFeHByZXNzaW9uLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL3V0aWxzL2dldFJlZmVyZW5jZVZhbHVlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL3V0aWxzL2NhbGxGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy91dGlscy9ldmFsdWF0ZUNvbmRpdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy91dGlscy9ldmFsdWF0ZUNvbmRpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvdXRpbHMvZ2V0RW5kcG9pbnRIZWFkZXJzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL3V0aWxzL2dldEVuZHBvaW50UHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvdXRpbHMvZ2V0RW5kcG9pbnRQcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL3V0aWxzL2dldEVuZHBvaW50VXJsLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL3V0aWxzL2V2YWx1YXRlRW5kcG9pbnRSdWxlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL3V0aWxzL2V2YWx1YXRlRXJyb3JSdWxlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWVuZHBvaW50cy9kaXN0LWVzL3V0aWxzL2V2YWx1YXRlVHJlZVJ1bGUuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtZW5kcG9pbnRzL2Rpc3QtZXMvdXRpbHMvZXZhbHVhdGVSdWxlcy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy9yZXNvbHZlRW5kcG9pbnQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3R5cGVzL2Rpc3QtZXMvbWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc21pdGh5LWNsaWVudC9kaXN0LWVzL3NlcmRlLWpzb24uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9taWRkbGV3YXJlLXVzZXItYWdlbnQvZGlzdC1lcy9jb25maWd1cmF0aW9ucy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvcHJvdG9jb2wtaHR0cC9kaXN0LWVzL2h0dHBSZXF1ZXN0LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXJldHJ5L2Rpc3QtZXMvY29uZmlnLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXV0ZjgvZGlzdC1lcy9mcm9tVXRmOC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy9jYWNoZS9FbmRwb2ludENhY2hlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLXV0ZjgvZGlzdC1lcy90b1V0ZjguanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9taWRkbGV3YXJlLWxvZ2dlci9kaXN0LWVzL2xvZ2dlck1pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NtaXRoeS1jbGllbnQvZGlzdC1lcy9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9zdWJtb2R1bGVzL3Byb3RvY29scy9leHRlbmRlZC1lbmNvZGUtdXJpLWNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL21pZGRsZXdhcmUtcmVjdXJzaW9uLWRldGVjdGlvbi9kaXN0LWVzL2NvbmZpZ3VyYXRpb24uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9taWRkbGV3YXJlLXJlY3Vyc2lvbi1kZXRlY3Rpb24vZGlzdC1lcy9yZWN1cnNpb25EZXRlY3Rpb25NaWRkbGV3YXJlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvbWlkZGxld2FyZS1yZWN1cnNpb24tZGV0ZWN0aW9uL2Rpc3QtZXMvZ2V0UmVjdXJzaW9uRGV0ZWN0aW9uUGx1Z2luLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvdXRpbC1pZGVudGl0eS1hbmQtYXV0aC9tZW1vaXplSWRlbnRpdHlQcm92aWRlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2lnbmF0dXJlLXY0L2Rpc3QtZXMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaWduYXR1cmUtdjQvZGlzdC1lcy9jcmVkZW50aWFsRGVyaXZhdGlvbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2lnbmF0dXJlLXY0L2Rpc3QtZXMvZ2V0Q2Fub25pY2FsSGVhZGVycy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2lnbmF0dXJlLXY0L2Rpc3QtZXMvZ2V0UGF5bG9hZEhhc2guanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NpZ25hdHVyZS12NC9kaXN0LWVzL0hlYWRlckZvcm1hdHRlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2lnbmF0dXJlLXY0L2Rpc3QtZXMvbW92ZUhlYWRlcnNUb1F1ZXJ5LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaWduYXR1cmUtdjQvZGlzdC1lcy9wcmVwYXJlUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2lnbmF0dXJlLXY0L2Rpc3QtZXMvU2lnbmF0dXJlVjRCYXNlLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaWduYXR1cmUtdjQvZGlzdC1lcy9nZXRDYW5vbmljYWxRdWVyeS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc2lnbmF0dXJlLXY0L2Rpc3QtZXMvdXRpbERhdGUuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NpZ25hdHVyZS12NC9kaXN0LWVzL1NpZ25hdHVyZVY0LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zaWduYXR1cmUtdjQvZGlzdC1lcy9oZWFkZXJVdGlsLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvaHR0cEF1dGhTY2hlbWVzL2F3c19zZGsvcmVzb2x2ZUF3c1Nka1NpZ1Y0Q29uZmlnLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWhleC1lbmNvZGluZy9kaXN0LWVzL2luZGV4LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvY2xpZW50L3NldEZlYXR1cmUuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9taWRkbGV3YXJlLXVzZXItYWdlbnQvZGlzdC1lcy9jaGVjay1mZWF0dXJlcy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL21pZGRsZXdhcmUtdXNlci1hZ2VudC9kaXN0LWVzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL21pZGRsZXdhcmUtdXNlci1hZ2VudC9kaXN0LWVzL3VzZXItYWdlbnQtbWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL21pZGRsZXdhcmUtdXNlci1hZ2VudC9kaXN0LWVzL2VuY29kZS1mZWF0dXJlcy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvcHJvcGVydHktcHJvdmlkZXIvZGlzdC1lcy9jaGFpbi5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NvcmUvZGlzdC1lcy9zdWJtb2R1bGVzL3Byb3RvY29scy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwicHJvY2Vzc1wiIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvdXRpbC11c2VyLWFnZW50LW5vZGUvZGlzdC1lcy9kZWZhdWx0VXNlckFnZW50LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50L2Rpc3QtZXMvYWRhcHRvcnMvdG9FbmRwb2ludFYxLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9zY2hlbWEvZGVyZWYuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9zdWJtb2R1bGVzL3NjaGVtYS9UeXBlUmVnaXN0cnkuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9zdWJtb2R1bGVzL3NjaGVtYS9zY2hlbWFzL1NjaGVtYS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvc2NoZW1hL3NjaGVtYXMvTGlzdFNjaGVtYS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvc2NoZW1hL3NjaGVtYXMvTWFwU2NoZW1hLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9zY2hlbWEvc2NoZW1hcy9zZW50aW5lbHMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9zdWJtb2R1bGVzL3NjaGVtYS9zY2hlbWFzL1NpbXBsZVNjaGVtYS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvY29yZS9kaXN0LWVzL3N1Ym1vZHVsZXMvc2NoZW1hL3NjaGVtYXMvU3RydWN0dXJlU2NoZW1hLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9zY2hlbWEvc2NoZW1hcy9Ob3JtYWxpemVkU2NoZW1hLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zbWl0aHktY2xpZW50L2Rpc3QtZXMvc2NoZW1hTG9nRmlsdGVyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zbWl0aHktY2xpZW50L2Rpc3QtZXMvY29tbWFuZC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJodHRwXCIiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtZW5kcG9pbnQvZGlzdC1lcy9hZGFwdG9ycy9nZXRFbmRwb2ludFVybENvbmZpZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludC9kaXN0LWVzL2FkYXB0b3JzL2dldEVuZHBvaW50RnJvbUNvbmZpZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1lbmRwb2ludHMvZGlzdC1lcy9saWIvaXNWYWxpZEhvc3RMYWJlbC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1taWRkbGV3YXJlL2Rpc3QtZXMvbm9ybWFsaXplUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC9leHRlcm5hbCBub2RlLWNvbW1vbmpzIFwidXRpbFwiIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9jb3JlL2Rpc3QtZXMvc3VibW9kdWxlcy9wcm90b2NvbHMvcmVxdWVzdEJ1aWxkZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L2NvcmUvZGlzdC1lcy9zdWJtb2R1bGVzL3Byb3RvY29scy9yZXNvbHZlLXBhdGguanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtYnVmZmVyLWZyb20vZGlzdC1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1iYXNlNjQvZGlzdC1lcy90b0Jhc2U2NC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJmc1wiIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvdXRpbC11c2VyLWFnZW50LW5vZGUvZGlzdC1lcy9ub2RlQXBwSWRDb25maWdPcHRpb25zLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS90eXBlcy9kaXN0LWVzL2V4dGVuc2lvbnMvY2hlY2tzdW0uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L3NtaXRoeS1jbGllbnQvZGlzdC1lcy9leHRlbnNpb25zL2RlZmF1bHRFeHRlbnNpb25Db25maWd1cmF0aW9uLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zbWl0aHktY2xpZW50L2Rpc3QtZXMvZXh0ZW5zaW9ucy9jaGVja3N1bS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc21pdGh5LWNsaWVudC9kaXN0LWVzL2V4dGVuc2lvbnMvcmV0cnkuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvd2VicGFjay9ydW50aW1lL2Vuc3VyZSBjaHVuayIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWwvZGlzdC1lcy9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR0cmFpbC9kaXN0LWVzL2VuZHBvaW50L0VuZHBvaW50UGFyYW1ldGVycy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZS9kaXN0LWVzL3JlbW90ZVByb3ZpZGVyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1ub2RlL2Rpc3QtZXMvZGVmYXVsdFByb3ZpZGVyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWwvZGlzdC1lcy9lbmRwb2ludC9ydWxlc2V0LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWwvZGlzdC1lcy9lbmRwb2ludC9lbmRwb2ludFJlc29sdmVyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWwvZGlzdC1lcy9DbG91ZFRyYWlsQ2xpZW50LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWwvZGlzdC1lcy9ydW50aW1lQ29uZmlnLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWwvZGlzdC1lcy9ydW50aW1lQ29uZmlnLnNoYXJlZC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHRyYWlsL2Rpc3QtZXMvcnVudGltZUV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR0cmFpbC9kaXN0LWVzL2F1dGgvaHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWwvZGlzdC1lcy9tb2RlbHMvQ2xvdWRUcmFpbFNlcnZpY2VFeGNlcHRpb24uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR0cmFpbC9kaXN0LWVzL21vZGVscy9tb2RlbHNfMC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHRyYWlsL2Rpc3QtZXMvcHJvdG9jb2xzL0F3c19qc29uMV8xLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWwvZGlzdC1lcy9jb21tYW5kcy9Mb29rdXBFdmVudHNDb21tYW5kLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9zcmMvQ2xvdWRUcmFpbFVzZXJFdmVudC50cyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vc3JjL0Nsb3VkVHJhaWxVc2VyRXZlbnRNYW5hZ2VyLnRzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWNvbXByZXNzaW9uL2Rpc3QtZXMvcmVzb2x2ZUNvbXByZXNzaW9uQ29uZmlnLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3Vkd2F0Y2gvZGlzdC1lcy9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR3YXRjaC9kaXN0LWVzL2VuZHBvaW50L0VuZHBvaW50UGFyYW1ldGVycy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1jb21wcmVzc2lvbi9kaXN0LWVzL05PREVfRElTQUJMRV9SRVFVRVNUX0NPTVBSRVNTSU9OX0NPTkZJR19PUFRJT05TLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWNvbmZpZy1wcm92aWRlci9kaXN0LWVzL251bWJlclNlbGVjdG9yLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWNvbXByZXNzaW9uL2Rpc3QtZXMvTk9ERV9SRVFVRVNUX01JTl9DT01QUkVTU0lPTl9TSVpFX0JZVEVTX0NPTkZJR19PUFRJT05TLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3Vkd2F0Y2gvZGlzdC1lcy9lbmRwb2ludC9ydWxlc2V0LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3Vkd2F0Y2gvZGlzdC1lcy9lbmRwb2ludC9lbmRwb2ludFJlc29sdmVyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3Vkd2F0Y2gvZGlzdC1lcy9DbG91ZFdhdGNoQ2xpZW50LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3Vkd2F0Y2gvZGlzdC1lcy9ydW50aW1lQ29uZmlnLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3Vkd2F0Y2gvZGlzdC1lcy9ydW50aW1lQ29uZmlnLnNoYXJlZC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHdhdGNoL2Rpc3QtZXMvcnVudGltZUV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR3YXRjaC9kaXN0LWVzL2F1dGgvaHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvZXh0ZXJuYWwgbm9kZS1jb21tb25qcyBcInpsaWJcIiIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1jb21wcmVzc2lvbi9kaXN0LWVzL2NvbXByZXNzU3RyZWFtLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9taWRkbGV3YXJlLWNvbXByZXNzaW9uL2Rpc3QtZXMvY29tcHJlc3NTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtY29tcHJlc3Npb24vZGlzdC1lcy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9Ac21pdGh5L21pZGRsZXdhcmUtY29tcHJlc3Npb24vZGlzdC1lcy9pc1N0cmVhbWluZy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1jb21wcmVzc2lvbi9kaXN0LWVzL2NvbXByZXNzaW9uTWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvbWlkZGxld2FyZS1jb21wcmVzc2lvbi9kaXN0LWVzL2dldENvbXByZXNzaW9uUGx1Z2luLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQHNtaXRoeS9zbWl0aHktY2xpZW50L2Rpc3QtZXMvc2VyLXV0aWxzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LWNsb3Vkd2F0Y2gvZGlzdC1lcy9tb2RlbHMvQ2xvdWRXYXRjaFNlcnZpY2VFeGNlcHRpb24uanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtY2xvdWR3YXRjaC9kaXN0LWVzL21vZGVscy9tb2RlbHNfMC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHdhdGNoL2Rpc3QtZXMvcHJvdG9jb2xzL0F3c19xdWVyeS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0BzbWl0aHkvc21pdGh5LWNsaWVudC9kaXN0LWVzL2dldC1hcnJheS1pZi1zaW5nbGUtaXRlbS5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHdhdGNoL2Rpc3QtZXMvY29tbWFuZHMvUHV0TWV0cmljRGF0YUNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL3NyYy9DbG91ZFdhdGNoTWV0cmljQ2xpZW50LnRzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXNlcy9kaXN0LWVzL2F1dGgvaHR0cEF1dGhTY2hlbWVQcm92aWRlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1zZXMvZGlzdC1lcy9lbmRwb2ludC9FbmRwb2ludFBhcmFtZXRlcnMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtc2VzL2Rpc3QtZXMvZW5kcG9pbnQvcnVsZXNldC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1zZXMvZGlzdC1lcy9lbmRwb2ludC9lbmRwb2ludFJlc29sdmVyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXNlcy9kaXN0LWVzL1NFU0NsaWVudC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1zZXMvZGlzdC1lcy9ydW50aW1lQ29uZmlnLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXNlcy9kaXN0LWVzL3J1bnRpbWVDb25maWcuc2hhcmVkLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXNlcy9kaXN0LWVzL3J1bnRpbWVFeHRlbnNpb25zLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXNlcy9kaXN0LWVzL2F1dGgvaHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXNlcy9kaXN0LWVzL21vZGVscy9TRVNTZXJ2aWNlRXhjZXB0aW9uLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXNlcy9kaXN0LWVzL21vZGVscy9tb2RlbHNfMC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1zZXMvZGlzdC1lcy9wcm90b2NvbHMvQXdzX3F1ZXJ5LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXNlcy9kaXN0LWVzL2NvbW1hbmRzL1NlbmRFbWFpbENvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL3NyYy9RdWlja1NpZ2h0VXNlci50cyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vc3JjL05vdGlmaWNhdGlvbk1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtcXVpY2tzaWdodC9kaXN0LWVzL2F1dGgvaHR0cEF1dGhTY2hlbWVQcm92aWRlci5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1xdWlja3NpZ2h0L2Rpc3QtZXMvZW5kcG9pbnQvRW5kcG9pbnRQYXJhbWV0ZXJzLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXF1aWNrc2lnaHQvZGlzdC1lcy9lbmRwb2ludC9ydWxlc2V0LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXF1aWNrc2lnaHQvZGlzdC1lcy9lbmRwb2ludC9lbmRwb2ludFJlc29sdmVyLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXF1aWNrc2lnaHQvZGlzdC1lcy9RdWlja1NpZ2h0Q2xpZW50LmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXF1aWNrc2lnaHQvZGlzdC1lcy9ydW50aW1lQ29uZmlnLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXF1aWNrc2lnaHQvZGlzdC1lcy9ydW50aW1lQ29uZmlnLnNoYXJlZC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1xdWlja3NpZ2h0L2Rpc3QtZXMvcnVudGltZUV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtcXVpY2tzaWdodC9kaXN0LWVzL2F1dGgvaHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXF1aWNrc2lnaHQvZGlzdC1lcy9tb2RlbHMvbW9kZWxzXzIuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtcXVpY2tzaWdodC9kaXN0LWVzL21vZGVscy9tb2RlbHNfMy5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1xdWlja3NpZ2h0L2Rpc3QtZXMvbW9kZWxzL1F1aWNrU2lnaHRTZXJ2aWNlRXhjZXB0aW9uLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9ub2RlX21vZHVsZXMvQGF3cy1zZGsvY2xpZW50LXF1aWNrc2lnaHQvZGlzdC1lcy9tb2RlbHMvbW9kZWxzXzAuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtcXVpY2tzaWdodC9kaXN0LWVzL21vZGVscy9tb2RlbHNfNC5qcyIsIndlYnBhY2s6Ly90ZXJyYWZvcm0tYXdzLXF1aWNrc2lnaHQtdXNlci1jbGVhbnVwLy4vbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL2NsaWVudC1xdWlja3NpZ2h0L2Rpc3QtZXMvcHJvdG9jb2xzL0F3c19yZXN0SnNvbjEuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtcXVpY2tzaWdodC9kaXN0LWVzL2NvbW1hbmRzL0xpc3RVc2Vyc0NvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vdGVycmFmb3JtLWF3cy1xdWlja3NpZ2h0LXVzZXItY2xlYW51cC8uL25vZGVfbW9kdWxlcy9AYXdzLXNkay9jbGllbnQtcXVpY2tzaWdodC9kaXN0LWVzL2NvbW1hbmRzL0RlbGV0ZVVzZXJDb21tYW5kLmpzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9zcmMvUXVpY2tTaWdodFVzZXJNYW5hZ2VyLnRzIiwid2VicGFjazovL3RlcnJhZm9ybS1hd3MtcXVpY2tzaWdodC11c2VyLWNsZWFudXAvLi9zcmMvcHJ1bmVRdWlja1NpZ2h0VXNlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGNodW5rc1xuLy8gXCIxXCIgbWVhbnMgXCJsb2FkZWRcIiwgb3RoZXJ3aXNlIG5vdCBsb2FkZWQgeWV0XG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNjc6IDFcbn07XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxudmFyIGluc3RhbGxDaHVuayA9IChjaHVuaykgPT4ge1xuXHR2YXIgbW9yZU1vZHVsZXMgPSBjaHVuay5tb2R1bGVzLCBjaHVua0lkcyA9IGNodW5rLmlkcywgcnVudGltZSA9IGNodW5rLnJ1bnRpbWU7XG5cdGZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHR9XG5cdH1cblx0aWYocnVudGltZSkgcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKVxuXHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkc1tpXV0gPSAxO1xuXG59O1xuXG4vLyByZXF1aXJlKCkgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuX193ZWJwYWNrX3JlcXVpcmVfXy5mLnJlcXVpcmUgPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcblx0Ly8gXCIxXCIgaXMgdGhlIHNpZ25hbCBmb3IgXCJhbHJlYWR5IGxvYWRlZFwiXG5cdGlmKCFpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRpZih0cnVlKSB7IC8vIGFsbCBjaHVua3MgaGF2ZSBKU1xuXHRcdFx0dmFyIGluc3RhbGxlZENodW5rID0gcmVxdWlyZShcIi4vXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCkpO1xuXHRcdFx0aWYgKCFpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdFx0aW5zdGFsbENodW5rKGluc3RhbGxlZENodW5rKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMTtcblx0fVxufTtcblxuLy8gbm8gZXh0ZXJuYWwgaW5zdGFsbCBjaHVua1xuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYnVmZmVyXCIpOyIsImV4cG9ydCBmdW5jdGlvbiBzZXRDcmVkZW50aWFsRmVhdHVyZShjcmVkZW50aWFscywgZmVhdHVyZSwgdmFsdWUpIHtcbiAgICBpZiAoIWNyZWRlbnRpYWxzLiRzb3VyY2UpIHtcbiAgICAgICAgY3JlZGVudGlhbHMuJHNvdXJjZSA9IHt9O1xuICAgIH1cbiAgICBjcmVkZW50aWFscy4kc291cmNlW2ZlYXR1cmVdID0gdmFsdWU7XG4gICAgcmV0dXJuIGNyZWRlbnRpYWxzO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYXN5bmNfaG9va3NcIik7IiwiZXhwb3J0IGNvbnN0IGN1c3RvbUVuZHBvaW50RnVuY3Rpb25zID0ge307XG4iLCJpbXBvcnQgeyBwcm9taXNlcyBhcyBmc1Byb21pc2VzIH0gZnJvbSBcImZzXCI7XG5jb25zdCB7IHJlYWRGaWxlIH0gPSBmc1Byb21pc2VzO1xuZXhwb3J0IGNvbnN0IGZpbGVQcm9taXNlc0hhc2ggPSB7fTtcbmV4cG9ydCBjb25zdCBmaWxlSW50ZXJjZXB0ID0ge307XG5leHBvcnQgY29uc3Qgc2x1cnBGaWxlID0gKHBhdGgsIG9wdGlvbnMpID0+IHtcbiAgICBpZiAoZmlsZUludGVyY2VwdFtwYXRoXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBmaWxlSW50ZXJjZXB0W3BhdGhdO1xuICAgIH1cbiAgICBpZiAoIWZpbGVQcm9taXNlc0hhc2hbcGF0aF0gfHwgb3B0aW9ucz8uaWdub3JlQ2FjaGUpIHtcbiAgICAgICAgZmlsZVByb21pc2VzSGFzaFtwYXRoXSA9IHJlYWRGaWxlKHBhdGgsIFwidXRmOFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZpbGVQcm9taXNlc0hhc2hbcGF0aF07XG59O1xuIiwiZXhwb3J0IGNsYXNzIERlZmF1bHRJZGVudGl0eVByb3ZpZGVyQ29uZmlnIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgdGhpcy5hdXRoU2NoZW1lcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY29uZmlnKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmF1dGhTY2hlbWVzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRJZGVudGl0eVByb3ZpZGVyKHNjaGVtZUlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF1dGhTY2hlbWVzLmdldChzY2hlbWVJZCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgaXNWYWxpZEhvc3RMYWJlbCB9IGZyb20gXCJAc21pdGh5L3V0aWwtZW5kcG9pbnRzXCI7XG5pbXBvcnQgeyBpc0lwQWRkcmVzcyB9IGZyb20gXCIuLi9pc0lwQWRkcmVzc1wiO1xuZXhwb3J0IGNvbnN0IGlzVmlydHVhbEhvc3RhYmxlUzNCdWNrZXQgPSAodmFsdWUsIGFsbG93U3ViRG9tYWlucyA9IGZhbHNlKSA9PiB7XG4gICAgaWYgKGFsbG93U3ViRG9tYWlucykge1xuICAgICAgICBmb3IgKGNvbnN0IGxhYmVsIG9mIHZhbHVlLnNwbGl0KFwiLlwiKSkge1xuICAgICAgICAgICAgaWYgKCFpc1ZpcnR1YWxIb3N0YWJsZVMzQnVja2V0KGxhYmVsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkSG9zdExhYmVsKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh2YWx1ZS5sZW5ndGggPCAzIHx8IHZhbHVlLmxlbmd0aCA+IDYzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICE9PSB2YWx1ZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGlzSXBBZGRyZXNzKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbiIsImltcG9ydCBwYXJ0aXRpb25zSW5mbyBmcm9tIFwiLi9wYXJ0aXRpb25zLmpzb25cIjtcbmxldCBzZWxlY3RlZFBhcnRpdGlvbnNJbmZvID0gcGFydGl0aW9uc0luZm87XG5sZXQgc2VsZWN0ZWRVc2VyQWdlbnRQcmVmaXggPSBcIlwiO1xuZXhwb3J0IGNvbnN0IHBhcnRpdGlvbiA9ICh2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IHsgcGFydGl0aW9ucyB9ID0gc2VsZWN0ZWRQYXJ0aXRpb25zSW5mbztcbiAgICBmb3IgKGNvbnN0IHBhcnRpdGlvbiBvZiBwYXJ0aXRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgcmVnaW9ucywgb3V0cHV0cyB9ID0gcGFydGl0aW9uO1xuICAgICAgICBmb3IgKGNvbnN0IFtyZWdpb24sIHJlZ2lvbkRhdGFdIG9mIE9iamVjdC5lbnRyaWVzKHJlZ2lvbnMpKSB7XG4gICAgICAgICAgICBpZiAocmVnaW9uID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLm91dHB1dHMsXG4gICAgICAgICAgICAgICAgICAgIC4uLnJlZ2lvbkRhdGEsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHBhcnRpdGlvbiBvZiBwYXJ0aXRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgcmVnaW9uUmVnZXgsIG91dHB1dHMgfSA9IHBhcnRpdGlvbjtcbiAgICAgICAgaWYgKG5ldyBSZWdFeHAocmVnaW9uUmVnZXgpLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLm91dHB1dHMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IERFRkFVTFRfUEFSVElUSU9OID0gcGFydGl0aW9ucy5maW5kKChwYXJ0aXRpb24pID0+IHBhcnRpdGlvbi5pZCA9PT0gXCJhd3NcIik7XG4gICAgaWYgKCFERUZBVUxUX1BBUlRJVElPTikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcm92aWRlZCByZWdpb24gd2FzIG5vdCBmb3VuZCBpbiB0aGUgcGFydGl0aW9uIGFycmF5IG9yIHJlZ2V4LFwiICtcbiAgICAgICAgICAgIFwiIGFuZCBkZWZhdWx0IHBhcnRpdGlvbiB3aXRoIGlkICdhd3MnIGRvZXNuJ3QgZXhpc3QuXCIpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5ERUZBVUxUX1BBUlRJVElPTi5vdXRwdXRzLFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IHNldFBhcnRpdGlvbkluZm8gPSAocGFydGl0aW9uc0luZm8sIHVzZXJBZ2VudFByZWZpeCA9IFwiXCIpID0+IHtcbiAgICBzZWxlY3RlZFBhcnRpdGlvbnNJbmZvID0gcGFydGl0aW9uc0luZm87XG4gICAgc2VsZWN0ZWRVc2VyQWdlbnRQcmVmaXggPSB1c2VyQWdlbnRQcmVmaXg7XG59O1xuZXhwb3J0IGNvbnN0IHVzZURlZmF1bHRQYXJ0aXRpb25JbmZvID0gKCkgPT4ge1xuICAgIHNldFBhcnRpdGlvbkluZm8ocGFydGl0aW9uc0luZm8sIFwiXCIpO1xufTtcbmV4cG9ydCBjb25zdCBnZXRVc2VyQWdlbnRQcmVmaXggPSAoKSA9PiBzZWxlY3RlZFVzZXJBZ2VudFByZWZpeDtcbiIsImltcG9ydCB7IGN1c3RvbUVuZHBvaW50RnVuY3Rpb25zIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1lbmRwb2ludHNcIjtcbmltcG9ydCB7IGlzVmlydHVhbEhvc3RhYmxlUzNCdWNrZXQgfSBmcm9tIFwiLi9saWIvYXdzL2lzVmlydHVhbEhvc3RhYmxlUzNCdWNrZXRcIjtcbmltcG9ydCB7IHBhcnNlQXJuIH0gZnJvbSBcIi4vbGliL2F3cy9wYXJzZUFyblwiO1xuaW1wb3J0IHsgcGFydGl0aW9uIH0gZnJvbSBcIi4vbGliL2F3cy9wYXJ0aXRpb25cIjtcbmV4cG9ydCBjb25zdCBhd3NFbmRwb2ludEZ1bmN0aW9ucyA9IHtcbiAgICBpc1ZpcnR1YWxIb3N0YWJsZVMzQnVja2V0OiBpc1ZpcnR1YWxIb3N0YWJsZVMzQnVja2V0LFxuICAgIHBhcnNlQXJuOiBwYXJzZUFybixcbiAgICBwYXJ0aXRpb246IHBhcnRpdGlvbixcbn07XG5jdXN0b21FbmRwb2ludEZ1bmN0aW9ucy5hd3MgPSBhd3NFbmRwb2ludEZ1bmN0aW9ucztcbiIsImNvbnN0IEFSTl9ERUxJTUlURVIgPSBcIjpcIjtcbmNvbnN0IFJFU09VUkNFX0RFTElNSVRFUiA9IFwiL1wiO1xuZXhwb3J0IGNvbnN0IHBhcnNlQXJuID0gKHZhbHVlKSA9PiB7XG4gICAgY29uc3Qgc2VnbWVudHMgPSB2YWx1ZS5zcGxpdChBUk5fREVMSU1JVEVSKTtcbiAgICBpZiAoc2VnbWVudHMubGVuZ3RoIDwgNilcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgW2FybiwgcGFydGl0aW9uLCBzZXJ2aWNlLCByZWdpb24sIGFjY291bnRJZCwgLi4ucmVzb3VyY2VQYXRoXSA9IHNlZ21lbnRzO1xuICAgIGlmIChhcm4gIT09IFwiYXJuXCIgfHwgcGFydGl0aW9uID09PSBcIlwiIHx8IHNlcnZpY2UgPT09IFwiXCIgfHwgcmVzb3VyY2VQYXRoLmpvaW4oQVJOX0RFTElNSVRFUikgPT09IFwiXCIpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHJlc291cmNlSWQgPSByZXNvdXJjZVBhdGgubWFwKChyZXNvdXJjZSkgPT4gcmVzb3VyY2Uuc3BsaXQoUkVTT1VSQ0VfREVMSU1JVEVSKSkuZmxhdCgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHBhcnRpdGlvbixcbiAgICAgICAgc2VydmljZSxcbiAgICAgICAgcmVnaW9uLFxuICAgICAgICBhY2NvdW50SWQsXG4gICAgICAgIHJlc291cmNlSWQsXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmNvbnN0IENPTlRFTlRfTEVOR1RIX0hFQURFUiA9IFwiY29udGVudC1sZW5ndGhcIjtcbmV4cG9ydCBmdW5jdGlvbiBjb250ZW50TGVuZ3RoTWlkZGxld2FyZShib2R5TGVuZ3RoQ2hlY2tlcikge1xuICAgIHJldHVybiAobmV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IGFyZ3MucmVxdWVzdDtcbiAgICAgICAgaWYgKEh0dHBSZXF1ZXN0LmlzSW5zdGFuY2UocmVxdWVzdCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgYm9keSwgaGVhZGVycyB9ID0gcmVxdWVzdDtcbiAgICAgICAgICAgIGlmIChib2R5ICYmXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoaGVhZGVycylcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoc3RyKSA9PiBzdHIudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgICAgICAgICAgLmluZGV4T2YoQ09OVEVOVF9MRU5HVEhfSEVBREVSKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBib2R5TGVuZ3RoQ2hlY2tlcihib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ucmVxdWVzdC5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgW0NPTlRFTlRfTEVOR1RIX0hFQURFUl06IFN0cmluZyhsZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHQoe1xuICAgICAgICAgICAgLi4uYXJncyxcbiAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgIH0pO1xuICAgIH07XG59XG5leHBvcnQgY29uc3QgY29udGVudExlbmd0aE1pZGRsZXdhcmVPcHRpb25zID0ge1xuICAgIHN0ZXA6IFwiYnVpbGRcIixcbiAgICB0YWdzOiBbXCJTRVRfQ09OVEVOVF9MRU5HVEhcIiwgXCJDT05URU5UX0xFTkdUSFwiXSxcbiAgICBuYW1lOiBcImNvbnRlbnRMZW5ndGhNaWRkbGV3YXJlXCIsXG4gICAgb3ZlcnJpZGU6IHRydWUsXG59O1xuZXhwb3J0IGNvbnN0IGdldENvbnRlbnRMZW5ndGhQbHVnaW4gPSAob3B0aW9ucykgPT4gKHtcbiAgICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgICAgICBjbGllbnRTdGFjay5hZGQoY29udGVudExlbmd0aE1pZGRsZXdhcmUob3B0aW9ucy5ib2R5TGVuZ3RoQ2hlY2tlciksIGNvbnRlbnRMZW5ndGhNaWRkbGV3YXJlT3B0aW9ucyk7XG4gICAgfSxcbn0pO1xuIiwiZXhwb3J0IGNvbnN0IGxvYWRDb25maWdzRm9yRGVmYXVsdE1vZGUgPSAobW9kZSkgPT4ge1xuICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgICBjYXNlIFwic3RhbmRhcmRcIjpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmV0cnlNb2RlOiBcInN0YW5kYXJkXCIsXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvblRpbWVvdXQ6IDMxMDAsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIFwiaW4tcmVnaW9uXCI6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJldHJ5TW9kZTogXCJzdGFuZGFyZFwiLFxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25UaW1lb3V0OiAxMTAwLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBcImNyb3NzLXJlZ2lvblwiOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZXRyeU1vZGU6IFwic3RhbmRhcmRcIixcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uVGltZW91dDogMzEwMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgXCJtb2JpbGVcIjpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmV0cnlNb2RlOiBcInN0YW5kYXJkXCIsXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvblRpbWVvdXQ6IDMwMDAwLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICB9XG59O1xuIiwiZXhwb3J0IGNvbnN0IHJlc29sdmVQYXJhbXNGb3JTMyA9IGFzeW5jIChlbmRwb2ludFBhcmFtcykgPT4ge1xuICAgIGNvbnN0IGJ1Y2tldCA9IGVuZHBvaW50UGFyYW1zPy5CdWNrZXQgfHwgXCJcIjtcbiAgICBpZiAodHlwZW9mIGVuZHBvaW50UGFyYW1zLkJ1Y2tldCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBlbmRwb2ludFBhcmFtcy5CdWNrZXQgPSBidWNrZXQucmVwbGFjZSgvIy9nLCBlbmNvZGVVUklDb21wb25lbnQoXCIjXCIpKS5yZXBsYWNlKC9cXD8vZywgZW5jb2RlVVJJQ29tcG9uZW50KFwiP1wiKSk7XG4gICAgfVxuICAgIGlmIChpc0FybkJ1Y2tldE5hbWUoYnVja2V0KSkge1xuICAgICAgICBpZiAoZW5kcG9pbnRQYXJhbXMuRm9yY2VQYXRoU3R5bGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhdGgtc3R5bGUgYWRkcmVzc2luZyBjYW5ub3QgYmUgdXNlZCB3aXRoIEFSTiBidWNrZXRzXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpc0Ruc0NvbXBhdGlibGVCdWNrZXROYW1lKGJ1Y2tldCkgfHxcbiAgICAgICAgKGJ1Y2tldC5pbmRleE9mKFwiLlwiKSAhPT0gLTEgJiYgIVN0cmluZyhlbmRwb2ludFBhcmFtcy5FbmRwb2ludCkuc3RhcnRzV2l0aChcImh0dHA6XCIpKSB8fFxuICAgICAgICBidWNrZXQudG9Mb3dlckNhc2UoKSAhPT0gYnVja2V0IHx8XG4gICAgICAgIGJ1Y2tldC5sZW5ndGggPCAzKSB7XG4gICAgICAgIGVuZHBvaW50UGFyYW1zLkZvcmNlUGF0aFN0eWxlID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGVuZHBvaW50UGFyYW1zLkRpc2FibGVNdWx0aVJlZ2lvbkFjY2Vzc1BvaW50cykge1xuICAgICAgICBlbmRwb2ludFBhcmFtcy5kaXNhYmxlTXVsdGlSZWdpb25BY2Nlc3NQb2ludHMgPSB0cnVlO1xuICAgICAgICBlbmRwb2ludFBhcmFtcy5EaXNhYmxlTVJBUCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBlbmRwb2ludFBhcmFtcztcbn07XG5jb25zdCBET01BSU5fUEFUVEVSTiA9IC9eW2EtejAtOV1bYS16MC05XFwuXFwtXXsxLDYxfVthLXowLTldJC87XG5jb25zdCBJUF9BRERSRVNTX1BBVFRFUk4gPSAvKFxcZCtcXC4pezN9XFxkKy87XG5jb25zdCBET1RTX1BBVFRFUk4gPSAvXFwuXFwuLztcbmV4cG9ydCBjb25zdCBET1RfUEFUVEVSTiA9IC9cXC4vO1xuZXhwb3J0IGNvbnN0IFMzX0hPU1ROQU1FX1BBVFRFUk4gPSAvXiguK1xcLik/czMoLWZpcHMpPyhcXC5kdWFsc3RhY2spP1suLV0oW2EtejAtOS1dKylcXC4vO1xuZXhwb3J0IGNvbnN0IGlzRG5zQ29tcGF0aWJsZUJ1Y2tldE5hbWUgPSAoYnVja2V0TmFtZSkgPT4gRE9NQUlOX1BBVFRFUk4udGVzdChidWNrZXROYW1lKSAmJiAhSVBfQUREUkVTU19QQVRURVJOLnRlc3QoYnVja2V0TmFtZSkgJiYgIURPVFNfUEFUVEVSTi50ZXN0KGJ1Y2tldE5hbWUpO1xuZXhwb3J0IGNvbnN0IGlzQXJuQnVja2V0TmFtZSA9IChidWNrZXROYW1lKSA9PiB7XG4gICAgY29uc3QgW2FybiwgcGFydGl0aW9uLCBzZXJ2aWNlLCAsICwgYnVja2V0XSA9IGJ1Y2tldE5hbWUuc3BsaXQoXCI6XCIpO1xuICAgIGNvbnN0IGlzQXJuID0gYXJuID09PSBcImFyblwiICYmIGJ1Y2tldE5hbWUuc3BsaXQoXCI6XCIpLmxlbmd0aCA+PSA2O1xuICAgIGNvbnN0IGlzVmFsaWRBcm4gPSBCb29sZWFuKGlzQXJuICYmIHBhcnRpdGlvbiAmJiBzZXJ2aWNlICYmIGJ1Y2tldCk7XG4gICAgaWYgKGlzQXJuICYmICFpc1ZhbGlkQXJuKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBBUk46ICR7YnVja2V0TmFtZX0gd2FzIGFuIGludmFsaWQgQVJOLmApO1xuICAgIH1cbiAgICByZXR1cm4gaXNWYWxpZEFybjtcbn07XG4iLCJleHBvcnQgY29uc3QgY3JlYXRlQ29uZmlnVmFsdWVQcm92aWRlciA9IChjb25maWdLZXksIGNhbm9uaWNhbEVuZHBvaW50UGFyYW1LZXksIGNvbmZpZykgPT4ge1xuICAgIGNvbnN0IGNvbmZpZ1Byb3ZpZGVyID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBjb25maWdWYWx1ZSA9IGNvbmZpZ1tjb25maWdLZXldID8/IGNvbmZpZ1tjYW5vbmljYWxFbmRwb2ludFBhcmFtS2V5XTtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWdWYWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uZmlnVmFsdWUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uZmlnVmFsdWU7XG4gICAgfTtcbiAgICBpZiAoY29uZmlnS2V5ID09PSBcImNyZWRlbnRpYWxTY29wZVwiIHx8IGNhbm9uaWNhbEVuZHBvaW50UGFyYW1LZXkgPT09IFwiQ3JlZGVudGlhbFNjb3BlXCIpIHtcbiAgICAgICAgcmV0dXJuIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gdHlwZW9mIGNvbmZpZy5jcmVkZW50aWFscyA9PT0gXCJmdW5jdGlvblwiID8gYXdhaXQgY29uZmlnLmNyZWRlbnRpYWxzKCkgOiBjb25maWcuY3JlZGVudGlhbHM7XG4gICAgICAgICAgICBjb25zdCBjb25maWdWYWx1ZSA9IGNyZWRlbnRpYWxzPy5jcmVkZW50aWFsU2NvcGUgPz8gY3JlZGVudGlhbHM/LkNyZWRlbnRpYWxTY29wZTtcbiAgICAgICAgICAgIHJldHVybiBjb25maWdWYWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGNvbmZpZ0tleSA9PT0gXCJhY2NvdW50SWRcIiB8fCBjYW5vbmljYWxFbmRwb2ludFBhcmFtS2V5ID09PSBcIkFjY291bnRJZFwiKSB7XG4gICAgICAgIHJldHVybiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IHR5cGVvZiBjb25maWcuY3JlZGVudGlhbHMgPT09IFwiZnVuY3Rpb25cIiA/IGF3YWl0IGNvbmZpZy5jcmVkZW50aWFscygpIDogY29uZmlnLmNyZWRlbnRpYWxzO1xuICAgICAgICAgICAgY29uc3QgY29uZmlnVmFsdWUgPSBjcmVkZW50aWFscz8uYWNjb3VudElkID8/IGNyZWRlbnRpYWxzPy5BY2NvdW50SWQ7XG4gICAgICAgICAgICByZXR1cm4gY29uZmlnVmFsdWU7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChjb25maWdLZXkgPT09IFwiZW5kcG9pbnRcIiB8fCBjYW5vbmljYWxFbmRwb2ludFBhcmFtS2V5ID09PSBcImVuZHBvaW50XCIpIHtcbiAgICAgICAgcmV0dXJuIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmIChjb25maWcuaXNDdXN0b21FbmRwb2ludCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZW5kcG9pbnQgPSBhd2FpdCBjb25maWdQcm92aWRlcigpO1xuICAgICAgICAgICAgaWYgKGVuZHBvaW50ICYmIHR5cGVvZiBlbmRwb2ludCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIGlmIChcInVybFwiIGluIGVuZHBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmRwb2ludC51cmwuaHJlZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFwiaG9zdG5hbWVcIiBpbiBlbmRwb2ludCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHByb3RvY29sLCBob3N0bmFtZSwgcG9ydCwgcGF0aCB9ID0gZW5kcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtwcm90b2NvbH0vLyR7aG9zdG5hbWV9JHtwb3J0ID8gXCI6XCIgKyBwb3J0IDogXCJcIn0ke3BhdGh9YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZW5kcG9pbnQ7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBjb25maWdQcm92aWRlcjtcbn07XG4iLCJpbXBvcnQgeyByZXNvbHZlUGFyYW1zRm9yUzMgfSBmcm9tIFwiLi4vc2VydmljZS1jdXN0b21pemF0aW9uc1wiO1xuaW1wb3J0IHsgY3JlYXRlQ29uZmlnVmFsdWVQcm92aWRlciB9IGZyb20gXCIuL2NyZWF0ZUNvbmZpZ1ZhbHVlUHJvdmlkZXJcIjtcbmltcG9ydCB7IGdldEVuZHBvaW50RnJvbUNvbmZpZyB9IGZyb20gXCIuL2dldEVuZHBvaW50RnJvbUNvbmZpZ1wiO1xuaW1wb3J0IHsgdG9FbmRwb2ludFYxIH0gZnJvbSBcIi4vdG9FbmRwb2ludFYxXCI7XG5leHBvcnQgY29uc3QgZ2V0RW5kcG9pbnRGcm9tSW5zdHJ1Y3Rpb25zID0gYXN5bmMgKGNvbW1hbmRJbnB1dCwgaW5zdHJ1Y3Rpb25zU3VwcGxpZXIsIGNsaWVudENvbmZpZywgY29udGV4dCkgPT4ge1xuICAgIGlmICghY2xpZW50Q29uZmlnLmlzQ3VzdG9tRW5kcG9pbnQpIHtcbiAgICAgICAgbGV0IGVuZHBvaW50RnJvbUNvbmZpZztcbiAgICAgICAgaWYgKGNsaWVudENvbmZpZy5zZXJ2aWNlQ29uZmlndXJlZEVuZHBvaW50KSB7XG4gICAgICAgICAgICBlbmRwb2ludEZyb21Db25maWcgPSBhd2FpdCBjbGllbnRDb25maWcuc2VydmljZUNvbmZpZ3VyZWRFbmRwb2ludCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZW5kcG9pbnRGcm9tQ29uZmlnID0gYXdhaXQgZ2V0RW5kcG9pbnRGcm9tQ29uZmlnKGNsaWVudENvbmZpZy5zZXJ2aWNlSWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmRwb2ludEZyb21Db25maWcpIHtcbiAgICAgICAgICAgIGNsaWVudENvbmZpZy5lbmRwb2ludCA9ICgpID0+IFByb21pc2UucmVzb2x2ZSh0b0VuZHBvaW50VjEoZW5kcG9pbnRGcm9tQ29uZmlnKSk7XG4gICAgICAgICAgICBjbGllbnRDb25maWcuaXNDdXN0b21FbmRwb2ludCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZW5kcG9pbnRQYXJhbXMgPSBhd2FpdCByZXNvbHZlUGFyYW1zKGNvbW1hbmRJbnB1dCwgaW5zdHJ1Y3Rpb25zU3VwcGxpZXIsIGNsaWVudENvbmZpZyk7XG4gICAgaWYgKHR5cGVvZiBjbGllbnRDb25maWcuZW5kcG9pbnRQcm92aWRlciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvbmZpZy5lbmRwb2ludFByb3ZpZGVyIGlzIG5vdCBzZXQuXCIpO1xuICAgIH1cbiAgICBjb25zdCBlbmRwb2ludCA9IGNsaWVudENvbmZpZy5lbmRwb2ludFByb3ZpZGVyKGVuZHBvaW50UGFyYW1zLCBjb250ZXh0KTtcbiAgICByZXR1cm4gZW5kcG9pbnQ7XG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVQYXJhbXMgPSBhc3luYyAoY29tbWFuZElucHV0LCBpbnN0cnVjdGlvbnNTdXBwbGllciwgY2xpZW50Q29uZmlnKSA9PiB7XG4gICAgY29uc3QgZW5kcG9pbnRQYXJhbXMgPSB7fTtcbiAgICBjb25zdCBpbnN0cnVjdGlvbnMgPSBpbnN0cnVjdGlvbnNTdXBwbGllcj8uZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnM/LigpIHx8IHt9O1xuICAgIGZvciAoY29uc3QgW25hbWUsIGluc3RydWN0aW9uXSBvZiBPYmplY3QuZW50cmllcyhpbnN0cnVjdGlvbnMpKSB7XG4gICAgICAgIHN3aXRjaCAoaW5zdHJ1Y3Rpb24udHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInN0YXRpY0NvbnRleHRQYXJhbXNcIjpcbiAgICAgICAgICAgICAgICBlbmRwb2ludFBhcmFtc1tuYW1lXSA9IGluc3RydWN0aW9uLnZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNvbnRleHRQYXJhbXNcIjpcbiAgICAgICAgICAgICAgICBlbmRwb2ludFBhcmFtc1tuYW1lXSA9IGNvbW1hbmRJbnB1dFtpbnN0cnVjdGlvbi5uYW1lXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjbGllbnRDb250ZXh0UGFyYW1zXCI6XG4gICAgICAgICAgICBjYXNlIFwiYnVpbHRJblBhcmFtc1wiOlxuICAgICAgICAgICAgICAgIGVuZHBvaW50UGFyYW1zW25hbWVdID0gYXdhaXQgY3JlYXRlQ29uZmlnVmFsdWVQcm92aWRlcihpbnN0cnVjdGlvbi5uYW1lLCBuYW1lLCBjbGllbnRDb25maWcpKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwib3BlcmF0aW9uQ29udGV4dFBhcmFtc1wiOlxuICAgICAgICAgICAgICAgIGVuZHBvaW50UGFyYW1zW25hbWVdID0gaW5zdHJ1Y3Rpb24uZ2V0KGNvbW1hbmRJbnB1dCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCBlbmRwb2ludCBwYXJhbWV0ZXIgaW5zdHJ1Y3Rpb246IFwiICsgSlNPTi5zdHJpbmdpZnkoaW5zdHJ1Y3Rpb24pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoT2JqZWN0LmtleXMoaW5zdHJ1Y3Rpb25zKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihlbmRwb2ludFBhcmFtcywgY2xpZW50Q29uZmlnKTtcbiAgICB9XG4gICAgaWYgKFN0cmluZyhjbGllbnRDb25maWcuc2VydmljZUlkKS50b0xvd2VyQ2FzZSgpID09PSBcInMzXCIpIHtcbiAgICAgICAgYXdhaXQgcmVzb2x2ZVBhcmFtc0ZvclMzKGVuZHBvaW50UGFyYW1zKTtcbiAgICB9XG4gICAgcmV0dXJuIGVuZHBvaW50UGFyYW1zO1xufTtcbiIsImltcG9ydCB7IHNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1zZXJkZVwiO1xuaW1wb3J0IHsgZW5kcG9pbnRNaWRkbGV3YXJlIH0gZnJvbSBcIi4vZW5kcG9pbnRNaWRkbGV3YXJlXCI7XG5leHBvcnQgY29uc3QgZW5kcG9pbnRNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgICBzdGVwOiBcInNlcmlhbGl6ZVwiLFxuICAgIHRhZ3M6IFtcIkVORFBPSU5UX1BBUkFNRVRFUlNcIiwgXCJFTkRQT0lOVF9WMlwiLCBcIkVORFBPSU5UXCJdLFxuICAgIG5hbWU6IFwiZW5kcG9pbnRWMk1pZGRsZXdhcmVcIixcbiAgICBvdmVycmlkZTogdHJ1ZSxcbiAgICByZWxhdGlvbjogXCJiZWZvcmVcIixcbiAgICB0b01pZGRsZXdhcmU6IHNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uLm5hbWUsXG59O1xuZXhwb3J0IGNvbnN0IGdldEVuZHBvaW50UGx1Z2luID0gKGNvbmZpZywgaW5zdHJ1Y3Rpb25zKSA9PiAoe1xuICAgIGFwcGx5VG9TdGFjazogKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgICAgIGNsaWVudFN0YWNrLmFkZFJlbGF0aXZlVG8oZW5kcG9pbnRNaWRkbGV3YXJlKHtcbiAgICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICAgIGluc3RydWN0aW9ucyxcbiAgICAgICAgfSksIGVuZHBvaW50TWlkZGxld2FyZU9wdGlvbnMpO1xuICAgIH0sXG59KTtcbiIsImltcG9ydCB7IHNldEZlYXR1cmUgfSBmcm9tIFwiQHNtaXRoeS9jb3JlXCI7XG5pbXBvcnQgeyBnZXRTbWl0aHlDb250ZXh0IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1taWRkbGV3YXJlXCI7XG5pbXBvcnQgeyBnZXRFbmRwb2ludEZyb21JbnN0cnVjdGlvbnMgfSBmcm9tIFwiLi9hZGFwdG9ycy9nZXRFbmRwb2ludEZyb21JbnN0cnVjdGlvbnNcIjtcbmV4cG9ydCBjb25zdCBlbmRwb2ludE1pZGRsZXdhcmUgPSAoeyBjb25maWcsIGluc3RydWN0aW9ucywgfSkgPT4ge1xuICAgIHJldHVybiAobmV4dCwgY29udGV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgICAgICAgaWYgKGNvbmZpZy5pc0N1c3RvbUVuZHBvaW50KSB7XG4gICAgICAgICAgICBzZXRGZWF0dXJlKGNvbnRleHQsIFwiRU5EUE9JTlRfT1ZFUlJJREVcIiwgXCJOXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVuZHBvaW50ID0gYXdhaXQgZ2V0RW5kcG9pbnRGcm9tSW5zdHJ1Y3Rpb25zKGFyZ3MuaW5wdXQsIHtcbiAgICAgICAgICAgIGdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnN0cnVjdGlvbnM7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LCB7IC4uLmNvbmZpZyB9LCBjb250ZXh0KTtcbiAgICAgICAgY29udGV4dC5lbmRwb2ludFYyID0gZW5kcG9pbnQ7XG4gICAgICAgIGNvbnRleHQuYXV0aFNjaGVtZXMgPSBlbmRwb2ludC5wcm9wZXJ0aWVzPy5hdXRoU2NoZW1lcztcbiAgICAgICAgY29uc3QgYXV0aFNjaGVtZSA9IGNvbnRleHQuYXV0aFNjaGVtZXM/LlswXTtcbiAgICAgICAgaWYgKGF1dGhTY2hlbWUpIHtcbiAgICAgICAgICAgIGNvbnRleHRbXCJzaWduaW5nX3JlZ2lvblwiXSA9IGF1dGhTY2hlbWUuc2lnbmluZ1JlZ2lvbjtcbiAgICAgICAgICAgIGNvbnRleHRbXCJzaWduaW5nX3NlcnZpY2VcIl0gPSBhdXRoU2NoZW1lLnNpZ25pbmdOYW1lO1xuICAgICAgICAgICAgY29uc3Qgc21pdGh5Q29udGV4dCA9IGdldFNtaXRoeUNvbnRleHQoY29udGV4dCk7XG4gICAgICAgICAgICBjb25zdCBodHRwQXV0aE9wdGlvbiA9IHNtaXRoeUNvbnRleHQ/LnNlbGVjdGVkSHR0cEF1dGhTY2hlbWU/Lmh0dHBBdXRoT3B0aW9uO1xuICAgICAgICAgICAgaWYgKGh0dHBBdXRoT3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgaHR0cEF1dGhPcHRpb24uc2lnbmluZ1Byb3BlcnRpZXMgPSBPYmplY3QuYXNzaWduKGh0dHBBdXRoT3B0aW9uLnNpZ25pbmdQcm9wZXJ0aWVzIHx8IHt9LCB7XG4gICAgICAgICAgICAgICAgICAgIHNpZ25pbmdfcmVnaW9uOiBhdXRoU2NoZW1lLnNpZ25pbmdSZWdpb24sXG4gICAgICAgICAgICAgICAgICAgIHNpZ25pbmdSZWdpb246IGF1dGhTY2hlbWUuc2lnbmluZ1JlZ2lvbixcbiAgICAgICAgICAgICAgICAgICAgc2lnbmluZ19zZXJ2aWNlOiBhdXRoU2NoZW1lLnNpZ25pbmdOYW1lLFxuICAgICAgICAgICAgICAgICAgICBzaWduaW5nTmFtZTogYXV0aFNjaGVtZS5zaWduaW5nTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgc2lnbmluZ1JlZ2lvblNldDogYXV0aFNjaGVtZS5zaWduaW5nUmVnaW9uU2V0LFxuICAgICAgICAgICAgICAgIH0sIGF1dGhTY2hlbWUucHJvcGVydGllcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHQoe1xuICAgICAgICAgICAgLi4uYXJncyxcbiAgICAgICAgfSk7XG4gICAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJvc1wiKTsiLCJpbXBvcnQgeyB0cmFuc2Zvcm1Gcm9tU3RyaW5nLCB0cmFuc2Zvcm1Ub1N0cmluZyB9IGZyb20gXCIuL3RyYW5zZm9ybXNcIjtcbmV4cG9ydCBjbGFzcyBVaW50OEFycmF5QmxvYkFkYXB0ZXIgZXh0ZW5kcyBVaW50OEFycmF5IHtcbiAgICBzdGF0aWMgZnJvbVN0cmluZyhzb3VyY2UsIGVuY29kaW5nID0gXCJ1dGYtOFwiKSB7XG4gICAgICAgIHN3aXRjaCAodHlwZW9mIHNvdXJjZSkge1xuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1Gcm9tU3RyaW5nKHNvdXJjZSwgZW5jb2RpbmcpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGNvbnZlcnNpb24gZnJvbSAke3R5cGVvZiBzb3VyY2V9IHRvIFVpbnQ4QXJyYXlCbG9iQWRhcHRlci5gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgbXV0YXRlKHNvdXJjZSkge1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc291cmNlLCBVaW50OEFycmF5QmxvYkFkYXB0ZXIucHJvdG90eXBlKTtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9XG4gICAgdHJhbnNmb3JtVG9TdHJpbmcoZW5jb2RpbmcgPSBcInV0Zi04XCIpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybVRvU3RyaW5nKHRoaXMsIGVuY29kaW5nKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBmcm9tQmFzZTY0LCB0b0Jhc2U2NCB9IGZyb20gXCJAc21pdGh5L3V0aWwtYmFzZTY0XCI7XG5pbXBvcnQgeyBmcm9tVXRmOCwgdG9VdGY4IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC11dGY4XCI7XG5pbXBvcnQgeyBVaW50OEFycmF5QmxvYkFkYXB0ZXIgfSBmcm9tIFwiLi9VaW50OEFycmF5QmxvYkFkYXB0ZXJcIjtcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1Ub1N0cmluZyhwYXlsb2FkLCBlbmNvZGluZyA9IFwidXRmLThcIikge1xuICAgIGlmIChlbmNvZGluZyA9PT0gXCJiYXNlNjRcIikge1xuICAgICAgICByZXR1cm4gdG9CYXNlNjQocGF5bG9hZCk7XG4gICAgfVxuICAgIHJldHVybiB0b1V0ZjgocGF5bG9hZCk7XG59XG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtRnJvbVN0cmluZyhzdHIsIGVuY29kaW5nKSB7XG4gICAgaWYgKGVuY29kaW5nID09PSBcImJhc2U2NFwiKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5QmxvYkFkYXB0ZXIubXV0YXRlKGZyb21CYXNlNjQoc3RyKSk7XG4gICAgfVxuICAgIHJldHVybiBVaW50OEFycmF5QmxvYkFkYXB0ZXIubXV0YXRlKGZyb21VdGY4KHN0cikpO1xufVxuIiwiaW1wb3J0IHsgVWludDhBcnJheUJsb2JBZGFwdGVyIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1zdHJlYW1cIjtcbmV4cG9ydCBjb25zdCBjb2xsZWN0Qm9keSA9IGFzeW5jIChzdHJlYW1Cb2R5ID0gbmV3IFVpbnQ4QXJyYXkoKSwgY29udGV4dCkgPT4ge1xuICAgIGlmIChzdHJlYW1Cb2R5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheUJsb2JBZGFwdGVyLm11dGF0ZShzdHJlYW1Cb2R5KTtcbiAgICB9XG4gICAgaWYgKCFzdHJlYW1Cb2R5KSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5QmxvYkFkYXB0ZXIubXV0YXRlKG5ldyBVaW50OEFycmF5KCkpO1xuICAgIH1cbiAgICBjb25zdCBmcm9tQ29udGV4dCA9IGNvbnRleHQuc3RyZWFtQ29sbGVjdG9yKHN0cmVhbUJvZHkpO1xuICAgIHJldHVybiBVaW50OEFycmF5QmxvYkFkYXB0ZXIubXV0YXRlKGF3YWl0IGZyb21Db250ZXh0KTtcbn07XG4iLCJpbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlSG9zdEhlYWRlckNvbmZpZyhpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dDtcbn1cbmV4cG9ydCBjb25zdCBob3N0SGVhZGVyTWlkZGxld2FyZSA9IChvcHRpb25zKSA9PiAobmV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgICBpZiAoIUh0dHBSZXF1ZXN0LmlzSW5zdGFuY2UoYXJncy5yZXF1ZXN0KSlcbiAgICAgICAgcmV0dXJuIG5leHQoYXJncyk7XG4gICAgY29uc3QgeyByZXF1ZXN0IH0gPSBhcmdzO1xuICAgIGNvbnN0IHsgaGFuZGxlclByb3RvY29sID0gXCJcIiB9ID0gb3B0aW9ucy5yZXF1ZXN0SGFuZGxlci5tZXRhZGF0YSB8fCB7fTtcbiAgICBpZiAoaGFuZGxlclByb3RvY29sLmluZGV4T2YoXCJoMlwiKSA+PSAwICYmICFyZXF1ZXN0LmhlYWRlcnNbXCI6YXV0aG9yaXR5XCJdKSB7XG4gICAgICAgIGRlbGV0ZSByZXF1ZXN0LmhlYWRlcnNbXCJob3N0XCJdO1xuICAgICAgICByZXF1ZXN0LmhlYWRlcnNbXCI6YXV0aG9yaXR5XCJdID0gcmVxdWVzdC5ob3N0bmFtZSArIChyZXF1ZXN0LnBvcnQgPyBcIjpcIiArIHJlcXVlc3QucG9ydCA6IFwiXCIpO1xuICAgIH1cbiAgICBlbHNlIGlmICghcmVxdWVzdC5oZWFkZXJzW1wiaG9zdFwiXSkge1xuICAgICAgICBsZXQgaG9zdCA9IHJlcXVlc3QuaG9zdG5hbWU7XG4gICAgICAgIGlmIChyZXF1ZXN0LnBvcnQgIT0gbnVsbClcbiAgICAgICAgICAgIGhvc3QgKz0gYDoke3JlcXVlc3QucG9ydH1gO1xuICAgICAgICByZXF1ZXN0LmhlYWRlcnNbXCJob3N0XCJdID0gaG9zdDtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQoYXJncyk7XG59O1xuZXhwb3J0IGNvbnN0IGhvc3RIZWFkZXJNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgICBuYW1lOiBcImhvc3RIZWFkZXJNaWRkbGV3YXJlXCIsXG4gICAgc3RlcDogXCJidWlsZFwiLFxuICAgIHByaW9yaXR5OiBcImxvd1wiLFxuICAgIHRhZ3M6IFtcIkhPU1RcIl0sXG4gICAgb3ZlcnJpZGU6IHRydWUsXG59O1xuZXhwb3J0IGNvbnN0IGdldEhvc3RIZWFkZXJQbHVnaW4gPSAob3B0aW9ucykgPT4gKHtcbiAgICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgICAgICBjbGllbnRTdGFjay5hZGQoaG9zdEhlYWRlck1pZGRsZXdhcmUob3B0aW9ucyksIGhvc3RIZWFkZXJNaWRkbGV3YXJlT3B0aW9ucyk7XG4gICAgfSxcbn0pO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIG1hcChhcmcwLCBhcmcxLCBhcmcyKSB7XG4gICAgbGV0IHRhcmdldDtcbiAgICBsZXQgZmlsdGVyO1xuICAgIGxldCBpbnN0cnVjdGlvbnM7XG4gICAgaWYgKHR5cGVvZiBhcmcxID09PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBhcmcyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRhcmdldCA9IHt9O1xuICAgICAgICBpbnN0cnVjdGlvbnMgPSBhcmcwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGFyZ2V0ID0gYXJnMDtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmcxID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGZpbHRlciA9IGFyZzE7XG4gICAgICAgICAgICBpbnN0cnVjdGlvbnMgPSBhcmcyO1xuICAgICAgICAgICAgcmV0dXJuIG1hcFdpdGhGaWx0ZXIodGFyZ2V0LCBmaWx0ZXIsIGluc3RydWN0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbnN0cnVjdGlvbnMgPSBhcmcxO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGluc3RydWN0aW9ucykpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGluc3RydWN0aW9uc1trZXldKSkge1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBpbnN0cnVjdGlvbnNba2V5XTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGFwcGx5SW5zdHJ1Y3Rpb24odGFyZ2V0LCBudWxsLCBpbnN0cnVjdGlvbnMsIGtleSk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5leHBvcnQgY29uc3QgY29udmVydE1hcCA9ICh0YXJnZXQpID0+IHtcbiAgICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyh0YXJnZXQgfHwge30pKSB7XG4gICAgICAgIG91dHB1dFtrXSA9IFssIHZdO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufTtcbmV4cG9ydCBjb25zdCB0YWtlID0gKHNvdXJjZSwgaW5zdHJ1Y3Rpb25zKSA9PiB7XG4gICAgY29uc3Qgb3V0ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gaW5zdHJ1Y3Rpb25zKSB7XG4gICAgICAgIGFwcGx5SW5zdHJ1Y3Rpb24ob3V0LCBzb3VyY2UsIGluc3RydWN0aW9ucywga2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn07XG5jb25zdCBtYXBXaXRoRmlsdGVyID0gKHRhcmdldCwgZmlsdGVyLCBpbnN0cnVjdGlvbnMpID0+IHtcbiAgICByZXR1cm4gbWFwKHRhcmdldCwgT2JqZWN0LmVudHJpZXMoaW5zdHJ1Y3Rpb25zKS5yZWR1Y2UoKF9pbnN0cnVjdGlvbnMsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIF9pbnN0cnVjdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgX2luc3RydWN0aW9uc1trZXldID0gW2ZpbHRlciwgdmFsdWUoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfaW5zdHJ1Y3Rpb25zW2tleV0gPSBbZmlsdGVyLCB2YWx1ZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9pbnN0cnVjdGlvbnM7XG4gICAgfSwge30pKTtcbn07XG5jb25zdCBhcHBseUluc3RydWN0aW9uID0gKHRhcmdldCwgc291cmNlLCBpbnN0cnVjdGlvbnMsIHRhcmdldEtleSkgPT4ge1xuICAgIGlmIChzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgbGV0IGluc3RydWN0aW9uID0gaW5zdHJ1Y3Rpb25zW3RhcmdldEtleV07XG4gICAgICAgIGlmICh0eXBlb2YgaW5zdHJ1Y3Rpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24gPSBbLCBpbnN0cnVjdGlvbl07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgW2ZpbHRlciA9IG5vbk51bGxpc2gsIHZhbHVlRm4gPSBwYXNzLCBzb3VyY2VLZXkgPSB0YXJnZXRLZXldID0gaW5zdHJ1Y3Rpb247XG4gICAgICAgIGlmICgodHlwZW9mIGZpbHRlciA9PT0gXCJmdW5jdGlvblwiICYmIGZpbHRlcihzb3VyY2Vbc291cmNlS2V5XSkpIHx8ICh0eXBlb2YgZmlsdGVyICE9PSBcImZ1bmN0aW9uXCIgJiYgISFmaWx0ZXIpKSB7XG4gICAgICAgICAgICB0YXJnZXRbdGFyZ2V0S2V5XSA9IHZhbHVlRm4oc291cmNlW3NvdXJjZUtleV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IFtmaWx0ZXIsIHZhbHVlXSA9IGluc3RydWN0aW9uc1t0YXJnZXRLZXldO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBsZXQgX3ZhbHVlO1xuICAgICAgICBjb25zdCBkZWZhdWx0RmlsdGVyUGFzc2VkID0gZmlsdGVyID09PSB1bmRlZmluZWQgJiYgKF92YWx1ZSA9IHZhbHVlKCkpICE9IG51bGw7XG4gICAgICAgIGNvbnN0IGN1c3RvbUZpbHRlclBhc3NlZCA9ICh0eXBlb2YgZmlsdGVyID09PSBcImZ1bmN0aW9uXCIgJiYgISFmaWx0ZXIodm9pZCAwKSkgfHwgKHR5cGVvZiBmaWx0ZXIgIT09IFwiZnVuY3Rpb25cIiAmJiAhIWZpbHRlcik7XG4gICAgICAgIGlmIChkZWZhdWx0RmlsdGVyUGFzc2VkKSB7XG4gICAgICAgICAgICB0YXJnZXRbdGFyZ2V0S2V5XSA9IF92YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdXN0b21GaWx0ZXJQYXNzZWQpIHtcbiAgICAgICAgICAgIHRhcmdldFt0YXJnZXRLZXldID0gdmFsdWUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdEZpbHRlclBhc3NlZCA9IGZpbHRlciA9PT0gdW5kZWZpbmVkICYmIHZhbHVlICE9IG51bGw7XG4gICAgICAgIGNvbnN0IGN1c3RvbUZpbHRlclBhc3NlZCA9ICh0eXBlb2YgZmlsdGVyID09PSBcImZ1bmN0aW9uXCIgJiYgISFmaWx0ZXIodmFsdWUpKSB8fCAodHlwZW9mIGZpbHRlciAhPT0gXCJmdW5jdGlvblwiICYmICEhZmlsdGVyKTtcbiAgICAgICAgaWYgKGRlZmF1bHRGaWx0ZXJQYXNzZWQgfHwgY3VzdG9tRmlsdGVyUGFzc2VkKSB7XG4gICAgICAgICAgICB0YXJnZXRbdGFyZ2V0S2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IG5vbk51bGxpc2ggPSAoXykgPT4gXyAhPSBudWxsO1xuY29uc3QgcGFzcyA9IChfKSA9PiBfO1xuIiwiaW1wb3J0IHsgZnJvbVN0cmluZyB9IGZyb20gXCJAc21pdGh5L3V0aWwtYnVmZmVyLWZyb21cIjtcbmNvbnN0IEJBU0U2NF9SRUdFWCA9IC9eW0EtWmEtejAtOSsvXSo9ezAsMn0kLztcbmV4cG9ydCBjb25zdCBmcm9tQmFzZTY0ID0gKGlucHV0KSA9PiB7XG4gICAgaWYgKChpbnB1dC5sZW5ndGggKiAzKSAlIDQgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW5jb3JyZWN0IHBhZGRpbmcgb24gYmFzZTY0IHN0cmluZy5gKTtcbiAgICB9XG4gICAgaWYgKCFCQVNFNjRfUkVHRVguZXhlYyhpbnB1dCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBiYXNlNjQgc3RyaW5nLmApO1xuICAgIH1cbiAgICBjb25zdCBidWZmZXIgPSBmcm9tU3RyaW5nKGlucHV0LCBcImJhc2U2NFwiKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnVmZmVyLmJ5dGVPZmZzZXQsIGJ1ZmZlci5ieXRlTGVuZ3RoKTtcbn07XG4iLCJjb25zdCBJUF9WNF9SRUdFWCA9IG5ldyBSZWdFeHAoYF4oPzoyNVswLTVdfDJbMC00XVxcXFxkfDFcXFxcZFxcXFxkfFsxLTldXFxcXGR8XFxcXGQpKD86XFxcXC4oPzoyNVswLTVdfDJbMC00XVxcXFxkfDFcXFxcZFxcXFxkfFsxLTldXFxcXGR8XFxcXGQpKXszfSRgKTtcbmV4cG9ydCBjb25zdCBpc0lwQWRkcmVzcyA9ICh2YWx1ZSkgPT4gSVBfVjRfUkVHRVgudGVzdCh2YWx1ZSkgfHwgKHZhbHVlLnN0YXJ0c1dpdGgoXCJbXCIpICYmIHZhbHVlLmVuZHNXaXRoKFwiXVwiKSk7XG4iLCJpbXBvcnQgeyBJbmlTZWN0aW9uVHlwZSB9IGZyb20gXCJAc21pdGh5L3R5cGVzXCI7XG5pbXBvcnQgeyBDT05GSUdfUFJFRklYX1NFUEFSQVRPUiB9IGZyb20gXCIuL2xvYWRTaGFyZWRDb25maWdGaWxlc1wiO1xuY29uc3QgcHJlZml4S2V5UmVnZXggPSAvXihbXFx3LV0rKVxccyhbXCInXSk/KFtcXHctQFxcK1xcLiU6L10rKVxcMiQvO1xuY29uc3QgcHJvZmlsZU5hbWVCbG9ja0xpc3QgPSBbXCJfX3Byb3RvX19cIiwgXCJwcm9maWxlIF9fcHJvdG9fX1wiXTtcbmV4cG9ydCBjb25zdCBwYXJzZUluaSA9IChpbmlEYXRhKSA9PiB7XG4gICAgY29uc3QgbWFwID0ge307XG4gICAgbGV0IGN1cnJlbnRTZWN0aW9uO1xuICAgIGxldCBjdXJyZW50U3ViU2VjdGlvbjtcbiAgICBmb3IgKGNvbnN0IGluaUxpbmUgb2YgaW5pRGF0YS5zcGxpdCgvXFxyP1xcbi8pKSB7XG4gICAgICAgIGNvbnN0IHRyaW1tZWRMaW5lID0gaW5pTGluZS5zcGxpdCgvKF58XFxzKVs7I10vKVswXS50cmltKCk7XG4gICAgICAgIGNvbnN0IGlzU2VjdGlvbiA9IHRyaW1tZWRMaW5lWzBdID09PSBcIltcIiAmJiB0cmltbWVkTGluZVt0cmltbWVkTGluZS5sZW5ndGggLSAxXSA9PT0gXCJdXCI7XG4gICAgICAgIGlmIChpc1NlY3Rpb24pIHtcbiAgICAgICAgICAgIGN1cnJlbnRTZWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY3VycmVudFN1YlNlY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBzZWN0aW9uTmFtZSA9IHRyaW1tZWRMaW5lLnN1YnN0cmluZygxLCB0cmltbWVkTGluZS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSBwcmVmaXhLZXlSZWdleC5leGVjKHNlY3Rpb25OYW1lKTtcbiAgICAgICAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgWywgcHJlZml4LCAsIG5hbWVdID0gbWF0Y2hlcztcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhJbmlTZWN0aW9uVHlwZSkuaW5jbHVkZXMocHJlZml4KSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2VjdGlvbiA9IFtwcmVmaXgsIG5hbWVdLmpvaW4oQ09ORklHX1BSRUZJWF9TRVBBUkFUT1IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTZWN0aW9uID0gc2VjdGlvbk5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvZmlsZU5hbWVCbG9ja0xpc3QuaW5jbHVkZXMoc2VjdGlvbk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGb3VuZCBpbnZhbGlkIHByb2ZpbGUgbmFtZSBcIiR7c2VjdGlvbk5hbWV9XCJgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdXJyZW50U2VjdGlvbikge1xuICAgICAgICAgICAgY29uc3QgaW5kZXhPZkVxdWFsc1NpZ24gPSB0cmltbWVkTGluZS5pbmRleE9mKFwiPVwiKTtcbiAgICAgICAgICAgIGlmICghWzAsIC0xXS5pbmNsdWRlcyhpbmRleE9mRXF1YWxzU2lnbikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbbmFtZSwgdmFsdWVdID0gW1xuICAgICAgICAgICAgICAgICAgICB0cmltbWVkTGluZS5zdWJzdHJpbmcoMCwgaW5kZXhPZkVxdWFsc1NpZ24pLnRyaW0oKSxcbiAgICAgICAgICAgICAgICAgICAgdHJpbW1lZExpbmUuc3Vic3RyaW5nKGluZGV4T2ZFcXVhbHNTaWduICsgMSkudHJpbSgpLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdWJTZWN0aW9uID0gbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U3ViU2VjdGlvbiAmJiBpbmlMaW5lLnRyaW1TdGFydCgpID09PSBpbmlMaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3ViU2VjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtYXBbY3VycmVudFNlY3Rpb25dID0gbWFwW2N1cnJlbnRTZWN0aW9uXSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gY3VycmVudFN1YlNlY3Rpb24gPyBbY3VycmVudFN1YlNlY3Rpb24sIG5hbWVdLmpvaW4oQ09ORklHX1BSRUZJWF9TRVBBUkFUT1IpIDogbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgbWFwW2N1cnJlbnRTZWN0aW9uXVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXA7XG59O1xuIiwiaW1wb3J0IHsgc2V0Q3JlZGVudGlhbEZlYXR1cmUgfSBmcm9tIFwiQGF3cy1zZGsvY29yZS9jbGllbnRcIjtcbmltcG9ydCB7IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvciB9IGZyb20gXCJAc21pdGh5L3Byb3BlcnR5LXByb3ZpZGVyXCI7XG5leHBvcnQgY29uc3QgRU5WX0tFWSA9IFwiQVdTX0FDQ0VTU19LRVlfSURcIjtcbmV4cG9ydCBjb25zdCBFTlZfU0VDUkVUID0gXCJBV1NfU0VDUkVUX0FDQ0VTU19LRVlcIjtcbmV4cG9ydCBjb25zdCBFTlZfU0VTU0lPTiA9IFwiQVdTX1NFU1NJT05fVE9LRU5cIjtcbmV4cG9ydCBjb25zdCBFTlZfRVhQSVJBVElPTiA9IFwiQVdTX0NSRURFTlRJQUxfRVhQSVJBVElPTlwiO1xuZXhwb3J0IGNvbnN0IEVOVl9DUkVERU5USUFMX1NDT1BFID0gXCJBV1NfQ1JFREVOVElBTF9TQ09QRVwiO1xuZXhwb3J0IGNvbnN0IEVOVl9BQ0NPVU5UX0lEID0gXCJBV1NfQUNDT1VOVF9JRFwiO1xuZXhwb3J0IGNvbnN0IGZyb21FbnYgPSAoaW5pdCkgPT4gYXN5bmMgKCkgPT4ge1xuICAgIGluaXQ/LmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLWVudiAtIGZyb21FbnZcIik7XG4gICAgY29uc3QgYWNjZXNzS2V5SWQgPSBwcm9jZXNzLmVudltFTlZfS0VZXTtcbiAgICBjb25zdCBzZWNyZXRBY2Nlc3NLZXkgPSBwcm9jZXNzLmVudltFTlZfU0VDUkVUXTtcbiAgICBjb25zdCBzZXNzaW9uVG9rZW4gPSBwcm9jZXNzLmVudltFTlZfU0VTU0lPTl07XG4gICAgY29uc3QgZXhwaXJ5ID0gcHJvY2Vzcy5lbnZbRU5WX0VYUElSQVRJT05dO1xuICAgIGNvbnN0IGNyZWRlbnRpYWxTY29wZSA9IHByb2Nlc3MuZW52W0VOVl9DUkVERU5USUFMX1NDT1BFXTtcbiAgICBjb25zdCBhY2NvdW50SWQgPSBwcm9jZXNzLmVudltFTlZfQUNDT1VOVF9JRF07XG4gICAgaWYgKGFjY2Vzc0tleUlkICYmIHNlY3JldEFjY2Vzc0tleSkge1xuICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IHtcbiAgICAgICAgICAgIGFjY2Vzc0tleUlkLFxuICAgICAgICAgICAgc2VjcmV0QWNjZXNzS2V5LFxuICAgICAgICAgICAgLi4uKHNlc3Npb25Ub2tlbiAmJiB7IHNlc3Npb25Ub2tlbiB9KSxcbiAgICAgICAgICAgIC4uLihleHBpcnkgJiYgeyBleHBpcmF0aW9uOiBuZXcgRGF0ZShleHBpcnkpIH0pLFxuICAgICAgICAgICAgLi4uKGNyZWRlbnRpYWxTY29wZSAmJiB7IGNyZWRlbnRpYWxTY29wZSB9KSxcbiAgICAgICAgICAgIC4uLihhY2NvdW50SWQgJiYgeyBhY2NvdW50SWQgfSksXG4gICAgICAgIH07XG4gICAgICAgIHNldENyZWRlbnRpYWxGZWF0dXJlKGNyZWRlbnRpYWxzLCBcIkNSRURFTlRJQUxTX0VOVl9WQVJTXCIsIFwiZ1wiKTtcbiAgICAgICAgcmV0dXJuIGNyZWRlbnRpYWxzO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFwiVW5hYmxlIHRvIGZpbmQgZW52aXJvbm1lbnQgdmFyaWFibGUgY3JlZGVudGlhbHMuXCIsIHsgbG9nZ2VyOiBpbml0Py5sb2dnZXIgfSk7XG59O1xuIiwiZXhwb3J0IGNvbnN0IEFXU19FWEVDVVRJT05fRU5WID0gXCJBV1NfRVhFQ1VUSU9OX0VOVlwiO1xuZXhwb3J0IGNvbnN0IEFXU19SRUdJT05fRU5WID0gXCJBV1NfUkVHSU9OXCI7XG5leHBvcnQgY29uc3QgQVdTX0RFRkFVTFRfUkVHSU9OX0VOViA9IFwiQVdTX0RFRkFVTFRfUkVHSU9OXCI7XG5leHBvcnQgY29uc3QgRU5WX0lNRFNfRElTQUJMRUQgPSBcIkFXU19FQzJfTUVUQURBVEFfRElTQUJMRURcIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUU19NT0RFX09QVElPTlMgPSBbXCJpbi1yZWdpb25cIiwgXCJjcm9zcy1yZWdpb25cIiwgXCJtb2JpbGVcIiwgXCJzdGFuZGFyZFwiLCBcImxlZ2FjeVwiXTtcbmV4cG9ydCBjb25zdCBJTURTX1JFR0lPTl9QQVRIID0gXCIvbGF0ZXN0L21ldGEtZGF0YS9wbGFjZW1lbnQvcmVnaW9uXCI7XG4iLCJjb25zdCBBV1NfREVGQVVMVFNfTU9ERV9FTlYgPSBcIkFXU19ERUZBVUxUU19NT0RFXCI7XG5jb25zdCBBV1NfREVGQVVMVFNfTU9ERV9DT05GSUcgPSBcImRlZmF1bHRzX21vZGVcIjtcbmV4cG9ydCBjb25zdCBOT0RFX0RFRkFVTFRTX01PREVfQ09ORklHX09QVElPTlMgPSB7XG4gICAgZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yOiAoZW52KSA9PiB7XG4gICAgICAgIHJldHVybiBlbnZbQVdTX0RFRkFVTFRTX01PREVfRU5WXTtcbiAgICB9LFxuICAgIGNvbmZpZ0ZpbGVTZWxlY3RvcjogKHByb2ZpbGUpID0+IHtcbiAgICAgICAgcmV0dXJuIHByb2ZpbGVbQVdTX0RFRkFVTFRTX01PREVfQ09ORklHXTtcbiAgICB9LFxuICAgIGRlZmF1bHQ6IFwibGVnYWN5XCIsXG59O1xuIiwiaW1wb3J0IHsgTk9ERV9SRUdJT05fQ09ORklHX09QVElPTlMgfSBmcm9tIFwiQHNtaXRoeS9jb25maWctcmVzb2x2ZXJcIjtcbmltcG9ydCB7IGxvYWRDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9ub2RlLWNvbmZpZy1wcm92aWRlclwiO1xuaW1wb3J0IHsgbWVtb2l6ZSB9IGZyb20gXCJAc21pdGh5L3Byb3BlcnR5LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBBV1NfREVGQVVMVF9SRUdJT05fRU5WLCBBV1NfRVhFQ1VUSU9OX0VOViwgQVdTX1JFR0lPTl9FTlYsIERFRkFVTFRTX01PREVfT1BUSU9OUywgRU5WX0lNRFNfRElTQUJMRUQsIElNRFNfUkVHSU9OX1BBVEgsIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBOT0RFX0RFRkFVTFRTX01PREVfQ09ORklHX09QVElPTlMgfSBmcm9tIFwiLi9kZWZhdWx0c01vZGVDb25maWdcIjtcbmV4cG9ydCBjb25zdCByZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnID0gKHsgcmVnaW9uID0gbG9hZENvbmZpZyhOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUyksIGRlZmF1bHRzTW9kZSA9IGxvYWRDb25maWcoTk9ERV9ERUZBVUxUU19NT0RFX0NPTkZJR19PUFRJT05TKSwgfSA9IHt9KSA9PiBtZW1vaXplKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2RlID0gdHlwZW9mIGRlZmF1bHRzTW9kZSA9PT0gXCJmdW5jdGlvblwiID8gYXdhaXQgZGVmYXVsdHNNb2RlKCkgOiBkZWZhdWx0c01vZGU7XG4gICAgc3dpdGNoIChtb2RlPy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIGNhc2UgXCJhdXRvXCI6XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZU5vZGVEZWZhdWx0c01vZGVBdXRvKHJlZ2lvbik7XG4gICAgICAgIGNhc2UgXCJpbi1yZWdpb25cIjpcbiAgICAgICAgY2FzZSBcImNyb3NzLXJlZ2lvblwiOlxuICAgICAgICBjYXNlIFwibW9iaWxlXCI6XG4gICAgICAgIGNhc2UgXCJzdGFuZGFyZFwiOlxuICAgICAgICBjYXNlIFwibGVnYWN5XCI6XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1vZGU/LnRvTG9jYWxlTG93ZXJDYXNlKCkpO1xuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoXCJsZWdhY3lcIik7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcGFyYW1ldGVyIGZvciBcImRlZmF1bHRzTW9kZVwiLCBleHBlY3QgJHtERUZBVUxUU19NT0RFX09QVElPTlMuam9pbihcIiwgXCIpfSwgZ290ICR7bW9kZX1gKTtcbiAgICB9XG59KTtcbmNvbnN0IHJlc29sdmVOb2RlRGVmYXVsdHNNb2RlQXV0byA9IGFzeW5jIChjbGllbnRSZWdpb24pID0+IHtcbiAgICBpZiAoY2xpZW50UmVnaW9uKSB7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkUmVnaW9uID0gdHlwZW9mIGNsaWVudFJlZ2lvbiA9PT0gXCJmdW5jdGlvblwiID8gYXdhaXQgY2xpZW50UmVnaW9uKCkgOiBjbGllbnRSZWdpb247XG4gICAgICAgIGNvbnN0IGluZmVycmVkUmVnaW9uID0gYXdhaXQgaW5mZXJQaHlzaWNhbFJlZ2lvbigpO1xuICAgICAgICBpZiAoIWluZmVycmVkUmVnaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJzdGFuZGFyZFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNvbHZlZFJlZ2lvbiA9PT0gaW5mZXJyZWRSZWdpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBcImluLXJlZ2lvblwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiY3Jvc3MtcmVnaW9uXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFwic3RhbmRhcmRcIjtcbn07XG5jb25zdCBpbmZlclBoeXNpY2FsUmVnaW9uID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudltBV1NfRVhFQ1VUSU9OX0VOVl0gJiYgKHByb2Nlc3MuZW52W0FXU19SRUdJT05fRU5WXSB8fCBwcm9jZXNzLmVudltBV1NfREVGQVVMVF9SRUdJT05fRU5WXSkpIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3MuZW52W0FXU19SRUdJT05fRU5WXSA/PyBwcm9jZXNzLmVudltBV1NfREVGQVVMVF9SRUdJT05fRU5WXTtcbiAgICB9XG4gICAgaWYgKCFwcm9jZXNzLmVudltFTlZfSU1EU19ESVNBQkxFRF0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZ2V0SW5zdGFuY2VNZXRhZGF0YUVuZHBvaW50LCBodHRwUmVxdWVzdCB9ID0gYXdhaXQgaW1wb3J0KFwiQHNtaXRoeS9jcmVkZW50aWFsLXByb3ZpZGVyLWltZHNcIik7XG4gICAgICAgICAgICBjb25zdCBlbmRwb2ludCA9IGF3YWl0IGdldEluc3RhbmNlTWV0YWRhdGFFbmRwb2ludCgpO1xuICAgICAgICAgICAgcmV0dXJuIChhd2FpdCBodHRwUmVxdWVzdCh7IC4uLmVuZHBvaW50LCBwYXRoOiBJTURTX1JFR0lPTl9QQVRIIH0pKS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIH1cbiAgICB9XG59O1xuIiwiY29uc3QgZ2V0QWxsQWxpYXNlcyA9IChuYW1lLCBhbGlhc2VzKSA9PiB7XG4gICAgY29uc3QgX2FsaWFzZXMgPSBbXTtcbiAgICBpZiAobmFtZSkge1xuICAgICAgICBfYWxpYXNlcy5wdXNoKG5hbWUpO1xuICAgIH1cbiAgICBpZiAoYWxpYXNlcykge1xuICAgICAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGFsaWFzZXMpIHtcbiAgICAgICAgICAgIF9hbGlhc2VzLnB1c2goYWxpYXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfYWxpYXNlcztcbn07XG5jb25zdCBnZXRNaWRkbGV3YXJlTmFtZVdpdGhBbGlhc2VzID0gKG5hbWUsIGFsaWFzZXMpID0+IHtcbiAgICByZXR1cm4gYCR7bmFtZSB8fCBcImFub255bW91c1wifSR7YWxpYXNlcyAmJiBhbGlhc2VzLmxlbmd0aCA+IDAgPyBgIChhLmsuYS4gJHthbGlhc2VzLmpvaW4oXCIsXCIpfSlgIDogXCJcIn1gO1xufTtcbmV4cG9ydCBjb25zdCBjb25zdHJ1Y3RTdGFjayA9ICgpID0+IHtcbiAgICBsZXQgYWJzb2x1dGVFbnRyaWVzID0gW107XG4gICAgbGV0IHJlbGF0aXZlRW50cmllcyA9IFtdO1xuICAgIGxldCBpZGVudGlmeU9uUmVzb2x2ZSA9IGZhbHNlO1xuICAgIGNvbnN0IGVudHJpZXNOYW1lU2V0ID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IHNvcnQgPSAoZW50cmllcykgPT4gZW50cmllcy5zb3J0KChhLCBiKSA9PiBzdGVwV2VpZ2h0c1tiLnN0ZXBdIC0gc3RlcFdlaWdodHNbYS5zdGVwXSB8fFxuICAgICAgICBwcmlvcml0eVdlaWdodHNbYi5wcmlvcml0eSB8fCBcIm5vcm1hbFwiXSAtIHByaW9yaXR5V2VpZ2h0c1thLnByaW9yaXR5IHx8IFwibm9ybWFsXCJdKTtcbiAgICBjb25zdCByZW1vdmVCeU5hbWUgPSAodG9SZW1vdmUpID0+IHtcbiAgICAgICAgbGV0IGlzUmVtb3ZlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBmaWx0ZXJDYiA9IChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYWxpYXNlcyA9IGdldEFsbEFsaWFzZXMoZW50cnkubmFtZSwgZW50cnkuYWxpYXNlcyk7XG4gICAgICAgICAgICBpZiAoYWxpYXNlcy5pbmNsdWRlcyh0b1JlbW92ZSkpIHtcbiAgICAgICAgICAgICAgICBpc1JlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYWxpYXMgb2YgYWxpYXNlcykge1xuICAgICAgICAgICAgICAgICAgICBlbnRyaWVzTmFtZVNldC5kZWxldGUoYWxpYXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgYWJzb2x1dGVFbnRyaWVzID0gYWJzb2x1dGVFbnRyaWVzLmZpbHRlcihmaWx0ZXJDYik7XG4gICAgICAgIHJlbGF0aXZlRW50cmllcyA9IHJlbGF0aXZlRW50cmllcy5maWx0ZXIoZmlsdGVyQ2IpO1xuICAgICAgICByZXR1cm4gaXNSZW1vdmVkO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlQnlSZWZlcmVuY2UgPSAodG9SZW1vdmUpID0+IHtcbiAgICAgICAgbGV0IGlzUmVtb3ZlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBmaWx0ZXJDYiA9IChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVudHJ5Lm1pZGRsZXdhcmUgPT09IHRvUmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgaXNSZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGdldEFsbEFsaWFzZXMoZW50cnkubmFtZSwgZW50cnkuYWxpYXNlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgZW50cmllc05hbWVTZXQuZGVsZXRlKGFsaWFzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIGFic29sdXRlRW50cmllcyA9IGFic29sdXRlRW50cmllcy5maWx0ZXIoZmlsdGVyQ2IpO1xuICAgICAgICByZWxhdGl2ZUVudHJpZXMgPSByZWxhdGl2ZUVudHJpZXMuZmlsdGVyKGZpbHRlckNiKTtcbiAgICAgICAgcmV0dXJuIGlzUmVtb3ZlZDtcbiAgICB9O1xuICAgIGNvbnN0IGNsb25lVG8gPSAodG9TdGFjaykgPT4ge1xuICAgICAgICBhYnNvbHV0ZUVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgIHRvU3RhY2suYWRkKGVudHJ5Lm1pZGRsZXdhcmUsIHsgLi4uZW50cnkgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZWxhdGl2ZUVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgIHRvU3RhY2suYWRkUmVsYXRpdmVUbyhlbnRyeS5taWRkbGV3YXJlLCB7IC4uLmVudHJ5IH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdG9TdGFjay5pZGVudGlmeU9uUmVzb2x2ZT8uKHN0YWNrLmlkZW50aWZ5T25SZXNvbHZlKCkpO1xuICAgICAgICByZXR1cm4gdG9TdGFjaztcbiAgICB9O1xuICAgIGNvbnN0IGV4cGFuZFJlbGF0aXZlTWlkZGxld2FyZUxpc3QgPSAoZnJvbSkgPT4ge1xuICAgICAgICBjb25zdCBleHBhbmRlZE1pZGRsZXdhcmVMaXN0ID0gW107XG4gICAgICAgIGZyb20uYmVmb3JlLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICBpZiAoZW50cnkuYmVmb3JlLmxlbmd0aCA9PT0gMCAmJiBlbnRyeS5hZnRlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBleHBhbmRlZE1pZGRsZXdhcmVMaXN0LnB1c2goZW50cnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXhwYW5kZWRNaWRkbGV3YXJlTGlzdC5wdXNoKC4uLmV4cGFuZFJlbGF0aXZlTWlkZGxld2FyZUxpc3QoZW50cnkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGV4cGFuZGVkTWlkZGxld2FyZUxpc3QucHVzaChmcm9tKTtcbiAgICAgICAgZnJvbS5hZnRlci5yZXZlcnNlKCkuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgIGlmIChlbnRyeS5iZWZvcmUubGVuZ3RoID09PSAwICYmIGVudHJ5LmFmdGVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGV4cGFuZGVkTWlkZGxld2FyZUxpc3QucHVzaChlbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBleHBhbmRlZE1pZGRsZXdhcmVMaXN0LnB1c2goLi4uZXhwYW5kUmVsYXRpdmVNaWRkbGV3YXJlTGlzdChlbnRyeSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGV4cGFuZGVkTWlkZGxld2FyZUxpc3Q7XG4gICAgfTtcbiAgICBjb25zdCBnZXRNaWRkbGV3YXJlTGlzdCA9IChkZWJ1ZyA9IGZhbHNlKSA9PiB7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRBYnNvbHV0ZUVudHJpZXMgPSBbXTtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFJlbGF0aXZlRW50cmllcyA9IFtdO1xuICAgICAgICBjb25zdCBub3JtYWxpemVkRW50cmllc05hbWVNYXAgPSB7fTtcbiAgICAgICAgYWJzb2x1dGVFbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkRW50cnkgPSB7XG4gICAgICAgICAgICAgICAgLi4uZW50cnksXG4gICAgICAgICAgICAgICAgYmVmb3JlOiBbXSxcbiAgICAgICAgICAgICAgICBhZnRlcjogW10sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBhbGlhcyBvZiBnZXRBbGxBbGlhc2VzKG5vcm1hbGl6ZWRFbnRyeS5uYW1lLCBub3JtYWxpemVkRW50cnkuYWxpYXNlcykpIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkRW50cmllc05hbWVNYXBbYWxpYXNdID0gbm9ybWFsaXplZEVudHJ5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9ybWFsaXplZEFic29sdXRlRW50cmllcy5wdXNoKG5vcm1hbGl6ZWRFbnRyeSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZWxhdGl2ZUVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRFbnRyeSA9IHtcbiAgICAgICAgICAgICAgICAuLi5lbnRyeSxcbiAgICAgICAgICAgICAgICBiZWZvcmU6IFtdLFxuICAgICAgICAgICAgICAgIGFmdGVyOiBbXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGdldEFsbEFsaWFzZXMobm9ybWFsaXplZEVudHJ5Lm5hbWUsIG5vcm1hbGl6ZWRFbnRyeS5hbGlhc2VzKSkge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRFbnRyaWVzTmFtZU1hcFthbGlhc10gPSBub3JtYWxpemVkRW50cnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub3JtYWxpemVkUmVsYXRpdmVFbnRyaWVzLnB1c2gobm9ybWFsaXplZEVudHJ5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIG5vcm1hbGl6ZWRSZWxhdGl2ZUVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgIGlmIChlbnRyeS50b01pZGRsZXdhcmUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b01pZGRsZXdhcmUgPSBub3JtYWxpemVkRW50cmllc05hbWVNYXBbZW50cnkudG9NaWRkbGV3YXJlXTtcbiAgICAgICAgICAgICAgICBpZiAodG9NaWRkbGV3YXJlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2VudHJ5LnRvTWlkZGxld2FyZX0gaXMgbm90IGZvdW5kIHdoZW4gYWRkaW5nIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCR7Z2V0TWlkZGxld2FyZU5hbWVXaXRoQWxpYXNlcyhlbnRyeS5uYW1lLCBlbnRyeS5hbGlhc2VzKX0gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgbWlkZGxld2FyZSAke2VudHJ5LnJlbGF0aW9ufSAke2VudHJ5LnRvTWlkZGxld2FyZX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LnJlbGF0aW9uID09PSBcImFmdGVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9NaWRkbGV3YXJlLmFmdGVyLnB1c2goZW50cnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZW50cnkucmVsYXRpb24gPT09IFwiYmVmb3JlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9NaWRkbGV3YXJlLmJlZm9yZS5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBtYWluQ2hhaW4gPSBzb3J0KG5vcm1hbGl6ZWRBYnNvbHV0ZUVudHJpZXMpXG4gICAgICAgICAgICAubWFwKGV4cGFuZFJlbGF0aXZlTWlkZGxld2FyZUxpc3QpXG4gICAgICAgICAgICAucmVkdWNlKCh3aG9sZUxpc3QsIGV4cGFuZGVkTWlkZGxld2FyZUxpc3QpID0+IHtcbiAgICAgICAgICAgIHdob2xlTGlzdC5wdXNoKC4uLmV4cGFuZGVkTWlkZGxld2FyZUxpc3QpO1xuICAgICAgICAgICAgcmV0dXJuIHdob2xlTGlzdDtcbiAgICAgICAgfSwgW10pO1xuICAgICAgICByZXR1cm4gbWFpbkNoYWluO1xuICAgIH07XG4gICAgY29uc3Qgc3RhY2sgPSB7XG4gICAgICAgIGFkZDogKG1pZGRsZXdhcmUsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBuYW1lLCBvdmVycmlkZSwgYWxpYXNlczogX2FsaWFzZXMgfSA9IG9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBlbnRyeSA9IHtcbiAgICAgICAgICAgICAgICBzdGVwOiBcImluaXRpYWxpemVcIixcbiAgICAgICAgICAgICAgICBwcmlvcml0eTogXCJub3JtYWxcIixcbiAgICAgICAgICAgICAgICBtaWRkbGV3YXJlLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYWxpYXNlcyA9IGdldEFsbEFsaWFzZXMobmFtZSwgX2FsaWFzZXMpO1xuICAgICAgICAgICAgaWYgKGFsaWFzZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGlmIChhbGlhc2VzLnNvbWUoKGFsaWFzKSA9PiBlbnRyaWVzTmFtZVNldC5oYXMoYWxpYXMpKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW92ZXJyaWRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBEdXBsaWNhdGUgbWlkZGxld2FyZSBuYW1lICcke2dldE1pZGRsZXdhcmVOYW1lV2l0aEFsaWFzZXMobmFtZSwgX2FsaWFzZXMpfSdgKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhbGlhcyBvZiBhbGlhc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b092ZXJyaWRlSW5kZXggPSBhYnNvbHV0ZUVudHJpZXMuZmluZEluZGV4KChlbnRyeSkgPT4gZW50cnkubmFtZSA9PT0gYWxpYXMgfHwgZW50cnkuYWxpYXNlcz8uc29tZSgoYSkgPT4gYSA9PT0gYWxpYXMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b092ZXJyaWRlSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b092ZXJyaWRlID0gYWJzb2x1dGVFbnRyaWVzW3RvT3ZlcnJpZGVJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9PdmVycmlkZS5zdGVwICE9PSBlbnRyeS5zdGVwIHx8IGVudHJ5LnByaW9yaXR5ICE9PSB0b092ZXJyaWRlLnByaW9yaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBcIiR7Z2V0TWlkZGxld2FyZU5hbWVXaXRoQWxpYXNlcyh0b092ZXJyaWRlLm5hbWUsIHRvT3ZlcnJpZGUuYWxpYXNlcyl9XCIgbWlkZGxld2FyZSB3aXRoIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHt0b092ZXJyaWRlLnByaW9yaXR5fSBwcmlvcml0eSBpbiAke3RvT3ZlcnJpZGUuc3RlcH0gc3RlcCBjYW5ub3QgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBiZSBvdmVycmlkZGVuIGJ5IFwiJHtnZXRNaWRkbGV3YXJlTmFtZVdpdGhBbGlhc2VzKG5hbWUsIF9hbGlhc2VzKX1cIiBtaWRkbGV3YXJlIHdpdGggYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke2VudHJ5LnByaW9yaXR5fSBwcmlvcml0eSBpbiAke2VudHJ5LnN0ZXB9IHN0ZXAuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhYnNvbHV0ZUVudHJpZXMuc3BsaWNlKHRvT3ZlcnJpZGVJbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBhbGlhcyBvZiBhbGlhc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudHJpZXNOYW1lU2V0LmFkZChhbGlhcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWJzb2x1dGVFbnRyaWVzLnB1c2goZW50cnkpO1xuICAgICAgICB9LFxuICAgICAgICBhZGRSZWxhdGl2ZVRvOiAobWlkZGxld2FyZSwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBuYW1lLCBvdmVycmlkZSwgYWxpYXNlczogX2FsaWFzZXMgfSA9IG9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBlbnRyeSA9IHtcbiAgICAgICAgICAgICAgICBtaWRkbGV3YXJlLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYWxpYXNlcyA9IGdldEFsbEFsaWFzZXMobmFtZSwgX2FsaWFzZXMpO1xuICAgICAgICAgICAgaWYgKGFsaWFzZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGlmIChhbGlhc2VzLnNvbWUoKGFsaWFzKSA9PiBlbnRyaWVzTmFtZVNldC5oYXMoYWxpYXMpKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW92ZXJyaWRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBEdXBsaWNhdGUgbWlkZGxld2FyZSBuYW1lICcke2dldE1pZGRsZXdhcmVOYW1lV2l0aEFsaWFzZXMobmFtZSwgX2FsaWFzZXMpfSdgKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhbGlhcyBvZiBhbGlhc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b092ZXJyaWRlSW5kZXggPSByZWxhdGl2ZUVudHJpZXMuZmluZEluZGV4KChlbnRyeSkgPT4gZW50cnkubmFtZSA9PT0gYWxpYXMgfHwgZW50cnkuYWxpYXNlcz8uc29tZSgoYSkgPT4gYSA9PT0gYWxpYXMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b092ZXJyaWRlSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b092ZXJyaWRlID0gcmVsYXRpdmVFbnRyaWVzW3RvT3ZlcnJpZGVJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9PdmVycmlkZS50b01pZGRsZXdhcmUgIT09IGVudHJ5LnRvTWlkZGxld2FyZSB8fCB0b092ZXJyaWRlLnJlbGF0aW9uICE9PSBlbnRyeS5yZWxhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke2dldE1pZGRsZXdhcmVOYW1lV2l0aEFsaWFzZXModG9PdmVycmlkZS5uYW1lLCB0b092ZXJyaWRlLmFsaWFzZXMpfVwiIG1pZGRsZXdhcmUgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3RvT3ZlcnJpZGUucmVsYXRpb259IFwiJHt0b092ZXJyaWRlLnRvTWlkZGxld2FyZX1cIiBtaWRkbGV3YXJlIGNhbm5vdCBiZSBvdmVycmlkZGVuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgYnkgXCIke2dldE1pZGRsZXdhcmVOYW1lV2l0aEFsaWFzZXMobmFtZSwgX2FsaWFzZXMpfVwiIG1pZGRsZXdhcmUgJHtlbnRyeS5yZWxhdGlvbn0gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcIiR7ZW50cnkudG9NaWRkbGV3YXJlfVwiIG1pZGRsZXdhcmUuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZUVudHJpZXMuc3BsaWNlKHRvT3ZlcnJpZGVJbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBhbGlhcyBvZiBhbGlhc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudHJpZXNOYW1lU2V0LmFkZChhbGlhcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVsYXRpdmVFbnRyaWVzLnB1c2goZW50cnkpO1xuICAgICAgICB9LFxuICAgICAgICBjbG9uZTogKCkgPT4gY2xvbmVUbyhjb25zdHJ1Y3RTdGFjaygpKSxcbiAgICAgICAgdXNlOiAocGx1Z2luKSA9PiB7XG4gICAgICAgICAgICBwbHVnaW4uYXBwbHlUb1N0YWNrKHN0YWNrKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlOiAodG9SZW1vdmUpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG9SZW1vdmUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlbW92ZUJ5TmFtZSh0b1JlbW92ZSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlbW92ZUJ5UmVmZXJlbmNlKHRvUmVtb3ZlKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlQnlUYWc6ICh0b1JlbW92ZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGlzUmVtb3ZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyQ2IgPSAoZW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHRhZ3MsIG5hbWUsIGFsaWFzZXM6IF9hbGlhc2VzIH0gPSBlbnRyeTtcbiAgICAgICAgICAgICAgICBpZiAodGFncyAmJiB0YWdzLmluY2x1ZGVzKHRvUmVtb3ZlKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGlhc2VzID0gZ2V0QWxsQWxpYXNlcyhuYW1lLCBfYWxpYXNlcyk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYWxpYXMgb2YgYWxpYXNlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllc05hbWVTZXQuZGVsZXRlKGFsaWFzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpc1JlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFic29sdXRlRW50cmllcyA9IGFic29sdXRlRW50cmllcy5maWx0ZXIoZmlsdGVyQ2IpO1xuICAgICAgICAgICAgcmVsYXRpdmVFbnRyaWVzID0gcmVsYXRpdmVFbnRyaWVzLmZpbHRlcihmaWx0ZXJDYik7XG4gICAgICAgICAgICByZXR1cm4gaXNSZW1vdmVkO1xuICAgICAgICB9LFxuICAgICAgICBjb25jYXQ6IChmcm9tKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjbG9uZWQgPSBjbG9uZVRvKGNvbnN0cnVjdFN0YWNrKCkpO1xuICAgICAgICAgICAgY2xvbmVkLnVzZShmcm9tKTtcbiAgICAgICAgICAgIGNsb25lZC5pZGVudGlmeU9uUmVzb2x2ZShpZGVudGlmeU9uUmVzb2x2ZSB8fCBjbG9uZWQuaWRlbnRpZnlPblJlc29sdmUoKSB8fCAoZnJvbS5pZGVudGlmeU9uUmVzb2x2ZT8uKCkgPz8gZmFsc2UpKTtcbiAgICAgICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGx5VG9TdGFjazogY2xvbmVUbyxcbiAgICAgICAgaWRlbnRpZnk6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBnZXRNaWRkbGV3YXJlTGlzdCh0cnVlKS5tYXAoKG13KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RlcCA9IG13LnN0ZXAgPz9cbiAgICAgICAgICAgICAgICAgICAgbXcucmVsYXRpb24gK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgbXcudG9NaWRkbGV3YXJlO1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRNaWRkbGV3YXJlTmFtZVdpdGhBbGlhc2VzKG13Lm5hbWUsIG13LmFsaWFzZXMpICsgXCIgLSBcIiArIHN0ZXA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgaWRlbnRpZnlPblJlc29sdmUodG9nZ2xlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRvZ2dsZSA9PT0gXCJib29sZWFuXCIpXG4gICAgICAgICAgICAgICAgaWRlbnRpZnlPblJlc29sdmUgPSB0b2dnbGU7XG4gICAgICAgICAgICByZXR1cm4gaWRlbnRpZnlPblJlc29sdmU7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc29sdmU6IChoYW5kbGVyLCBjb250ZXh0KSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG1pZGRsZXdhcmUgb2YgZ2V0TWlkZGxld2FyZUxpc3QoKVxuICAgICAgICAgICAgICAgIC5tYXAoKGVudHJ5KSA9PiBlbnRyeS5taWRkbGV3YXJlKVxuICAgICAgICAgICAgICAgIC5yZXZlcnNlKCkpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyID0gbWlkZGxld2FyZShoYW5kbGVyLCBjb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpZGVudGlmeU9uUmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHN0YWNrLmlkZW50aWZ5KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXI7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gc3RhY2s7XG59O1xuY29uc3Qgc3RlcFdlaWdodHMgPSB7XG4gICAgaW5pdGlhbGl6ZTogNSxcbiAgICBzZXJpYWxpemU6IDQsXG4gICAgYnVpbGQ6IDMsXG4gICAgZmluYWxpemVSZXF1ZXN0OiAyLFxuICAgIGRlc2VyaWFsaXplOiAxLFxufTtcbmNvbnN0IHByaW9yaXR5V2VpZ2h0cyA9IHtcbiAgICBoaWdoOiAzLFxuICAgIG5vcm1hbDogMixcbiAgICBsb3c6IDEsXG59O1xuIiwiaW1wb3J0IHsgSHR0cFJlc3BvbnNlIH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuZXhwb3J0IGNvbnN0IGRlc2VyaWFsaXplck1pZGRsZXdhcmUgPSAob3B0aW9ucywgZGVzZXJpYWxpemVyKSA9PiAobmV4dCwgY29udGV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgICBjb25zdCB7IHJlc3BvbnNlIH0gPSBhd2FpdCBuZXh0KGFyZ3MpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IGF3YWl0IGRlc2VyaWFsaXplcihyZXNwb25zZSwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgIG91dHB1dDogcGFyc2VkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVycm9yLCBcIiRyZXNwb25zZVwiLCB7XG4gICAgICAgICAgICB2YWx1ZTogcmVzcG9uc2UsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIShcIiRtZXRhZGF0YVwiIGluIGVycm9yKSkge1xuICAgICAgICAgICAgY29uc3QgaGludCA9IGBEZXNlcmlhbGl6YXRpb24gZXJyb3I6IHRvIHNlZSB0aGUgcmF3IHJlc3BvbnNlLCBpbnNwZWN0IHRoZSBoaWRkZW4gZmllbGQge2Vycm9yfS4kcmVzcG9uc2Ugb24gdGhpcyBvYmplY3QuYDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZXJyb3IubWVzc2FnZSArPSBcIlxcbiAgXCIgKyBoaW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbnRleHQubG9nZ2VyIHx8IGNvbnRleHQubG9nZ2VyPy5jb25zdHJ1Y3Rvcj8ubmFtZSA9PT0gXCJOb09wTG9nZ2VyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGhpbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5sb2dnZXI/Lndhcm4/LihoaW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yLiRyZXNwb25zZUJvZHlUZXh0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLiRyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvci4kcmVzcG9uc2UuYm9keSA9IGVycm9yLiRyZXNwb25zZUJvZHlUZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKEh0dHBSZXNwb25zZS5pc0luc3RhbmNlKHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGhlYWRlcnMgPSB7fSB9ID0gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlckVudHJpZXMgPSBPYmplY3QuZW50cmllcyhoZWFkZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuJG1ldGFkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaHR0cFN0YXR1c0NvZGU6IHJlc3BvbnNlLnN0YXR1c0NvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IGZpbmRIZWFkZXIoL154LVtcXHctXSstcmVxdWVzdC0/aWQkLywgaGVhZGVyRW50cmllcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbmRlZFJlcXVlc3RJZDogZmluZEhlYWRlcigvXngtW1xcdy1dKy1pZC0yJC8sIGhlYWRlckVudHJpZXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2ZJZDogZmluZEhlYWRlcigvXngtW1xcdy1dKy1jZi1pZCQvLCBoZWFkZXJFbnRyaWVzKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn07XG5jb25zdCBmaW5kSGVhZGVyID0gKHBhdHRlcm4sIGhlYWRlcnMpID0+IHtcbiAgICByZXR1cm4gKGhlYWRlcnMuZmluZCgoW2tdKSA9PiB7XG4gICAgICAgIHJldHVybiBrLm1hdGNoKHBhdHRlcm4pO1xuICAgIH0pIHx8IFt2b2lkIDAsIHZvaWQgMV0pWzFdO1xufTtcbiIsImV4cG9ydCBjb25zdCBzZXJpYWxpemVyTWlkZGxld2FyZSA9IChvcHRpb25zLCBzZXJpYWxpemVyKSA9PiAobmV4dCwgY29udGV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgICBjb25zdCBlbmRwb2ludENvbmZpZyA9IG9wdGlvbnM7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBjb250ZXh0LmVuZHBvaW50VjI/LnVybCAmJiBlbmRwb2ludENvbmZpZy51cmxQYXJzZXJcbiAgICAgICAgPyBhc3luYyAoKSA9PiBlbmRwb2ludENvbmZpZy51cmxQYXJzZXIoY29udGV4dC5lbmRwb2ludFYyLnVybClcbiAgICAgICAgOiBlbmRwb2ludENvbmZpZy5lbmRwb2ludDtcbiAgICBpZiAoIWVuZHBvaW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHZhbGlkIGVuZHBvaW50IHByb3ZpZGVyIGF2YWlsYWJsZS5cIik7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3QgPSBhd2FpdCBzZXJpYWxpemVyKGFyZ3MuaW5wdXQsIHsgLi4ub3B0aW9ucywgZW5kcG9pbnQgfSk7XG4gICAgcmV0dXJuIG5leHQoe1xuICAgICAgICAuLi5hcmdzLFxuICAgICAgICByZXF1ZXN0LFxuICAgIH0pO1xufTtcbiIsImltcG9ydCB7IGRlc2VyaWFsaXplck1pZGRsZXdhcmUgfSBmcm9tIFwiLi9kZXNlcmlhbGl6ZXJNaWRkbGV3YXJlXCI7XG5pbXBvcnQgeyBzZXJpYWxpemVyTWlkZGxld2FyZSB9IGZyb20gXCIuL3NlcmlhbGl6ZXJNaWRkbGV3YXJlXCI7XG5leHBvcnQgY29uc3QgZGVzZXJpYWxpemVyTWlkZGxld2FyZU9wdGlvbiA9IHtcbiAgICBuYW1lOiBcImRlc2VyaWFsaXplck1pZGRsZXdhcmVcIixcbiAgICBzdGVwOiBcImRlc2VyaWFsaXplXCIsXG4gICAgdGFnczogW1wiREVTRVJJQUxJWkVSXCJdLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcbmV4cG9ydCBjb25zdCBzZXJpYWxpemVyTWlkZGxld2FyZU9wdGlvbiA9IHtcbiAgICBuYW1lOiBcInNlcmlhbGl6ZXJNaWRkbGV3YXJlXCIsXG4gICAgc3RlcDogXCJzZXJpYWxpemVcIixcbiAgICB0YWdzOiBbXCJTRVJJQUxJWkVSXCJdLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXJkZVBsdWdpbihjb25maWcsIHNlcmlhbGl6ZXIsIGRlc2VyaWFsaXplcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFwcGx5VG9TdGFjazogKGNvbW1hbmRTdGFjaykgPT4ge1xuICAgICAgICAgICAgY29tbWFuZFN0YWNrLmFkZChkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlKGNvbmZpZywgZGVzZXJpYWxpemVyKSwgZGVzZXJpYWxpemVyTWlkZGxld2FyZU9wdGlvbik7XG4gICAgICAgICAgICBjb21tYW5kU3RhY2suYWRkKHNlcmlhbGl6ZXJNaWRkbGV3YXJlKGNvbmZpZywgc2VyaWFsaXplciksIHNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgZnJvbUFycmF5QnVmZmVyLCBmcm9tU3RyaW5nIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1idWZmZXItZnJvbVwiO1xuaW1wb3J0IHsgdG9VaW50OEFycmF5IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC11dGY4XCI7XG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyXCI7XG5pbXBvcnQgeyBjcmVhdGVIYXNoLCBjcmVhdGVIbWFjIH0gZnJvbSBcImNyeXB0b1wiO1xuZXhwb3J0IGNsYXNzIEhhc2gge1xuICAgIGNvbnN0cnVjdG9yKGFsZ29yaXRobUlkZW50aWZpZXIsIHNlY3JldCkge1xuICAgICAgICB0aGlzLmFsZ29yaXRobUlkZW50aWZpZXIgPSBhbGdvcml0aG1JZGVudGlmaWVyO1xuICAgICAgICB0aGlzLnNlY3JldCA9IHNlY3JldDtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cbiAgICB1cGRhdGUodG9IYXNoLCBlbmNvZGluZykge1xuICAgICAgICB0aGlzLmhhc2gudXBkYXRlKHRvVWludDhBcnJheShjYXN0U291cmNlRGF0YSh0b0hhc2gsIGVuY29kaW5nKSkpO1xuICAgIH1cbiAgICBkaWdlc3QoKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5oYXNoLmRpZ2VzdCgpKTtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuaGFzaCA9IHRoaXMuc2VjcmV0XG4gICAgICAgICAgICA/IGNyZWF0ZUhtYWModGhpcy5hbGdvcml0aG1JZGVudGlmaWVyLCBjYXN0U291cmNlRGF0YSh0aGlzLnNlY3JldCkpXG4gICAgICAgICAgICA6IGNyZWF0ZUhhc2godGhpcy5hbGdvcml0aG1JZGVudGlmaWVyKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjYXN0U291cmNlRGF0YSh0b0Nhc3QsIGVuY29kaW5nKSB7XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih0b0Nhc3QpKSB7XG4gICAgICAgIHJldHVybiB0b0Nhc3Q7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdG9DYXN0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBmcm9tU3RyaW5nKHRvQ2FzdCwgZW5jb2RpbmcpO1xuICAgIH1cbiAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHRvQ2FzdCkpIHtcbiAgICAgICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0b0Nhc3QuYnVmZmVyLCB0b0Nhc3QuYnl0ZU9mZnNldCwgdG9DYXN0LmJ5dGVMZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRvQ2FzdCk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSW52b2tlU3RvcmUgPSB2b2lkIDA7XG5jb25zdCBhc3luY19ob29rc18xID0gcmVxdWlyZShcImFzeW5jX2hvb2tzXCIpO1xuLy8gQVdTX0xBTUJEQV9OT0RFSlNfTk9fR0xPQkFMX0FXU0xBTUJEQSBwcm92aWRlcyBhbiBlc2NhcGUgaGF0Y2ggc2luY2Ugd2UncmUgbW9kaWZ5aW5nIHRoZSBnbG9iYWwgb2JqZWN0IHdoaWNoIG1heSBub3QgYmUgZXhwZWN0ZWQgdG8gYSBjdXN0b21lcidzIGhhbmRsZXIuXG5jb25zdCBub0dsb2JhbEF3c0xhbWJkYSA9IHByb2Nlc3MuZW52W1wiQVdTX0xBTUJEQV9OT0RFSlNfTk9fR0xPQkFMX0FXU0xBTUJEQVwiXSA9PT0gXCIxXCIgfHxcbiAgICBwcm9jZXNzLmVudltcIkFXU19MQU1CREFfTk9ERUpTX05PX0dMT0JBTF9BV1NMQU1CREFcIl0gPT09IFwidHJ1ZVwiO1xuaWYgKCFub0dsb2JhbEF3c0xhbWJkYSkge1xuICAgIGdsb2JhbFRoaXMuYXdzbGFtYmRhID0gZ2xvYmFsVGhpcy5hd3NsYW1iZGEgfHwge307XG59XG5jb25zdCBQUk9URUNURURfS0VZUyA9IHtcbiAgICBSRVFVRVNUX0lEOiBTeW1ib2woXCJfQVdTX0xBTUJEQV9SRVFVRVNUX0lEXCIpLFxuICAgIFhfUkFZX1RSQUNFX0lEOiBTeW1ib2woXCJfQVdTX0xBTUJEQV9YX1JBWV9UUkFDRV9JRFwiKSxcbn07XG4vKipcbiAqIEludm9rZVN0b3JlIGltcGxlbWVudGF0aW9uIGNsYXNzXG4gKi9cbmNsYXNzIEludm9rZVN0b3JlSW1wbCB7XG4gICAgc3RhdGljIHN0b3JhZ2UgPSBuZXcgYXN5bmNfaG9va3NfMS5Bc3luY0xvY2FsU3RvcmFnZSgpO1xuICAgIC8vIFByb3RlY3RlZCBrZXlzIGZvciBMYW1iZGEgY29udGV4dCBmaWVsZHNcbiAgICBzdGF0aWMgUFJPVEVDVEVEX0tFWVMgPSBQUk9URUNURURfS0VZUztcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIGFuZCBydW4gY29kZSB3aXRoaW4gYW4gaW52b2tlIGNvbnRleHRcbiAgICAgKi9cbiAgICBzdGF0aWMgcnVuKGNvbnRleHQsIGZuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2UucnVuKHsgLi4uY29udGV4dCB9LCBmbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY29tcGxldGUgY3VycmVudCBjb250ZXh0XG4gICAgICovXG4gICAgc3RhdGljIGdldENvbnRleHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGEgc3BlY2lmaWMgdmFsdWUgZnJvbSB0aGUgY29udGV4dCBieSBrZXlcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0KGtleSkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5zdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgICAgIHJldHVybiBjb250ZXh0Py5ba2V5XTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGEgY3VzdG9tIHZhbHVlIGluIHRoZSBjdXJyZW50IGNvbnRleHRcbiAgICAgKiBQcm90ZWN0ZWQgTGFtYmRhIGNvbnRleHQgZmllbGRzIGNhbm5vdCBiZSBvdmVyd3JpdHRlblxuICAgICAqL1xuICAgIHN0YXRpYyBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5pc1Byb3RlY3RlZEtleShrZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBtb2RpZnkgcHJvdGVjdGVkIExhbWJkYSBjb250ZXh0IGZpZWxkYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuc3RvcmFnZS5nZXRTdG9yZSgpO1xuICAgICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICAgICAgY29udGV4dFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IHJlcXVlc3QgSURcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0UmVxdWVzdElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQodGhpcy5QUk9URUNURURfS0VZUy5SRVFVRVNUX0lEKSA/PyBcIi1cIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IFgtcmF5IHRyYWNlIElEXG4gICAgICovXG4gICAgc3RhdGljIGdldFhSYXlUcmFjZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQodGhpcy5QUk9URUNURURfS0VZUy5YX1JBWV9UUkFDRV9JRCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHdlJ3JlIGN1cnJlbnRseSB3aXRoaW4gYW4gaW52b2tlIGNvbnRleHRcbiAgICAgKi9cbiAgICBzdGF0aWMgaGFzQ29udGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5nZXRTdG9yZSgpICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGEga2V5IGlzIHByb3RlY3RlZCAocmVhZG9ubHkgTGFtYmRhIGNvbnRleHQgZmllbGQpXG4gICAgICovXG4gICAgc3RhdGljIGlzUHJvdGVjdGVkS2V5KGtleSkge1xuICAgICAgICByZXR1cm4gKGtleSA9PT0gdGhpcy5QUk9URUNURURfS0VZUy5SRVFVRVNUX0lEIHx8XG4gICAgICAgICAgICBrZXkgPT09IHRoaXMuUFJPVEVDVEVEX0tFWVMuWF9SQVlfVFJBQ0VfSUQpO1xuICAgIH1cbn1cbmxldCBpbnN0YW5jZTtcbmlmICghbm9HbG9iYWxBd3NMYW1iZGEgJiYgZ2xvYmFsVGhpcy5hd3NsYW1iZGE/Lkludm9rZVN0b3JlKSB7XG4gICAgaW5zdGFuY2UgPSBnbG9iYWxUaGlzLmF3c2xhbWJkYS5JbnZva2VTdG9yZTtcbn1cbmVsc2Uge1xuICAgIGluc3RhbmNlID0gSW52b2tlU3RvcmVJbXBsO1xuICAgIGlmICghbm9HbG9iYWxBd3NMYW1iZGEgJiYgZ2xvYmFsVGhpcy5hd3NsYW1iZGEpIHtcbiAgICAgICAgZ2xvYmFsVGhpcy5hd3NsYW1iZGEuSW52b2tlU3RvcmUgPSBpbnN0YW5jZTtcbiAgICB9XG59XG5leHBvcnRzLkludm9rZVN0b3JlID0gaW5zdGFuY2U7XG4iLCJpbXBvcnQgeyBzdHJpY3RQYXJzZUJ5dGUsIHN0cmljdFBhcnNlRG91YmxlLCBzdHJpY3RQYXJzZUZsb2F0MzIsIHN0cmljdFBhcnNlU2hvcnQgfSBmcm9tIFwiLi9wYXJzZS11dGlsc1wiO1xuY29uc3QgREFZUyA9IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXTtcbmNvbnN0IE1PTlRIUyA9IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXTtcbmV4cG9ydCBmdW5jdGlvbiBkYXRlVG9VdGNTdHJpbmcoZGF0ZSkge1xuICAgIGNvbnN0IHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgY29uc3QgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgY29uc3QgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICBjb25zdCBkYXlPZk1vbnRoSW50ID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgY29uc3QgaG91cnNJbnQgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgY29uc3QgbWludXRlc0ludCA9IGRhdGUuZ2V0VVRDTWludXRlcygpO1xuICAgIGNvbnN0IHNlY29uZHNJbnQgPSBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbiAgICBjb25zdCBkYXlPZk1vbnRoU3RyaW5nID0gZGF5T2ZNb250aEludCA8IDEwID8gYDAke2RheU9mTW9udGhJbnR9YCA6IGAke2RheU9mTW9udGhJbnR9YDtcbiAgICBjb25zdCBob3Vyc1N0cmluZyA9IGhvdXJzSW50IDwgMTAgPyBgMCR7aG91cnNJbnR9YCA6IGAke2hvdXJzSW50fWA7XG4gICAgY29uc3QgbWludXRlc1N0cmluZyA9IG1pbnV0ZXNJbnQgPCAxMCA/IGAwJHttaW51dGVzSW50fWAgOiBgJHttaW51dGVzSW50fWA7XG4gICAgY29uc3Qgc2Vjb25kc1N0cmluZyA9IHNlY29uZHNJbnQgPCAxMCA/IGAwJHtzZWNvbmRzSW50fWAgOiBgJHtzZWNvbmRzSW50fWA7XG4gICAgcmV0dXJuIGAke0RBWVNbZGF5T2ZXZWVrXX0sICR7ZGF5T2ZNb250aFN0cmluZ30gJHtNT05USFNbbW9udGhdfSAke3llYXJ9ICR7aG91cnNTdHJpbmd9OiR7bWludXRlc1N0cmluZ306JHtzZWNvbmRzU3RyaW5nfSBHTVRgO1xufVxuY29uc3QgUkZDMzMzOSA9IG5ldyBSZWdFeHAoL14oXFxkezR9KS0oXFxkezJ9KS0oXFxkezJ9KVt0VF0oXFxkezJ9KTooXFxkezJ9KTooXFxkezJ9KSg/OlxcLihcXGQrKSk/W3paXSQvKTtcbmV4cG9ydCBjb25zdCBwYXJzZVJmYzMzMzlEYXRlVGltZSA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlJGQy0zMzM5IGRhdGUtdGltZXMgbXVzdCBiZSBleHByZXNzZWQgYXMgc3RyaW5nc1wiKTtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2ggPSBSRkMzMzM5LmV4ZWModmFsdWUpO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgUkZDLTMzMzkgZGF0ZS10aW1lIHZhbHVlXCIpO1xuICAgIH1cbiAgICBjb25zdCBbXywgeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGZyYWN0aW9uYWxNaWxsaXNlY29uZHNdID0gbWF0Y2g7XG4gICAgY29uc3QgeWVhciA9IHN0cmljdFBhcnNlU2hvcnQoc3RyaXBMZWFkaW5nWmVyb2VzKHllYXJTdHIpKTtcbiAgICBjb25zdCBtb250aCA9IHBhcnNlRGF0ZVZhbHVlKG1vbnRoU3RyLCBcIm1vbnRoXCIsIDEsIDEyKTtcbiAgICBjb25zdCBkYXkgPSBwYXJzZURhdGVWYWx1ZShkYXlTdHIsIFwiZGF5XCIsIDEsIDMxKTtcbiAgICByZXR1cm4gYnVpbGREYXRlKHllYXIsIG1vbnRoLCBkYXksIHsgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGZyYWN0aW9uYWxNaWxsaXNlY29uZHMgfSk7XG59O1xuY29uc3QgUkZDMzMzOV9XSVRIX09GRlNFVCA9IG5ldyBSZWdFeHAoL14oXFxkezR9KS0oXFxkezJ9KS0oXFxkezJ9KVt0VF0oXFxkezJ9KTooXFxkezJ9KTooXFxkezJ9KSg/OlxcLihcXGQrKSk/KChbLStdXFxkezJ9XFw6XFxkezJ9KXxbelpdKSQvKTtcbmV4cG9ydCBjb25zdCBwYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJSRkMtMzMzOSBkYXRlLXRpbWVzIG11c3QgYmUgZXhwcmVzc2VkIGFzIHN0cmluZ3NcIik7XG4gICAgfVxuICAgIGNvbnN0IG1hdGNoID0gUkZDMzMzOV9XSVRIX09GRlNFVC5leGVjKHZhbHVlKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIFJGQy0zMzM5IGRhdGUtdGltZSB2YWx1ZVwiKTtcbiAgICB9XG4gICAgY29uc3QgW18sIHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBmcmFjdGlvbmFsTWlsbGlzZWNvbmRzLCBvZmZzZXRTdHJdID0gbWF0Y2g7XG4gICAgY29uc3QgeWVhciA9IHN0cmljdFBhcnNlU2hvcnQoc3RyaXBMZWFkaW5nWmVyb2VzKHllYXJTdHIpKTtcbiAgICBjb25zdCBtb250aCA9IHBhcnNlRGF0ZVZhbHVlKG1vbnRoU3RyLCBcIm1vbnRoXCIsIDEsIDEyKTtcbiAgICBjb25zdCBkYXkgPSBwYXJzZURhdGVWYWx1ZShkYXlTdHIsIFwiZGF5XCIsIDEsIDMxKTtcbiAgICBjb25zdCBkYXRlID0gYnVpbGREYXRlKHllYXIsIG1vbnRoLCBkYXksIHsgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGZyYWN0aW9uYWxNaWxsaXNlY29uZHMgfSk7XG4gICAgaWYgKG9mZnNldFN0ci50b1VwcGVyQ2FzZSgpICE9IFwiWlwiKSB7XG4gICAgICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSAtIHBhcnNlT2Zmc2V0VG9NaWxsaXNlY29uZHMob2Zmc2V0U3RyKSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xufTtcbmNvbnN0IElNRl9GSVhEQVRFID0gbmV3IFJlZ0V4cCgvXig/Ok1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksIChcXGR7Mn0pIChKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYykgKFxcZHs0fSkgKFxcZHsxLDJ9KTooXFxkezJ9KTooXFxkezJ9KSg/OlxcLihcXGQrKSk/IEdNVCQvKTtcbmNvbnN0IFJGQ184NTBfREFURSA9IG5ldyBSZWdFeHAoL14oPzpNb25kYXl8VHVlc2RheXxXZWRuZXNkYXl8VGh1cnNkYXl8RnJpZGF5fFNhdHVyZGF5fFN1bmRheSksIChcXGR7Mn0pLShKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYyktKFxcZHsyfSkgKFxcZHsxLDJ9KTooXFxkezJ9KTooXFxkezJ9KSg/OlxcLihcXGQrKSk/IEdNVCQvKTtcbmNvbnN0IEFTQ19USU1FID0gbmV3IFJlZ0V4cCgvXig/Ok1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1bikgKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKSAoIFsxLTldfFxcZHsyfSkgKFxcZHsxLDJ9KTooXFxkezJ9KTooXFxkezJ9KSg/OlxcLihcXGQrKSk/IChcXGR7NH0pJC8pO1xuZXhwb3J0IGNvbnN0IHBhcnNlUmZjNzIzMURhdGVUaW1lID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUkZDLTcyMzEgZGF0ZS10aW1lcyBtdXN0IGJlIGV4cHJlc3NlZCBhcyBzdHJpbmdzXCIpO1xuICAgIH1cbiAgICBsZXQgbWF0Y2ggPSBJTUZfRklYREFURS5leGVjKHZhbHVlKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgY29uc3QgW18sIGRheVN0ciwgbW9udGhTdHIsIHllYXJTdHIsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBmcmFjdGlvbmFsTWlsbGlzZWNvbmRzXSA9IG1hdGNoO1xuICAgICAgICByZXR1cm4gYnVpbGREYXRlKHN0cmljdFBhcnNlU2hvcnQoc3RyaXBMZWFkaW5nWmVyb2VzKHllYXJTdHIpKSwgcGFyc2VNb250aEJ5U2hvcnROYW1lKG1vbnRoU3RyKSwgcGFyc2VEYXRlVmFsdWUoZGF5U3RyLCBcImRheVwiLCAxLCAzMSksIHsgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGZyYWN0aW9uYWxNaWxsaXNlY29uZHMgfSk7XG4gICAgfVxuICAgIG1hdGNoID0gUkZDXzg1MF9EQVRFLmV4ZWModmFsdWUpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICBjb25zdCBbXywgZGF5U3RyLCBtb250aFN0ciwgeWVhclN0ciwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGZyYWN0aW9uYWxNaWxsaXNlY29uZHNdID0gbWF0Y2g7XG4gICAgICAgIHJldHVybiBhZGp1c3RSZmM4NTBZZWFyKGJ1aWxkRGF0ZShwYXJzZVR3b0RpZ2l0WWVhcih5ZWFyU3RyKSwgcGFyc2VNb250aEJ5U2hvcnROYW1lKG1vbnRoU3RyKSwgcGFyc2VEYXRlVmFsdWUoZGF5U3RyLCBcImRheVwiLCAxLCAzMSksIHtcbiAgICAgICAgICAgIGhvdXJzLFxuICAgICAgICAgICAgbWludXRlcyxcbiAgICAgICAgICAgIHNlY29uZHMsXG4gICAgICAgICAgICBmcmFjdGlvbmFsTWlsbGlzZWNvbmRzLFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIG1hdGNoID0gQVNDX1RJTUUuZXhlYyh2YWx1ZSk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGNvbnN0IFtfLCBtb250aFN0ciwgZGF5U3RyLCBob3VycywgbWludXRlcywgc2Vjb25kcywgZnJhY3Rpb25hbE1pbGxpc2Vjb25kcywgeWVhclN0cl0gPSBtYXRjaDtcbiAgICAgICAgcmV0dXJuIGJ1aWxkRGF0ZShzdHJpY3RQYXJzZVNob3J0KHN0cmlwTGVhZGluZ1plcm9lcyh5ZWFyU3RyKSksIHBhcnNlTW9udGhCeVNob3J0TmFtZShtb250aFN0ciksIHBhcnNlRGF0ZVZhbHVlKGRheVN0ci50cmltTGVmdCgpLCBcImRheVwiLCAxLCAzMSksIHsgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGZyYWN0aW9uYWxNaWxsaXNlY29uZHMgfSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIFJGQy03MjMxIGRhdGUtdGltZSB2YWx1ZVwiKTtcbn07XG5leHBvcnQgY29uc3QgcGFyc2VFcG9jaFRpbWVzdGFtcCA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGxldCB2YWx1ZUFzRG91YmxlO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdmFsdWVBc0RvdWJsZSA9IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFsdWVBc0RvdWJsZSA9IHN0cmljdFBhcnNlRG91YmxlKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlLnRhZyA9PT0gMSkge1xuICAgICAgICB2YWx1ZUFzRG91YmxlID0gdmFsdWUudmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXBvY2ggdGltZXN0YW1wcyBtdXN0IGJlIGV4cHJlc3NlZCBhcyBmbG9hdGluZyBwb2ludCBudW1iZXJzIG9yIHRoZWlyIHN0cmluZyByZXByZXNlbnRhdGlvblwiKTtcbiAgICB9XG4gICAgaWYgKE51bWJlci5pc05hTih2YWx1ZUFzRG91YmxlKSB8fCB2YWx1ZUFzRG91YmxlID09PSBJbmZpbml0eSB8fCB2YWx1ZUFzRG91YmxlID09PSAtSW5maW5pdHkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkVwb2NoIHRpbWVzdGFtcHMgbXVzdCBiZSB2YWxpZCwgbm9uLUluZmluaXRlLCBub24tTmFOIG51bWVyaWNzXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERhdGUoTWF0aC5yb3VuZCh2YWx1ZUFzRG91YmxlICogMTAwMCkpO1xufTtcbmNvbnN0IGJ1aWxkRGF0ZSA9ICh5ZWFyLCBtb250aCwgZGF5LCB0aW1lKSA9PiB7XG4gICAgY29uc3QgYWRqdXN0ZWRNb250aCA9IG1vbnRoIC0gMTtcbiAgICB2YWxpZGF0ZURheU9mTW9udGgoeWVhciwgYWRqdXN0ZWRNb250aCwgZGF5KTtcbiAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgYWRqdXN0ZWRNb250aCwgZGF5LCBwYXJzZURhdGVWYWx1ZSh0aW1lLmhvdXJzLCBcImhvdXJcIiwgMCwgMjMpLCBwYXJzZURhdGVWYWx1ZSh0aW1lLm1pbnV0ZXMsIFwibWludXRlXCIsIDAsIDU5KSwgcGFyc2VEYXRlVmFsdWUodGltZS5zZWNvbmRzLCBcInNlY29uZHNcIiwgMCwgNjApLCBwYXJzZU1pbGxpc2Vjb25kcyh0aW1lLmZyYWN0aW9uYWxNaWxsaXNlY29uZHMpKSk7XG59O1xuY29uc3QgcGFyc2VUd29EaWdpdFllYXIgPSAodmFsdWUpID0+IHtcbiAgICBjb25zdCB0aGlzWWVhciA9IG5ldyBEYXRlKCkuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICBjb25zdCB2YWx1ZUluVGhpc0NlbnR1cnkgPSBNYXRoLmZsb29yKHRoaXNZZWFyIC8gMTAwKSAqIDEwMCArIHN0cmljdFBhcnNlU2hvcnQoc3RyaXBMZWFkaW5nWmVyb2VzKHZhbHVlKSk7XG4gICAgaWYgKHZhbHVlSW5UaGlzQ2VudHVyeSA8IHRoaXNZZWFyKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUluVGhpc0NlbnR1cnkgKyAxMDA7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZUluVGhpc0NlbnR1cnk7XG59O1xuY29uc3QgRklGVFlfWUVBUlNfSU5fTUlMTElTID0gNTAgKiAzNjUgKiAyNCAqIDYwICogNjAgKiAxMDAwO1xuY29uc3QgYWRqdXN0UmZjODUwWWVhciA9IChpbnB1dCkgPT4ge1xuICAgIGlmIChpbnB1dC5nZXRUaW1lKCkgLSBuZXcgRGF0ZSgpLmdldFRpbWUoKSA+IEZJRlRZX1lFQVJTX0lOX01JTExJUykge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoaW5wdXQuZ2V0VVRDRnVsbFllYXIoKSAtIDEwMCwgaW5wdXQuZ2V0VVRDTW9udGgoKSwgaW5wdXQuZ2V0VVRDRGF0ZSgpLCBpbnB1dC5nZXRVVENIb3VycygpLCBpbnB1dC5nZXRVVENNaW51dGVzKCksIGlucHV0LmdldFVUQ1NlY29uZHMoKSwgaW5wdXQuZ2V0VVRDTWlsbGlzZWNvbmRzKCkpKTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0O1xufTtcbmNvbnN0IHBhcnNlTW9udGhCeVNob3J0TmFtZSA9ICh2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IG1vbnRoSWR4ID0gTU9OVEhTLmluZGV4T2YodmFsdWUpO1xuICAgIGlmIChtb250aElkeCA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBtb250aDogJHt2YWx1ZX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIG1vbnRoSWR4ICsgMTtcbn07XG5jb25zdCBEQVlTX0lOX01PTlRIID0gWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdO1xuY29uc3QgdmFsaWRhdGVEYXlPZk1vbnRoID0gKHllYXIsIG1vbnRoLCBkYXkpID0+IHtcbiAgICBsZXQgbWF4RGF5cyA9IERBWVNfSU5fTU9OVEhbbW9udGhdO1xuICAgIGlmIChtb250aCA9PT0gMSAmJiBpc0xlYXBZZWFyKHllYXIpKSB7XG4gICAgICAgIG1heERheXMgPSAyOTtcbiAgICB9XG4gICAgaWYgKGRheSA+IG1heERheXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBkYXkgZm9yICR7TU9OVEhTW21vbnRoXX0gaW4gJHt5ZWFyfTogJHtkYXl9YCk7XG4gICAgfVxufTtcbmNvbnN0IGlzTGVhcFllYXIgPSAoeWVhcikgPT4ge1xuICAgIHJldHVybiB5ZWFyICUgNCA9PT0gMCAmJiAoeWVhciAlIDEwMCAhPT0gMCB8fCB5ZWFyICUgNDAwID09PSAwKTtcbn07XG5jb25zdCBwYXJzZURhdGVWYWx1ZSA9ICh2YWx1ZSwgdHlwZSwgbG93ZXIsIHVwcGVyKSA9PiB7XG4gICAgY29uc3QgZGF0ZVZhbCA9IHN0cmljdFBhcnNlQnl0ZShzdHJpcExlYWRpbmdaZXJvZXModmFsdWUpKTtcbiAgICBpZiAoZGF0ZVZhbCA8IGxvd2VyIHx8IGRhdGVWYWwgPiB1cHBlcikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke3R5cGV9IG11c3QgYmUgYmV0d2VlbiAke2xvd2VyfSBhbmQgJHt1cHBlcn0sIGluY2x1c2l2ZWApO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZVZhbDtcbn07XG5jb25zdCBwYXJzZU1pbGxpc2Vjb25kcyA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaWN0UGFyc2VGbG9hdDMyKFwiMC5cIiArIHZhbHVlKSAqIDEwMDA7XG59O1xuY29uc3QgcGFyc2VPZmZzZXRUb01pbGxpc2Vjb25kcyA9ICh2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IGRpcmVjdGlvblN0ciA9IHZhbHVlWzBdO1xuICAgIGxldCBkaXJlY3Rpb24gPSAxO1xuICAgIGlmIChkaXJlY3Rpb25TdHIgPT0gXCIrXCIpIHtcbiAgICAgICAgZGlyZWN0aW9uID0gMTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGlyZWN0aW9uU3RyID09IFwiLVwiKSB7XG4gICAgICAgIGRpcmVjdGlvbiA9IC0xO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgT2Zmc2V0IGRpcmVjdGlvbiwgJHtkaXJlY3Rpb25TdHJ9LCBtdXN0IGJlIFwiK1wiIG9yIFwiLVwiYCk7XG4gICAgfVxuICAgIGNvbnN0IGhvdXIgPSBOdW1iZXIodmFsdWUuc3Vic3RyaW5nKDEsIDMpKTtcbiAgICBjb25zdCBtaW51dGUgPSBOdW1iZXIodmFsdWUuc3Vic3RyaW5nKDQsIDYpKTtcbiAgICByZXR1cm4gZGlyZWN0aW9uICogKGhvdXIgKiA2MCArIG1pbnV0ZSkgKiA2MCAqIDEwMDA7XG59O1xuY29uc3Qgc3RyaXBMZWFkaW5nWmVyb2VzID0gKHZhbHVlKSA9PiB7XG4gICAgbGV0IGlkeCA9IDA7XG4gICAgd2hpbGUgKGlkeCA8IHZhbHVlLmxlbmd0aCAtIDEgJiYgdmFsdWUuY2hhckF0KGlkeCkgPT09IFwiMFwiKSB7XG4gICAgICAgIGlkeCsrO1xuICAgIH1cbiAgICBpZiAoaWR4ID09PSAwKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlLnNsaWNlKGlkeCk7XG59O1xuIiwiaW1wb3J0IHsgY29sbGVjdEJvZHlTdHJpbmcgfSBmcm9tIFwiLi4vY29tbW9uXCI7XG5leHBvcnQgY29uc3QgcGFyc2VKc29uQm9keSA9IChzdHJlYW1Cb2R5LCBjb250ZXh0KSA9PiBjb2xsZWN0Qm9keVN0cmluZyhzdHJlYW1Cb2R5LCBjb250ZXh0KS50aGVuKChlbmNvZGVkKSA9PiB7XG4gICAgaWYgKGVuY29kZWQubGVuZ3RoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShlbmNvZGVkKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGU/Lm5hbWUgPT09IFwiU3ludGF4RXJyb3JcIikge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcIiRyZXNwb25zZUJvZHlUZXh0XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGVuY29kZWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7fTtcbn0pO1xuZXhwb3J0IGNvbnN0IHBhcnNlSnNvbkVycm9yQm9keSA9IGFzeW5jIChlcnJvckJvZHksIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhcnNlSnNvbkJvZHkoZXJyb3JCb2R5LCBjb250ZXh0KTtcbiAgICB2YWx1ZS5tZXNzYWdlID0gdmFsdWUubWVzc2FnZSA/PyB2YWx1ZS5NZXNzYWdlO1xuICAgIHJldHVybiB2YWx1ZTtcbn07XG5leHBvcnQgY29uc3QgbG9hZFJlc3RKc29uRXJyb3JDb2RlID0gKG91dHB1dCwgZGF0YSkgPT4ge1xuICAgIGNvbnN0IGZpbmRLZXkgPSAob2JqZWN0LCBrZXkpID0+IE9iamVjdC5rZXlzKG9iamVjdCkuZmluZCgoaykgPT4gay50b0xvd2VyQ2FzZSgpID09PSBrZXkudG9Mb3dlckNhc2UoKSk7XG4gICAgY29uc3Qgc2FuaXRpemVFcnJvckNvZGUgPSAocmF3VmFsdWUpID0+IHtcbiAgICAgICAgbGV0IGNsZWFuVmFsdWUgPSByYXdWYWx1ZTtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhblZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBjbGVhblZhbHVlID0gY2xlYW5WYWx1ZS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGVhblZhbHVlLmluZGV4T2YoXCIsXCIpID49IDApIHtcbiAgICAgICAgICAgIGNsZWFuVmFsdWUgPSBjbGVhblZhbHVlLnNwbGl0KFwiLFwiKVswXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xlYW5WYWx1ZS5pbmRleE9mKFwiOlwiKSA+PSAwKSB7XG4gICAgICAgICAgICBjbGVhblZhbHVlID0gY2xlYW5WYWx1ZS5zcGxpdChcIjpcIilbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsZWFuVmFsdWUuaW5kZXhPZihcIiNcIikgPj0gMCkge1xuICAgICAgICAgICAgY2xlYW5WYWx1ZSA9IGNsZWFuVmFsdWUuc3BsaXQoXCIjXCIpWzFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbGVhblZhbHVlO1xuICAgIH07XG4gICAgY29uc3QgaGVhZGVyS2V5ID0gZmluZEtleShvdXRwdXQuaGVhZGVycywgXCJ4LWFtem4tZXJyb3J0eXBlXCIpO1xuICAgIGlmIChoZWFkZXJLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gc2FuaXRpemVFcnJvckNvZGUob3V0cHV0LmhlYWRlcnNbaGVhZGVyS2V5XSk7XG4gICAgfVxuICAgIGlmIChkYXRhICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGNvbnN0IGNvZGVLZXkgPSBmaW5kS2V5KGRhdGEsIFwiY29kZVwiKTtcbiAgICAgICAgaWYgKGNvZGVLZXkgJiYgZGF0YVtjb2RlS2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gc2FuaXRpemVFcnJvckNvZGUoZGF0YVtjb2RlS2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGFbXCJfX3R5cGVcIl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNhbml0aXplRXJyb3JDb2RlKGRhdGFbXCJfX3R5cGVcIl0pO1xuICAgICAgICB9XG4gICAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImZzL3Byb21pc2VzXCIpOyIsImV4cG9ydCBmdW5jdGlvbiBzZXRGZWF0dXJlKGNvbnRleHQsIGZlYXR1cmUsIHZhbHVlKSB7XG4gICAgaWYgKCFjb250ZXh0Ll9fc21pdGh5X2NvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5fX3NtaXRoeV9jb250ZXh0ID0ge1xuICAgICAgICAgICAgZmVhdHVyZXM6IHt9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmICghY29udGV4dC5fX3NtaXRoeV9jb250ZXh0LmZlYXR1cmVzKSB7XG4gICAgICAgIGNvbnRleHQuX19zbWl0aHlfY29udGV4dC5mZWF0dXJlcyA9IHt9O1xuICAgIH1cbiAgICBjb250ZXh0Ll9fc21pdGh5X2NvbnRleHQuZmVhdHVyZXNbZmVhdHVyZV0gPSB2YWx1ZTtcbn1cbiIsImltcG9ydCB7IGJvb2xlYW5TZWxlY3RvciwgU2VsZWN0b3JUeXBlIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1jb25maWctcHJvdmlkZXJcIjtcbmV4cG9ydCBjb25zdCBFTlZfVVNFX0RVQUxTVEFDS19FTkRQT0lOVCA9IFwiQVdTX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlRcIjtcbmV4cG9ydCBjb25zdCBDT05GSUdfVVNFX0RVQUxTVEFDS19FTkRQT0lOVCA9IFwidXNlX2R1YWxzdGFja19lbmRwb2ludFwiO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfVVNFX0RVQUxTVEFDS19FTkRQT0lOVCA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IE5PREVfVVNFX0RVQUxTVEFDS19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUyA9IHtcbiAgICBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3I6IChlbnYpID0+IGJvb2xlYW5TZWxlY3RvcihlbnYsIEVOVl9VU0VfRFVBTFNUQUNLX0VORFBPSU5ULCBTZWxlY3RvclR5cGUuRU5WKSxcbiAgICBjb25maWdGaWxlU2VsZWN0b3I6IChwcm9maWxlKSA9PiBib29sZWFuU2VsZWN0b3IocHJvZmlsZSwgQ09ORklHX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlQsIFNlbGVjdG9yVHlwZS5DT05GSUcpLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInN0cmVhbVwiKTsiLCJpbXBvcnQgeyBmc3RhdFN5bmMsIGxzdGF0U3luYyB9IGZyb20gXCJmc1wiO1xuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZUJvZHlMZW5ndGggPSAoYm9keSkgPT4ge1xuICAgIGlmICghYm9keSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBib2R5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuYnl0ZUxlbmd0aChib2R5KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGJvZHkuYnl0ZUxlbmd0aCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gYm9keS5ieXRlTGVuZ3RoO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgYm9keS5zaXplID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBib2R5LnNpemU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBib2R5LnN0YXJ0ID09PSBcIm51bWJlclwiICYmIHR5cGVvZiBib2R5LmVuZCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gYm9keS5lbmQgKyAxIC0gYm9keS5zdGFydDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGJvZHkucGF0aCA9PT0gXCJzdHJpbmdcIiB8fCBCdWZmZXIuaXNCdWZmZXIoYm9keS5wYXRoKSkge1xuICAgICAgICByZXR1cm4gbHN0YXRTeW5jKGJvZHkucGF0aCkuc2l6ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGJvZHkuZmQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIGZzdGF0U3luYyhib2R5LmZkKS5zaXplO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYEJvZHkgTGVuZ3RoIGNvbXB1dGF0aW9uIGZhaWxlZCBmb3IgJHtib2R5fWApO1xufTtcbiIsImxldCB3YXJuaW5nRW1pdHRlZCA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IGVtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24gPSAodmVyc2lvbikgPT4ge1xuICAgIGlmICh2ZXJzaW9uICYmICF3YXJuaW5nRW1pdHRlZCAmJiBwYXJzZUludCh2ZXJzaW9uLnN1YnN0cmluZygxLCB2ZXJzaW9uLmluZGV4T2YoXCIuXCIpKSkgPCAxNikge1xuICAgICAgICB3YXJuaW5nRW1pdHRlZCA9IHRydWU7XG4gICAgfVxufTtcbiIsImltcG9ydCB7IGdldFNtaXRoeUNvbnRleHQgfSBmcm9tIFwiQHNtaXRoeS91dGlsLW1pZGRsZXdhcmVcIjtcbmltcG9ydCB7IHJlc29sdmVBdXRoT3B0aW9ucyB9IGZyb20gXCIuL3Jlc29sdmVBdXRoT3B0aW9uc1wiO1xuZnVuY3Rpb24gY29udmVydEh0dHBBdXRoU2NoZW1lc1RvTWFwKGh0dHBBdXRoU2NoZW1lcykge1xuICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGNvbnN0IHNjaGVtZSBvZiBodHRwQXV0aFNjaGVtZXMpIHtcbiAgICAgICAgbWFwLnNldChzY2hlbWUuc2NoZW1lSWQsIHNjaGVtZSk7XG4gICAgfVxuICAgIHJldHVybiBtYXA7XG59XG5leHBvcnQgY29uc3QgaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlID0gKGNvbmZpZywgbXdPcHRpb25zKSA9PiAobmV4dCwgY29udGV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0gY29uZmlnLmh0dHBBdXRoU2NoZW1lUHJvdmlkZXIoYXdhaXQgbXdPcHRpb25zLmh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyKGNvbmZpZywgY29udGV4dCwgYXJncy5pbnB1dCkpO1xuICAgIGNvbnN0IGF1dGhTY2hlbWVQcmVmZXJlbmNlID0gY29uZmlnLmF1dGhTY2hlbWVQcmVmZXJlbmNlID8gYXdhaXQgY29uZmlnLmF1dGhTY2hlbWVQcmVmZXJlbmNlKCkgOiBbXTtcbiAgICBjb25zdCByZXNvbHZlZE9wdGlvbnMgPSByZXNvbHZlQXV0aE9wdGlvbnMob3B0aW9ucywgYXV0aFNjaGVtZVByZWZlcmVuY2UpO1xuICAgIGNvbnN0IGF1dGhTY2hlbWVzID0gY29udmVydEh0dHBBdXRoU2NoZW1lc1RvTWFwKGNvbmZpZy5odHRwQXV0aFNjaGVtZXMpO1xuICAgIGNvbnN0IHNtaXRoeUNvbnRleHQgPSBnZXRTbWl0aHlDb250ZXh0KGNvbnRleHQpO1xuICAgIGNvbnN0IGZhaWx1cmVSZWFzb25zID0gW107XG4gICAgZm9yIChjb25zdCBvcHRpb24gb2YgcmVzb2x2ZWRPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHNjaGVtZSA9IGF1dGhTY2hlbWVzLmdldChvcHRpb24uc2NoZW1lSWQpO1xuICAgICAgICBpZiAoIXNjaGVtZSkge1xuICAgICAgICAgICAgZmFpbHVyZVJlYXNvbnMucHVzaChgSHR0cEF1dGhTY2hlbWUgXFxgJHtvcHRpb24uc2NoZW1lSWR9XFxgIHdhcyBub3QgZW5hYmxlZCBmb3IgdGhpcyBzZXJ2aWNlLmApO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaWRlbnRpdHlQcm92aWRlciA9IHNjaGVtZS5pZGVudGl0eVByb3ZpZGVyKGF3YWl0IG13T3B0aW9ucy5pZGVudGl0eVByb3ZpZGVyQ29uZmlnUHJvdmlkZXIoY29uZmlnKSk7XG4gICAgICAgIGlmICghaWRlbnRpdHlQcm92aWRlcikge1xuICAgICAgICAgICAgZmFpbHVyZVJlYXNvbnMucHVzaChgSHR0cEF1dGhTY2hlbWUgXFxgJHtvcHRpb24uc2NoZW1lSWR9XFxgIGRpZCBub3QgaGF2ZSBhbiBJZGVudGl0eVByb3ZpZGVyIGNvbmZpZ3VyZWQuYCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGlkZW50aXR5UHJvcGVydGllcyA9IHt9LCBzaWduaW5nUHJvcGVydGllcyA9IHt9IH0gPSBvcHRpb24ucHJvcGVydGllc0V4dHJhY3Rvcj8uKGNvbmZpZywgY29udGV4dCkgfHwge307XG4gICAgICAgIG9wdGlvbi5pZGVudGl0eVByb3BlcnRpZXMgPSBPYmplY3QuYXNzaWduKG9wdGlvbi5pZGVudGl0eVByb3BlcnRpZXMgfHwge30sIGlkZW50aXR5UHJvcGVydGllcyk7XG4gICAgICAgIG9wdGlvbi5zaWduaW5nUHJvcGVydGllcyA9IE9iamVjdC5hc3NpZ24ob3B0aW9uLnNpZ25pbmdQcm9wZXJ0aWVzIHx8IHt9LCBzaWduaW5nUHJvcGVydGllcyk7XG4gICAgICAgIHNtaXRoeUNvbnRleHQuc2VsZWN0ZWRIdHRwQXV0aFNjaGVtZSA9IHtcbiAgICAgICAgICAgIGh0dHBBdXRoT3B0aW9uOiBvcHRpb24sXG4gICAgICAgICAgICBpZGVudGl0eTogYXdhaXQgaWRlbnRpdHlQcm92aWRlcihvcHRpb24uaWRlbnRpdHlQcm9wZXJ0aWVzKSxcbiAgICAgICAgICAgIHNpZ25lcjogc2NoZW1lLnNpZ25lcixcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmICghc21pdGh5Q29udGV4dC5zZWxlY3RlZEh0dHBBdXRoU2NoZW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihmYWlsdXJlUmVhc29ucy5qb2luKFwiXFxuXCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQoYXJncyk7XG59O1xuIiwiaW1wb3J0IHsgaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlIH0gZnJvbSBcIi4vaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlXCI7XG5leHBvcnQgY29uc3QgaHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgICBzdGVwOiBcInNlcmlhbGl6ZVwiLFxuICAgIHRhZ3M6IFtcIkhUVFBfQVVUSF9TQ0hFTUVcIl0sXG4gICAgbmFtZTogXCJodHRwQXV0aFNjaGVtZU1pZGRsZXdhcmVcIixcbiAgICBvdmVycmlkZTogdHJ1ZSxcbiAgICByZWxhdGlvbjogXCJiZWZvcmVcIixcbiAgICB0b01pZGRsZXdhcmU6IFwiZW5kcG9pbnRWMk1pZGRsZXdhcmVcIixcbn07XG5leHBvcnQgY29uc3QgZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4gPSAoY29uZmlnLCB7IGh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyLCBpZGVudGl0eVByb3ZpZGVyQ29uZmlnUHJvdmlkZXIsIH0pID0+ICh7XG4gICAgYXBwbHlUb1N0YWNrOiAoY2xpZW50U3RhY2spID0+IHtcbiAgICAgICAgY2xpZW50U3RhY2suYWRkUmVsYXRpdmVUbyhodHRwQXV0aFNjaGVtZU1pZGRsZXdhcmUoY29uZmlnLCB7XG4gICAgICAgICAgICBodHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcixcbiAgICAgICAgICAgIGlkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlcixcbiAgICAgICAgfSksIGh0dHBBdXRoU2NoZW1lRW5kcG9pbnRSdWxlU2V0TWlkZGxld2FyZU9wdGlvbnMpO1xuICAgIH0sXG59KTtcbiIsImV4cG9ydCBjb25zdCByZXNvbHZlQXV0aE9wdGlvbnMgPSAoY2FuZGlkYXRlQXV0aE9wdGlvbnMsIGF1dGhTY2hlbWVQcmVmZXJlbmNlKSA9PiB7XG4gICAgaWYgKCFhdXRoU2NoZW1lUHJlZmVyZW5jZSB8fCBhdXRoU2NoZW1lUHJlZmVyZW5jZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZUF1dGhPcHRpb25zO1xuICAgIH1cbiAgICBjb25zdCBwcmVmZXJyZWRBdXRoT3B0aW9ucyA9IFtdO1xuICAgIGZvciAoY29uc3QgcHJlZmVycmVkU2NoZW1lTmFtZSBvZiBhdXRoU2NoZW1lUHJlZmVyZW5jZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGNhbmRpZGF0ZUF1dGhPcHRpb24gb2YgY2FuZGlkYXRlQXV0aE9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbmRpZGF0ZUF1dGhTY2hlbWVOYW1lID0gY2FuZGlkYXRlQXV0aE9wdGlvbi5zY2hlbWVJZC5zcGxpdChcIiNcIilbMV07XG4gICAgICAgICAgICBpZiAoY2FuZGlkYXRlQXV0aFNjaGVtZU5hbWUgPT09IHByZWZlcnJlZFNjaGVtZU5hbWUpIHtcbiAgICAgICAgICAgICAgICBwcmVmZXJyZWRBdXRoT3B0aW9ucy5wdXNoKGNhbmRpZGF0ZUF1dGhPcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgY2FuZGlkYXRlQXV0aE9wdGlvbiBvZiBjYW5kaWRhdGVBdXRoT3B0aW9ucykge1xuICAgICAgICBpZiAoIXByZWZlcnJlZEF1dGhPcHRpb25zLmZpbmQoKHsgc2NoZW1lSWQgfSkgPT4gc2NoZW1lSWQgPT09IGNhbmRpZGF0ZUF1dGhPcHRpb24uc2NoZW1lSWQpKSB7XG4gICAgICAgICAgICBwcmVmZXJyZWRBdXRoT3B0aW9ucy5wdXNoKGNhbmRpZGF0ZUF1dGhPcHRpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcmVmZXJyZWRBdXRoT3B0aW9ucztcbn07XG4iLCJpbXBvcnQgeyBqb2luIH0gZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IGdldEhvbWVEaXIgfSBmcm9tIFwiLi9nZXRIb21lRGlyXCI7XG5leHBvcnQgY29uc3QgRU5WX0NPTkZJR19QQVRIID0gXCJBV1NfQ09ORklHX0ZJTEVcIjtcbmV4cG9ydCBjb25zdCBnZXRDb25maWdGaWxlcGF0aCA9ICgpID0+IHByb2Nlc3MuZW52W0VOVl9DT05GSUdfUEFUSF0gfHwgam9pbihnZXRIb21lRGlyKCksIFwiLmF3c1wiLCBcImNvbmZpZ1wiKTtcbiIsImV4cG9ydCBjb25zdCBlc2NhcGVVcmkgPSAodXJpKSA9PiBlbmNvZGVVUklDb21wb25lbnQodXJpKS5yZXBsYWNlKC9bIScoKSpdL2csIGhleEVuY29kZSk7XG5jb25zdCBoZXhFbmNvZGUgPSAoYykgPT4gYCUke2MuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX1gO1xuIiwiaW1wb3J0IHsgcGFyc2VRdWVyeVN0cmluZyB9IGZyb20gXCJAc21pdGh5L3F1ZXJ5c3RyaW5nLXBhcnNlclwiO1xuZXhwb3J0IGNvbnN0IHBhcnNlVXJsID0gKHVybCkgPT4ge1xuICAgIGlmICh0eXBlb2YgdXJsID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBwYXJzZVVybChuZXcgVVJMKHVybCkpO1xuICAgIH1cbiAgICBjb25zdCB7IGhvc3RuYW1lLCBwYXRobmFtZSwgcG9ydCwgcHJvdG9jb2wsIHNlYXJjaCB9ID0gdXJsO1xuICAgIGxldCBxdWVyeTtcbiAgICBpZiAoc2VhcmNoKSB7XG4gICAgICAgIHF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhzZWFyY2gpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBob3N0bmFtZSxcbiAgICAgICAgcG9ydDogcG9ydCA/IHBhcnNlSW50KHBvcnQpIDogdW5kZWZpbmVkLFxuICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgcGF0aDogcGF0aG5hbWUsXG4gICAgICAgIHF1ZXJ5LFxuICAgIH07XG59O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmcocXVlcnlzdHJpbmcpIHtcbiAgICBjb25zdCBxdWVyeSA9IHt9O1xuICAgIHF1ZXJ5c3RyaW5nID0gcXVlcnlzdHJpbmcucmVwbGFjZSgvXlxcPy8sIFwiXCIpO1xuICAgIGlmIChxdWVyeXN0cmluZykge1xuICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcXVlcnlzdHJpbmcuc3BsaXQoXCImXCIpKSB7XG4gICAgICAgICAgICBsZXQgW2tleSwgdmFsdWUgPSBudWxsXSA9IHBhaXIuc3BsaXQoXCI9XCIpO1xuICAgICAgICAgICAga2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KGtleSk7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIShrZXkgaW4gcXVlcnkpKSB7XG4gICAgICAgICAgICAgICAgcXVlcnlba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShxdWVyeVtrZXldKSkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5W2tleV0ucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBxdWVyeVtrZXldID0gW3F1ZXJ5W2tleV0sIHZhbHVlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcXVlcnk7XG59XG4iLCJpbXBvcnQgeyBub3JtYWxpemVQcm92aWRlciB9IGZyb20gXCJAc21pdGh5L3V0aWwtbWlkZGxld2FyZVwiO1xuaW1wb3J0IHsgZ2V0RW5kcG9pbnRGcm9tQ29uZmlnIH0gZnJvbSBcIi4vYWRhcHRvcnMvZ2V0RW5kcG9pbnRGcm9tQ29uZmlnXCI7XG5pbXBvcnQgeyB0b0VuZHBvaW50VjEgfSBmcm9tIFwiLi9hZGFwdG9ycy90b0VuZHBvaW50VjFcIjtcbmV4cG9ydCBjb25zdCByZXNvbHZlRW5kcG9pbnRDb25maWcgPSAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB0bHMgPSBpbnB1dC50bHMgPz8gdHJ1ZTtcbiAgICBjb25zdCB7IGVuZHBvaW50LCB1c2VEdWFsc3RhY2tFbmRwb2ludCwgdXNlRmlwc0VuZHBvaW50IH0gPSBpbnB1dDtcbiAgICBjb25zdCBjdXN0b21FbmRwb2ludFByb3ZpZGVyID0gZW5kcG9pbnQgIT0gbnVsbCA/IGFzeW5jICgpID0+IHRvRW5kcG9pbnRWMShhd2FpdCBub3JtYWxpemVQcm92aWRlcihlbmRwb2ludCkoKSkgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgaXNDdXN0b21FbmRwb2ludCA9ICEhZW5kcG9pbnQ7XG4gICAgY29uc3QgcmVzb2x2ZWRDb25maWcgPSBPYmplY3QuYXNzaWduKGlucHV0LCB7XG4gICAgICAgIGVuZHBvaW50OiBjdXN0b21FbmRwb2ludFByb3ZpZGVyLFxuICAgICAgICB0bHMsXG4gICAgICAgIGlzQ3VzdG9tRW5kcG9pbnQsXG4gICAgICAgIHVzZUR1YWxzdGFja0VuZHBvaW50OiBub3JtYWxpemVQcm92aWRlcih1c2VEdWFsc3RhY2tFbmRwb2ludCA/PyBmYWxzZSksXG4gICAgICAgIHVzZUZpcHNFbmRwb2ludDogbm9ybWFsaXplUHJvdmlkZXIodXNlRmlwc0VuZHBvaW50ID8/IGZhbHNlKSxcbiAgICB9KTtcbiAgICBsZXQgY29uZmlndXJlZEVuZHBvaW50UHJvbWlzZSA9IHVuZGVmaW5lZDtcbiAgICByZXNvbHZlZENvbmZpZy5zZXJ2aWNlQ29uZmlndXJlZEVuZHBvaW50ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAoaW5wdXQuc2VydmljZUlkICYmICFjb25maWd1cmVkRW5kcG9pbnRQcm9taXNlKSB7XG4gICAgICAgICAgICBjb25maWd1cmVkRW5kcG9pbnRQcm9taXNlID0gZ2V0RW5kcG9pbnRGcm9tQ29uZmlnKGlucHV0LnNlcnZpY2VJZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbmZpZ3VyZWRFbmRwb2ludFByb21pc2U7XG4gICAgfTtcbiAgICByZXR1cm4gcmVzb2x2ZWRDb25maWc7XG59O1xuIiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJodHRwc1wiKTsiLCJleHBvcnQgY29uc3QgTk9ERUpTX1RJTUVPVVRfRVJST1JfQ09ERVMgPSBbXCJFQ09OTlJFU0VUXCIsIFwiRVBJUEVcIiwgXCJFVElNRURPVVRcIl07XG4iLCJjb25zdCBnZXRUcmFuc2Zvcm1lZEhlYWRlcnMgPSAoaGVhZGVycykgPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVkSGVhZGVycyA9IHt9O1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3Qua2V5cyhoZWFkZXJzKSkge1xuICAgICAgICBjb25zdCBoZWFkZXJWYWx1ZXMgPSBoZWFkZXJzW25hbWVdO1xuICAgICAgICB0cmFuc2Zvcm1lZEhlYWRlcnNbbmFtZV0gPSBBcnJheS5pc0FycmF5KGhlYWRlclZhbHVlcykgPyBoZWFkZXJWYWx1ZXMuam9pbihcIixcIikgOiBoZWFkZXJWYWx1ZXM7XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2Zvcm1lZEhlYWRlcnM7XG59O1xuZXhwb3J0IHsgZ2V0VHJhbnNmb3JtZWRIZWFkZXJzIH07XG4iLCJleHBvcnQgY29uc3QgdGltaW5nID0ge1xuICAgIHNldFRpbWVvdXQ6IChjYiwgbXMpID0+IHNldFRpbWVvdXQoY2IsIG1zKSxcbiAgICBjbGVhclRpbWVvdXQ6ICh0aW1lb3V0SWQpID0+IGNsZWFyVGltZW91dCh0aW1lb3V0SWQpLFxufTtcbiIsImltcG9ydCB7IEh0dHBSZXNwb25zZSB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IGJ1aWxkUXVlcnlTdHJpbmcgfSBmcm9tIFwiQHNtaXRoeS9xdWVyeXN0cmluZy1idWlsZGVyXCI7XG5pbXBvcnQgeyBBZ2VudCBhcyBoQWdlbnQsIHJlcXVlc3QgYXMgaFJlcXVlc3QgfSBmcm9tIFwiaHR0cFwiO1xuaW1wb3J0IHsgQWdlbnQgYXMgaHNBZ2VudCwgcmVxdWVzdCBhcyBoc1JlcXVlc3QgfSBmcm9tIFwiaHR0cHNcIjtcbmltcG9ydCB7IE5PREVKU19USU1FT1VUX0VSUk9SX0NPREVTIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBnZXRUcmFuc2Zvcm1lZEhlYWRlcnMgfSBmcm9tIFwiLi9nZXQtdHJhbnNmb3JtZWQtaGVhZGVyc1wiO1xuaW1wb3J0IHsgc2V0Q29ubmVjdGlvblRpbWVvdXQgfSBmcm9tIFwiLi9zZXQtY29ubmVjdGlvbi10aW1lb3V0XCI7XG5pbXBvcnQgeyBzZXRTb2NrZXRLZWVwQWxpdmUgfSBmcm9tIFwiLi9zZXQtc29ja2V0LWtlZXAtYWxpdmVcIjtcbmltcG9ydCB7IHNldFNvY2tldFRpbWVvdXQgfSBmcm9tIFwiLi9zZXQtc29ja2V0LXRpbWVvdXRcIjtcbmltcG9ydCB7IHRpbWluZyB9IGZyb20gXCIuL3RpbWluZ1wiO1xuaW1wb3J0IHsgd3JpdGVSZXF1ZXN0Qm9keSB9IGZyb20gXCIuL3dyaXRlLXJlcXVlc3QtYm9keVwiO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfUkVRVUVTVF9USU1FT1VUID0gMDtcbmV4cG9ydCBjbGFzcyBOb2RlSHR0cEhhbmRsZXIge1xuICAgIHN0YXRpYyBjcmVhdGUoaW5zdGFuY2VPck9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZU9yT3B0aW9ucz8uaGFuZGxlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZU9yT3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE5vZGVIdHRwSGFuZGxlcihpbnN0YW5jZU9yT3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBjaGVja1NvY2tldFVzYWdlKGFnZW50LCBzb2NrZXRXYXJuaW5nVGltZXN0YW1wLCBsb2dnZXIgPSBjb25zb2xlKSB7XG4gICAgICAgIGNvbnN0IHsgc29ja2V0cywgcmVxdWVzdHMsIG1heFNvY2tldHMgfSA9IGFnZW50O1xuICAgICAgICBpZiAodHlwZW9mIG1heFNvY2tldHMgIT09IFwibnVtYmVyXCIgfHwgbWF4U29ja2V0cyA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICAgIHJldHVybiBzb2NrZXRXYXJuaW5nVGltZXN0YW1wO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGludGVydmFsID0gMTUwMDA7XG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gaW50ZXJ2YWwgPCBzb2NrZXRXYXJuaW5nVGltZXN0YW1wKSB7XG4gICAgICAgICAgICByZXR1cm4gc29ja2V0V2FybmluZ1RpbWVzdGFtcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc29ja2V0cyAmJiByZXF1ZXN0cykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBvcmlnaW4gaW4gc29ja2V0cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNvY2tldHNJblVzZSA9IHNvY2tldHNbb3JpZ2luXT8ubGVuZ3RoID8/IDA7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdHNFbnF1ZXVlZCA9IHJlcXVlc3RzW29yaWdpbl0/Lmxlbmd0aCA/PyAwO1xuICAgICAgICAgICAgICAgIGlmIChzb2NrZXRzSW5Vc2UgPj0gbWF4U29ja2V0cyAmJiByZXF1ZXN0c0VucXVldWVkID49IDIgKiBtYXhTb2NrZXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlcj8ud2Fybj8uKGBAc21pdGh5L25vZGUtaHR0cC1oYW5kbGVyOldBUk4gLSBzb2NrZXQgdXNhZ2UgYXQgY2FwYWNpdHk9JHtzb2NrZXRzSW5Vc2V9IGFuZCAke3JlcXVlc3RzRW5xdWV1ZWR9IGFkZGl0aW9uYWwgcmVxdWVzdHMgYXJlIGVucXVldWVkLlxuU2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9zZGstZm9yLWphdmFzY3JpcHQvdjMvZGV2ZWxvcGVyLWd1aWRlL25vZGUtY29uZmlndXJpbmctbWF4c29ja2V0cy5odG1sXG5vciBpbmNyZWFzZSBzb2NrZXRBY3F1aXNpdGlvbldhcm5pbmdUaW1lb3V0PShtaWxsaXMpIGluIHRoZSBOb2RlSHR0cEhhbmRsZXIgY29uZmlnLmApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvY2tldFdhcm5pbmdUaW1lc3RhbXA7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5zb2NrZXRXYXJuaW5nVGltZXN0YW1wID0gMDtcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IHsgaGFuZGxlclByb3RvY29sOiBcImh0dHAvMS4xXCIgfTtcbiAgICAgICAgdGhpcy5jb25maWdQcm92aWRlciA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucygpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChfb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMucmVzb2x2ZURlZmF1bHRDb25maWcoX29wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy5yZXNvbHZlRGVmYXVsdENvbmZpZyhvcHRpb25zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXNvbHZlRGVmYXVsdENvbmZpZyhvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgcmVxdWVzdFRpbWVvdXQsIGNvbm5lY3Rpb25UaW1lb3V0LCBzb2NrZXRUaW1lb3V0LCBzb2NrZXRBY3F1aXNpdGlvbldhcm5pbmdUaW1lb3V0LCBodHRwQWdlbnQsIGh0dHBzQWdlbnQgfSA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIGNvbnN0IGtlZXBBbGl2ZSA9IHRydWU7XG4gICAgICAgIGNvbnN0IG1heFNvY2tldHMgPSA1MDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb25UaW1lb3V0LFxuICAgICAgICAgICAgcmVxdWVzdFRpbWVvdXQ6IHJlcXVlc3RUaW1lb3V0ID8/IHNvY2tldFRpbWVvdXQsXG4gICAgICAgICAgICBzb2NrZXRBY3F1aXNpdGlvbldhcm5pbmdUaW1lb3V0LFxuICAgICAgICAgICAgaHR0cEFnZW50OiAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChodHRwQWdlbnQgaW5zdGFuY2VvZiBoQWdlbnQgfHwgdHlwZW9mIGh0dHBBZ2VudD8uZGVzdHJveSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBodHRwQWdlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgaEFnZW50KHsga2VlcEFsaXZlLCBtYXhTb2NrZXRzLCAuLi5odHRwQWdlbnQgfSk7XG4gICAgICAgICAgICB9KSgpLFxuICAgICAgICAgICAgaHR0cHNBZ2VudDogKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaHR0cHNBZ2VudCBpbnN0YW5jZW9mIGhzQWdlbnQgfHwgdHlwZW9mIGh0dHBzQWdlbnQ/LmRlc3Ryb3kgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaHR0cHNBZ2VudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBoc0FnZW50KHsga2VlcEFsaXZlLCBtYXhTb2NrZXRzLCAuLi5odHRwc0FnZW50IH0pO1xuICAgICAgICAgICAgfSkoKSxcbiAgICAgICAgICAgIGxvZ2dlcjogY29uc29sZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5jb25maWc/Lmh0dHBBZ2VudD8uZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmNvbmZpZz8uaHR0cHNBZ2VudD8uZGVzdHJveSgpO1xuICAgIH1cbiAgICBhc3luYyBoYW5kbGUocmVxdWVzdCwgeyBhYm9ydFNpZ25hbCwgcmVxdWVzdFRpbWVvdXQgfSA9IHt9KSB7XG4gICAgICAgIGlmICghdGhpcy5jb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnID0gYXdhaXQgdGhpcy5jb25maWdQcm92aWRlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKF9yZXNvbHZlLCBfcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBsZXQgd3JpdGVSZXF1ZXN0Qm9keVByb21pc2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCB0aW1lb3V0cyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZSA9IGFzeW5jIChhcmcpID0+IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB3cml0ZVJlcXVlc3RCb2R5UHJvbWlzZTtcbiAgICAgICAgICAgICAgICB0aW1lb3V0cy5mb3JFYWNoKHRpbWluZy5jbGVhclRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIF9yZXNvbHZlKGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVqZWN0ID0gYXN5bmMgKGFyZykgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IHdyaXRlUmVxdWVzdEJvZHlQcm9taXNlO1xuICAgICAgICAgICAgICAgIHRpbWVvdXRzLmZvckVhY2godGltaW5nLmNsZWFyVGltZW91dCk7XG4gICAgICAgICAgICAgICAgX3JlamVjdChhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICghdGhpcy5jb25maWcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb2RlIEhUVFAgcmVxdWVzdCBoYW5kbGVyIGNvbmZpZyBpcyBub3QgcmVzb2x2ZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWJvcnRTaWduYWw/LmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhYm9ydEVycm9yID0gbmV3IEVycm9yKFwiUmVxdWVzdCBhYm9ydGVkXCIpO1xuICAgICAgICAgICAgICAgIGFib3J0RXJyb3IubmFtZSA9IFwiQWJvcnRFcnJvclwiO1xuICAgICAgICAgICAgICAgIHJlamVjdChhYm9ydEVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpc1NTTCA9IHJlcXVlc3QucHJvdG9jb2wgPT09IFwiaHR0cHM6XCI7XG4gICAgICAgICAgICBjb25zdCBhZ2VudCA9IGlzU1NMID8gdGhpcy5jb25maWcuaHR0cHNBZ2VudCA6IHRoaXMuY29uZmlnLmh0dHBBZ2VudDtcbiAgICAgICAgICAgIHRpbWVvdXRzLnB1c2godGltaW5nLnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0V2FybmluZ1RpbWVzdGFtcCA9IE5vZGVIdHRwSGFuZGxlci5jaGVja1NvY2tldFVzYWdlKGFnZW50LCB0aGlzLnNvY2tldFdhcm5pbmdUaW1lc3RhbXAsIHRoaXMuY29uZmlnLmxvZ2dlcik7XG4gICAgICAgICAgICB9LCB0aGlzLmNvbmZpZy5zb2NrZXRBY3F1aXNpdGlvbldhcm5pbmdUaW1lb3V0ID8/XG4gICAgICAgICAgICAgICAgKHRoaXMuY29uZmlnLnJlcXVlc3RUaW1lb3V0ID8/IDIwMDApICsgKHRoaXMuY29uZmlnLmNvbm5lY3Rpb25UaW1lb3V0ID8/IDEwMDApKSk7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVN0cmluZyA9IGJ1aWxkUXVlcnlTdHJpbmcocmVxdWVzdC5xdWVyeSB8fCB7fSk7XG4gICAgICAgICAgICBsZXQgYXV0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnVzZXJuYW1lICE9IG51bGwgfHwgcmVxdWVzdC5wYXNzd29yZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlcm5hbWUgPSByZXF1ZXN0LnVzZXJuYW1lID8/IFwiXCI7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFzc3dvcmQgPSByZXF1ZXN0LnBhc3N3b3JkID8/IFwiXCI7XG4gICAgICAgICAgICAgICAgYXV0aCA9IGAke3VzZXJuYW1lfToke3Bhc3N3b3JkfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcGF0aCA9IHJlcXVlc3QucGF0aDtcbiAgICAgICAgICAgIGlmIChxdWVyeVN0cmluZykge1xuICAgICAgICAgICAgICAgIHBhdGggKz0gYD8ke3F1ZXJ5U3RyaW5nfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVxdWVzdC5mcmFnbWVudCkge1xuICAgICAgICAgICAgICAgIHBhdGggKz0gYCMke3JlcXVlc3QuZnJhZ21lbnR9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBob3N0bmFtZSA9IHJlcXVlc3QuaG9zdG5hbWUgPz8gXCJcIjtcbiAgICAgICAgICAgIGlmIChob3N0bmFtZVswXSA9PT0gXCJbXCIgJiYgaG9zdG5hbWUuZW5kc1dpdGgoXCJdXCIpKSB7XG4gICAgICAgICAgICAgICAgaG9zdG5hbWUgPSByZXF1ZXN0Lmhvc3RuYW1lLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhvc3RuYW1lID0gcmVxdWVzdC5ob3N0bmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5vZGVIdHRwc09wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogcmVxdWVzdC5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIGhvc3Q6IGhvc3RuYW1lLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgICAgICBwb3J0OiByZXF1ZXN0LnBvcnQsXG4gICAgICAgICAgICAgICAgYWdlbnQsXG4gICAgICAgICAgICAgICAgYXV0aCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0RnVuYyA9IGlzU1NMID8gaHNSZXF1ZXN0IDogaFJlcXVlc3Q7XG4gICAgICAgICAgICBjb25zdCByZXEgPSByZXF1ZXN0RnVuYyhub2RlSHR0cHNPcHRpb25zLCAocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaHR0cFJlc3BvbnNlID0gbmV3IEh0dHBSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGU6IHJlcy5zdGF0dXNDb2RlIHx8IC0xLFxuICAgICAgICAgICAgICAgICAgICByZWFzb246IHJlcy5zdGF0dXNNZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBnZXRUcmFuc2Zvcm1lZEhlYWRlcnMocmVzLmhlYWRlcnMpLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiByZXMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7IHJlc3BvbnNlOiBodHRwUmVzcG9uc2UgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlcS5vbihcImVycm9yXCIsIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoTk9ERUpTX1RJTUVPVVRfRVJST1JfQ09ERVMuaW5jbHVkZXMoZXJyLmNvZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChPYmplY3QuYXNzaWduKGVyciwgeyBuYW1lOiBcIlRpbWVvdXRFcnJvclwiIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGFib3J0U2lnbmFsKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb25BYm9ydCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVxLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWJvcnRFcnJvciA9IG5ldyBFcnJvcihcIlJlcXVlc3QgYWJvcnRlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRFcnJvci5uYW1lID0gXCJBYm9ydEVycm9yXCI7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChhYm9ydEVycm9yKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYWJvcnRTaWduYWwuYWRkRXZlbnRMaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNpZ25hbCA9IGFib3J0U2lnbmFsO1xuICAgICAgICAgICAgICAgICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uY2UoXCJjbG9zZVwiLCAoKSA9PiBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsLm9uYWJvcnQgPSBvbkFib3J0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGVmZmVjdGl2ZVJlcXVlc3RUaW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQgPz8gdGhpcy5jb25maWcucmVxdWVzdFRpbWVvdXQ7XG4gICAgICAgICAgICB0aW1lb3V0cy5wdXNoKHNldENvbm5lY3Rpb25UaW1lb3V0KHJlcSwgcmVqZWN0LCB0aGlzLmNvbmZpZy5jb25uZWN0aW9uVGltZW91dCkpO1xuICAgICAgICAgICAgdGltZW91dHMucHVzaChzZXRTb2NrZXRUaW1lb3V0KHJlcSwgcmVqZWN0LCBlZmZlY3RpdmVSZXF1ZXN0VGltZW91dCkpO1xuICAgICAgICAgICAgY29uc3QgaHR0cEFnZW50ID0gbm9kZUh0dHBzT3B0aW9ucy5hZ2VudDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaHR0cEFnZW50ID09PSBcIm9iamVjdFwiICYmIFwia2VlcEFsaXZlXCIgaW4gaHR0cEFnZW50KSB7XG4gICAgICAgICAgICAgICAgdGltZW91dHMucHVzaChzZXRTb2NrZXRLZWVwQWxpdmUocmVxLCB7XG4gICAgICAgICAgICAgICAgICAgIGtlZXBBbGl2ZTogaHR0cEFnZW50LmtlZXBBbGl2ZSxcbiAgICAgICAgICAgICAgICAgICAga2VlcEFsaXZlTXNlY3M6IGh0dHBBZ2VudC5rZWVwQWxpdmVNc2VjcyxcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3cml0ZVJlcXVlc3RCb2R5UHJvbWlzZSA9IHdyaXRlUmVxdWVzdEJvZHkocmVxLCByZXF1ZXN0LCBlZmZlY3RpdmVSZXF1ZXN0VGltZW91dCkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0cy5mb3JFYWNoKHRpbWluZy5jbGVhclRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBfcmVqZWN0KGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1cGRhdGVIdHRwQ2xpZW50Q29uZmlnKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY29uZmlnUHJvdmlkZXIgPSB0aGlzLmNvbmZpZ1Byb3ZpZGVyLnRoZW4oKGNvbmZpZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgICAgICAgICAgW2tleV06IHZhbHVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGh0dHBIYW5kbGVyQ29uZmlncygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnID8/IHt9O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGVzY2FwZVVyaSB9IGZyb20gXCJAc21pdGh5L3V0aWwtdXJpLWVzY2FwZVwiO1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkUXVlcnlTdHJpbmcocXVlcnkpIHtcbiAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyhxdWVyeSkuc29ydCgpKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcXVlcnlba2V5XTtcbiAgICAgICAga2V5ID0gZXNjYXBlVXJpKGtleSk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlMZW4gPSB2YWx1ZS5sZW5ndGg7IGkgPCBpTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKGAke2tleX09JHtlc2NhcGVVcmkodmFsdWVbaV0pfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IHFzRW50cnkgPSBrZXk7XG4gICAgICAgICAgICBpZiAodmFsdWUgfHwgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcXNFbnRyeSArPSBgPSR7ZXNjYXBlVXJpKHZhbHVlKX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFydHMucHVzaChxc0VudHJ5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFydHMuam9pbihcIiZcIik7XG59XG4iLCJpbXBvcnQgeyB0aW1pbmcgfSBmcm9tIFwiLi90aW1pbmdcIjtcbmNvbnN0IERFRkVSX0VWRU5UX0xJU1RFTkVSX1RJTUUgPSAxMDAwO1xuZXhwb3J0IGNvbnN0IHNldENvbm5lY3Rpb25UaW1lb3V0ID0gKHJlcXVlc3QsIHJlamVjdCwgdGltZW91dEluTXMgPSAwKSA9PiB7XG4gICAgaWYgKCF0aW1lb3V0SW5Ncykge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGNvbnN0IHJlZ2lzdGVyVGltZW91dCA9IChvZmZzZXQpID0+IHtcbiAgICAgICAgY29uc3QgdGltZW91dElkID0gdGltaW5nLnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdC5kZXN0cm95KCk7XG4gICAgICAgICAgICByZWplY3QoT2JqZWN0LmFzc2lnbihuZXcgRXJyb3IoYFNvY2tldCB0aW1lZCBvdXQgd2l0aG91dCBlc3RhYmxpc2hpbmcgYSBjb25uZWN0aW9uIHdpdGhpbiAke3RpbWVvdXRJbk1zfSBtc2ApLCB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUaW1lb3V0RXJyb3JcIixcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSwgdGltZW91dEluTXMgLSBvZmZzZXQpO1xuICAgICAgICBjb25zdCBkb1dpdGhTb2NrZXQgPSAoc29ja2V0KSA9PiB7XG4gICAgICAgICAgICBpZiAoc29ja2V0Py5jb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgc29ja2V0Lm9uKFwiY29ubmVjdFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWluZy5jbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRpbWluZy5jbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHJlcXVlc3Quc29ja2V0KSB7XG4gICAgICAgICAgICBkb1dpdGhTb2NrZXQocmVxdWVzdC5zb2NrZXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVxdWVzdC5vbihcInNvY2tldFwiLCBkb1dpdGhTb2NrZXQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAodGltZW91dEluTXMgPCAyMDAwKSB7XG4gICAgICAgIHJlZ2lzdGVyVGltZW91dCgwKTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiB0aW1pbmcuc2V0VGltZW91dChyZWdpc3RlclRpbWVvdXQuYmluZChudWxsLCBERUZFUl9FVkVOVF9MSVNURU5FUl9USU1FKSwgREVGRVJfRVZFTlRfTElTVEVORVJfVElNRSk7XG59O1xuIiwiaW1wb3J0IHsgREVGQVVMVF9SRVFVRVNUX1RJTUVPVVQgfSBmcm9tIFwiLi9ub2RlLWh0dHAtaGFuZGxlclwiO1xuaW1wb3J0IHsgdGltaW5nIH0gZnJvbSBcIi4vdGltaW5nXCI7XG5jb25zdCBERUZFUl9FVkVOVF9MSVNURU5FUl9USU1FID0gMzAwMDtcbmV4cG9ydCBjb25zdCBzZXRTb2NrZXRUaW1lb3V0ID0gKHJlcXVlc3QsIHJlamVjdCwgdGltZW91dEluTXMgPSBERUZBVUxUX1JFUVVFU1RfVElNRU9VVCkgPT4ge1xuICAgIGNvbnN0IHJlZ2lzdGVyVGltZW91dCA9IChvZmZzZXQpID0+IHtcbiAgICAgICAgY29uc3QgdGltZW91dCA9IHRpbWVvdXRJbk1zIC0gb2Zmc2V0O1xuICAgICAgICBjb25zdCBvblRpbWVvdXQgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXF1ZXN0LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHJlamVjdChPYmplY3QuYXNzaWduKG5ldyBFcnJvcihgQ29ubmVjdGlvbiB0aW1lZCBvdXQgYWZ0ZXIgJHt0aW1lb3V0SW5Nc30gbXNgKSwgeyBuYW1lOiBcIlRpbWVvdXRFcnJvclwiIH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHJlcXVlc3Quc29ja2V0KSB7XG4gICAgICAgICAgICByZXF1ZXN0LnNvY2tldC5zZXRUaW1lb3V0KHRpbWVvdXQsIG9uVGltZW91dCk7XG4gICAgICAgICAgICByZXF1ZXN0Lm9uKFwiY2xvc2VcIiwgKCkgPT4gcmVxdWVzdC5zb2NrZXQ/LnJlbW92ZUxpc3RlbmVyKFwidGltZW91dFwiLCBvblRpbWVvdXQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcXVlc3Quc2V0VGltZW91dCh0aW1lb3V0LCBvblRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAoMCA8IHRpbWVvdXRJbk1zICYmIHRpbWVvdXRJbk1zIDwgNjAwMCkge1xuICAgICAgICByZWdpc3RlclRpbWVvdXQoMCk7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gdGltaW5nLnNldFRpbWVvdXQocmVnaXN0ZXJUaW1lb3V0LmJpbmQobnVsbCwgdGltZW91dEluTXMgPT09IDAgPyAwIDogREVGRVJfRVZFTlRfTElTVEVORVJfVElNRSksIERFRkVSX0VWRU5UX0xJU1RFTkVSX1RJTUUpO1xufTtcbiIsImltcG9ydCB7IHRpbWluZyB9IGZyb20gXCIuL3RpbWluZ1wiO1xuY29uc3QgREVGRVJfRVZFTlRfTElTVEVORVJfVElNRSA9IDMwMDA7XG5leHBvcnQgY29uc3Qgc2V0U29ja2V0S2VlcEFsaXZlID0gKHJlcXVlc3QsIHsga2VlcEFsaXZlLCBrZWVwQWxpdmVNc2VjcyB9LCBkZWZlclRpbWVNcyA9IERFRkVSX0VWRU5UX0xJU1RFTkVSX1RJTUUpID0+IHtcbiAgICBpZiAoa2VlcEFsaXZlICE9PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgY29uc3QgcmVnaXN0ZXJMaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgaWYgKHJlcXVlc3Quc29ja2V0KSB7XG4gICAgICAgICAgICByZXF1ZXN0LnNvY2tldC5zZXRLZWVwQWxpdmUoa2VlcEFsaXZlLCBrZWVwQWxpdmVNc2VjcyB8fCAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcXVlc3Qub24oXCJzb2NrZXRcIiwgKHNvY2tldCkgPT4ge1xuICAgICAgICAgICAgICAgIHNvY2tldC5zZXRLZWVwQWxpdmUoa2VlcEFsaXZlLCBrZWVwQWxpdmVNc2VjcyB8fCAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAoZGVmZXJUaW1lTXMgPT09IDApIHtcbiAgICAgICAgcmVnaXN0ZXJMaXN0ZW5lcigpO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRpbWluZy5zZXRUaW1lb3V0KHJlZ2lzdGVyTGlzdGVuZXIsIGRlZmVyVGltZU1zKTtcbn07XG4iLCJpbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gXCJzdHJlYW1cIjtcbmltcG9ydCB7IHRpbWluZyB9IGZyb20gXCIuL3RpbWluZ1wiO1xuY29uc3QgTUlOX1dBSVRfVElNRSA9IDYwMDA7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd3JpdGVSZXF1ZXN0Qm9keShodHRwUmVxdWVzdCwgcmVxdWVzdCwgbWF4Q29udGludWVUaW1lb3V0TXMgPSBNSU5fV0FJVF9USU1FKSB7XG4gICAgY29uc3QgaGVhZGVycyA9IHJlcXVlc3QuaGVhZGVycyA/PyB7fTtcbiAgICBjb25zdCBleHBlY3QgPSBoZWFkZXJzW1wiRXhwZWN0XCJdIHx8IGhlYWRlcnNbXCJleHBlY3RcIl07XG4gICAgbGV0IHRpbWVvdXRJZCA9IC0xO1xuICAgIGxldCBzZW5kQm9keSA9IHRydWU7XG4gICAgaWYgKGV4cGVjdCA9PT0gXCIxMDAtY29udGludWVcIikge1xuICAgICAgICBzZW5kQm9keSA9IGF3YWl0IFByb21pc2UucmFjZShbXG4gICAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRpbWVvdXRJZCA9IE51bWJlcih0aW1pbmcuc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKHRydWUpLCBNYXRoLm1heChNSU5fV0FJVF9USU1FLCBtYXhDb250aW51ZVRpbWVvdXRNcykpKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICBodHRwUmVxdWVzdC5vbihcImNvbnRpbnVlXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGltaW5nLmNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGh0dHBSZXF1ZXN0Lm9uKFwicmVzcG9uc2VcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aW1pbmcuY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGh0dHBSZXF1ZXN0Lm9uKFwiZXJyb3JcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aW1pbmcuY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSksXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBpZiAoc2VuZEJvZHkpIHtcbiAgICAgICAgd3JpdGVCb2R5KGh0dHBSZXF1ZXN0LCByZXF1ZXN0LmJvZHkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHdyaXRlQm9keShodHRwUmVxdWVzdCwgYm9keSkge1xuICAgIGlmIChib2R5IGluc3RhbmNlb2YgUmVhZGFibGUpIHtcbiAgICAgICAgYm9keS5waXBlKGh0dHBSZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoYm9keSkge1xuICAgICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGJvZHkpIHx8IHR5cGVvZiBib2R5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBodHRwUmVxdWVzdC5lbmQoYm9keSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdWludDggPSBib2R5O1xuICAgICAgICBpZiAodHlwZW9mIHVpbnQ4ID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICB1aW50OC5idWZmZXIgJiZcbiAgICAgICAgICAgIHR5cGVvZiB1aW50OC5ieXRlT2Zmc2V0ID09PSBcIm51bWJlclwiICYmXG4gICAgICAgICAgICB0eXBlb2YgdWludDguYnl0ZUxlbmd0aCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgaHR0cFJlcXVlc3QuZW5kKEJ1ZmZlci5mcm9tKHVpbnQ4LmJ1ZmZlciwgdWludDguYnl0ZU9mZnNldCwgdWludDguYnl0ZUxlbmd0aCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGh0dHBSZXF1ZXN0LmVuZChCdWZmZXIuZnJvbShib2R5KSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaHR0cFJlcXVlc3QuZW5kKCk7XG59XG4iLCJleHBvcnQgY29uc3QgZ2V0SHR0cEhhbmRsZXJFeHRlbnNpb25Db25maWd1cmF0aW9uID0gKHJ1bnRpbWVDb25maWcpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXRIdHRwSGFuZGxlcihoYW5kbGVyKSB7XG4gICAgICAgICAgICBydW50aW1lQ29uZmlnLmh0dHBIYW5kbGVyID0gaGFuZGxlcjtcbiAgICAgICAgfSxcbiAgICAgICAgaHR0cEhhbmRsZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gcnVudGltZUNvbmZpZy5odHRwSGFuZGxlcjtcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlSHR0cENsaWVudENvbmZpZyhrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBydW50aW1lQ29uZmlnLmh0dHBIYW5kbGVyPy51cGRhdGVIdHRwQ2xpZW50Q29uZmlnKGtleSwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBodHRwSGFuZGxlckNvbmZpZ3MoKSB7XG4gICAgICAgICAgICByZXR1cm4gcnVudGltZUNvbmZpZy5odHRwSGFuZGxlci5odHRwSGFuZGxlckNvbmZpZ3MoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlSHR0cEhhbmRsZXJSdW50aW1lQ29uZmlnID0gKGh0dHBIYW5kbGVyRXh0ZW5zaW9uQ29uZmlndXJhdGlvbikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGh0dHBIYW5kbGVyOiBodHRwSGFuZGxlckV4dGVuc2lvbkNvbmZpZ3VyYXRpb24uaHR0cEhhbmRsZXIoKSxcbiAgICB9O1xufTtcbiIsImltcG9ydCB7IGRlY29yYXRlU2VydmljZUV4Y2VwdGlvbiB9IGZyb20gXCIuL2V4Y2VwdGlvbnNcIjtcbmV4cG9ydCBjb25zdCB0aHJvd0RlZmF1bHRFcnJvciA9ICh7IG91dHB1dCwgcGFyc2VkQm9keSwgZXhjZXB0aW9uQ3RvciwgZXJyb3JDb2RlIH0pID0+IHtcbiAgICBjb25zdCAkbWV0YWRhdGEgPSBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCk7XG4gICAgY29uc3Qgc3RhdHVzQ29kZSA9ICRtZXRhZGF0YS5odHRwU3RhdHVzQ29kZSA/ICRtZXRhZGF0YS5odHRwU3RhdHVzQ29kZSArIFwiXCIgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBuZXcgZXhjZXB0aW9uQ3Rvcih7XG4gICAgICAgIG5hbWU6IHBhcnNlZEJvZHk/LmNvZGUgfHwgcGFyc2VkQm9keT8uQ29kZSB8fCBlcnJvckNvZGUgfHwgc3RhdHVzQ29kZSB8fCBcIlVua25vd25FcnJvclwiLFxuICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICRtZXRhZGF0YSxcbiAgICB9KTtcbiAgICB0aHJvdyBkZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24ocmVzcG9uc2UsIHBhcnNlZEJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCB3aXRoQmFzZUV4Y2VwdGlvbiA9IChFeGNlcHRpb25DdG9yKSA9PiB7XG4gICAgcmV0dXJuICh7IG91dHB1dCwgcGFyc2VkQm9keSwgZXJyb3JDb2RlIH0pID0+IHtcbiAgICAgICAgdGhyb3dEZWZhdWx0RXJyb3IoeyBvdXRwdXQsIHBhcnNlZEJvZHksIGV4Y2VwdGlvbkN0b3I6IEV4Y2VwdGlvbkN0b3IsIGVycm9yQ29kZSB9KTtcbiAgICB9O1xufTtcbmNvbnN0IGRlc2VyaWFsaXplTWV0YWRhdGEgPSAob3V0cHV0KSA9PiAoe1xuICAgIGh0dHBTdGF0dXNDb2RlOiBvdXRwdXQuc3RhdHVzQ29kZSxcbiAgICByZXF1ZXN0SWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXpuLXJlcXVlc3RpZFwiXSA/PyBvdXRwdXQuaGVhZGVyc1tcIngtYW16bi1yZXF1ZXN0LWlkXCJdID8/IG91dHB1dC5oZWFkZXJzW1wieC1hbXotcmVxdWVzdC1pZFwiXSxcbiAgICBleHRlbmRlZFJlcXVlc3RJZDogb3V0cHV0LmhlYWRlcnNbXCJ4LWFtei1pZC0yXCJdLFxuICAgIGNmSWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXotY2YtaWRcIl0sXG59KTtcbiIsImltcG9ydCB7IFByb3ZpZGVyRXJyb3IgfSBmcm9tIFwiLi9Qcm92aWRlckVycm9yXCI7XG5leHBvcnQgY2xhc3MgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yIGV4dGVuZHMgUHJvdmlkZXJFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgb3B0aW9ucyA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiQ3JlZGVudGlhbHNQcm92aWRlckVycm9yXCI7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IucHJvdG90eXBlKTtcbiAgICB9XG59XG4iLCJleHBvcnQgdmFyIFNlbGVjdG9yVHlwZTtcbihmdW5jdGlvbiAoU2VsZWN0b3JUeXBlKSB7XG4gICAgU2VsZWN0b3JUeXBlW1wiRU5WXCJdID0gXCJlbnZcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJDT05GSUdcIl0gPSBcInNoYXJlZCBjb25maWcgZW50cnlcIjtcbn0pKFNlbGVjdG9yVHlwZSB8fCAoU2VsZWN0b3JUeXBlID0ge30pKTtcbiIsImV4cG9ydCBjb25zdCBpc0FycmF5QnVmZmVyID0gKGFyZykgPT4gKHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiICYmIGFyZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fFxuICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmcpID09PSBcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI7XG4iLCJleHBvcnQgY29uc3QgbWVtb2l6ZSA9IChwcm92aWRlciwgaXNFeHBpcmVkLCByZXF1aXJlc1JlZnJlc2gpID0+IHtcbiAgICBsZXQgcmVzb2x2ZWQ7XG4gICAgbGV0IHBlbmRpbmc7XG4gICAgbGV0IGhhc1Jlc3VsdDtcbiAgICBsZXQgaXNDb25zdGFudCA9IGZhbHNlO1xuICAgIGNvbnN0IGNvYWxlc2NlUHJvdmlkZXIgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICghcGVuZGluZykge1xuICAgICAgICAgICAgcGVuZGluZyA9IHByb3ZpZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc29sdmVkID0gYXdhaXQgcGVuZGluZztcbiAgICAgICAgICAgIGhhc1Jlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICBpc0NvbnN0YW50ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICB9O1xuICAgIGlmIChpc0V4cGlyZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIGlmICghaGFzUmVzdWx0IHx8IG9wdGlvbnM/LmZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmVkID0gYXdhaXQgY29hbGVzY2VQcm92aWRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICAgICAgaWYgKCFoYXNSZXN1bHQgfHwgb3B0aW9ucz8uZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgICByZXNvbHZlZCA9IGF3YWl0IGNvYWxlc2NlUHJvdmlkZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDb25zdGFudCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXF1aXJlc1JlZnJlc2ggJiYgIXJlcXVpcmVzUmVmcmVzaChyZXNvbHZlZCkpIHtcbiAgICAgICAgICAgIGlzQ29uc3RhbnQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0V4cGlyZWQocmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICBhd2FpdCBjb2FsZXNjZVByb3ZpZGVyKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgIH07XG59O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGdldFNlbGVjdG9yTmFtZShmdW5jdGlvblN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbnN0YW50cyA9IG5ldyBTZXQoQXJyYXkuZnJvbShmdW5jdGlvblN0cmluZy5tYXRjaCgvKFtBLVpfXSl7Myx9L2cpID8/IFtdKSk7XG4gICAgICAgIGNvbnN0YW50cy5kZWxldGUoXCJDT05GSUdcIik7XG4gICAgICAgIGNvbnN0YW50cy5kZWxldGUoXCJDT05GSUdfUFJFRklYX1NFUEFSQVRPUlwiKTtcbiAgICAgICAgY29uc3RhbnRzLmRlbGV0ZShcIkVOVlwiKTtcbiAgICAgICAgcmV0dXJuIFsuLi5jb25zdGFudHNdLmpvaW4oXCIsIFwiKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uU3RyaW5nO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvciB9IGZyb20gXCJAc21pdGh5L3Byb3BlcnR5LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBnZXRQcm9maWxlTmFtZSwgbG9hZFNoYXJlZENvbmZpZ0ZpbGVzIH0gZnJvbSBcIkBzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlclwiO1xuaW1wb3J0IHsgZ2V0U2VsZWN0b3JOYW1lIH0gZnJvbSBcIi4vZ2V0U2VsZWN0b3JOYW1lXCI7XG5leHBvcnQgY29uc3QgZnJvbVNoYXJlZENvbmZpZ0ZpbGVzID0gKGNvbmZpZ1NlbGVjdG9yLCB7IHByZWZlcnJlZEZpbGUgPSBcImNvbmZpZ1wiLCAuLi5pbml0IH0gPSB7fSkgPT4gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHByb2ZpbGUgPSBnZXRQcm9maWxlTmFtZShpbml0KTtcbiAgICBjb25zdCB7IGNvbmZpZ0ZpbGUsIGNyZWRlbnRpYWxzRmlsZSB9ID0gYXdhaXQgbG9hZFNoYXJlZENvbmZpZ0ZpbGVzKGluaXQpO1xuICAgIGNvbnN0IHByb2ZpbGVGcm9tQ3JlZGVudGlhbHMgPSBjcmVkZW50aWFsc0ZpbGVbcHJvZmlsZV0gfHwge307XG4gICAgY29uc3QgcHJvZmlsZUZyb21Db25maWcgPSBjb25maWdGaWxlW3Byb2ZpbGVdIHx8IHt9O1xuICAgIGNvbnN0IG1lcmdlZFByb2ZpbGUgPSBwcmVmZXJyZWRGaWxlID09PSBcImNvbmZpZ1wiXG4gICAgICAgID8geyAuLi5wcm9maWxlRnJvbUNyZWRlbnRpYWxzLCAuLi5wcm9maWxlRnJvbUNvbmZpZyB9XG4gICAgICAgIDogeyAuLi5wcm9maWxlRnJvbUNvbmZpZywgLi4ucHJvZmlsZUZyb21DcmVkZW50aWFscyB9O1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNmZ0ZpbGUgPSBwcmVmZXJyZWRGaWxlID09PSBcImNvbmZpZ1wiID8gY29uZmlnRmlsZSA6IGNyZWRlbnRpYWxzRmlsZTtcbiAgICAgICAgY29uc3QgY29uZmlnVmFsdWUgPSBjb25maWdTZWxlY3RvcihtZXJnZWRQcm9maWxlLCBjZmdGaWxlKTtcbiAgICAgICAgaWYgKGNvbmZpZ1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25maWdWYWx1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihlLm1lc3NhZ2UgfHwgYE5vdCBmb3VuZCBpbiBjb25maWcgZmlsZXMgdy8gcHJvZmlsZSBbJHtwcm9maWxlfV06ICR7Z2V0U2VsZWN0b3JOYW1lKGNvbmZpZ1NlbGVjdG9yLnRvU3RyaW5nKCkpfWAsIHsgbG9nZ2VyOiBpbml0LmxvZ2dlciB9KTtcbiAgICB9XG59O1xuIiwiaW1wb3J0IHsgY2hhaW4sIG1lbW9pemUgfSBmcm9tIFwiQHNtaXRoeS9wcm9wZXJ0eS1wcm92aWRlclwiO1xuaW1wb3J0IHsgZnJvbUVudiB9IGZyb20gXCIuL2Zyb21FbnZcIjtcbmltcG9ydCB7IGZyb21TaGFyZWRDb25maWdGaWxlcyB9IGZyb20gXCIuL2Zyb21TaGFyZWRDb25maWdGaWxlc1wiO1xuaW1wb3J0IHsgZnJvbVN0YXRpYyB9IGZyb20gXCIuL2Zyb21TdGF0aWNcIjtcbmV4cG9ydCBjb25zdCBsb2FkQ29uZmlnID0gKHsgZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yLCBjb25maWdGaWxlU2VsZWN0b3IsIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZSB9LCBjb25maWd1cmF0aW9uID0ge30pID0+IHtcbiAgICBjb25zdCB7IHNpZ25pbmdOYW1lLCBsb2dnZXIgfSA9IGNvbmZpZ3VyYXRpb247XG4gICAgY29uc3QgZW52T3B0aW9ucyA9IHsgc2lnbmluZ05hbWUsIGxvZ2dlciB9O1xuICAgIHJldHVybiBtZW1vaXplKGNoYWluKGZyb21FbnYoZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yLCBlbnZPcHRpb25zKSwgZnJvbVNoYXJlZENvbmZpZ0ZpbGVzKGNvbmZpZ0ZpbGVTZWxlY3RvciwgY29uZmlndXJhdGlvbiksIGZyb21TdGF0aWMoZGVmYXVsdFZhbHVlKSkpO1xufTtcbiIsImltcG9ydCB7IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvciB9IGZyb20gXCJAc21pdGh5L3Byb3BlcnR5LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBnZXRTZWxlY3Rvck5hbWUgfSBmcm9tIFwiLi9nZXRTZWxlY3Rvck5hbWVcIjtcbmV4cG9ydCBjb25zdCBmcm9tRW52ID0gKGVudlZhclNlbGVjdG9yLCBvcHRpb25zKSA9PiBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gZW52VmFyU2VsZWN0b3IocHJvY2Vzcy5lbnYsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoY29uZmlnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBDcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IoZS5tZXNzYWdlIHx8IGBOb3QgZm91bmQgaW4gRU5WOiAke2dldFNlbGVjdG9yTmFtZShlbnZWYXJTZWxlY3Rvci50b1N0cmluZygpKX1gLCB7IGxvZ2dlcjogb3B0aW9ucz8ubG9nZ2VyIH0pO1xuICAgIH1cbn07XG4iLCJpbXBvcnQgeyBmcm9tU3RhdGljIGFzIGNvbnZlcnRUb1Byb3ZpZGVyIH0gZnJvbSBcIkBzbWl0aHkvcHJvcGVydHktcHJvdmlkZXJcIjtcbmNvbnN0IGlzRnVuY3Rpb24gPSAoZnVuYykgPT4gdHlwZW9mIGZ1bmMgPT09IFwiZnVuY3Rpb25cIjtcbmV4cG9ydCBjb25zdCBmcm9tU3RhdGljID0gKGRlZmF1bHRWYWx1ZSkgPT4gaXNGdW5jdGlvbihkZWZhdWx0VmFsdWUpID8gYXN5bmMgKCkgPT4gYXdhaXQgZGVmYXVsdFZhbHVlKCkgOiBjb252ZXJ0VG9Qcm92aWRlcihkZWZhdWx0VmFsdWUpO1xuIiwiZXhwb3J0IGNvbnN0IGZyb21TdGF0aWMgPSAoc3RhdGljVmFsdWUpID0+ICgpID0+IFByb21pc2UucmVzb2x2ZShzdGF0aWNWYWx1ZSk7XG4iLCJleHBvcnQgY2xhc3MgSHR0cFJlc3BvbnNlIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuc3RhdHVzQ29kZSA9IG9wdGlvbnMuc3RhdHVzQ29kZTtcbiAgICAgICAgdGhpcy5yZWFzb24gPSBvcHRpb25zLnJlYXNvbjtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzIHx8IHt9O1xuICAgICAgICB0aGlzLmJvZHkgPSBvcHRpb25zLmJvZHk7XG4gICAgfVxuICAgIHN0YXRpYyBpc0luc3RhbmNlKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICghcmVzcG9uc2UpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IHJlc3AgPSByZXNwb25zZTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiByZXNwLnN0YXR1c0NvZGUgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHJlc3AuaGVhZGVycyA9PT0gXCJvYmplY3RcIjtcbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgTm9PcExvZ2dlciB7XG4gICAgdHJhY2UoKSB7IH1cbiAgICBkZWJ1ZygpIHsgfVxuICAgIGluZm8oKSB7IH1cbiAgICB3YXJuKCkgeyB9XG4gICAgZXJyb3IoKSB7IH1cbn1cbiIsImV4cG9ydCBjb25zdCBnZXRBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uID0gKHJ1bnRpbWVDb25maWcpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXRSZWdpb24ocmVnaW9uKSB7XG4gICAgICAgICAgICBydW50aW1lQ29uZmlnLnJlZ2lvbiA9IHJlZ2lvbjtcbiAgICAgICAgfSxcbiAgICAgICAgcmVnaW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJ1bnRpbWVDb25maWcucmVnaW9uO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uID0gKGF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZWdpb246IGF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24ucmVnaW9uKCksXG4gICAgfTtcbn07XG4iLCJleHBvcnQgY29uc3QgaXNGaXBzUmVnaW9uID0gKHJlZ2lvbikgPT4gdHlwZW9mIHJlZ2lvbiA9PT0gXCJzdHJpbmdcIiAmJiAocmVnaW9uLnN0YXJ0c1dpdGgoXCJmaXBzLVwiKSB8fCByZWdpb24uZW5kc1dpdGgoXCItZmlwc1wiKSk7XG4iLCJpbXBvcnQgeyBpc0ZpcHNSZWdpb24gfSBmcm9tIFwiLi9pc0ZpcHNSZWdpb25cIjtcbmV4cG9ydCBjb25zdCBnZXRSZWFsUmVnaW9uID0gKHJlZ2lvbikgPT4gaXNGaXBzUmVnaW9uKHJlZ2lvbilcbiAgICA/IFtcImZpcHMtYXdzLWdsb2JhbFwiLCBcImF3cy1maXBzXCJdLmluY2x1ZGVzKHJlZ2lvbilcbiAgICAgICAgPyBcInVzLWVhc3QtMVwiXG4gICAgICAgIDogcmVnaW9uLnJlcGxhY2UoL2ZpcHMtKGRrci18cHJvZC0pP3wtZmlwcy8sIFwiXCIpXG4gICAgOiByZWdpb247XG4iLCJpbXBvcnQgeyBnZXRSZWFsUmVnaW9uIH0gZnJvbSBcIi4vZ2V0UmVhbFJlZ2lvblwiO1xuaW1wb3J0IHsgaXNGaXBzUmVnaW9uIH0gZnJvbSBcIi4vaXNGaXBzUmVnaW9uXCI7XG5leHBvcnQgY29uc3QgcmVzb2x2ZVJlZ2lvbkNvbmZpZyA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHsgcmVnaW9uLCB1c2VGaXBzRW5kcG9pbnQgfSA9IGlucHV0O1xuICAgIGlmICghcmVnaW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZ2lvbiBpcyBtaXNzaW5nXCIpO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihpbnB1dCwge1xuICAgICAgICByZWdpb246IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVnaW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFJlYWxSZWdpb24ocmVnaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVkUmVnaW9uID0gYXdhaXQgcmVnaW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gZ2V0UmVhbFJlZ2lvbihwcm92aWRlZFJlZ2lvbik7XG4gICAgICAgIH0sXG4gICAgICAgIHVzZUZpcHNFbmRwb2ludDogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcHJvdmlkZWRSZWdpb24gPSB0eXBlb2YgcmVnaW9uID09PSBcInN0cmluZ1wiID8gcmVnaW9uIDogYXdhaXQgcmVnaW9uKCk7XG4gICAgICAgICAgICBpZiAoaXNGaXBzUmVnaW9uKHByb3ZpZGVkUmVnaW9uKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB1c2VGaXBzRW5kcG9pbnQgIT09IFwiZnVuY3Rpb25cIiA/IFByb21pc2UucmVzb2x2ZSghIXVzZUZpcHNFbmRwb2ludCkgOiB1c2VGaXBzRW5kcG9pbnQoKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbn07XG4iLCJleHBvcnQgY29uc3Qgbm9ybWFsaXplUHJvdmlkZXIgPSAoaW5wdXQpID0+IHtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICBjb25zdCBwcm9taXNpZmllZCA9IFByb21pc2UucmVzb2x2ZShpbnB1dCk7XG4gICAgcmV0dXJuICgpID0+IHByb21pc2lmaWVkO1xufTtcbiIsImV4cG9ydCBjbGFzcyBTZXJ2aWNlRXhjZXB0aW9uIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucy5tZXNzYWdlKTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWU7XG4gICAgICAgIHRoaXMuJGZhdWx0ID0gb3B0aW9ucy4kZmF1bHQ7XG4gICAgICAgIHRoaXMuJG1ldGFkYXRhID0gb3B0aW9ucy4kbWV0YWRhdGE7XG4gICAgfVxuICAgIHN0YXRpYyBpc0luc3RhbmNlKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gKFNlcnZpY2VFeGNlcHRpb24ucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoY2FuZGlkYXRlKSB8fFxuICAgICAgICAgICAgKEJvb2xlYW4oY2FuZGlkYXRlLiRmYXVsdCkgJiZcbiAgICAgICAgICAgICAgICBCb29sZWFuKGNhbmRpZGF0ZS4kbWV0YWRhdGEpICYmXG4gICAgICAgICAgICAgICAgKGNhbmRpZGF0ZS4kZmF1bHQgPT09IFwiY2xpZW50XCIgfHwgY2FuZGlkYXRlLiRmYXVsdCA9PT0gXCJzZXJ2ZXJcIikpKTtcbiAgICB9XG4gICAgc3RhdGljIFtTeW1ib2wuaGFzSW5zdGFuY2VdKGluc3RhbmNlKSB7XG4gICAgICAgIGlmICghaW5zdGFuY2UpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IGluc3RhbmNlO1xuICAgICAgICBpZiAodGhpcyA9PT0gU2VydmljZUV4Y2VwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIFNlcnZpY2VFeGNlcHRpb24uaXNJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFNlcnZpY2VFeGNlcHRpb24uaXNJbnN0YW5jZShpbnN0YW5jZSkpIHtcbiAgICAgICAgICAgIGlmIChjYW5kaWRhdGUubmFtZSAmJiB0aGlzLm5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihpbnN0YW5jZSkgfHwgY2FuZGlkYXRlLm5hbWUgPT09IHRoaXMubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IGRlY29yYXRlU2VydmljZUV4Y2VwdGlvbiA9IChleGNlcHRpb24sIGFkZGl0aW9ucyA9IHt9KSA9PiB7XG4gICAgT2JqZWN0LmVudHJpZXMoYWRkaXRpb25zKVxuICAgICAgICAuZmlsdGVyKChbLCB2XSkgPT4gdiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAuZm9yRWFjaCgoW2ssIHZdKSA9PiB7XG4gICAgICAgIGlmIChleGNlcHRpb25ba10gPT0gdW5kZWZpbmVkIHx8IGV4Y2VwdGlvbltrXSA9PT0gXCJcIikge1xuICAgICAgICAgICAgZXhjZXB0aW9uW2tdID0gdjtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBleGNlcHRpb24ubWVzc2FnZSB8fCBleGNlcHRpb24uTWVzc2FnZSB8fCBcIlVua25vd25FcnJvclwiO1xuICAgIGV4Y2VwdGlvbi5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICBkZWxldGUgZXhjZXB0aW9uLk1lc3NhZ2U7XG4gICAgcmV0dXJuIGV4Y2VwdGlvbjtcbn07XG4iLCJpbXBvcnQgeyBmcm9tVXRmOCB9IGZyb20gXCIuL2Zyb21VdGY4XCI7XG5leHBvcnQgY29uc3QgdG9VaW50OEFycmF5ID0gKGRhdGEpID0+IHtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGZyb21VdGY4KGRhdGEpO1xuICAgIH1cbiAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGggLyBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEpO1xufTtcbiIsImV4cG9ydCBjb25zdCBnZXRBcnJheUZvckNvbW1hU2VwYXJhdGVkU3RyaW5nID0gKHN0cikgPT4gdHlwZW9mIHN0ciA9PT0gXCJzdHJpbmdcIiAmJiBzdHIubGVuZ3RoID4gMCA/IHN0ci5zcGxpdChcIixcIikubWFwKChpdGVtKSA9PiBpdGVtLnRyaW0oKSkgOiBbXTtcbiIsImltcG9ydCB7IGdldEFycmF5Rm9yQ29tbWFTZXBhcmF0ZWRTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbHMvZ2V0QXJyYXlGb3JDb21tYVNlcGFyYXRlZFN0cmluZ1wiO1xuaW1wb3J0IHsgZ2V0QmVhcmVyVG9rZW5FbnZLZXkgfSBmcm9tIFwiLi4vdXRpbHMvZ2V0QmVhcmVyVG9rZW5FbnZLZXlcIjtcbmNvbnN0IE5PREVfQVVUSF9TQ0hFTUVfUFJFRkVSRU5DRV9FTlZfS0VZID0gXCJBV1NfQVVUSF9TQ0hFTUVfUFJFRkVSRU5DRVwiO1xuY29uc3QgTk9ERV9BVVRIX1NDSEVNRV9QUkVGRVJFTkNFX0NPTkZJR19LRVkgPSBcImF1dGhfc2NoZW1lX3ByZWZlcmVuY2VcIjtcbmV4cG9ydCBjb25zdCBOT0RFX0FVVEhfU0NIRU1FX1BSRUZFUkVOQ0VfT1BUSU9OUyA9IHtcbiAgICBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3I6IChlbnYsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgaWYgKG9wdGlvbnM/LnNpZ25pbmdOYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBiZWFyZXJUb2tlbktleSA9IGdldEJlYXJlclRva2VuRW52S2V5KG9wdGlvbnMuc2lnbmluZ05hbWUpO1xuICAgICAgICAgICAgaWYgKGJlYXJlclRva2VuS2V5IGluIGVudilcbiAgICAgICAgICAgICAgICByZXR1cm4gW1wiaHR0cEJlYXJlckF1dGhcIl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoTk9ERV9BVVRIX1NDSEVNRV9QUkVGRVJFTkNFX0VOVl9LRVkgaW4gZW52KSlcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBnZXRBcnJheUZvckNvbW1hU2VwYXJhdGVkU3RyaW5nKGVudltOT0RFX0FVVEhfU0NIRU1FX1BSRUZFUkVOQ0VfRU5WX0tFWV0pO1xuICAgIH0sXG4gICAgY29uZmlnRmlsZVNlbGVjdG9yOiAocHJvZmlsZSkgPT4ge1xuICAgICAgICBpZiAoIShOT0RFX0FVVEhfU0NIRU1FX1BSRUZFUkVOQ0VfQ09ORklHX0tFWSBpbiBwcm9maWxlKSlcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBnZXRBcnJheUZvckNvbW1hU2VwYXJhdGVkU3RyaW5nKHByb2ZpbGVbTk9ERV9BVVRIX1NDSEVNRV9QUkVGRVJFTkNFX0NPTkZJR19LRVldKTtcbiAgICB9LFxuICAgIGRlZmF1bHQ6IFtdLFxufTtcbiIsImV4cG9ydCBjb25zdCBnZXRCZWFyZXJUb2tlbkVudktleSA9IChzaWduaW5nTmFtZSkgPT4gYEFXU19CRUFSRVJfVE9LRU5fJHtzaWduaW5nTmFtZS5yZXBsYWNlKC9bXFxzLV0vZywgXCJfXCIpLnRvVXBwZXJDYXNlKCl9YDtcbiIsImV4cG9ydCBjb25zdCBDTE9DS19TS0VXX0VSUk9SX0NPREVTID0gW1xuICAgIFwiQXV0aEZhaWx1cmVcIixcbiAgICBcIkludmFsaWRTaWduYXR1cmVFeGNlcHRpb25cIixcbiAgICBcIlJlcXVlc3RFeHBpcmVkXCIsXG4gICAgXCJSZXF1ZXN0SW5UaGVGdXR1cmVcIixcbiAgICBcIlJlcXVlc3RUaW1lVG9vU2tld2VkXCIsXG4gICAgXCJTaWduYXR1cmVEb2VzTm90TWF0Y2hcIixcbl07XG5leHBvcnQgY29uc3QgVEhST1RUTElOR19FUlJPUl9DT0RFUyA9IFtcbiAgICBcIkJhbmR3aWR0aExpbWl0RXhjZWVkZWRcIixcbiAgICBcIkVDMlRocm90dGxlZEV4Y2VwdGlvblwiLFxuICAgIFwiTGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiLFxuICAgIFwiUHJpb3JSZXF1ZXN0Tm90Q29tcGxldGVcIixcbiAgICBcIlByb3Zpc2lvbmVkVGhyb3VnaHB1dEV4Y2VlZGVkRXhjZXB0aW9uXCIsXG4gICAgXCJSZXF1ZXN0TGltaXRFeGNlZWRlZFwiLFxuICAgIFwiUmVxdWVzdFRocm90dGxlZFwiLFxuICAgIFwiUmVxdWVzdFRocm90dGxlZEV4Y2VwdGlvblwiLFxuICAgIFwiU2xvd0Rvd25cIixcbiAgICBcIlRocm90dGxlZEV4Y2VwdGlvblwiLFxuICAgIFwiVGhyb3R0bGluZ1wiLFxuICAgIFwiVGhyb3R0bGluZ0V4Y2VwdGlvblwiLFxuICAgIFwiVG9vTWFueVJlcXVlc3RzRXhjZXB0aW9uXCIsXG4gICAgXCJUcmFuc2FjdGlvbkluUHJvZ3Jlc3NFeGNlcHRpb25cIixcbl07XG5leHBvcnQgY29uc3QgVFJBTlNJRU5UX0VSUk9SX0NPREVTID0gW1wiVGltZW91dEVycm9yXCIsIFwiUmVxdWVzdFRpbWVvdXRcIiwgXCJSZXF1ZXN0VGltZW91dEV4Y2VwdGlvblwiXTtcbmV4cG9ydCBjb25zdCBUUkFOU0lFTlRfRVJST1JfU1RBVFVTX0NPREVTID0gWzUwMCwgNTAyLCA1MDMsIDUwNF07XG5leHBvcnQgY29uc3QgTk9ERUpTX1RJTUVPVVRfRVJST1JfQ09ERVMgPSBbXCJFQ09OTlJFU0VUXCIsIFwiRUNPTk5SRUZVU0VEXCIsIFwiRVBJUEVcIiwgXCJFVElNRURPVVRcIl07XG5leHBvcnQgY29uc3QgTk9ERUpTX05FVFdPUktfRVJST1JfQ09ERVMgPSBbXCJFSE9TVFVOUkVBQ0hcIiwgXCJFTkVUVU5SRUFDSFwiLCBcIkVOT1RGT1VORFwiXTtcbiIsImltcG9ydCB7IENMT0NLX1NLRVdfRVJST1JfQ09ERVMsIE5PREVKU19ORVRXT1JLX0VSUk9SX0NPREVTLCBOT0RFSlNfVElNRU9VVF9FUlJPUl9DT0RFUywgVEhST1RUTElOR19FUlJPUl9DT0RFUywgVFJBTlNJRU5UX0VSUk9SX0NPREVTLCBUUkFOU0lFTlRfRVJST1JfU1RBVFVTX0NPREVTLCB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuZXhwb3J0IGNvbnN0IGlzUmV0cnlhYmxlQnlUcmFpdCA9IChlcnJvcikgPT4gZXJyb3I/LiRyZXRyeWFibGUgIT09IHVuZGVmaW5lZDtcbmV4cG9ydCBjb25zdCBpc0Nsb2NrU2tld0Vycm9yID0gKGVycm9yKSA9PiBDTE9DS19TS0VXX0VSUk9SX0NPREVTLmluY2x1ZGVzKGVycm9yLm5hbWUpO1xuZXhwb3J0IGNvbnN0IGlzQ2xvY2tTa2V3Q29ycmVjdGVkRXJyb3IgPSAoZXJyb3IpID0+IGVycm9yLiRtZXRhZGF0YT8uY2xvY2tTa2V3Q29ycmVjdGVkO1xuZXhwb3J0IGNvbnN0IGlzQnJvd3Nlck5ldHdvcmtFcnJvciA9IChlcnJvcikgPT4ge1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZXMgPSBuZXcgU2V0KFtcbiAgICAgICAgXCJGYWlsZWQgdG8gZmV0Y2hcIixcbiAgICAgICAgXCJOZXR3b3JrRXJyb3Igd2hlbiBhdHRlbXB0aW5nIHRvIGZldGNoIHJlc291cmNlXCIsXG4gICAgICAgIFwiVGhlIEludGVybmV0IGNvbm5lY3Rpb24gYXBwZWFycyB0byBiZSBvZmZsaW5lXCIsXG4gICAgICAgIFwiTG9hZCBmYWlsZWRcIixcbiAgICAgICAgXCJOZXR3b3JrIHJlcXVlc3QgZmFpbGVkXCIsXG4gICAgXSk7XG4gICAgY29uc3QgaXNWYWxpZCA9IGVycm9yICYmIGVycm9yIGluc3RhbmNlb2YgVHlwZUVycm9yO1xuICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBlcnJvck1lc3NhZ2VzLmhhcyhlcnJvci5tZXNzYWdlKTtcbn07XG5leHBvcnQgY29uc3QgaXNUaHJvdHRsaW5nRXJyb3IgPSAoZXJyb3IpID0+IGVycm9yLiRtZXRhZGF0YT8uaHR0cFN0YXR1c0NvZGUgPT09IDQyOSB8fFxuICAgIFRIUk9UVExJTkdfRVJST1JfQ09ERVMuaW5jbHVkZXMoZXJyb3IubmFtZSkgfHxcbiAgICBlcnJvci4kcmV0cnlhYmxlPy50aHJvdHRsaW5nID09IHRydWU7XG5leHBvcnQgY29uc3QgaXNUcmFuc2llbnRFcnJvciA9IChlcnJvciwgZGVwdGggPSAwKSA9PiBpc1JldHJ5YWJsZUJ5VHJhaXQoZXJyb3IpIHx8XG4gICAgaXNDbG9ja1NrZXdDb3JyZWN0ZWRFcnJvcihlcnJvcikgfHxcbiAgICBUUkFOU0lFTlRfRVJST1JfQ09ERVMuaW5jbHVkZXMoZXJyb3IubmFtZSkgfHxcbiAgICBOT0RFSlNfVElNRU9VVF9FUlJPUl9DT0RFUy5pbmNsdWRlcyhlcnJvcj8uY29kZSB8fCBcIlwiKSB8fFxuICAgIE5PREVKU19ORVRXT1JLX0VSUk9SX0NPREVTLmluY2x1ZGVzKGVycm9yPy5jb2RlIHx8IFwiXCIpIHx8XG4gICAgVFJBTlNJRU5UX0VSUk9SX1NUQVRVU19DT0RFUy5pbmNsdWRlcyhlcnJvci4kbWV0YWRhdGE/Lmh0dHBTdGF0dXNDb2RlIHx8IDApIHx8XG4gICAgaXNCcm93c2VyTmV0d29ya0Vycm9yKGVycm9yKSB8fFxuICAgIChlcnJvci5jYXVzZSAhPT0gdW5kZWZpbmVkICYmIGRlcHRoIDw9IDEwICYmIGlzVHJhbnNpZW50RXJyb3IoZXJyb3IuY2F1c2UsIGRlcHRoICsgMSkpO1xuZXhwb3J0IGNvbnN0IGlzU2VydmVyRXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICBpZiAoZXJyb3IuJG1ldGFkYXRhPy5odHRwU3RhdHVzQ29kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHN0YXR1c0NvZGUgPSBlcnJvci4kbWV0YWRhdGEuaHR0cFN0YXR1c0NvZGU7XG4gICAgICAgIGlmICg1MDAgPD0gc3RhdHVzQ29kZSAmJiBzdGF0dXNDb2RlIDw9IDU5OSAmJiAhaXNUcmFuc2llbnRFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbiIsImltcG9ydCB7IGJvb2xlYW5TZWxlY3RvciwgU2VsZWN0b3JUeXBlIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1jb25maWctcHJvdmlkZXJcIjtcbmV4cG9ydCBjb25zdCBFTlZfVVNFX0ZJUFNfRU5EUE9JTlQgPSBcIkFXU19VU0VfRklQU19FTkRQT0lOVFwiO1xuZXhwb3J0IGNvbnN0IENPTkZJR19VU0VfRklQU19FTkRQT0lOVCA9IFwidXNlX2ZpcHNfZW5kcG9pbnRcIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1VTRV9GSVBTX0VORFBPSU5UID0gZmFsc2U7XG5leHBvcnQgY29uc3QgTk9ERV9VU0VfRklQU19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUyA9IHtcbiAgICBlbnZpcm9ubWVudFZhcmlhYmxlU2VsZWN0b3I6IChlbnYpID0+IGJvb2xlYW5TZWxlY3RvcihlbnYsIEVOVl9VU0VfRklQU19FTkRQT0lOVCwgU2VsZWN0b3JUeXBlLkVOViksXG4gICAgY29uZmlnRmlsZVNlbGVjdG9yOiAocHJvZmlsZSkgPT4gYm9vbGVhblNlbGVjdG9yKHByb2ZpbGUsIENPTkZJR19VU0VfRklQU19FTkRQT0lOVCwgU2VsZWN0b3JUeXBlLkNPTkZJRyksXG4gICAgZGVmYXVsdDogZmFsc2UsXG59O1xuIiwiZXhwb3J0IGNvbnN0IFJFR0lPTl9FTlZfTkFNRSA9IFwiQVdTX1JFR0lPTlwiO1xuZXhwb3J0IGNvbnN0IFJFR0lPTl9JTklfTkFNRSA9IFwicmVnaW9uXCI7XG5leHBvcnQgY29uc3QgTk9ERV9SRUdJT05fQ09ORklHX09QVElPTlMgPSB7XG4gICAgZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yOiAoZW52KSA9PiBlbnZbUkVHSU9OX0VOVl9OQU1FXSxcbiAgICBjb25maWdGaWxlU2VsZWN0b3I6IChwcm9maWxlKSA9PiBwcm9maWxlW1JFR0lPTl9JTklfTkFNRV0sXG4gICAgZGVmYXVsdDogKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWdpb24gaXMgbWlzc2luZ1wiKTtcbiAgICB9LFxufTtcbmV4cG9ydCBjb25zdCBOT0RFX1JFR0lPTl9DT05GSUdfRklMRV9PUFRJT05TID0ge1xuICAgIHByZWZlcnJlZEZpbGU6IFwiY3JlZGVudGlhbHNcIixcbn07XG4iLCJleHBvcnQgY29uc3Qgc3RhdGUgPSB7XG4gICAgd2FybmluZ0VtaXR0ZWQ6IGZhbHNlLFxufTtcbmV4cG9ydCBjb25zdCBlbWl0V2FybmluZ0lmVW5zdXBwb3J0ZWRWZXJzaW9uID0gKHZlcnNpb24pID0+IHtcbiAgICBpZiAodmVyc2lvbiAmJiAhc3RhdGUud2FybmluZ0VtaXR0ZWQgJiYgcGFyc2VJbnQodmVyc2lvbi5zdWJzdHJpbmcoMSwgdmVyc2lvbi5pbmRleE9mKFwiLlwiKSkpIDwgMTgpIHtcbiAgICAgICAgc3RhdGUud2FybmluZ0VtaXR0ZWQgPSB0cnVlO1xuICAgICAgICBwcm9jZXNzLmVtaXRXYXJuaW5nKGBOb2RlRGVwcmVjYXRpb25XYXJuaW5nOiBUaGUgQVdTIFNESyBmb3IgSmF2YVNjcmlwdCAodjMpIHdpbGxcbm5vIGxvbmdlciBzdXBwb3J0IE5vZGUuanMgMTYueCBvbiBKYW51YXJ5IDYsIDIwMjUuXG5cblRvIGNvbnRpbnVlIHJlY2VpdmluZyB1cGRhdGVzIHRvIEFXUyBzZXJ2aWNlcywgYnVnIGZpeGVzLCBhbmQgc2VjdXJpdHlcbnVwZGF0ZXMgcGxlYXNlIHVwZ3JhZGUgdG8gYSBzdXBwb3J0ZWQgTm9kZS5qcyBMVFMgdmVyc2lvbi5cblxuTW9yZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgYXQ6IGh0dHBzOi8vYS5jby83NGtKTW1JYCk7XG4gICAgfVxufTtcbiIsImltcG9ydCBjcnlwdG8gZnJvbSBcImNyeXB0b1wiO1xuZXhwb3J0IGNvbnN0IHJhbmRvbVVVSUQgPSBjcnlwdG8ucmFuZG9tVVVJRC5iaW5kKGNyeXB0byk7XG4iLCJpbXBvcnQgeyByYW5kb21VVUlEIH0gZnJvbSBcIi4vcmFuZG9tVVVJRFwiO1xuY29uc3QgZGVjaW1hbFRvSGV4ID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMjU2IH0sIChfLCBpKSA9PiBpLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIikpO1xuZXhwb3J0IGNvbnN0IHY0ID0gKCkgPT4ge1xuICAgIGlmIChyYW5kb21VVUlEKSB7XG4gICAgICAgIHJldHVybiByYW5kb21VVUlEKCk7XG4gICAgfVxuICAgIGNvbnN0IHJuZHMgPSBuZXcgVWludDhBcnJheSgxNik7XG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhybmRzKTtcbiAgICBybmRzWzZdID0gKHJuZHNbNl0gJiAweDBmKSB8IDB4NDA7XG4gICAgcm5kc1s4XSA9IChybmRzWzhdICYgMHgzZikgfCAweDgwO1xuICAgIHJldHVybiAoZGVjaW1hbFRvSGV4W3JuZHNbMF1dICtcbiAgICAgICAgZGVjaW1hbFRvSGV4W3JuZHNbMV1dICtcbiAgICAgICAgZGVjaW1hbFRvSGV4W3JuZHNbMl1dICtcbiAgICAgICAgZGVjaW1hbFRvSGV4W3JuZHNbM11dICtcbiAgICAgICAgXCItXCIgK1xuICAgICAgICBkZWNpbWFsVG9IZXhbcm5kc1s0XV0gK1xuICAgICAgICBkZWNpbWFsVG9IZXhbcm5kc1s1XV0gK1xuICAgICAgICBcIi1cIiArXG4gICAgICAgIGRlY2ltYWxUb0hleFtybmRzWzZdXSArXG4gICAgICAgIGRlY2ltYWxUb0hleFtybmRzWzddXSArXG4gICAgICAgIFwiLVwiICtcbiAgICAgICAgZGVjaW1hbFRvSGV4W3JuZHNbOF1dICtcbiAgICAgICAgZGVjaW1hbFRvSGV4W3JuZHNbOV1dICtcbiAgICAgICAgXCItXCIgK1xuICAgICAgICBkZWNpbWFsVG9IZXhbcm5kc1sxMF1dICtcbiAgICAgICAgZGVjaW1hbFRvSGV4W3JuZHNbMTFdXSArXG4gICAgICAgIGRlY2ltYWxUb0hleFtybmRzWzEyXV0gK1xuICAgICAgICBkZWNpbWFsVG9IZXhbcm5kc1sxM11dICtcbiAgICAgICAgZGVjaW1hbFRvSGV4W3JuZHNbMTRdXSArXG4gICAgICAgIGRlY2ltYWxUb0hleFtybmRzWzE1XV0pO1xufTtcbiIsImltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSBcInN0cmVhbVwiO1xuZXhwb3J0IGNvbnN0IGlzU3RyZWFtaW5nUGF5bG9hZCA9IChyZXF1ZXN0KSA9PiByZXF1ZXN0Py5ib2R5IGluc3RhbmNlb2YgUmVhZGFibGUgfHxcbiAgICAodHlwZW9mIFJlYWRhYmxlU3RyZWFtICE9PSBcInVuZGVmaW5lZFwiICYmIHJlcXVlc3Q/LmJvZHkgaW5zdGFuY2VvZiBSZWFkYWJsZVN0cmVhbSk7XG4iLCJleHBvcnQgY29uc3QgYXNTZGtFcnJvciA9IChlcnJvcikgPT4ge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKVxuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgT2JqZWN0KVxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgRXJyb3IoKSwgZXJyb3IpO1xuICAgIGlmICh0eXBlb2YgZXJyb3IgPT09IFwic3RyaW5nXCIpXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoZXJyb3IpO1xuICAgIHJldHVybiBuZXcgRXJyb3IoYEFXUyBTREsgZXJyb3Igd3JhcHBlciBmb3IgJHtlcnJvcn1gKTtcbn07XG4iLCJpbXBvcnQgeyBIdHRwUmVxdWVzdCwgSHR0cFJlc3BvbnNlIH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgaXNTZXJ2ZXJFcnJvciwgaXNUaHJvdHRsaW5nRXJyb3IsIGlzVHJhbnNpZW50RXJyb3IgfSBmcm9tIFwiQHNtaXRoeS9zZXJ2aWNlLWVycm9yLWNsYXNzaWZpY2F0aW9uXCI7XG5pbXBvcnQgeyBOb09wTG9nZ2VyIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgSU5WT0NBVElPTl9JRF9IRUFERVIsIFJFUVVFU1RfSEVBREVSIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1yZXRyeVwiO1xuaW1wb3J0IHsgdjQgfSBmcm9tIFwiQHNtaXRoeS91dWlkXCI7XG5pbXBvcnQgeyBpc1N0cmVhbWluZ1BheWxvYWQgfSBmcm9tIFwiLi9pc1N0cmVhbWluZ1BheWxvYWQvaXNTdHJlYW1pbmdQYXlsb2FkXCI7XG5pbXBvcnQgeyBhc1Nka0Vycm9yIH0gZnJvbSBcIi4vdXRpbFwiO1xuZXhwb3J0IGNvbnN0IHJldHJ5TWlkZGxld2FyZSA9IChvcHRpb25zKSA9PiAobmV4dCwgY29udGV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgICBsZXQgcmV0cnlTdHJhdGVneSA9IGF3YWl0IG9wdGlvbnMucmV0cnlTdHJhdGVneSgpO1xuICAgIGNvbnN0IG1heEF0dGVtcHRzID0gYXdhaXQgb3B0aW9ucy5tYXhBdHRlbXB0cygpO1xuICAgIGlmIChpc1JldHJ5U3RyYXRlZ3lWMihyZXRyeVN0cmF0ZWd5KSkge1xuICAgICAgICByZXRyeVN0cmF0ZWd5ID0gcmV0cnlTdHJhdGVneTtcbiAgICAgICAgbGV0IHJldHJ5VG9rZW4gPSBhd2FpdCByZXRyeVN0cmF0ZWd5LmFjcXVpcmVJbml0aWFsUmV0cnlUb2tlbihjb250ZXh0W1wicGFydGl0aW9uX2lkXCJdKTtcbiAgICAgICAgbGV0IGxhc3RFcnJvciA9IG5ldyBFcnJvcigpO1xuICAgICAgICBsZXQgYXR0ZW1wdHMgPSAwO1xuICAgICAgICBsZXQgdG90YWxSZXRyeURlbGF5ID0gMDtcbiAgICAgICAgY29uc3QgeyByZXF1ZXN0IH0gPSBhcmdzO1xuICAgICAgICBjb25zdCBpc1JlcXVlc3QgPSBIdHRwUmVxdWVzdC5pc0luc3RhbmNlKHJlcXVlc3QpO1xuICAgICAgICBpZiAoaXNSZXF1ZXN0KSB7XG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnNbSU5WT0NBVElPTl9JRF9IRUFERVJdID0gdjQoKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoaXNSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVyc1tSRVFVRVNUX0hFQURFUl0gPSBgYXR0ZW1wdD0ke2F0dGVtcHRzICsgMX07IG1heD0ke21heEF0dGVtcHRzfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHsgcmVzcG9uc2UsIG91dHB1dCB9ID0gYXdhaXQgbmV4dChhcmdzKTtcbiAgICAgICAgICAgICAgICByZXRyeVN0cmF0ZWd5LnJlY29yZFN1Y2Nlc3MocmV0cnlUb2tlbik7XG4gICAgICAgICAgICAgICAgb3V0cHV0LiRtZXRhZGF0YS5hdHRlbXB0cyA9IGF0dGVtcHRzICsgMTtcbiAgICAgICAgICAgICAgICBvdXRwdXQuJG1ldGFkYXRhLnRvdGFsUmV0cnlEZWxheSA9IHRvdGFsUmV0cnlEZWxheTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyByZXNwb25zZSwgb3V0cHV0IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJldHJ5RXJyb3JJbmZvID0gZ2V0UmV0cnlFcnJvckluZm8oZSk7XG4gICAgICAgICAgICAgICAgbGFzdEVycm9yID0gYXNTZGtFcnJvcihlKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNSZXF1ZXN0ICYmIGlzU3RyZWFtaW5nUGF5bG9hZChyZXF1ZXN0KSkge1xuICAgICAgICAgICAgICAgICAgICAoY29udGV4dC5sb2dnZXIgaW5zdGFuY2VvZiBOb09wTG9nZ2VyID8gY29uc29sZSA6IGNvbnRleHQubG9nZ2VyKT8ud2FybihcIkFuIGVycm9yIHdhcyBlbmNvdW50ZXJlZCBpbiBhIG5vbi1yZXRyeWFibGUgc3RyZWFtaW5nIHJlcXVlc3QuXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBsYXN0RXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHJ5VG9rZW4gPSBhd2FpdCByZXRyeVN0cmF0ZWd5LnJlZnJlc2hSZXRyeVRva2VuRm9yUmV0cnkocmV0cnlUb2tlbiwgcmV0cnlFcnJvckluZm8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAocmVmcmVzaEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbGFzdEVycm9yLiRtZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEVycm9yLiRtZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxhc3RFcnJvci4kbWV0YWRhdGEuYXR0ZW1wdHMgPSBhdHRlbXB0cyArIDE7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RFcnJvci4kbWV0YWRhdGEudG90YWxSZXRyeURlbGF5ID0gdG90YWxSZXRyeURlbGF5O1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBsYXN0RXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF0dGVtcHRzID0gcmV0cnlUb2tlbi5nZXRSZXRyeUNvdW50KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsYXkgPSByZXRyeVRva2VuLmdldFJldHJ5RGVsYXkoKTtcbiAgICAgICAgICAgICAgICB0b3RhbFJldHJ5RGVsYXkgKz0gZGVsYXk7XG4gICAgICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgZGVsYXkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0cnlTdHJhdGVneSA9IHJldHJ5U3RyYXRlZ3k7XG4gICAgICAgIGlmIChyZXRyeVN0cmF0ZWd5Py5tb2RlKVxuICAgICAgICAgICAgY29udGV4dC51c2VyQWdlbnQgPSBbLi4uKGNvbnRleHQudXNlckFnZW50IHx8IFtdKSwgW1wiY2ZnL3JldHJ5LW1vZGVcIiwgcmV0cnlTdHJhdGVneS5tb2RlXV07XG4gICAgICAgIHJldHVybiByZXRyeVN0cmF0ZWd5LnJldHJ5KG5leHQsIGFyZ3MpO1xuICAgIH1cbn07XG5jb25zdCBpc1JldHJ5U3RyYXRlZ3lWMiA9IChyZXRyeVN0cmF0ZWd5KSA9PiB0eXBlb2YgcmV0cnlTdHJhdGVneS5hY3F1aXJlSW5pdGlhbFJldHJ5VG9rZW4gIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgcmV0cnlTdHJhdGVneS5yZWZyZXNoUmV0cnlUb2tlbkZvclJldHJ5ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIHJldHJ5U3RyYXRlZ3kucmVjb3JkU3VjY2VzcyAhPT0gXCJ1bmRlZmluZWRcIjtcbmNvbnN0IGdldFJldHJ5RXJyb3JJbmZvID0gKGVycm9yKSA9PiB7XG4gICAgY29uc3QgZXJyb3JJbmZvID0ge1xuICAgICAgICBlcnJvcixcbiAgICAgICAgZXJyb3JUeXBlOiBnZXRSZXRyeUVycm9yVHlwZShlcnJvciksXG4gICAgfTtcbiAgICBjb25zdCByZXRyeUFmdGVySGludCA9IGdldFJldHJ5QWZ0ZXJIaW50KGVycm9yLiRyZXNwb25zZSk7XG4gICAgaWYgKHJldHJ5QWZ0ZXJIaW50KSB7XG4gICAgICAgIGVycm9ySW5mby5yZXRyeUFmdGVySGludCA9IHJldHJ5QWZ0ZXJIaW50O1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3JJbmZvO1xufTtcbmNvbnN0IGdldFJldHJ5RXJyb3JUeXBlID0gKGVycm9yKSA9PiB7XG4gICAgaWYgKGlzVGhyb3R0bGluZ0Vycm9yKGVycm9yKSlcbiAgICAgICAgcmV0dXJuIFwiVEhST1RUTElOR1wiO1xuICAgIGlmIChpc1RyYW5zaWVudEVycm9yKGVycm9yKSlcbiAgICAgICAgcmV0dXJuIFwiVFJBTlNJRU5UXCI7XG4gICAgaWYgKGlzU2VydmVyRXJyb3IoZXJyb3IpKVxuICAgICAgICByZXR1cm4gXCJTRVJWRVJfRVJST1JcIjtcbiAgICByZXR1cm4gXCJDTElFTlRfRVJST1JcIjtcbn07XG5leHBvcnQgY29uc3QgcmV0cnlNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgICBuYW1lOiBcInJldHJ5TWlkZGxld2FyZVwiLFxuICAgIHRhZ3M6IFtcIlJFVFJZXCJdLFxuICAgIHN0ZXA6IFwiZmluYWxpemVSZXF1ZXN0XCIsXG4gICAgcHJpb3JpdHk6IFwiaGlnaFwiLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcbmV4cG9ydCBjb25zdCBnZXRSZXRyeVBsdWdpbiA9IChvcHRpb25zKSA9PiAoe1xuICAgIGFwcGx5VG9TdGFjazogKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgICAgIGNsaWVudFN0YWNrLmFkZChyZXRyeU1pZGRsZXdhcmUob3B0aW9ucyksIHJldHJ5TWlkZGxld2FyZU9wdGlvbnMpO1xuICAgIH0sXG59KTtcbmV4cG9ydCBjb25zdCBnZXRSZXRyeUFmdGVySGludCA9IChyZXNwb25zZSkgPT4ge1xuICAgIGlmICghSHR0cFJlc3BvbnNlLmlzSW5zdGFuY2UocmVzcG9uc2UpKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgcmV0cnlBZnRlckhlYWRlck5hbWUgPSBPYmplY3Qua2V5cyhyZXNwb25zZS5oZWFkZXJzKS5maW5kKChrZXkpID0+IGtleS50b0xvd2VyQ2FzZSgpID09PSBcInJldHJ5LWFmdGVyXCIpO1xuICAgIGlmICghcmV0cnlBZnRlckhlYWRlck5hbWUpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCByZXRyeUFmdGVyID0gcmVzcG9uc2UuaGVhZGVyc1tyZXRyeUFmdGVySGVhZGVyTmFtZV07XG4gICAgY29uc3QgcmV0cnlBZnRlclNlY29uZHMgPSBOdW1iZXIocmV0cnlBZnRlcik7XG4gICAgaWYgKCFOdW1iZXIuaXNOYU4ocmV0cnlBZnRlclNlY29uZHMpKVxuICAgICAgICByZXR1cm4gbmV3IERhdGUocmV0cnlBZnRlclNlY29uZHMgKiAxMDAwKTtcbiAgICBjb25zdCByZXRyeUFmdGVyRGF0ZSA9IG5ldyBEYXRlKHJldHJ5QWZ0ZXIpO1xuICAgIHJldHVybiByZXRyeUFmdGVyRGF0ZTtcbn07XG4iLCJpbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IGdldFNtaXRoeUNvbnRleHQgfSBmcm9tIFwiQHNtaXRoeS91dGlsLW1pZGRsZXdhcmVcIjtcbmNvbnN0IGRlZmF1bHRFcnJvckhhbmRsZXIgPSAoc2lnbmluZ1Byb3BlcnRpZXMpID0+IChlcnJvcikgPT4ge1xuICAgIHRocm93IGVycm9yO1xufTtcbmNvbnN0IGRlZmF1bHRTdWNjZXNzSGFuZGxlciA9IChodHRwUmVzcG9uc2UsIHNpZ25pbmdQcm9wZXJ0aWVzKSA9PiB7IH07XG5leHBvcnQgY29uc3QgaHR0cFNpZ25pbmdNaWRkbGV3YXJlID0gKGNvbmZpZykgPT4gKG5leHQsIGNvbnRleHQpID0+IGFzeW5jIChhcmdzKSA9PiB7XG4gICAgaWYgKCFIdHRwUmVxdWVzdC5pc0luc3RhbmNlKGFyZ3MucmVxdWVzdCkpIHtcbiAgICAgICAgcmV0dXJuIG5leHQoYXJncyk7XG4gICAgfVxuICAgIGNvbnN0IHNtaXRoeUNvbnRleHQgPSBnZXRTbWl0aHlDb250ZXh0KGNvbnRleHQpO1xuICAgIGNvbnN0IHNjaGVtZSA9IHNtaXRoeUNvbnRleHQuc2VsZWN0ZWRIdHRwQXV0aFNjaGVtZTtcbiAgICBpZiAoIXNjaGVtZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIEh0dHBBdXRoU2NoZW1lIHdhcyBzZWxlY3RlZDogdW5hYmxlIHRvIHNpZ24gcmVxdWVzdGApO1xuICAgIH1cbiAgICBjb25zdCB7IGh0dHBBdXRoT3B0aW9uOiB7IHNpZ25pbmdQcm9wZXJ0aWVzID0ge30gfSwgaWRlbnRpdHksIHNpZ25lciwgfSA9IHNjaGVtZTtcbiAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBuZXh0KHtcbiAgICAgICAgLi4uYXJncyxcbiAgICAgICAgcmVxdWVzdDogYXdhaXQgc2lnbmVyLnNpZ24oYXJncy5yZXF1ZXN0LCBpZGVudGl0eSwgc2lnbmluZ1Byb3BlcnRpZXMpLFxuICAgIH0pLmNhdGNoKChzaWduZXIuZXJyb3JIYW5kbGVyIHx8IGRlZmF1bHRFcnJvckhhbmRsZXIpKHNpZ25pbmdQcm9wZXJ0aWVzKSk7XG4gICAgKHNpZ25lci5zdWNjZXNzSGFuZGxlciB8fCBkZWZhdWx0U3VjY2Vzc0hhbmRsZXIpKG91dHB1dC5yZXNwb25zZSwgc2lnbmluZ1Byb3BlcnRpZXMpO1xuICAgIHJldHVybiBvdXRwdXQ7XG59O1xuIiwiaW1wb3J0IHsgaHR0cFNpZ25pbmdNaWRkbGV3YXJlIH0gZnJvbSBcIi4vaHR0cFNpZ25pbmdNaWRkbGV3YXJlXCI7XG5leHBvcnQgY29uc3QgaHR0cFNpZ25pbmdNaWRkbGV3YXJlT3B0aW9ucyA9IHtcbiAgICBzdGVwOiBcImZpbmFsaXplUmVxdWVzdFwiLFxuICAgIHRhZ3M6IFtcIkhUVFBfU0lHTklOR1wiXSxcbiAgICBuYW1lOiBcImh0dHBTaWduaW5nTWlkZGxld2FyZVwiLFxuICAgIGFsaWFzZXM6IFtcImFwaUtleU1pZGRsZXdhcmVcIiwgXCJ0b2tlbk1pZGRsZXdhcmVcIiwgXCJhd3NBdXRoTWlkZGxld2FyZVwiXSxcbiAgICBvdmVycmlkZTogdHJ1ZSxcbiAgICByZWxhdGlvbjogXCJhZnRlclwiLFxuICAgIHRvTWlkZGxld2FyZTogXCJyZXRyeU1pZGRsZXdhcmVcIixcbn07XG5leHBvcnQgY29uc3QgZ2V0SHR0cFNpZ25pbmdQbHVnaW4gPSAoY29uZmlnKSA9PiAoe1xuICAgIGFwcGx5VG9TdGFjazogKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgICAgIGNsaWVudFN0YWNrLmFkZFJlbGF0aXZlVG8oaHR0cFNpZ25pbmdNaWRkbGV3YXJlKGNvbmZpZyksIGh0dHBTaWduaW5nTWlkZGxld2FyZU9wdGlvbnMpO1xuICAgIH0sXG59KTtcbiIsImltcG9ydCB7IFdyaXRhYmxlIH0gZnJvbSBcInN0cmVhbVwiO1xuZXhwb3J0IGNsYXNzIENvbGxlY3RvciBleHRlbmRzIFdyaXRhYmxlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5idWZmZXJlZEJ5dGVzID0gW107XG4gICAgfVxuICAgIF93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyZWRCeXRlcy5wdXNoKGNodW5rKTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb2xsZWN0b3IgfSBmcm9tIFwiLi9jb2xsZWN0b3JcIjtcbmV4cG9ydCBjb25zdCBzdHJlYW1Db2xsZWN0b3IgPSAoc3RyZWFtKSA9PiB7XG4gICAgaWYgKGlzUmVhZGFibGVTdHJlYW1JbnN0YW5jZShzdHJlYW0pKSB7XG4gICAgICAgIHJldHVybiBjb2xsZWN0UmVhZGFibGVTdHJlYW0oc3RyZWFtKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgY29sbGVjdG9yID0gbmV3IENvbGxlY3RvcigpO1xuICAgICAgICBzdHJlYW0ucGlwZShjb2xsZWN0b3IpO1xuICAgICAgICBzdHJlYW0ub24oXCJlcnJvclwiLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb2xsZWN0b3IuZW5kKCk7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbGxlY3Rvci5vbihcImVycm9yXCIsIHJlamVjdCk7XG4gICAgICAgIGNvbGxlY3Rvci5vbihcImZpbmlzaFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KEJ1ZmZlci5jb25jYXQodGhpcy5idWZmZXJlZEJ5dGVzKSk7XG4gICAgICAgICAgICByZXNvbHZlKGJ5dGVzKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuY29uc3QgaXNSZWFkYWJsZVN0cmVhbUluc3RhbmNlID0gKHN0cmVhbSkgPT4gdHlwZW9mIFJlYWRhYmxlU3RyZWFtID09PSBcImZ1bmN0aW9uXCIgJiYgc3RyZWFtIGluc3RhbmNlb2YgUmVhZGFibGVTdHJlYW07XG5hc3luYyBmdW5jdGlvbiBjb2xsZWN0UmVhZGFibGVTdHJlYW0oc3RyZWFtKSB7XG4gICAgY29uc3QgY2h1bmtzID0gW107XG4gICAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpO1xuICAgIGxldCBpc0RvbmUgPSBmYWxzZTtcbiAgICBsZXQgbGVuZ3RoID0gMDtcbiAgICB3aGlsZSAoIWlzRG9uZSkge1xuICAgICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGNodW5rcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIGxlbmd0aCArPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaXNEb25lID0gZG9uZTtcbiAgICB9XG4gICAgY29uc3QgY29sbGVjdGVkID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBmb3IgKGNvbnN0IGNodW5rIG9mIGNodW5rcykge1xuICAgICAgICBjb2xsZWN0ZWQuc2V0KGNodW5rLCBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gY29sbGVjdGVkO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTsiLCJpbXBvcnQgeyBJbmlTZWN0aW9uVHlwZSB9IGZyb20gXCJAc21pdGh5L3R5cGVzXCI7XG5pbXBvcnQgeyBDT05GSUdfUFJFRklYX1NFUEFSQVRPUiB9IGZyb20gXCIuL2xvYWRTaGFyZWRDb25maWdGaWxlc1wiO1xuZXhwb3J0IGNvbnN0IGdldENvbmZpZ0RhdGEgPSAoZGF0YSkgPT4gT2JqZWN0LmVudHJpZXMoZGF0YSlcbiAgICAuZmlsdGVyKChba2V5XSkgPT4ge1xuICAgIGNvbnN0IGluZGV4T2ZTZXBhcmF0b3IgPSBrZXkuaW5kZXhPZihDT05GSUdfUFJFRklYX1NFUEFSQVRPUik7XG4gICAgaWYgKGluZGV4T2ZTZXBhcmF0b3IgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoSW5pU2VjdGlvblR5cGUpLmluY2x1ZGVzKGtleS5zdWJzdHJpbmcoMCwgaW5kZXhPZlNlcGFyYXRvcikpO1xufSlcbiAgICAucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgIGNvbnN0IGluZGV4T2ZTZXBhcmF0b3IgPSBrZXkuaW5kZXhPZihDT05GSUdfUFJFRklYX1NFUEFSQVRPUik7XG4gICAgY29uc3QgdXBkYXRlZEtleSA9IGtleS5zdWJzdHJpbmcoMCwgaW5kZXhPZlNlcGFyYXRvcikgPT09IEluaVNlY3Rpb25UeXBlLlBST0ZJTEUgPyBrZXkuc3Vic3RyaW5nKGluZGV4T2ZTZXBhcmF0b3IgKyAxKSA6IGtleTtcbiAgICBhY2NbdXBkYXRlZEtleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gYWNjO1xufSwge1xuICAgIC4uLihkYXRhLmRlZmF1bHQgJiYgeyBkZWZhdWx0OiBkYXRhLmRlZmF1bHQgfSksXG59KTtcbiIsImltcG9ydCB7IGpvaW4gfSBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgZ2V0SG9tZURpciB9IGZyb20gXCIuL2dldEhvbWVEaXJcIjtcbmV4cG9ydCBjb25zdCBFTlZfQ1JFREVOVElBTFNfUEFUSCA9IFwiQVdTX1NIQVJFRF9DUkVERU5USUFMU19GSUxFXCI7XG5leHBvcnQgY29uc3QgZ2V0Q3JlZGVudGlhbHNGaWxlcGF0aCA9ICgpID0+IHByb2Nlc3MuZW52W0VOVl9DUkVERU5USUFMU19QQVRIXSB8fCBqb2luKGdldEhvbWVEaXIoKSwgXCIuYXdzXCIsIFwiY3JlZGVudGlhbHNcIik7XG4iLCJpbXBvcnQgeyBqb2luIH0gZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IGdldENvbmZpZ0RhdGEgfSBmcm9tIFwiLi9nZXRDb25maWdEYXRhXCI7XG5pbXBvcnQgeyBnZXRDb25maWdGaWxlcGF0aCB9IGZyb20gXCIuL2dldENvbmZpZ0ZpbGVwYXRoXCI7XG5pbXBvcnQgeyBnZXRDcmVkZW50aWFsc0ZpbGVwYXRoIH0gZnJvbSBcIi4vZ2V0Q3JlZGVudGlhbHNGaWxlcGF0aFwiO1xuaW1wb3J0IHsgZ2V0SG9tZURpciB9IGZyb20gXCIuL2dldEhvbWVEaXJcIjtcbmltcG9ydCB7IHBhcnNlSW5pIH0gZnJvbSBcIi4vcGFyc2VJbmlcIjtcbmltcG9ydCB7IHNsdXJwRmlsZSB9IGZyb20gXCIuL3NsdXJwRmlsZVwiO1xuY29uc3Qgc3dhbGxvd0Vycm9yID0gKCkgPT4gKHt9KTtcbmV4cG9ydCBjb25zdCBDT05GSUdfUFJFRklYX1NFUEFSQVRPUiA9IFwiLlwiO1xuZXhwb3J0IGNvbnN0IGxvYWRTaGFyZWRDb25maWdGaWxlcyA9IGFzeW5jIChpbml0ID0ge30pID0+IHtcbiAgICBjb25zdCB7IGZpbGVwYXRoID0gZ2V0Q3JlZGVudGlhbHNGaWxlcGF0aCgpLCBjb25maWdGaWxlcGF0aCA9IGdldENvbmZpZ0ZpbGVwYXRoKCkgfSA9IGluaXQ7XG4gICAgY29uc3QgaG9tZURpciA9IGdldEhvbWVEaXIoKTtcbiAgICBjb25zdCByZWxhdGl2ZUhvbWVEaXJQcmVmaXggPSBcIn4vXCI7XG4gICAgbGV0IHJlc29sdmVkRmlsZXBhdGggPSBmaWxlcGF0aDtcbiAgICBpZiAoZmlsZXBhdGguc3RhcnRzV2l0aChyZWxhdGl2ZUhvbWVEaXJQcmVmaXgpKSB7XG4gICAgICAgIHJlc29sdmVkRmlsZXBhdGggPSBqb2luKGhvbWVEaXIsIGZpbGVwYXRoLnNsaWNlKDIpKTtcbiAgICB9XG4gICAgbGV0IHJlc29sdmVkQ29uZmlnRmlsZXBhdGggPSBjb25maWdGaWxlcGF0aDtcbiAgICBpZiAoY29uZmlnRmlsZXBhdGguc3RhcnRzV2l0aChyZWxhdGl2ZUhvbWVEaXJQcmVmaXgpKSB7XG4gICAgICAgIHJlc29sdmVkQ29uZmlnRmlsZXBhdGggPSBqb2luKGhvbWVEaXIsIGNvbmZpZ0ZpbGVwYXRoLnNsaWNlKDIpKTtcbiAgICB9XG4gICAgY29uc3QgcGFyc2VkRmlsZXMgPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIHNsdXJwRmlsZShyZXNvbHZlZENvbmZpZ0ZpbGVwYXRoLCB7XG4gICAgICAgICAgICBpZ25vcmVDYWNoZTogaW5pdC5pZ25vcmVDYWNoZSxcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKHBhcnNlSW5pKVxuICAgICAgICAgICAgLnRoZW4oZ2V0Q29uZmlnRGF0YSlcbiAgICAgICAgICAgIC5jYXRjaChzd2FsbG93RXJyb3IpLFxuICAgICAgICBzbHVycEZpbGUocmVzb2x2ZWRGaWxlcGF0aCwge1xuICAgICAgICAgICAgaWdub3JlQ2FjaGU6IGluaXQuaWdub3JlQ2FjaGUsXG4gICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihwYXJzZUluaSlcbiAgICAgICAgICAgIC5jYXRjaChzd2FsbG93RXJyb3IpLFxuICAgIF0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbmZpZ0ZpbGU6IHBhcnNlZEZpbGVzWzBdLFxuICAgICAgICBjcmVkZW50aWFsc0ZpbGU6IHBhcnNlZEZpbGVzWzFdLFxuICAgIH07XG59O1xuIiwiZXhwb3J0IHZhciBJbmlTZWN0aW9uVHlwZTtcbihmdW5jdGlvbiAoSW5pU2VjdGlvblR5cGUpIHtcbiAgICBJbmlTZWN0aW9uVHlwZVtcIlBST0ZJTEVcIl0gPSBcInByb2ZpbGVcIjtcbiAgICBJbmlTZWN0aW9uVHlwZVtcIlNTT19TRVNTSU9OXCJdID0gXCJzc28tc2Vzc2lvblwiO1xuICAgIEluaVNlY3Rpb25UeXBlW1wiU0VSVklDRVNcIl0gPSBcInNlcnZpY2VzXCI7XG59KShJbmlTZWN0aW9uVHlwZSB8fCAoSW5pU2VjdGlvblR5cGUgPSB7fSkpO1xuIiwiXG5leHBvcnQgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgcHJlc2VydmVPcmRlcjogZmFsc2UsXG4gICAgYXR0cmlidXRlTmFtZVByZWZpeDogJ0BfJyxcbiAgICBhdHRyaWJ1dGVzR3JvdXBOYW1lOiBmYWxzZSxcbiAgICB0ZXh0Tm9kZU5hbWU6ICcjdGV4dCcsXG4gICAgaWdub3JlQXR0cmlidXRlczogdHJ1ZSxcbiAgICByZW1vdmVOU1ByZWZpeDogZmFsc2UsIC8vIHJlbW92ZSBOUyBmcm9tIHRhZyBuYW1lIG9yIGF0dHJpYnV0ZSBuYW1lIGlmIHRydWVcbiAgICBhbGxvd0Jvb2xlYW5BdHRyaWJ1dGVzOiBmYWxzZSwgLy9hIHRhZyBjYW4gaGF2ZSBhdHRyaWJ1dGVzIHdpdGhvdXQgYW55IHZhbHVlXG4gICAgLy9pZ25vcmVSb290RWxlbWVudCA6IGZhbHNlLFxuICAgIHBhcnNlVGFnVmFsdWU6IHRydWUsXG4gICAgcGFyc2VBdHRyaWJ1dGVWYWx1ZTogZmFsc2UsXG4gICAgdHJpbVZhbHVlczogdHJ1ZSwgLy9UcmltIHN0cmluZyB2YWx1ZXMgb2YgdGFnIGFuZCBhdHRyaWJ1dGVzXG4gICAgY2RhdGFQcm9wTmFtZTogZmFsc2UsXG4gICAgbnVtYmVyUGFyc2VPcHRpb25zOiB7XG4gICAgICBoZXg6IHRydWUsXG4gICAgICBsZWFkaW5nWmVyb3M6IHRydWUsXG4gICAgICBlTm90YXRpb246IHRydWVcbiAgICB9LFxuICAgIHRhZ1ZhbHVlUHJvY2Vzc29yOiBmdW5jdGlvbih0YWdOYW1lLCB2YWwpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSxcbiAgICBhdHRyaWJ1dGVWYWx1ZVByb2Nlc3NvcjogZnVuY3Rpb24oYXR0ck5hbWUsIHZhbCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9LFxuICAgIHN0b3BOb2RlczogW10sIC8vbmVzdGVkIHRhZ3Mgd2lsbCBub3QgYmUgcGFyc2VkIGV2ZW4gZm9yIGVycm9yc1xuICAgIGFsd2F5c0NyZWF0ZVRleHROb2RlOiBmYWxzZSxcbiAgICBpc0FycmF5OiAoKSA9PiBmYWxzZSxcbiAgICBjb21tZW50UHJvcE5hbWU6IGZhbHNlLFxuICAgIHVucGFpcmVkVGFnczogW10sXG4gICAgcHJvY2Vzc0VudGl0aWVzOiB0cnVlLFxuICAgIGh0bWxFbnRpdGllczogZmFsc2UsXG4gICAgaWdub3JlRGVjbGFyYXRpb246IGZhbHNlLFxuICAgIGlnbm9yZVBpVGFnczogZmFsc2UsXG4gICAgdHJhbnNmb3JtVGFnTmFtZTogZmFsc2UsXG4gICAgdHJhbnNmb3JtQXR0cmlidXRlTmFtZTogZmFsc2UsXG4gICAgdXBkYXRlVGFnOiBmdW5jdGlvbih0YWdOYW1lLCBqUGF0aCwgYXR0cnMpe1xuICAgICAgcmV0dXJuIHRhZ05hbWVcbiAgICB9LFxuICAgIC8vIHNraXBFbXB0eUxpc3RJdGVtOiBmYWxzZVxuICAgIGNhcHR1cmVNZXRhRGF0YTogZmFsc2UsXG59O1xuICAgXG5leHBvcnQgY29uc3QgYnVpbGRPcHRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuYW1lU3RhcnRDaGFyID0gJzpBLVphLXpfXFxcXHUwMEMwLVxcXFx1MDBENlxcXFx1MDBEOC1cXFxcdTAwRjZcXFxcdTAwRjgtXFxcXHUwMkZGXFxcXHUwMzcwLVxcXFx1MDM3RFxcXFx1MDM3Ri1cXFxcdTFGRkZcXFxcdTIwMEMtXFxcXHUyMDBEXFxcXHUyMDcwLVxcXFx1MjE4RlxcXFx1MkMwMC1cXFxcdTJGRUZcXFxcdTMwMDEtXFxcXHVEN0ZGXFxcXHVGOTAwLVxcXFx1RkRDRlxcXFx1RkRGMC1cXFxcdUZGRkQnO1xuY29uc3QgbmFtZUNoYXIgPSBuYW1lU3RhcnRDaGFyICsgJ1xcXFwtLlxcXFxkXFxcXHUwMEI3XFxcXHUwMzAwLVxcXFx1MDM2RlxcXFx1MjAzRi1cXFxcdTIwNDAnO1xuZXhwb3J0IGNvbnN0IG5hbWVSZWdleHAgPSAnWycgKyBuYW1lU3RhcnRDaGFyICsgJ11bJyArIG5hbWVDaGFyICsgJ10qJztcbmNvbnN0IHJlZ2V4TmFtZSA9IG5ldyBSZWdFeHAoJ14nICsgbmFtZVJlZ2V4cCArICckJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxNYXRjaGVzKHN0cmluZywgcmVnZXgpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IFtdO1xuICBsZXQgbWF0Y2ggPSByZWdleC5leGVjKHN0cmluZyk7XG4gIHdoaWxlIChtYXRjaCkge1xuICAgIGNvbnN0IGFsbG1hdGNoZXMgPSBbXTtcbiAgICBhbGxtYXRjaGVzLnN0YXJ0SW5kZXggPSByZWdleC5sYXN0SW5kZXggLSBtYXRjaFswXS5sZW5ndGg7XG4gICAgY29uc3QgbGVuID0gbWF0Y2gubGVuZ3RoO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsZW47IGluZGV4KyspIHtcbiAgICAgIGFsbG1hdGNoZXMucHVzaChtYXRjaFtpbmRleF0pO1xuICAgIH1cbiAgICBtYXRjaGVzLnB1c2goYWxsbWF0Y2hlcyk7XG4gICAgbWF0Y2ggPSByZWdleC5leGVjKHN0cmluZyk7XG4gIH1cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG5cbmV4cG9ydCBjb25zdCBpc05hbWUgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgY29uc3QgbWF0Y2ggPSByZWdleE5hbWUuZXhlYyhzdHJpbmcpO1xuICByZXR1cm4gIShtYXRjaCA9PT0gbnVsbCB8fCB0eXBlb2YgbWF0Y2ggPT09ICd1bmRlZmluZWQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRXhpc3Qodikge1xuICByZXR1cm4gdHlwZW9mIHYgIT09ICd1bmRlZmluZWQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eU9iamVjdChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuXG4vKipcbiAqIENvcHkgYWxsIHRoZSBwcm9wZXJ0aWVzIG9mIGEgaW50byBiLlxuICogQHBhcmFtIHsqfSB0YXJnZXRcbiAqIEBwYXJhbSB7Kn0gYVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCBhLCBhcnJheU1vZGUpIHtcbiAgaWYgKGEpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYSk7IC8vIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIG93biBwcm9wZXJ0aWVzXG4gICAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7IC8vZG9uJ3QgbWFrZSBpdCBpbmxpbmVcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoYXJyYXlNb2RlID09PSAnc3RyaWN0Jykge1xuICAgICAgICB0YXJnZXRba2V5c1tpXV0gPSBbIGFba2V5c1tpXV0gXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtrZXlzW2ldXSA9IGFba2V5c1tpXV07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4vKiBleHBvcnRzLm1lcmdlID1mdW5jdGlvbiAoYixhKXtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYixhKTtcbn0gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlKHYpIHtcbiAgaWYgKGV4cG9ydHMuaXNFeGlzdCh2KSkge1xuICAgIHJldHVybiB2O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG4vLyBjb25zdCBmYWtlQ2FsbCA9IGZ1bmN0aW9uKGEpIHtyZXR1cm4gYTt9O1xuLy8gY29uc3QgZmFrZUNhbGxOb1JldHVybiA9IGZ1bmN0aW9uKCkge307IiwiJ3VzZSBzdHJpY3QnO1xuXG5sZXQgTUVUQURBVEFfU1lNQk9MO1xuXG5pZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gIE1FVEFEQVRBX1NZTUJPTCA9IFwiQEB4bWxNZXRhZGF0YVwiO1xufSBlbHNlIHtcbiAgTUVUQURBVEFfU1lNQk9MID0gU3ltYm9sKFwiWE1MIE5vZGUgTWV0YWRhdGFcIik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhtbE5vZGV7XG4gIGNvbnN0cnVjdG9yKHRhZ25hbWUpIHtcbiAgICB0aGlzLnRhZ25hbWUgPSB0YWduYW1lO1xuICAgIHRoaXMuY2hpbGQgPSBbXTsgLy9uZXN0ZWQgdGFncywgdGV4dCwgY2RhdGEsIGNvbW1lbnRzIGluIG9yZGVyXG4gICAgdGhpc1tcIjpAXCJdID0ge307IC8vYXR0cmlidXRlcyBtYXBcbiAgfVxuICBhZGQoa2V5LHZhbCl7XG4gICAgLy8gdGhpcy5jaGlsZC5wdXNoKCB7bmFtZSA6IGtleSwgdmFsOiB2YWwsIGlzQ2RhdGE6IGlzQ2RhdGEgfSk7XG4gICAgaWYoa2V5ID09PSBcIl9fcHJvdG9fX1wiKSBrZXkgPSBcIiNfX3Byb3RvX19cIjtcbiAgICB0aGlzLmNoaWxkLnB1c2goIHtba2V5XTogdmFsIH0pO1xuICB9XG4gIGFkZENoaWxkKG5vZGUsIHN0YXJ0SW5kZXgpIHtcbiAgICBpZihub2RlLnRhZ25hbWUgPT09IFwiX19wcm90b19fXCIpIG5vZGUudGFnbmFtZSA9IFwiI19fcHJvdG9fX1wiO1xuICAgIGlmKG5vZGVbXCI6QFwiXSAmJiBPYmplY3Qua2V5cyhub2RlW1wiOkBcIl0pLmxlbmd0aCA+IDApe1xuICAgICAgdGhpcy5jaGlsZC5wdXNoKCB7IFtub2RlLnRhZ25hbWVdOiBub2RlLmNoaWxkLCBbXCI6QFwiXTogbm9kZVtcIjpAXCJdIH0pO1xuICAgIH1lbHNle1xuICAgICAgdGhpcy5jaGlsZC5wdXNoKCB7IFtub2RlLnRhZ25hbWVdOiBub2RlLmNoaWxkIH0pO1xuICAgIH1cbiAgICAvLyBpZiByZXF1ZXN0ZWQsIGFkZCB0aGUgc3RhcnRJbmRleFxuICAgIGlmIChzdGFydEluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIE5vdGU6IGZvciBub3cgd2UganVzdCBvdmVyd3JpdGUgdGhlIG1ldGFkYXRhLiBJZiB3ZSBoYWQgbW9yZSBjb21wbGV4IG1ldGFkYXRhLFxuICAgICAgLy8gd2UgbWlnaHQgbmVlZCB0byBkbyBhbiBvYmplY3QgYXBwZW5kIGhlcmU6ICBtZXRhZGF0YSA9IHsgLi4ubWV0YWRhdGEsIHN0YXJ0SW5kZXggfVxuICAgICAgdGhpcy5jaGlsZFt0aGlzLmNoaWxkLmxlbmd0aCAtIDFdW01FVEFEQVRBX1NZTUJPTF0gPSB7IHN0YXJ0SW5kZXggfTtcbiAgICB9XG4gIH1cbiAgLyoqIHN5bWJvbCB1c2VkIGZvciBtZXRhZGF0YSAqL1xuICBzdGF0aWMgZ2V0TWV0YURhdGFTeW1ib2woKSB7XG4gICAgcmV0dXJuIE1FVEFEQVRBX1NZTUJPTDtcbiAgfVxufVxuIiwiaW1wb3J0IHtpc05hbWV9IGZyb20gJy4uL3V0aWwuanMnO1xuXG4vL1RPRE86IGhhbmRsZSBjb21tZW50c1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVhZERvY1R5cGUoeG1sRGF0YSwgaSl7XG4gICAgXG4gICAgY29uc3QgZW50aXRpZXMgPSB7fTtcbiAgICBpZiggeG1sRGF0YVtpICsgM10gPT09ICdPJyAmJlxuICAgICAgICAgeG1sRGF0YVtpICsgNF0gPT09ICdDJyAmJlxuICAgICAgICAgeG1sRGF0YVtpICsgNV0gPT09ICdUJyAmJlxuICAgICAgICAgeG1sRGF0YVtpICsgNl0gPT09ICdZJyAmJlxuICAgICAgICAgeG1sRGF0YVtpICsgN10gPT09ICdQJyAmJlxuICAgICAgICAgeG1sRGF0YVtpICsgOF0gPT09ICdFJylcbiAgICB7ICAgIFxuICAgICAgICBpID0gaSs5O1xuICAgICAgICBsZXQgYW5nbGVCcmFja2V0c0NvdW50ID0gMTtcbiAgICAgICAgbGV0IGhhc0JvZHkgPSBmYWxzZSwgY29tbWVudCA9IGZhbHNlO1xuICAgICAgICBsZXQgZXhwID0gXCJcIjtcbiAgICAgICAgZm9yKDtpPHhtbERhdGEubGVuZ3RoO2krKyl7XG4gICAgICAgICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJzwnICYmICFjb21tZW50KSB7IC8vRGV0ZXJtaW5lIHRoZSB0YWcgdHlwZVxuICAgICAgICAgICAgICAgIGlmKCBoYXNCb2R5ICYmIGhhc1NlcSh4bWxEYXRhLCBcIiFFTlRJVFlcIixpKSl7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gNzsgXG4gICAgICAgICAgICAgICAgICAgIGxldCBlbnRpdHlOYW1lLCB2YWw7XG4gICAgICAgICAgICAgICAgICAgIFtlbnRpdHlOYW1lLCB2YWwsaV0gPSByZWFkRW50aXR5RXhwKHhtbERhdGEsaSsxKTtcbiAgICAgICAgICAgICAgICAgICAgaWYodmFsLmluZGV4T2YoXCImXCIpID09PSAtMSkgLy9QYXJhbWV0ZXIgZW50aXRpZXMgYXJlIG5vdCBzdXBwb3J0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0aWVzWyBlbnRpdHlOYW1lIF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVneCA6IFJlZ0V4cCggYCYke2VudGl0eU5hbWV9O2AsXCJnXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbDogdmFsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKCBoYXNCb2R5ICYmIGhhc1NlcSh4bWxEYXRhLCBcIiFFTEVNRU5UXCIsaSkpICB7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gODsvL05vdCBzdXBwb3J0ZWRcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qge2luZGV4fSA9IHJlYWRFbGVtZW50RXhwKHhtbERhdGEsaSsxKTtcbiAgICAgICAgICAgICAgICAgICAgaSA9IGluZGV4O1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmKCBoYXNCb2R5ICYmIGhhc1NlcSh4bWxEYXRhLCBcIiFBVFRMSVNUXCIsaSkpe1xuICAgICAgICAgICAgICAgICAgICBpICs9IDg7Ly9Ob3Qgc3VwcG9ydGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IHtpbmRleH0gPSByZWFkQXR0bGlzdEV4cCh4bWxEYXRhLGkrMSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGkgPSBpbmRleDtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZiggaGFzQm9keSAmJiBoYXNTZXEoeG1sRGF0YSwgXCIhTk9UQVRJT05cIixpKSkge1xuICAgICAgICAgICAgICAgICAgICBpICs9IDk7Ly9Ob3Qgc3VwcG9ydGVkXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHtpbmRleH0gPSByZWFkTm90YXRpb25FeHAoeG1sRGF0YSxpKzEpO1xuICAgICAgICAgICAgICAgICAgICBpID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYoIGhhc1NlcSh4bWxEYXRhLCBcIiEtLVwiLGkpICkgY29tbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgRE9DVFlQRWApO1xuXG4gICAgICAgICAgICAgICAgYW5nbGVCcmFja2V0c0NvdW50Kys7XG4gICAgICAgICAgICAgICAgZXhwID0gXCJcIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeG1sRGF0YVtpXSA9PT0gJz4nKSB7IC8vUmVhZCB0YWcgY29udGVudFxuICAgICAgICAgICAgICAgIGlmKGNvbW1lbnQpe1xuICAgICAgICAgICAgICAgICAgICBpZiggeG1sRGF0YVtpIC0gMV0gPT09IFwiLVwiICYmIHhtbERhdGFbaSAtIDJdID09PSBcIi1cIil7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmdsZUJyYWNrZXRzQ291bnQtLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICBhbmdsZUJyYWNrZXRzQ291bnQtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFuZ2xlQnJhY2tldHNDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWVsc2UgaWYoIHhtbERhdGFbaV0gPT09ICdbJyl7XG4gICAgICAgICAgICAgICAgaGFzQm9keSA9IHRydWU7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBleHAgKz0geG1sRGF0YVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZihhbmdsZUJyYWNrZXRzQ291bnQgIT09IDApe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmNsb3NlZCBET0NUWVBFYCk7XG4gICAgICAgIH1cbiAgICB9ZWxzZXtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIFRhZyBpbnN0ZWFkIG9mIERPQ1RZUEVgKTtcbiAgICB9XG4gICAgcmV0dXJuIHtlbnRpdGllcywgaX07XG59XG5cbmNvbnN0IHNraXBXaGl0ZXNwYWNlID0gKGRhdGEsIGluZGV4KSA9PiB7XG4gICAgd2hpbGUgKGluZGV4IDwgZGF0YS5sZW5ndGggJiYgL1xccy8udGVzdChkYXRhW2luZGV4XSkpIHtcbiAgICAgICAgaW5kZXgrKztcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xufTtcblxuZnVuY3Rpb24gcmVhZEVudGl0eUV4cCh4bWxEYXRhLCBpKSB7ICAgIFxuICAgIC8vRXh0ZXJuYWwgZW50aXRpZXMgYXJlIG5vdCBzdXBwb3J0ZWRcbiAgICAvLyAgICA8IUVOVElUWSBleHQgU1lTVEVNIFwiaHR0cDovL25vcm1hbC13ZWJzaXRlLmNvbVwiID5cblxuICAgIC8vUGFyYW1ldGVyIGVudGl0aWVzIGFyZSBub3Qgc3VwcG9ydGVkXG4gICAgLy8gICAgPCFFTlRJVFkgZW50aXR5bmFtZSBcIiZhbm90aGVyRWxlbWVudDtcIj5cblxuICAgIC8vSW50ZXJuYWwgZW50aXRpZXMgYXJlIHN1cHBvcnRlZFxuICAgIC8vICAgIDwhRU5USVRZIGVudGl0eW5hbWUgXCJyZXBsYWNlbWVudCB0ZXh0XCI+XG5cbiAgICAvLyBTa2lwIGxlYWRpbmcgd2hpdGVzcGFjZSBhZnRlciA8IUVOVElUWVxuICAgIGkgPSBza2lwV2hpdGVzcGFjZSh4bWxEYXRhLCBpKTtcblxuICAgIC8vIFJlYWQgZW50aXR5IG5hbWVcbiAgICBsZXQgZW50aXR5TmFtZSA9IFwiXCI7XG4gICAgd2hpbGUgKGkgPCB4bWxEYXRhLmxlbmd0aCAmJiAhL1xccy8udGVzdCh4bWxEYXRhW2ldKSAmJiB4bWxEYXRhW2ldICE9PSAnXCInICYmIHhtbERhdGFbaV0gIT09IFwiJ1wiKSB7XG4gICAgICAgIGVudGl0eU5hbWUgKz0geG1sRGF0YVtpXTtcbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICB2YWxpZGF0ZUVudGl0eU5hbWUoZW50aXR5TmFtZSk7XG5cbiAgICAvLyBTa2lwIHdoaXRlc3BhY2UgYWZ0ZXIgZW50aXR5IG5hbWVcbiAgICBpID0gc2tpcFdoaXRlc3BhY2UoeG1sRGF0YSwgaSk7XG5cbiAgICAvLyBDaGVjayBmb3IgdW5zdXBwb3J0ZWQgY29uc3RydWN0cyAoZXh0ZXJuYWwgZW50aXRpZXMgb3IgcGFyYW1ldGVyIGVudGl0aWVzKVxuICAgIGlmICh4bWxEYXRhLnN1YnN0cmluZyhpLCBpICsgNikudG9VcHBlckNhc2UoKSA9PT0gXCJTWVNURU1cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHRlcm5hbCBlbnRpdGllcyBhcmUgbm90IHN1cHBvcnRlZFwiKTtcbiAgICB9ZWxzZSBpZiAoeG1sRGF0YVtpXSA9PT0gXCIlXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGFyYW1ldGVyIGVudGl0aWVzIGFyZSBub3Qgc3VwcG9ydGVkXCIpO1xuICAgIH1cblxuICAgIC8vIFJlYWQgZW50aXR5IHZhbHVlIChpbnRlcm5hbCBlbnRpdHkpXG4gICAgbGV0IGVudGl0eVZhbHVlID0gXCJcIjtcbiAgICBbaSwgZW50aXR5VmFsdWVdID0gcmVhZElkZW50aWZpZXJWYWwoeG1sRGF0YSwgaSwgXCJlbnRpdHlcIik7XG4gICAgaS0tO1xuICAgIHJldHVybiBbZW50aXR5TmFtZSwgZW50aXR5VmFsdWUsIGkgXTtcbn1cblxuZnVuY3Rpb24gcmVhZE5vdGF0aW9uRXhwKHhtbERhdGEsIGkpIHtcbiAgICAvLyBTa2lwIGxlYWRpbmcgd2hpdGVzcGFjZSBhZnRlciA8IU5PVEFUSU9OXG4gICAgaSA9IHNraXBXaGl0ZXNwYWNlKHhtbERhdGEsIGkpO1xuXG4gICAgLy8gUmVhZCBub3RhdGlvbiBuYW1lXG4gICAgbGV0IG5vdGF0aW9uTmFtZSA9IFwiXCI7XG4gICAgd2hpbGUgKGkgPCB4bWxEYXRhLmxlbmd0aCAmJiAhL1xccy8udGVzdCh4bWxEYXRhW2ldKSkge1xuICAgICAgICBub3RhdGlvbk5hbWUgKz0geG1sRGF0YVtpXTtcbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICB2YWxpZGF0ZUVudGl0eU5hbWUobm90YXRpb25OYW1lKTtcblxuICAgIC8vIFNraXAgd2hpdGVzcGFjZSBhZnRlciBub3RhdGlvbiBuYW1lXG4gICAgaSA9IHNraXBXaGl0ZXNwYWNlKHhtbERhdGEsIGkpO1xuXG4gICAgLy8gQ2hlY2sgaWRlbnRpZmllciB0eXBlIChTWVNURU0gb3IgUFVCTElDKVxuICAgIGNvbnN0IGlkZW50aWZpZXJUeXBlID0geG1sRGF0YS5zdWJzdHJpbmcoaSwgaSArIDYpLnRvVXBwZXJDYXNlKCk7XG4gICAgaWYgKGlkZW50aWZpZXJUeXBlICE9PSBcIlNZU1RFTVwiICYmIGlkZW50aWZpZXJUeXBlICE9PSBcIlBVQkxJQ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgU1lTVEVNIG9yIFBVQkxJQywgZm91bmQgXCIke2lkZW50aWZpZXJUeXBlfVwiYCk7XG4gICAgfVxuICAgIGkgKz0gaWRlbnRpZmllclR5cGUubGVuZ3RoO1xuXG4gICAgLy8gU2tpcCB3aGl0ZXNwYWNlIGFmdGVyIGlkZW50aWZpZXIgdHlwZVxuICAgIGkgPSBza2lwV2hpdGVzcGFjZSh4bWxEYXRhLCBpKTtcblxuICAgIC8vIFJlYWQgcHVibGljIGlkZW50aWZpZXIgKGlmIFBVQkxJQylcbiAgICBsZXQgcHVibGljSWRlbnRpZmllciA9IG51bGw7XG4gICAgbGV0IHN5c3RlbUlkZW50aWZpZXIgPSBudWxsO1xuXG4gICAgaWYgKGlkZW50aWZpZXJUeXBlID09PSBcIlBVQkxJQ1wiKSB7XG4gICAgICAgIFtpLCBwdWJsaWNJZGVudGlmaWVyIF0gPSByZWFkSWRlbnRpZmllclZhbCh4bWxEYXRhLCBpLCBcInB1YmxpY0lkZW50aWZpZXJcIik7XG5cbiAgICAgICAgLy8gU2tpcCB3aGl0ZXNwYWNlIGFmdGVyIHB1YmxpYyBpZGVudGlmaWVyXG4gICAgICAgIGkgPSBza2lwV2hpdGVzcGFjZSh4bWxEYXRhLCBpKTtcblxuICAgICAgICAvLyBPcHRpb25hbGx5IHJlYWQgc3lzdGVtIGlkZW50aWZpZXJcbiAgICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICdcIicgfHwgeG1sRGF0YVtpXSA9PT0gXCInXCIpIHtcbiAgICAgICAgICAgIFtpLCBzeXN0ZW1JZGVudGlmaWVyIF0gPSByZWFkSWRlbnRpZmllclZhbCh4bWxEYXRhLCBpLFwic3lzdGVtSWRlbnRpZmllclwiKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaWRlbnRpZmllclR5cGUgPT09IFwiU1lTVEVNXCIpIHtcbiAgICAgICAgLy8gUmVhZCBzeXN0ZW0gaWRlbnRpZmllciAobWFuZGF0b3J5IGZvciBTWVNURU0pXG4gICAgICAgIFtpLCBzeXN0ZW1JZGVudGlmaWVyIF0gPSByZWFkSWRlbnRpZmllclZhbCh4bWxEYXRhLCBpLCBcInN5c3RlbUlkZW50aWZpZXJcIik7XG5cbiAgICAgICAgaWYgKCFzeXN0ZW1JZGVudGlmaWVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIG1hbmRhdG9yeSBzeXN0ZW0gaWRlbnRpZmllciBmb3IgU1lTVEVNIG5vdGF0aW9uXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB7bm90YXRpb25OYW1lLCBwdWJsaWNJZGVudGlmaWVyLCBzeXN0ZW1JZGVudGlmaWVyLCBpbmRleDogLS1pfTtcbn1cblxuZnVuY3Rpb24gcmVhZElkZW50aWZpZXJWYWwoeG1sRGF0YSwgaSwgdHlwZSkge1xuICAgIGxldCBpZGVudGlmaWVyVmFsID0gXCJcIjtcbiAgICBjb25zdCBzdGFydENoYXIgPSB4bWxEYXRhW2ldO1xuICAgIGlmIChzdGFydENoYXIgIT09ICdcIicgJiYgc3RhcnRDaGFyICE9PSBcIidcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIHF1b3RlZCBzdHJpbmcsIGZvdW5kIFwiJHtzdGFydENoYXJ9XCJgKTtcbiAgICB9XG4gICAgaSsrO1xuXG4gICAgd2hpbGUgKGkgPCB4bWxEYXRhLmxlbmd0aCAmJiB4bWxEYXRhW2ldICE9PSBzdGFydENoYXIpIHtcbiAgICAgICAgaWRlbnRpZmllclZhbCArPSB4bWxEYXRhW2ldO1xuICAgICAgICBpKys7XG4gICAgfVxuXG4gICAgaWYgKHhtbERhdGFbaV0gIT09IHN0YXJ0Q2hhcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVudGVybWluYXRlZCAke3R5cGV9IHZhbHVlYCk7XG4gICAgfVxuICAgIGkrKztcbiAgICByZXR1cm4gW2ksIGlkZW50aWZpZXJWYWxdO1xufVxuXG5mdW5jdGlvbiByZWFkRWxlbWVudEV4cCh4bWxEYXRhLCBpKSB7XG4gICAgLy8gPCFFTEVNRU5UIGJyIEVNUFRZPlxuICAgIC8vIDwhRUxFTUVOVCBkaXYgQU5ZPlxuICAgIC8vIDwhRUxFTUVOVCB0aXRsZSAoI1BDREFUQSk+XG4gICAgLy8gPCFFTEVNRU5UIGJvb2sgKHRpdGxlLCBhdXRob3IrKT5cbiAgICAvLyA8IUVMRU1FTlQgbmFtZSAoY29udGVudC1tb2RlbCk+XG4gICAgXG4gICAgLy8gU2tpcCBsZWFkaW5nIHdoaXRlc3BhY2UgYWZ0ZXIgPCFFTEVNRU5UXG4gICAgaSA9IHNraXBXaGl0ZXNwYWNlKHhtbERhdGEsIGkpO1xuXG4gICAgLy8gUmVhZCBlbGVtZW50IG5hbWVcbiAgICBsZXQgZWxlbWVudE5hbWUgPSBcIlwiO1xuICAgIHdoaWxlIChpIDwgeG1sRGF0YS5sZW5ndGggJiYgIS9cXHMvLnRlc3QoeG1sRGF0YVtpXSkpIHtcbiAgICAgICAgZWxlbWVudE5hbWUgKz0geG1sRGF0YVtpXTtcbiAgICAgICAgaSsrO1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIGVsZW1lbnQgbmFtZVxuICAgIGlmICghdmFsaWRhdGVFbnRpdHlOYW1lKGVsZW1lbnROYW1lKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZWxlbWVudCBuYW1lOiBcIiR7ZWxlbWVudE5hbWV9XCJgKTtcbiAgICB9XG5cbiAgICAvLyBTa2lwIHdoaXRlc3BhY2UgYWZ0ZXIgZWxlbWVudCBuYW1lXG4gICAgaSA9IHNraXBXaGl0ZXNwYWNlKHhtbERhdGEsIGkpO1xuICAgIGxldCBjb250ZW50TW9kZWwgPSBcIlwiO1xuICAgIC8vIEV4cGVjdCAnKCcgdG8gc3RhcnQgY29udGVudCBtb2RlbFxuICAgIGlmKHhtbERhdGFbaV0gPT09IFwiRVwiICYmIGhhc1NlcSh4bWxEYXRhLCBcIk1QVFlcIixpKSkgaSs9NDtcbiAgICBlbHNlIGlmKHhtbERhdGFbaV0gPT09IFwiQVwiICYmIGhhc1NlcSh4bWxEYXRhLCBcIk5ZXCIsaSkpIGkrPTI7XG4gICAgZWxzZSBpZiAoeG1sRGF0YVtpXSA9PT0gXCIoXCIpIHtcbiAgICAgICAgaSsrOyAvLyBNb3ZlIHBhc3QgJygnXG5cbiAgICAgICAgLy8gUmVhZCBjb250ZW50IG1vZGVsXG4gICAgICAgIHdoaWxlIChpIDwgeG1sRGF0YS5sZW5ndGggJiYgeG1sRGF0YVtpXSAhPT0gXCIpXCIpIHtcbiAgICAgICAgICAgIGNvbnRlbnRNb2RlbCArPSB4bWxEYXRhW2ldO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh4bWxEYXRhW2ldICE9PSBcIilcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW50ZXJtaW5hdGVkIGNvbnRlbnQgbW9kZWxcIik7XG4gICAgICAgIH1cblxuICAgIH1lbHNle1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgRWxlbWVudCBFeHByZXNzaW9uLCBmb3VuZCBcIiR7eG1sRGF0YVtpXX1cImApO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgICBlbGVtZW50TmFtZSxcbiAgICAgICAgY29udGVudE1vZGVsOiBjb250ZW50TW9kZWwudHJpbSgpLFxuICAgICAgICBpbmRleDogaVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHJlYWRBdHRsaXN0RXhwKHhtbERhdGEsIGkpIHtcbiAgICAvLyBTa2lwIGxlYWRpbmcgd2hpdGVzcGFjZSBhZnRlciA8IUFUVExJU1RcbiAgICBpID0gc2tpcFdoaXRlc3BhY2UoeG1sRGF0YSwgaSk7XG5cbiAgICAvLyBSZWFkIGVsZW1lbnQgbmFtZVxuICAgIGxldCBlbGVtZW50TmFtZSA9IFwiXCI7XG4gICAgd2hpbGUgKGkgPCB4bWxEYXRhLmxlbmd0aCAmJiAhL1xccy8udGVzdCh4bWxEYXRhW2ldKSkge1xuICAgICAgICBlbGVtZW50TmFtZSArPSB4bWxEYXRhW2ldO1xuICAgICAgICBpKys7XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgZWxlbWVudCBuYW1lXG4gICAgdmFsaWRhdGVFbnRpdHlOYW1lKGVsZW1lbnROYW1lKVxuXG4gICAgLy8gU2tpcCB3aGl0ZXNwYWNlIGFmdGVyIGVsZW1lbnQgbmFtZVxuICAgIGkgPSBza2lwV2hpdGVzcGFjZSh4bWxEYXRhLCBpKTtcblxuICAgIC8vIFJlYWQgYXR0cmlidXRlIG5hbWVcbiAgICBsZXQgYXR0cmlidXRlTmFtZSA9IFwiXCI7XG4gICAgd2hpbGUgKGkgPCB4bWxEYXRhLmxlbmd0aCAmJiAhL1xccy8udGVzdCh4bWxEYXRhW2ldKSkge1xuICAgICAgICBhdHRyaWJ1dGVOYW1lICs9IHhtbERhdGFbaV07XG4gICAgICAgIGkrKztcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSBhdHRyaWJ1dGUgbmFtZVxuICAgIGlmICghdmFsaWRhdGVFbnRpdHlOYW1lKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhdHRyaWJ1dGUgbmFtZTogXCIke2F0dHJpYnV0ZU5hbWV9XCJgKTtcbiAgICB9XG5cbiAgICAvLyBTa2lwIHdoaXRlc3BhY2UgYWZ0ZXIgYXR0cmlidXRlIG5hbWVcbiAgICBpID0gc2tpcFdoaXRlc3BhY2UoeG1sRGF0YSwgaSk7XG5cbiAgICAvLyBSZWFkIGF0dHJpYnV0ZSB0eXBlXG4gICAgbGV0IGF0dHJpYnV0ZVR5cGUgPSBcIlwiO1xuICAgIGlmICh4bWxEYXRhLnN1YnN0cmluZyhpLCBpICsgOCkudG9VcHBlckNhc2UoKSA9PT0gXCJOT1RBVElPTlwiKSB7XG4gICAgICAgIGF0dHJpYnV0ZVR5cGUgPSBcIk5PVEFUSU9OXCI7XG4gICAgICAgIGkgKz0gODsgLy8gTW92ZSBwYXN0IFwiTk9UQVRJT05cIlxuXG4gICAgICAgIC8vIFNraXAgd2hpdGVzcGFjZSBhZnRlciBcIk5PVEFUSU9OXCJcbiAgICAgICAgaSA9IHNraXBXaGl0ZXNwYWNlKHhtbERhdGEsIGkpO1xuXG4gICAgICAgIC8vIEV4cGVjdCAnKCcgdG8gc3RhcnQgdGhlIGxpc3Qgb2Ygbm90YXRpb25zXG4gICAgICAgIGlmICh4bWxEYXRhW2ldICE9PSBcIihcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCAnKCcsIGZvdW5kIFwiJHt4bWxEYXRhW2ldfVwiYCk7XG4gICAgICAgIH1cbiAgICAgICAgaSsrOyAvLyBNb3ZlIHBhc3QgJygnXG5cbiAgICAgICAgLy8gUmVhZCB0aGUgbGlzdCBvZiBhbGxvd2VkIG5vdGF0aW9uc1xuICAgICAgICBsZXQgYWxsb3dlZE5vdGF0aW9ucyA9IFtdO1xuICAgICAgICB3aGlsZSAoaSA8IHhtbERhdGEubGVuZ3RoICYmIHhtbERhdGFbaV0gIT09IFwiKVwiKSB7XG4gICAgICAgICAgICBsZXQgbm90YXRpb24gPSBcIlwiO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCB4bWxEYXRhLmxlbmd0aCAmJiB4bWxEYXRhW2ldICE9PSBcInxcIiAmJiB4bWxEYXRhW2ldICE9PSBcIilcIikge1xuICAgICAgICAgICAgICAgIG5vdGF0aW9uICs9IHhtbERhdGFbaV07XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBWYWxpZGF0ZSBub3RhdGlvbiBuYW1lXG4gICAgICAgICAgICBub3RhdGlvbiA9IG5vdGF0aW9uLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICghdmFsaWRhdGVFbnRpdHlOYW1lKG5vdGF0aW9uKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBub3RhdGlvbiBuYW1lOiBcIiR7bm90YXRpb259XCJgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWxsb3dlZE5vdGF0aW9ucy5wdXNoKG5vdGF0aW9uKTtcblxuICAgICAgICAgICAgLy8gU2tpcCAnfCcgc2VwYXJhdG9yIG9yIGV4aXQgbG9vcFxuICAgICAgICAgICAgaWYgKHhtbERhdGFbaV0gPT09IFwifFwiKSB7XG4gICAgICAgICAgICAgICAgaSsrOyAvLyBNb3ZlIHBhc3QgJ3wnXG4gICAgICAgICAgICAgICAgaSA9IHNraXBXaGl0ZXNwYWNlKHhtbERhdGEsIGkpOyAvLyBTa2lwIG9wdGlvbmFsIHdoaXRlc3BhY2UgYWZ0ZXIgJ3wnXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeG1sRGF0YVtpXSAhPT0gXCIpXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVudGVybWluYXRlZCBsaXN0IG9mIG5vdGF0aW9uc1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpKys7IC8vIE1vdmUgcGFzdCAnKSdcblxuICAgICAgICAvLyBTdG9yZSB0aGUgYWxsb3dlZCBub3RhdGlvbnMgYXMgcGFydCBvZiB0aGUgYXR0cmlidXRlIHR5cGVcbiAgICAgICAgYXR0cmlidXRlVHlwZSArPSBcIiAoXCIgKyBhbGxvd2VkTm90YXRpb25zLmpvaW4oXCJ8XCIpICsgXCIpXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSGFuZGxlIHNpbXBsZSB0eXBlcyAoZS5nLiwgQ0RBVEEsIElELCBJRFJFRiwgZXRjLilcbiAgICAgICAgd2hpbGUgKGkgPCB4bWxEYXRhLmxlbmd0aCAmJiAhL1xccy8udGVzdCh4bWxEYXRhW2ldKSkge1xuICAgICAgICAgICAgYXR0cmlidXRlVHlwZSArPSB4bWxEYXRhW2ldO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVmFsaWRhdGUgc2ltcGxlIGF0dHJpYnV0ZSB0eXBlXG4gICAgICAgIGNvbnN0IHZhbGlkVHlwZXMgPSBbXCJDREFUQVwiLCBcIklEXCIsIFwiSURSRUZcIiwgXCJJRFJFRlNcIiwgXCJFTlRJVFlcIiwgXCJFTlRJVElFU1wiLCBcIk5NVE9LRU5cIiwgXCJOTVRPS0VOU1wiXTtcbiAgICAgICAgaWYgKCF2YWxpZFR5cGVzLmluY2x1ZGVzKGF0dHJpYnV0ZVR5cGUudG9VcHBlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhdHRyaWJ1dGUgdHlwZTogXCIke2F0dHJpYnV0ZVR5cGV9XCJgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNraXAgd2hpdGVzcGFjZSBhZnRlciBhdHRyaWJ1dGUgdHlwZVxuICAgIGkgPSBza2lwV2hpdGVzcGFjZSh4bWxEYXRhLCBpKTtcblxuICAgIC8vIFJlYWQgZGVmYXVsdCB2YWx1ZVxuICAgIGxldCBkZWZhdWx0VmFsdWUgPSBcIlwiO1xuICAgIGlmICh4bWxEYXRhLnN1YnN0cmluZyhpLCBpICsgOCkudG9VcHBlckNhc2UoKSA9PT0gXCIjUkVRVUlSRURcIikge1xuICAgICAgICBkZWZhdWx0VmFsdWUgPSBcIiNSRVFVSVJFRFwiO1xuICAgICAgICBpICs9IDg7XG4gICAgfSBlbHNlIGlmICh4bWxEYXRhLnN1YnN0cmluZyhpLCBpICsgNykudG9VcHBlckNhc2UoKSA9PT0gXCIjSU1QTElFRFwiKSB7XG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IFwiI0lNUExJRURcIjtcbiAgICAgICAgaSArPSA3O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIFtpLCBkZWZhdWx0VmFsdWVdID0gcmVhZElkZW50aWZpZXJWYWwoeG1sRGF0YSwgaSwgXCJBVFRMSVNUXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGVsZW1lbnROYW1lLFxuICAgICAgICBhdHRyaWJ1dGVOYW1lLFxuICAgICAgICBhdHRyaWJ1dGVUeXBlLFxuICAgICAgICBkZWZhdWx0VmFsdWUsXG4gICAgICAgIGluZGV4OiBpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYXNTZXEoZGF0YSwgc2VxLGkpe1xuICAgIGZvcihsZXQgaj0wO2o8c2VxLmxlbmd0aDtqKyspe1xuICAgICAgICBpZihzZXFbal0hPT1kYXRhW2kraisxXSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVFbnRpdHlOYW1lKG5hbWUpe1xuICAgIGlmIChpc05hbWUobmFtZSkpXG5cdHJldHVybiBuYW1lO1xuICAgIGVsc2VcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGVudGl0eSBuYW1lICR7bmFtZX1gKTtcbn1cbiIsImNvbnN0IGhleFJlZ2V4ID0gL15bLStdPzB4W2EtZkEtRjAtOV0rJC87XG5jb25zdCBudW1SZWdleCA9IC9eKFtcXC1cXCtdKT8oMCopKFswLTldKihcXC5bMC05XSopPykkLztcbi8vIGNvbnN0IG9jdFJlZ2V4ID0gL14weFthLXowLTldKy87XG4vLyBjb25zdCBiaW5SZWdleCA9IC8weFthLXowLTldKy87XG5cbiBcbmNvbnN0IGNvbnNpZGVyID0ge1xuICAgIGhleCA6ICB0cnVlLFxuICAgIC8vIG9jdDogZmFsc2UsXG4gICAgbGVhZGluZ1plcm9zOiB0cnVlLFxuICAgIGRlY2ltYWxQb2ludDogXCJcXC5cIixcbiAgICBlTm90YXRpb246IHRydWUsXG4gICAgLy9za2lwTGlrZTogL3JlZ2V4L1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9OdW1iZXIoc3RyLCBvcHRpb25zID0ge30pe1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBjb25zaWRlciwgb3B0aW9ucyApO1xuICAgIGlmKCFzdHIgfHwgdHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIiApIHJldHVybiBzdHI7XG4gICAgXG4gICAgbGV0IHRyaW1tZWRTdHIgID0gc3RyLnRyaW0oKTtcbiAgICBcbiAgICBpZihvcHRpb25zLnNraXBMaWtlICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5za2lwTGlrZS50ZXN0KHRyaW1tZWRTdHIpKSByZXR1cm4gc3RyO1xuICAgIGVsc2UgaWYoc3RyPT09XCIwXCIpIHJldHVybiAwO1xuICAgIGVsc2UgaWYgKG9wdGlvbnMuaGV4ICYmIGhleFJlZ2V4LnRlc3QodHJpbW1lZFN0cikpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlX2ludCh0cmltbWVkU3RyLCAxNik7XG4gICAgLy8gfWVsc2UgaWYgKG9wdGlvbnMub2N0ICYmIG9jdFJlZ2V4LnRlc3Qoc3RyKSkge1xuICAgIC8vICAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KHZhbCwgOCk7XG4gICAgfWVsc2UgaWYgKHRyaW1tZWRTdHIuc2VhcmNoKC8uK1tlRV0uKy8pIT09IC0xKSB7IC8vZU5vdGF0aW9uXG4gICAgICAgIHJldHVybiByZXNvbHZlRW5vdGF0aW9uKHN0cix0cmltbWVkU3RyLG9wdGlvbnMpO1xuICAgIC8vIH1lbHNlIGlmIChvcHRpb25zLnBhcnNlQmluICYmIGJpblJlZ2V4LnRlc3Qoc3RyKSkge1xuICAgIC8vICAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KHZhbCwgMik7XG4gICAgfWVsc2V7XG4gICAgICAgIC8vc2VwYXJhdGUgbmVnYXRpdmUgc2lnbiwgbGVhZGluZyB6ZXJvcywgYW5kIHJlc3QgbnVtYmVyXG4gICAgICAgIGNvbnN0IG1hdGNoID0gbnVtUmVnZXguZXhlYyh0cmltbWVkU3RyKTtcbiAgICAgICAgLy8gKzAwLjEyMyA9PiBbICwgJysnLCAnMDAnLCAnLjEyMycsIC4uXG4gICAgICAgIGlmKG1hdGNoKXtcbiAgICAgICAgICAgIGNvbnN0IHNpZ24gPSBtYXRjaFsxXSB8fCBcIlwiO1xuICAgICAgICAgICAgY29uc3QgbGVhZGluZ1plcm9zID0gbWF0Y2hbMl07XG4gICAgICAgICAgICBsZXQgbnVtVHJpbW1lZEJ5WmVyb3MgPSB0cmltWmVyb3MobWF0Y2hbM10pOyAvL2NvbXBsZXRlIG51bSB3aXRob3V0IGxlYWRpbmcgemVyb3NcbiAgICAgICAgICAgIGNvbnN0IGRlY2ltYWxBZGphY2VudFRvTGVhZGluZ1plcm9zID0gc2lnbiA/IC8vIDAuLCAtMDAuLCAwMDAuXG4gICAgICAgICAgICAgICAgc3RyW2xlYWRpbmdaZXJvcy5sZW5ndGgrMV0gPT09IFwiLlwiIFxuICAgICAgICAgICAgICAgIDogc3RyW2xlYWRpbmdaZXJvcy5sZW5ndGhdID09PSBcIi5cIjtcblxuICAgICAgICAgICAgLy90cmltIGVuZGluZyB6ZXJvcyBmb3IgZmxvYXRpbmcgbnVtYmVyXG4gICAgICAgICAgICBpZighb3B0aW9ucy5sZWFkaW5nWmVyb3MgLy9sZWFkaW5nIHplcm9zIGFyZSBub3QgYWxsb3dlZFxuICAgICAgICAgICAgICAgICYmIChsZWFkaW5nWmVyb3MubGVuZ3RoID4gMSBcbiAgICAgICAgICAgICAgICAgICAgfHwgKGxlYWRpbmdaZXJvcy5sZW5ndGggPT09IDEgJiYgIWRlY2ltYWxBZGphY2VudFRvTGVhZGluZ1plcm9zKSkpe1xuICAgICAgICAgICAgICAgIC8vIDAwLCAwMC4zLCArMDMuMjQsIDAzLCAwMy4yNFxuICAgICAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNley8vbm8gbGVhZGluZyB6ZXJvcyBvciBsZWFkaW5nIHplcm9zIGFyZSBhbGxvd2VkXG4gICAgICAgICAgICAgICAgY29uc3QgbnVtID0gTnVtYmVyKHRyaW1tZWRTdHIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFN0ciA9IFN0cmluZyhudW0pO1xuXG4gICAgICAgICAgICAgICAgaWYoIG51bSA9PT0gMCkgcmV0dXJuIG51bTtcbiAgICAgICAgICAgICAgICBpZihwYXJzZWRTdHIuc2VhcmNoKC9bZUVdLykgIT09IC0xKXsgLy9naXZlbiBudW1iZXIgaXMgbG9uZyBhbmQgcGFyc2VkIHRvIGVOb3RhdGlvblxuICAgICAgICAgICAgICAgICAgICBpZihvcHRpb25zLmVOb3RhdGlvbikgcmV0dXJuIG51bTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gc3RyO1xuICAgICAgICAgICAgICAgIH1lbHNlIGlmKHRyaW1tZWRTdHIuaW5kZXhPZihcIi5cIikgIT09IC0xKXsgLy9mbG9hdGluZyBudW1iZXJcbiAgICAgICAgICAgICAgICAgICAgaWYocGFyc2VkU3RyID09PSBcIjBcIikgcmV0dXJuIG51bTsgLy8wLjBcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihwYXJzZWRTdHIgPT09IG51bVRyaW1tZWRCeVplcm9zKSByZXR1cm4gbnVtOyAvLzAuNDU2LiAwLjc5MDAwXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoIHBhcnNlZFN0ciA9PT0gYCR7c2lnbn0ke251bVRyaW1tZWRCeVplcm9zfWApIHJldHVybiBudW07XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIHN0cjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IG4gPSBsZWFkaW5nWmVyb3M/IG51bVRyaW1tZWRCeVplcm9zIDogdHJpbW1lZFN0cjtcbiAgICAgICAgICAgICAgICBpZihsZWFkaW5nWmVyb3Mpe1xuICAgICAgICAgICAgICAgICAgICAvLyAtMDA5ID0+IC05XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAobiA9PT0gcGFyc2VkU3RyKSB8fCAoc2lnbituID09PSBwYXJzZWRTdHIpID8gbnVtIDogc3RyXG4gICAgICAgICAgICAgICAgfWVsc2UgIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gKzlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChuID09PSBwYXJzZWRTdHIpIHx8IChuID09PSBzaWduK3BhcnNlZFN0cikgPyBudW0gOiBzdHJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1lbHNleyAvL25vbi1udW1lcmljIHN0cmluZ1xuICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgZU5vdGF0aW9uUmVneCA9IC9eKFstK10pPygwKikoXFxkKihcXC5cXGQqKT9bZUVdWy1cXCtdP1xcZCspJC87XG5mdW5jdGlvbiByZXNvbHZlRW5vdGF0aW9uKHN0cix0cmltbWVkU3RyLG9wdGlvbnMpe1xuICAgIGlmKCFvcHRpb25zLmVOb3RhdGlvbikgcmV0dXJuIHN0cjtcbiAgICBjb25zdCBub3RhdGlvbiA9IHRyaW1tZWRTdHIubWF0Y2goZU5vdGF0aW9uUmVneCk7IFxuICAgIGlmKG5vdGF0aW9uKXtcbiAgICAgICAgbGV0IHNpZ24gPSBub3RhdGlvblsxXSB8fCBcIlwiO1xuICAgICAgICBjb25zdCBlQ2hhciA9IG5vdGF0aW9uWzNdLmluZGV4T2YoXCJlXCIpID09PSAtMSA/IFwiRVwiIDogXCJlXCI7XG4gICAgICAgIGNvbnN0IGxlYWRpbmdaZXJvcyA9IG5vdGF0aW9uWzJdO1xuICAgICAgICBjb25zdCBlQWRqYWNlbnRUb0xlYWRpbmdaZXJvcyA9IHNpZ24gPyAvLyAwRS5cbiAgICAgICAgICAgIHN0cltsZWFkaW5nWmVyb3MubGVuZ3RoKzFdID09PSBlQ2hhciBcbiAgICAgICAgICAgIDogc3RyW2xlYWRpbmdaZXJvcy5sZW5ndGhdID09PSBlQ2hhcjtcblxuICAgICAgICBpZihsZWFkaW5nWmVyb3MubGVuZ3RoID4gMSAmJiBlQWRqYWNlbnRUb0xlYWRpbmdaZXJvcykgcmV0dXJuIHN0cjtcbiAgICAgICAgZWxzZSBpZihsZWFkaW5nWmVyb3MubGVuZ3RoID09PSAxIFxuICAgICAgICAgICAgJiYgKG5vdGF0aW9uWzNdLnN0YXJ0c1dpdGgoYC4ke2VDaGFyfWApIHx8IG5vdGF0aW9uWzNdWzBdID09PSBlQ2hhcikpe1xuICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXIodHJpbW1lZFN0cik7XG4gICAgICAgIH1lbHNlIGlmKG9wdGlvbnMubGVhZGluZ1plcm9zICYmICFlQWRqYWNlbnRUb0xlYWRpbmdaZXJvcyl7IC8vYWNjZXB0IHdpdGggbGVhZGluZyB6ZXJvc1xuICAgICAgICAgICAgLy9yZW1vdmUgbGVhZGluZyAwc1xuICAgICAgICAgICAgdHJpbW1lZFN0ciA9IChub3RhdGlvblsxXSB8fCBcIlwiKSArIG5vdGF0aW9uWzNdO1xuICAgICAgICAgICAgcmV0dXJuIE51bWJlcih0cmltbWVkU3RyKTtcbiAgICAgICAgfWVsc2UgcmV0dXJuIHN0cjtcbiAgICB9ZWxzZXtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG59XG5cbi8qKlxuICogXG4gKiBAcGFyYW0ge3N0cmluZ30gbnVtU3RyIHdpdGhvdXQgbGVhZGluZyB6ZXJvc1xuICogQHJldHVybnMgXG4gKi9cbmZ1bmN0aW9uIHRyaW1aZXJvcyhudW1TdHIpe1xuICAgIGlmKG51bVN0ciAmJiBudW1TdHIuaW5kZXhPZihcIi5cIikgIT09IC0xKXsvL2Zsb2F0XG4gICAgICAgIG51bVN0ciA9IG51bVN0ci5yZXBsYWNlKC8wKyQvLCBcIlwiKTsgLy9yZW1vdmUgZW5kaW5nIHplcm9zXG4gICAgICAgIGlmKG51bVN0ciA9PT0gXCIuXCIpICBudW1TdHIgPSBcIjBcIjtcbiAgICAgICAgZWxzZSBpZihudW1TdHJbMF0gPT09IFwiLlwiKSAgbnVtU3RyID0gXCIwXCIrbnVtU3RyO1xuICAgICAgICBlbHNlIGlmKG51bVN0cltudW1TdHIubGVuZ3RoLTFdID09PSBcIi5cIikgIG51bVN0ciA9IG51bVN0ci5zdWJzdHJpbmcoMCxudW1TdHIubGVuZ3RoLTEpO1xuICAgICAgICByZXR1cm4gbnVtU3RyO1xuICAgIH1cbiAgICByZXR1cm4gbnVtU3RyO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9pbnQobnVtU3RyLCBiYXNlKXtcbiAgICAvL3BvbHlmaWxsXG4gICAgaWYocGFyc2VJbnQpIHJldHVybiBwYXJzZUludChudW1TdHIsIGJhc2UpO1xuICAgIGVsc2UgaWYoTnVtYmVyLnBhcnNlSW50KSByZXR1cm4gTnVtYmVyLnBhcnNlSW50KG51bVN0ciwgYmFzZSk7XG4gICAgZWxzZSBpZih3aW5kb3cgJiYgd2luZG93LnBhcnNlSW50KSByZXR1cm4gd2luZG93LnBhcnNlSW50KG51bVN0ciwgYmFzZSk7XG4gICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJwYXJzZUludCwgTnVtYmVyLnBhcnNlSW50LCB3aW5kb3cucGFyc2VJbnQgYXJlIG5vdCBzdXBwb3J0ZWRcIilcbn0iLCIndXNlIHN0cmljdCc7XG4vLy9AdHMtY2hlY2tcblxuaW1wb3J0IHtnZXRBbGxNYXRjaGVzLCBpc0V4aXN0fSBmcm9tICcuLi91dGlsLmpzJztcbmltcG9ydCB4bWxOb2RlIGZyb20gJy4veG1sTm9kZS5qcyc7XG5pbXBvcnQgcmVhZERvY1R5cGUgZnJvbSAnLi9Eb2NUeXBlUmVhZGVyLmpzJztcbmltcG9ydCB0b051bWJlciBmcm9tIFwic3RybnVtXCI7XG5pbXBvcnQgZ2V0SWdub3JlQXR0cmlidXRlc0ZuIGZyb20gXCIuLi9pZ25vcmVBdHRyaWJ1dGVzLmpzXCI7XG5cbi8vIGNvbnN0IHJlZ3ggPVxuLy8gICAnPCgoIVxcXFxbQ0RBVEFcXFxcWyhbXFxcXHNcXFxcU10qPykoXV0+KSl8KChOQU1FOik/KE5BTUUpKShbXj5dKik+fCgoXFxcXC8pKE5BTUUpXFxcXHMqPikpKFtePF0qKSdcbi8vICAgLnJlcGxhY2UoL05BTUUvZywgdXRpbC5uYW1lUmVnZXhwKTtcblxuLy9jb25zdCB0YWdzUmVneCA9IG5ldyBSZWdFeHAoXCI8KFxcXFwvP1tcXFxcdzpcXFxcLVxcLl9dKykoW14+XSopPihcXFxccypcIitjZGF0YVJlZ3grXCIpKihbXjxdKyk/XCIsXCJnXCIpO1xuLy9jb25zdCB0YWdzUmVneCA9IG5ldyBSZWdFeHAoXCI8KFxcXFwvPykoKFxcXFx3KjopPyhbXFxcXHc6XFxcXC1cXC5fXSspKShbXj5dKik+KFtePF0qKShcIitjZGF0YVJlZ3grXCIoW148XSopKSooW148XSspP1wiLFwiZ1wiKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3JkZXJlZE9ialBhcnNlcntcbiAgY29uc3RydWN0b3Iob3B0aW9ucyl7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmN1cnJlbnROb2RlID0gbnVsbDtcbiAgICB0aGlzLnRhZ3NOb2RlU3RhY2sgPSBbXTtcbiAgICB0aGlzLmRvY1R5cGVFbnRpdGllcyA9IHt9O1xuICAgIHRoaXMubGFzdEVudGl0aWVzID0ge1xuICAgICAgXCJhcG9zXCIgOiB7IHJlZ2V4OiAvJihhcG9zfCMzOXwjeDI3KTsvZywgdmFsIDogXCInXCJ9LFxuICAgICAgXCJndFwiIDogeyByZWdleDogLyYoZ3R8IzYyfCN4M0UpOy9nLCB2YWwgOiBcIj5cIn0sXG4gICAgICBcImx0XCIgOiB7IHJlZ2V4OiAvJihsdHwjNjB8I3gzQyk7L2csIHZhbCA6IFwiPFwifSxcbiAgICAgIFwicXVvdFwiIDogeyByZWdleDogLyYocXVvdHwjMzR8I3gyMik7L2csIHZhbCA6IFwiXFxcIlwifSxcbiAgICB9O1xuICAgIHRoaXMuYW1wRW50aXR5ID0geyByZWdleDogLyYoYW1wfCMzOHwjeDI2KTsvZywgdmFsIDogXCImXCJ9O1xuICAgIHRoaXMuaHRtbEVudGl0aWVzID0ge1xuICAgICAgXCJzcGFjZVwiOiB7IHJlZ2V4OiAvJihuYnNwfCMxNjApOy9nLCB2YWw6IFwiIFwiIH0sXG4gICAgICAvLyBcImx0XCIgOiB7IHJlZ2V4OiAvJihsdHwjNjApOy9nLCB2YWw6IFwiPFwiIH0sXG4gICAgICAvLyBcImd0XCIgOiB7IHJlZ2V4OiAvJihndHwjNjIpOy9nLCB2YWw6IFwiPlwiIH0sXG4gICAgICAvLyBcImFtcFwiIDogeyByZWdleDogLyYoYW1wfCMzOCk7L2csIHZhbDogXCImXCIgfSxcbiAgICAgIC8vIFwicXVvdFwiIDogeyByZWdleDogLyYocXVvdHwjMzQpOy9nLCB2YWw6IFwiXFxcIlwiIH0sXG4gICAgICAvLyBcImFwb3NcIiA6IHsgcmVnZXg6IC8mKGFwb3N8IzM5KTsvZywgdmFsOiBcIidcIiB9LFxuICAgICAgXCJjZW50XCIgOiB7IHJlZ2V4OiAvJihjZW50fCMxNjIpOy9nLCB2YWw6IFwiwqJcIiB9LFxuICAgICAgXCJwb3VuZFwiIDogeyByZWdleDogLyYocG91bmR8IzE2Myk7L2csIHZhbDogXCLCo1wiIH0sXG4gICAgICBcInllblwiIDogeyByZWdleDogLyYoeWVufCMxNjUpOy9nLCB2YWw6IFwiwqVcIiB9LFxuICAgICAgXCJldXJvXCIgOiB7IHJlZ2V4OiAvJihldXJvfCM4MzY0KTsvZywgdmFsOiBcIuKCrFwiIH0sXG4gICAgICBcImNvcHlyaWdodFwiIDogeyByZWdleDogLyYoY29weXwjMTY5KTsvZywgdmFsOiBcIsKpXCIgfSxcbiAgICAgIFwicmVnXCIgOiB7IHJlZ2V4OiAvJihyZWd8IzE3NCk7L2csIHZhbDogXCLCrlwiIH0sXG4gICAgICBcImluclwiIDogeyByZWdleDogLyYoaW5yfCM4Mzc3KTsvZywgdmFsOiBcIuKCuVwiIH0sXG4gICAgICBcIm51bV9kZWNcIjogeyByZWdleDogLyYjKFswLTldezEsN30pOy9nLCB2YWwgOiAoXywgc3RyKSA9PiBTdHJpbmcuZnJvbUNvZGVQb2ludChOdW1iZXIucGFyc2VJbnQoc3RyLCAxMCkpIH0sXG4gICAgICBcIm51bV9oZXhcIjogeyByZWdleDogLyYjeChbMC05YS1mQS1GXXsxLDZ9KTsvZywgdmFsIDogKF8sIHN0cikgPT4gU3RyaW5nLmZyb21Db2RlUG9pbnQoTnVtYmVyLnBhcnNlSW50KHN0ciwgMTYpKSB9LFxuICAgIH07XG4gICAgdGhpcy5hZGRFeHRlcm5hbEVudGl0aWVzID0gYWRkRXh0ZXJuYWxFbnRpdGllcztcbiAgICB0aGlzLnBhcnNlWG1sID0gcGFyc2VYbWw7XG4gICAgdGhpcy5wYXJzZVRleHREYXRhID0gcGFyc2VUZXh0RGF0YTtcbiAgICB0aGlzLnJlc29sdmVOYW1lU3BhY2UgPSByZXNvbHZlTmFtZVNwYWNlO1xuICAgIHRoaXMuYnVpbGRBdHRyaWJ1dGVzTWFwID0gYnVpbGRBdHRyaWJ1dGVzTWFwO1xuICAgIHRoaXMuaXNJdFN0b3BOb2RlID0gaXNJdFN0b3BOb2RlO1xuICAgIHRoaXMucmVwbGFjZUVudGl0aWVzVmFsdWUgPSByZXBsYWNlRW50aXRpZXNWYWx1ZTtcbiAgICB0aGlzLnJlYWRTdG9wTm9kZURhdGEgPSByZWFkU3RvcE5vZGVEYXRhO1xuICAgIHRoaXMuc2F2ZVRleHRUb1BhcmVudFRhZyA9IHNhdmVUZXh0VG9QYXJlbnRUYWc7XG4gICAgdGhpcy5hZGRDaGlsZCA9IGFkZENoaWxkO1xuICAgIHRoaXMuaWdub3JlQXR0cmlidXRlc0ZuID0gZ2V0SWdub3JlQXR0cmlidXRlc0ZuKHRoaXMub3B0aW9ucy5pZ25vcmVBdHRyaWJ1dGVzKVxuICB9XG5cbn1cblxuZnVuY3Rpb24gYWRkRXh0ZXJuYWxFbnRpdGllcyhleHRlcm5hbEVudGl0aWVzKXtcbiAgY29uc3QgZW50S2V5cyA9IE9iamVjdC5rZXlzKGV4dGVybmFsRW50aXRpZXMpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVudEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBlbnQgPSBlbnRLZXlzW2ldO1xuICAgIHRoaXMubGFzdEVudGl0aWVzW2VudF0gPSB7XG4gICAgICAgcmVnZXg6IG5ldyBSZWdFeHAoXCImXCIrZW50K1wiO1wiLFwiZ1wiKSxcbiAgICAgICB2YWwgOiBleHRlcm5hbEVudGl0aWVzW2VudF1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGpQYXRoXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGRvbnRUcmltXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGhhc0F0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNMZWFmTm9kZVxuICogQHBhcmFtIHtib29sZWFufSBlc2NhcGVFbnRpdGllc1xuICovXG5mdW5jdGlvbiBwYXJzZVRleHREYXRhKHZhbCwgdGFnTmFtZSwgalBhdGgsIGRvbnRUcmltLCBoYXNBdHRyaWJ1dGVzLCBpc0xlYWZOb2RlLCBlc2NhcGVFbnRpdGllcykge1xuICBpZiAodmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRyaW1WYWx1ZXMgJiYgIWRvbnRUcmltKSB7XG4gICAgICB2YWwgPSB2YWwudHJpbSgpO1xuICAgIH1cbiAgICBpZih2YWwubGVuZ3RoID4gMCl7XG4gICAgICBpZighZXNjYXBlRW50aXRpZXMpIHZhbCA9IHRoaXMucmVwbGFjZUVudGl0aWVzVmFsdWUodmFsKTtcbiAgICAgIFxuICAgICAgY29uc3QgbmV3dmFsID0gdGhpcy5vcHRpb25zLnRhZ1ZhbHVlUHJvY2Vzc29yKHRhZ05hbWUsIHZhbCwgalBhdGgsIGhhc0F0dHJpYnV0ZXMsIGlzTGVhZk5vZGUpO1xuICAgICAgaWYobmV3dmFsID09PSBudWxsIHx8IG5ld3ZhbCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgLy9kb24ndCBwYXJzZVxuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfWVsc2UgaWYodHlwZW9mIG5ld3ZhbCAhPT0gdHlwZW9mIHZhbCB8fCBuZXd2YWwgIT09IHZhbCl7XG4gICAgICAgIC8vb3ZlcndyaXRlXG4gICAgICAgIHJldHVybiBuZXd2YWw7XG4gICAgICB9ZWxzZSBpZih0aGlzLm9wdGlvbnMudHJpbVZhbHVlcyl7XG4gICAgICAgIHJldHVybiBwYXJzZVZhbHVlKHZhbCwgdGhpcy5vcHRpb25zLnBhcnNlVGFnVmFsdWUsIHRoaXMub3B0aW9ucy5udW1iZXJQYXJzZU9wdGlvbnMpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIGNvbnN0IHRyaW1tZWRWYWwgPSB2YWwudHJpbSgpO1xuICAgICAgICBpZih0cmltbWVkVmFsID09PSB2YWwpe1xuICAgICAgICAgIHJldHVybiBwYXJzZVZhbHVlKHZhbCwgdGhpcy5vcHRpb25zLnBhcnNlVGFnVmFsdWUsIHRoaXMub3B0aW9ucy5udW1iZXJQYXJzZU9wdGlvbnMpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVOYW1lU3BhY2UodGFnbmFtZSkge1xuICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZU5TUHJlZml4KSB7XG4gICAgY29uc3QgdGFncyA9IHRhZ25hbWUuc3BsaXQoJzonKTtcbiAgICBjb25zdCBwcmVmaXggPSB0YWduYW1lLmNoYXJBdCgwKSA9PT0gJy8nID8gJy8nIDogJyc7XG4gICAgaWYgKHRhZ3NbMF0gPT09ICd4bWxucycpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgaWYgKHRhZ3MubGVuZ3RoID09PSAyKSB7XG4gICAgICB0YWduYW1lID0gcHJlZml4ICsgdGFnc1sxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhZ25hbWU7XG59XG5cbi8vVE9ETzogY2hhbmdlIHJlZ2V4IHRvIGNhcHR1cmUgTlNcbi8vY29uc3QgYXR0cnNSZWd4ID0gbmV3IFJlZ0V4cChcIihbXFxcXHdcXFxcLVxcXFwuXFxcXDpdKylcXFxccyo9XFxcXHMqKFsnXFxcIl0pKCgufFxcbikqPylcXFxcMlwiLFwiZ21cIik7XG5jb25zdCBhdHRyc1JlZ3ggPSBuZXcgUmVnRXhwKCcoW15cXFxccz1dKylcXFxccyooPVxcXFxzKihbXFwnXCJdKShbXFxcXHNcXFxcU10qPylcXFxcMyk/JywgJ2dtJyk7XG5cbmZ1bmN0aW9uIGJ1aWxkQXR0cmlidXRlc01hcChhdHRyU3RyLCBqUGF0aCwgdGFnTmFtZSkge1xuICBpZiAodGhpcy5vcHRpb25zLmlnbm9yZUF0dHJpYnV0ZXMgIT09IHRydWUgJiYgdHlwZW9mIGF0dHJTdHIgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gYXR0clN0ciA9IGF0dHJTdHIucmVwbGFjZSgvXFxyP1xcbi9nLCAnICcpO1xuICAgIC8vYXR0clN0ciA9IGF0dHJTdHIgfHwgYXR0clN0ci50cmltKCk7XG5cbiAgICBjb25zdCBtYXRjaGVzID0gZ2V0QWxsTWF0Y2hlcyhhdHRyU3RyLCBhdHRyc1JlZ3gpO1xuICAgIGNvbnN0IGxlbiA9IG1hdGNoZXMubGVuZ3RoOyAvL2Rvbid0IG1ha2UgaXQgaW5saW5lXG4gICAgY29uc3QgYXR0cnMgPSB7fTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBhdHRyTmFtZSA9IHRoaXMucmVzb2x2ZU5hbWVTcGFjZShtYXRjaGVzW2ldWzFdKTtcbiAgICAgIGlmICh0aGlzLmlnbm9yZUF0dHJpYnV0ZXNGbihhdHRyTmFtZSwgalBhdGgpKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICBsZXQgb2xkVmFsID0gbWF0Y2hlc1tpXVs0XTtcbiAgICAgIGxldCBhTmFtZSA9IHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVOYW1lUHJlZml4ICsgYXR0ck5hbWU7XG4gICAgICBpZiAoYXR0ck5hbWUubGVuZ3RoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhbnNmb3JtQXR0cmlidXRlTmFtZSkge1xuICAgICAgICAgIGFOYW1lID0gdGhpcy5vcHRpb25zLnRyYW5zZm9ybUF0dHJpYnV0ZU5hbWUoYU5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmKGFOYW1lID09PSBcIl9fcHJvdG9fX1wiKSBhTmFtZSAgPSBcIiNfX3Byb3RvX19cIjtcbiAgICAgICAgaWYgKG9sZFZhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmltVmFsdWVzKSB7XG4gICAgICAgICAgICBvbGRWYWwgPSBvbGRWYWwudHJpbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvbGRWYWwgPSB0aGlzLnJlcGxhY2VFbnRpdGllc1ZhbHVlKG9sZFZhbCk7XG4gICAgICAgICAgY29uc3QgbmV3VmFsID0gdGhpcy5vcHRpb25zLmF0dHJpYnV0ZVZhbHVlUHJvY2Vzc29yKGF0dHJOYW1lLCBvbGRWYWwsIGpQYXRoKTtcbiAgICAgICAgICBpZihuZXdWYWwgPT09IG51bGwgfHwgbmV3VmFsID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgLy9kb24ndCBwYXJzZVxuICAgICAgICAgICAgYXR0cnNbYU5hbWVdID0gb2xkVmFsO1xuICAgICAgICAgIH1lbHNlIGlmKHR5cGVvZiBuZXdWYWwgIT09IHR5cGVvZiBvbGRWYWwgfHwgbmV3VmFsICE9PSBvbGRWYWwpe1xuICAgICAgICAgICAgLy9vdmVyd3JpdGVcbiAgICAgICAgICAgIGF0dHJzW2FOYW1lXSA9IG5ld1ZhbDtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIC8vcGFyc2VcbiAgICAgICAgICAgIGF0dHJzW2FOYW1lXSA9IHBhcnNlVmFsdWUoXG4gICAgICAgICAgICAgIG9sZFZhbCxcbiAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnBhcnNlQXR0cmlidXRlVmFsdWUsXG4gICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5udW1iZXJQYXJzZU9wdGlvbnNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5hbGxvd0Jvb2xlYW5BdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgYXR0cnNbYU5hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIU9iamVjdC5rZXlzKGF0dHJzKS5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVzR3JvdXBOYW1lKSB7XG4gICAgICBjb25zdCBhdHRyQ29sbGVjdGlvbiA9IHt9O1xuICAgICAgYXR0ckNvbGxlY3Rpb25bdGhpcy5vcHRpb25zLmF0dHJpYnV0ZXNHcm91cE5hbWVdID0gYXR0cnM7XG4gICAgICByZXR1cm4gYXR0ckNvbGxlY3Rpb247XG4gICAgfVxuICAgIHJldHVybiBhdHRyc1xuICB9XG59XG5cbmNvbnN0IHBhcnNlWG1sID0gZnVuY3Rpb24oeG1sRGF0YSkge1xuICB4bWxEYXRhID0geG1sRGF0YS5yZXBsYWNlKC9cXHJcXG4/L2csIFwiXFxuXCIpOyAvL1RPRE86IHJlbW92ZSB0aGlzIGxpbmVcbiAgY29uc3QgeG1sT2JqID0gbmV3IHhtbE5vZGUoJyF4bWwnKTtcbiAgbGV0IGN1cnJlbnROb2RlID0geG1sT2JqO1xuICBsZXQgdGV4dERhdGEgPSBcIlwiO1xuICBsZXQgalBhdGggPSBcIlwiO1xuICBmb3IobGV0IGk9MDsgaTwgeG1sRGF0YS5sZW5ndGg7IGkrKyl7Ly9mb3IgZWFjaCBjaGFyIGluIFhNTCBkYXRhXG4gICAgY29uc3QgY2ggPSB4bWxEYXRhW2ldO1xuICAgIGlmKGNoID09PSAnPCcpe1xuICAgICAgLy8gY29uc3QgbmV4dEluZGV4ID0gaSsxO1xuICAgICAgLy8gY29uc3QgXzJuZENoYXIgPSB4bWxEYXRhW25leHRJbmRleF07XG4gICAgICBpZiggeG1sRGF0YVtpKzFdID09PSAnLycpIHsvL0Nsb3NpbmcgVGFnXG4gICAgICAgIGNvbnN0IGNsb3NlSW5kZXggPSBmaW5kQ2xvc2luZ0luZGV4KHhtbERhdGEsIFwiPlwiLCBpLCBcIkNsb3NpbmcgVGFnIGlzIG5vdCBjbG9zZWQuXCIpXG4gICAgICAgIGxldCB0YWdOYW1lID0geG1sRGF0YS5zdWJzdHJpbmcoaSsyLGNsb3NlSW5kZXgpLnRyaW0oKTtcblxuICAgICAgICBpZih0aGlzLm9wdGlvbnMucmVtb3ZlTlNQcmVmaXgpe1xuICAgICAgICAgIGNvbnN0IGNvbG9uSW5kZXggPSB0YWdOYW1lLmluZGV4T2YoXCI6XCIpO1xuICAgICAgICAgIGlmKGNvbG9uSW5kZXggIT09IC0xKXtcbiAgICAgICAgICAgIHRhZ05hbWUgPSB0YWdOYW1lLnN1YnN0cihjb2xvbkluZGV4KzEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHRoaXMub3B0aW9ucy50cmFuc2Zvcm1UYWdOYW1lKSB7XG4gICAgICAgICAgdGFnTmFtZSA9IHRoaXMub3B0aW9ucy50cmFuc2Zvcm1UYWdOYW1lKHRhZ05hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoY3VycmVudE5vZGUpe1xuICAgICAgICAgIHRleHREYXRhID0gdGhpcy5zYXZlVGV4dFRvUGFyZW50VGFnKHRleHREYXRhLCBjdXJyZW50Tm9kZSwgalBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9jaGVjayBpZiBsYXN0IHRhZyBvZiBuZXN0ZWQgdGFnIHdhcyB1bnBhaXJlZCB0YWdcbiAgICAgICAgY29uc3QgbGFzdFRhZ05hbWUgPSBqUGF0aC5zdWJzdHJpbmcoalBhdGgubGFzdEluZGV4T2YoXCIuXCIpKzEpO1xuICAgICAgICBpZih0YWdOYW1lICYmIHRoaXMub3B0aW9ucy51bnBhaXJlZFRhZ3MuaW5kZXhPZih0YWdOYW1lKSAhPT0gLTEgKXtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVucGFpcmVkIHRhZyBjYW4gbm90IGJlIHVzZWQgYXMgY2xvc2luZyB0YWc6IDwvJHt0YWdOYW1lfT5gKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcHJvcEluZGV4ID0gMFxuICAgICAgICBpZihsYXN0VGFnTmFtZSAmJiB0aGlzLm9wdGlvbnMudW5wYWlyZWRUYWdzLmluZGV4T2YobGFzdFRhZ05hbWUpICE9PSAtMSApe1xuICAgICAgICAgIHByb3BJbmRleCA9IGpQYXRoLmxhc3RJbmRleE9mKCcuJywgalBhdGgubGFzdEluZGV4T2YoJy4nKS0xKVxuICAgICAgICAgIHRoaXMudGFnc05vZGVTdGFjay5wb3AoKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgcHJvcEluZGV4ID0galBhdGgubGFzdEluZGV4T2YoXCIuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGpQYXRoID0galBhdGguc3Vic3RyaW5nKDAsIHByb3BJbmRleCk7XG5cbiAgICAgICAgY3VycmVudE5vZGUgPSB0aGlzLnRhZ3NOb2RlU3RhY2sucG9wKCk7Ly9hdm9pZCByZWN1cnNpb24sIHNldCB0aGUgcGFyZW50IHRhZyBzY29wZVxuICAgICAgICB0ZXh0RGF0YSA9IFwiXCI7XG4gICAgICAgIGkgPSBjbG9zZUluZGV4O1xuICAgICAgfSBlbHNlIGlmKCB4bWxEYXRhW2krMV0gPT09ICc/Jykge1xuXG4gICAgICAgIGxldCB0YWdEYXRhID0gcmVhZFRhZ0V4cCh4bWxEYXRhLGksIGZhbHNlLCBcIj8+XCIpO1xuICAgICAgICBpZighdGFnRGF0YSkgdGhyb3cgbmV3IEVycm9yKFwiUGkgVGFnIGlzIG5vdCBjbG9zZWQuXCIpO1xuXG4gICAgICAgIHRleHREYXRhID0gdGhpcy5zYXZlVGV4dFRvUGFyZW50VGFnKHRleHREYXRhLCBjdXJyZW50Tm9kZSwgalBhdGgpO1xuICAgICAgICBpZiggKHRoaXMub3B0aW9ucy5pZ25vcmVEZWNsYXJhdGlvbiAmJiB0YWdEYXRhLnRhZ05hbWUgPT09IFwiP3htbFwiKSB8fCB0aGlzLm9wdGlvbnMuaWdub3JlUGlUYWdzKXtcblxuICAgICAgICB9ZWxzZXtcbiAgXG4gICAgICAgICAgY29uc3QgY2hpbGROb2RlID0gbmV3IHhtbE5vZGUodGFnRGF0YS50YWdOYW1lKTtcbiAgICAgICAgICBjaGlsZE5vZGUuYWRkKHRoaXMub3B0aW9ucy50ZXh0Tm9kZU5hbWUsIFwiXCIpO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmKHRhZ0RhdGEudGFnTmFtZSAhPT0gdGFnRGF0YS50YWdFeHAgJiYgdGFnRGF0YS5hdHRyRXhwUHJlc2VudCl7XG4gICAgICAgICAgICBjaGlsZE5vZGVbXCI6QFwiXSA9IHRoaXMuYnVpbGRBdHRyaWJ1dGVzTWFwKHRhZ0RhdGEudGFnRXhwLCBqUGF0aCwgdGFnRGF0YS50YWdOYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5hZGRDaGlsZChjdXJyZW50Tm9kZSwgY2hpbGROb2RlLCBqUGF0aCwgaSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGkgPSB0YWdEYXRhLmNsb3NlSW5kZXggKyAxO1xuICAgICAgfSBlbHNlIGlmKHhtbERhdGEuc3Vic3RyKGkgKyAxLCAzKSA9PT0gJyEtLScpIHtcbiAgICAgICAgY29uc3QgZW5kSW5kZXggPSBmaW5kQ2xvc2luZ0luZGV4KHhtbERhdGEsIFwiLS0+XCIsIGkrNCwgXCJDb21tZW50IGlzIG5vdCBjbG9zZWQuXCIpXG4gICAgICAgIGlmKHRoaXMub3B0aW9ucy5jb21tZW50UHJvcE5hbWUpe1xuICAgICAgICAgIGNvbnN0IGNvbW1lbnQgPSB4bWxEYXRhLnN1YnN0cmluZyhpICsgNCwgZW5kSW5kZXggLSAyKTtcblxuICAgICAgICAgIHRleHREYXRhID0gdGhpcy5zYXZlVGV4dFRvUGFyZW50VGFnKHRleHREYXRhLCBjdXJyZW50Tm9kZSwgalBhdGgpO1xuXG4gICAgICAgICAgY3VycmVudE5vZGUuYWRkKHRoaXMub3B0aW9ucy5jb21tZW50UHJvcE5hbWUsIFsgeyBbdGhpcy5vcHRpb25zLnRleHROb2RlTmFtZV0gOiBjb21tZW50IH0gXSk7XG4gICAgICAgIH1cbiAgICAgICAgaSA9IGVuZEluZGV4O1xuICAgICAgfSBlbHNlIGlmKCB4bWxEYXRhLnN1YnN0cihpICsgMSwgMikgPT09ICchRCcpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVhZERvY1R5cGUoeG1sRGF0YSwgaSk7XG4gICAgICAgIHRoaXMuZG9jVHlwZUVudGl0aWVzID0gcmVzdWx0LmVudGl0aWVzO1xuICAgICAgICBpID0gcmVzdWx0Lmk7XG4gICAgICB9ZWxzZSBpZih4bWxEYXRhLnN1YnN0cihpICsgMSwgMikgPT09ICchWycpIHtcbiAgICAgICAgY29uc3QgY2xvc2VJbmRleCA9IGZpbmRDbG9zaW5nSW5kZXgoeG1sRGF0YSwgXCJdXT5cIiwgaSwgXCJDREFUQSBpcyBub3QgY2xvc2VkLlwiKSAtIDI7XG4gICAgICAgIGNvbnN0IHRhZ0V4cCA9IHhtbERhdGEuc3Vic3RyaW5nKGkgKyA5LGNsb3NlSW5kZXgpO1xuXG4gICAgICAgIHRleHREYXRhID0gdGhpcy5zYXZlVGV4dFRvUGFyZW50VGFnKHRleHREYXRhLCBjdXJyZW50Tm9kZSwgalBhdGgpO1xuXG4gICAgICAgIGxldCB2YWwgPSB0aGlzLnBhcnNlVGV4dERhdGEodGFnRXhwLCBjdXJyZW50Tm9kZS50YWduYW1lLCBqUGF0aCwgdHJ1ZSwgZmFsc2UsIHRydWUsIHRydWUpO1xuICAgICAgICBpZih2YWwgPT0gdW5kZWZpbmVkKSB2YWwgPSBcIlwiO1xuXG4gICAgICAgIC8vY2RhdGEgc2hvdWxkIGJlIHNldCBldmVuIGlmIGl0IGlzIDAgbGVuZ3RoIHN0cmluZ1xuICAgICAgICBpZih0aGlzLm9wdGlvbnMuY2RhdGFQcm9wTmFtZSl7XG4gICAgICAgICAgY3VycmVudE5vZGUuYWRkKHRoaXMub3B0aW9ucy5jZGF0YVByb3BOYW1lLCBbIHsgW3RoaXMub3B0aW9ucy50ZXh0Tm9kZU5hbWVdIDogdGFnRXhwIH0gXSk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIGN1cnJlbnROb2RlLmFkZCh0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lLCB2YWwpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpID0gY2xvc2VJbmRleCArIDI7XG4gICAgICB9ZWxzZSB7Ly9PcGVuaW5nIHRhZ1xuICAgICAgICBsZXQgcmVzdWx0ID0gcmVhZFRhZ0V4cCh4bWxEYXRhLGksIHRoaXMub3B0aW9ucy5yZW1vdmVOU1ByZWZpeCk7XG4gICAgICAgIGxldCB0YWdOYW1lPSByZXN1bHQudGFnTmFtZTtcbiAgICAgICAgY29uc3QgcmF3VGFnTmFtZSA9IHJlc3VsdC5yYXdUYWdOYW1lO1xuICAgICAgICBsZXQgdGFnRXhwID0gcmVzdWx0LnRhZ0V4cDtcbiAgICAgICAgbGV0IGF0dHJFeHBQcmVzZW50ID0gcmVzdWx0LmF0dHJFeHBQcmVzZW50O1xuICAgICAgICBsZXQgY2xvc2VJbmRleCA9IHJlc3VsdC5jbG9zZUluZGV4O1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhbnNmb3JtVGFnTmFtZSkge1xuICAgICAgICAgIHRhZ05hbWUgPSB0aGlzLm9wdGlvbnMudHJhbnNmb3JtVGFnTmFtZSh0YWdOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy9zYXZlIHRleHQgYXMgY2hpbGQgbm9kZVxuICAgICAgICBpZiAoY3VycmVudE5vZGUgJiYgdGV4dERhdGEpIHtcbiAgICAgICAgICBpZihjdXJyZW50Tm9kZS50YWduYW1lICE9PSAnIXhtbCcpe1xuICAgICAgICAgICAgLy93aGVuIG5lc3RlZCB0YWcgaXMgZm91bmRcbiAgICAgICAgICAgIHRleHREYXRhID0gdGhpcy5zYXZlVGV4dFRvUGFyZW50VGFnKHRleHREYXRhLCBjdXJyZW50Tm9kZSwgalBhdGgsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL2NoZWNrIGlmIGxhc3QgdGFnIHdhcyB1bnBhaXJlZCB0YWdcbiAgICAgICAgY29uc3QgbGFzdFRhZyA9IGN1cnJlbnROb2RlO1xuICAgICAgICBpZihsYXN0VGFnICYmIHRoaXMub3B0aW9ucy51bnBhaXJlZFRhZ3MuaW5kZXhPZihsYXN0VGFnLnRhZ25hbWUpICE9PSAtMSApe1xuICAgICAgICAgIGN1cnJlbnROb2RlID0gdGhpcy50YWdzTm9kZVN0YWNrLnBvcCgpO1xuICAgICAgICAgIGpQYXRoID0galBhdGguc3Vic3RyaW5nKDAsIGpQYXRoLmxhc3RJbmRleE9mKFwiLlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYodGFnTmFtZSAhPT0geG1sT2JqLnRhZ25hbWUpe1xuICAgICAgICAgIGpQYXRoICs9IGpQYXRoID8gXCIuXCIgKyB0YWdOYW1lIDogdGFnTmFtZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydEluZGV4ID0gaTtcbiAgICAgICAgaWYgKHRoaXMuaXNJdFN0b3BOb2RlKHRoaXMub3B0aW9ucy5zdG9wTm9kZXMsIGpQYXRoLCB0YWdOYW1lKSkge1xuICAgICAgICAgIGxldCB0YWdDb250ZW50ID0gXCJcIjtcbiAgICAgICAgICAvL3NlbGYtY2xvc2luZyB0YWdcbiAgICAgICAgICBpZih0YWdFeHAubGVuZ3RoID4gMCAmJiB0YWdFeHAubGFzdEluZGV4T2YoXCIvXCIpID09PSB0YWdFeHAubGVuZ3RoIC0gMSl7XG4gICAgICAgICAgICBpZih0YWdOYW1lW3RhZ05hbWUubGVuZ3RoIC0gMV0gPT09IFwiL1wiKXsgLy9yZW1vdmUgdHJhaWxpbmcgJy8nXG4gICAgICAgICAgICAgIHRhZ05hbWUgPSB0YWdOYW1lLnN1YnN0cigwLCB0YWdOYW1lLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICBqUGF0aCA9IGpQYXRoLnN1YnN0cigwLCBqUGF0aC5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgdGFnRXhwID0gdGFnTmFtZTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICB0YWdFeHAgPSB0YWdFeHAuc3Vic3RyKDAsIHRhZ0V4cC5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkgPSByZXN1bHQuY2xvc2VJbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy91bnBhaXJlZCB0YWdcbiAgICAgICAgICBlbHNlIGlmKHRoaXMub3B0aW9ucy51bnBhaXJlZFRhZ3MuaW5kZXhPZih0YWdOYW1lKSAhPT0gLTEpe1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpID0gcmVzdWx0LmNsb3NlSW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vbm9ybWFsIHRhZ1xuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAvL3JlYWQgdW50aWwgY2xvc2luZyB0YWcgaXMgZm91bmRcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucmVhZFN0b3BOb2RlRGF0YSh4bWxEYXRhLCByYXdUYWdOYW1lLCBjbG9zZUluZGV4ICsgMSk7XG4gICAgICAgICAgICBpZighcmVzdWx0KSB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgZW5kIG9mICR7cmF3VGFnTmFtZX1gKTtcbiAgICAgICAgICAgIGkgPSByZXN1bHQuaTtcbiAgICAgICAgICAgIHRhZ0NvbnRlbnQgPSByZXN1bHQudGFnQ29udGVudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBuZXcgeG1sTm9kZSh0YWdOYW1lKTtcblxuICAgICAgICAgIGlmKHRhZ05hbWUgIT09IHRhZ0V4cCAmJiBhdHRyRXhwUHJlc2VudCl7XG4gICAgICAgICAgICBjaGlsZE5vZGVbXCI6QFwiXSA9IHRoaXMuYnVpbGRBdHRyaWJ1dGVzTWFwKHRhZ0V4cCwgalBhdGgsIHRhZ05hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZih0YWdDb250ZW50KSB7XG4gICAgICAgICAgICB0YWdDb250ZW50ID0gdGhpcy5wYXJzZVRleHREYXRhKHRhZ0NvbnRlbnQsIHRhZ05hbWUsIGpQYXRoLCB0cnVlLCBhdHRyRXhwUHJlc2VudCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGpQYXRoID0galBhdGguc3Vic3RyKDAsIGpQYXRoLmxhc3RJbmRleE9mKFwiLlwiKSk7XG4gICAgICAgICAgY2hpbGROb2RlLmFkZCh0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lLCB0YWdDb250ZW50KTtcbiAgICAgICAgICBcbiAgICAgICAgICB0aGlzLmFkZENoaWxkKGN1cnJlbnROb2RlLCBjaGlsZE5vZGUsIGpQYXRoLCBzdGFydEluZGV4KTtcbiAgICAgICAgfWVsc2V7XG4gIC8vc2VsZkNsb3NpbmcgdGFnXG4gICAgICAgICAgaWYodGFnRXhwLmxlbmd0aCA+IDAgJiYgdGFnRXhwLmxhc3RJbmRleE9mKFwiL1wiKSA9PT0gdGFnRXhwLmxlbmd0aCAtIDEpe1xuICAgICAgICAgICAgaWYodGFnTmFtZVt0YWdOYW1lLmxlbmd0aCAtIDFdID09PSBcIi9cIil7IC8vcmVtb3ZlIHRyYWlsaW5nICcvJ1xuICAgICAgICAgICAgICB0YWdOYW1lID0gdGFnTmFtZS5zdWJzdHIoMCwgdGFnTmFtZS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgalBhdGggPSBqUGF0aC5zdWJzdHIoMCwgalBhdGgubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgIHRhZ0V4cCA9IHRhZ05hbWU7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgdGFnRXhwID0gdGFnRXhwLnN1YnN0cigwLCB0YWdFeHAubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy50cmFuc2Zvcm1UYWdOYW1lKSB7XG4gICAgICAgICAgICAgIHRhZ05hbWUgPSB0aGlzLm9wdGlvbnMudHJhbnNmb3JtVGFnTmFtZSh0YWdOYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlID0gbmV3IHhtbE5vZGUodGFnTmFtZSk7XG4gICAgICAgICAgICBpZih0YWdOYW1lICE9PSB0YWdFeHAgJiYgYXR0ckV4cFByZXNlbnQpe1xuICAgICAgICAgICAgICBjaGlsZE5vZGVbXCI6QFwiXSA9IHRoaXMuYnVpbGRBdHRyaWJ1dGVzTWFwKHRhZ0V4cCwgalBhdGgsIHRhZ05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hZGRDaGlsZChjdXJyZW50Tm9kZSwgY2hpbGROb2RlLCBqUGF0aCwgc3RhcnRJbmRleCk7XG4gICAgICAgICAgICBqUGF0aCA9IGpQYXRoLnN1YnN0cigwLCBqUGF0aC5sYXN0SW5kZXhPZihcIi5cIikpO1xuICAgICAgICAgIH1cbiAgICAvL29wZW5pbmcgdGFnXG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IG5ldyB4bWxOb2RlKCB0YWdOYW1lKTtcbiAgICAgICAgICAgIHRoaXMudGFnc05vZGVTdGFjay5wdXNoKGN1cnJlbnROb2RlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYodGFnTmFtZSAhPT0gdGFnRXhwICYmIGF0dHJFeHBQcmVzZW50KXtcbiAgICAgICAgICAgICAgY2hpbGROb2RlW1wiOkBcIl0gPSB0aGlzLmJ1aWxkQXR0cmlidXRlc01hcCh0YWdFeHAsIGpQYXRoLCB0YWdOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWRkQ2hpbGQoY3VycmVudE5vZGUsIGNoaWxkTm9kZSwgalBhdGgsIHN0YXJ0SW5kZXgpO1xuICAgICAgICAgICAgY3VycmVudE5vZGUgPSBjaGlsZE5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRleHREYXRhID0gXCJcIjtcbiAgICAgICAgICBpID0gY2xvc2VJbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1lbHNle1xuICAgICAgdGV4dERhdGEgKz0geG1sRGF0YVtpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHhtbE9iai5jaGlsZDtcbn1cblxuZnVuY3Rpb24gYWRkQ2hpbGQoY3VycmVudE5vZGUsIGNoaWxkTm9kZSwgalBhdGgsIHN0YXJ0SW5kZXgpe1xuICAvLyB1bnNldCBzdGFydEluZGV4IGlmIG5vdCByZXF1ZXN0ZWRcbiAgaWYgKCF0aGlzLm9wdGlvbnMuY2FwdHVyZU1ldGFEYXRhKSBzdGFydEluZGV4ID0gdW5kZWZpbmVkO1xuICBjb25zdCByZXN1bHQgPSB0aGlzLm9wdGlvbnMudXBkYXRlVGFnKGNoaWxkTm9kZS50YWduYW1lLCBqUGF0aCwgY2hpbGROb2RlW1wiOkBcIl0pXG4gIGlmKHJlc3VsdCA9PT0gZmFsc2Upe1xuICB9IGVsc2UgaWYodHlwZW9mIHJlc3VsdCA9PT0gXCJzdHJpbmdcIil7XG4gICAgY2hpbGROb2RlLnRhZ25hbWUgPSByZXN1bHRcbiAgICBjdXJyZW50Tm9kZS5hZGRDaGlsZChjaGlsZE5vZGUsIHN0YXJ0SW5kZXgpO1xuICB9ZWxzZXtcbiAgICBjdXJyZW50Tm9kZS5hZGRDaGlsZChjaGlsZE5vZGUsIHN0YXJ0SW5kZXgpO1xuICB9XG59XG5cbmNvbnN0IHJlcGxhY2VFbnRpdGllc1ZhbHVlID0gZnVuY3Rpb24odmFsKXtcblxuICBpZih0aGlzLm9wdGlvbnMucHJvY2Vzc0VudGl0aWVzKXtcbiAgICBmb3IobGV0IGVudGl0eU5hbWUgaW4gdGhpcy5kb2NUeXBlRW50aXRpZXMpe1xuICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5kb2NUeXBlRW50aXRpZXNbZW50aXR5TmFtZV07XG4gICAgICB2YWwgPSB2YWwucmVwbGFjZSggZW50aXR5LnJlZ3gsIGVudGl0eS52YWwpO1xuICAgIH1cbiAgICBmb3IobGV0IGVudGl0eU5hbWUgaW4gdGhpcy5sYXN0RW50aXRpZXMpe1xuICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5sYXN0RW50aXRpZXNbZW50aXR5TmFtZV07XG4gICAgICB2YWwgPSB2YWwucmVwbGFjZSggZW50aXR5LnJlZ2V4LCBlbnRpdHkudmFsKTtcbiAgICB9XG4gICAgaWYodGhpcy5vcHRpb25zLmh0bWxFbnRpdGllcyl7XG4gICAgICBmb3IobGV0IGVudGl0eU5hbWUgaW4gdGhpcy5odG1sRW50aXRpZXMpe1xuICAgICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmh0bWxFbnRpdGllc1tlbnRpdHlOYW1lXTtcbiAgICAgICAgdmFsID0gdmFsLnJlcGxhY2UoIGVudGl0eS5yZWdleCwgZW50aXR5LnZhbCk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhbCA9IHZhbC5yZXBsYWNlKCB0aGlzLmFtcEVudGl0eS5yZWdleCwgdGhpcy5hbXBFbnRpdHkudmFsKTtcbiAgfVxuICByZXR1cm4gdmFsO1xufVxuZnVuY3Rpb24gc2F2ZVRleHRUb1BhcmVudFRhZyh0ZXh0RGF0YSwgY3VycmVudE5vZGUsIGpQYXRoLCBpc0xlYWZOb2RlKSB7XG4gIGlmICh0ZXh0RGF0YSkgeyAvL3N0b3JlIHByZXZpb3VzbHkgY29sbGVjdGVkIGRhdGEgYXMgdGV4dE5vZGVcbiAgICBpZihpc0xlYWZOb2RlID09PSB1bmRlZmluZWQpIGlzTGVhZk5vZGUgPSBjdXJyZW50Tm9kZS5jaGlsZC5sZW5ndGggPT09IDBcbiAgICBcbiAgICB0ZXh0RGF0YSA9IHRoaXMucGFyc2VUZXh0RGF0YSh0ZXh0RGF0YSxcbiAgICAgIGN1cnJlbnROb2RlLnRhZ25hbWUsXG4gICAgICBqUGF0aCxcbiAgICAgIGZhbHNlLFxuICAgICAgY3VycmVudE5vZGVbXCI6QFwiXSA/IE9iamVjdC5rZXlzKGN1cnJlbnROb2RlW1wiOkBcIl0pLmxlbmd0aCAhPT0gMCA6IGZhbHNlLFxuICAgICAgaXNMZWFmTm9kZSk7XG5cbiAgICBpZiAodGV4dERhdGEgIT09IHVuZGVmaW5lZCAmJiB0ZXh0RGF0YSAhPT0gXCJcIilcbiAgICAgIGN1cnJlbnROb2RlLmFkZCh0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lLCB0ZXh0RGF0YSk7XG4gICAgdGV4dERhdGEgPSBcIlwiO1xuICB9XG4gIHJldHVybiB0ZXh0RGF0YTtcbn1cblxuLy9UT0RPOiB1c2UgalBhdGggdG8gc2ltcGxpZnkgdGhlIGxvZ2ljXG4vKipcbiAqIFxuICogQHBhcmFtIHtzdHJpbmdbXX0gc3RvcE5vZGVzIFxuICogQHBhcmFtIHtzdHJpbmd9IGpQYXRoXG4gKiBAcGFyYW0ge3N0cmluZ30gY3VycmVudFRhZ05hbWUgXG4gKi9cbmZ1bmN0aW9uIGlzSXRTdG9wTm9kZShzdG9wTm9kZXMsIGpQYXRoLCBjdXJyZW50VGFnTmFtZSl7XG4gIGNvbnN0IGFsbE5vZGVzRXhwID0gXCIqLlwiICsgY3VycmVudFRhZ05hbWU7XG4gIGZvciAoY29uc3Qgc3RvcE5vZGVQYXRoIGluIHN0b3BOb2Rlcykge1xuICAgIGNvbnN0IHN0b3BOb2RlRXhwID0gc3RvcE5vZGVzW3N0b3BOb2RlUGF0aF07XG4gICAgaWYoIGFsbE5vZGVzRXhwID09PSBzdG9wTm9kZUV4cCB8fCBqUGF0aCA9PT0gc3RvcE5vZGVFeHAgICkgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHRhZyBFeHByZXNzaW9uIGFuZCB3aGVyZSBpdCBpcyBlbmRpbmcgaGFuZGxpbmcgc2luZ2xlLWRvdWJsZSBxdW90ZXMgc2l0dWF0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30geG1sRGF0YSBcbiAqIEBwYXJhbSB7bnVtYmVyfSBpIHN0YXJ0aW5nIGluZGV4XG4gKiBAcmV0dXJucyBcbiAqL1xuZnVuY3Rpb24gdGFnRXhwV2l0aENsb3NpbmdJbmRleCh4bWxEYXRhLCBpLCBjbG9zaW5nQ2hhciA9IFwiPlwiKXtcbiAgbGV0IGF0dHJCb3VuZGFyeTtcbiAgbGV0IHRhZ0V4cCA9IFwiXCI7XG4gIGZvciAobGV0IGluZGV4ID0gaTsgaW5kZXggPCB4bWxEYXRhLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCBjaCA9IHhtbERhdGFbaW5kZXhdO1xuICAgIGlmIChhdHRyQm91bmRhcnkpIHtcbiAgICAgICAgaWYgKGNoID09PSBhdHRyQm91bmRhcnkpIGF0dHJCb3VuZGFyeSA9IFwiXCI7Ly9yZXNldFxuICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcIicgfHwgY2ggPT09IFwiJ1wiKSB7XG4gICAgICAgIGF0dHJCb3VuZGFyeSA9IGNoO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09IGNsb3NpbmdDaGFyWzBdKSB7XG4gICAgICBpZihjbG9zaW5nQ2hhclsxXSl7XG4gICAgICAgIGlmKHhtbERhdGFbaW5kZXggKyAxXSA9PT0gY2xvc2luZ0NoYXJbMV0pe1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiB0YWdFeHAsXG4gICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1lbHNle1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGE6IHRhZ0V4cCxcbiAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXHQnKSB7XG4gICAgICBjaCA9IFwiIFwiXG4gICAgfVxuICAgIHRhZ0V4cCArPSBjaDtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kQ2xvc2luZ0luZGV4KHhtbERhdGEsIHN0ciwgaSwgZXJyTXNnKXtcbiAgY29uc3QgY2xvc2luZ0luZGV4ID0geG1sRGF0YS5pbmRleE9mKHN0ciwgaSk7XG4gIGlmKGNsb3NpbmdJbmRleCA9PT0gLTEpe1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpXG4gIH1lbHNle1xuICAgIHJldHVybiBjbG9zaW5nSW5kZXggKyBzdHIubGVuZ3RoIC0gMTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWFkVGFnRXhwKHhtbERhdGEsaSwgcmVtb3ZlTlNQcmVmaXgsIGNsb3NpbmdDaGFyID0gXCI+XCIpe1xuICBjb25zdCByZXN1bHQgPSB0YWdFeHBXaXRoQ2xvc2luZ0luZGV4KHhtbERhdGEsIGkrMSwgY2xvc2luZ0NoYXIpO1xuICBpZighcmVzdWx0KSByZXR1cm47XG4gIGxldCB0YWdFeHAgPSByZXN1bHQuZGF0YTtcbiAgY29uc3QgY2xvc2VJbmRleCA9IHJlc3VsdC5pbmRleDtcbiAgY29uc3Qgc2VwYXJhdG9ySW5kZXggPSB0YWdFeHAuc2VhcmNoKC9cXHMvKTtcbiAgbGV0IHRhZ05hbWUgPSB0YWdFeHA7XG4gIGxldCBhdHRyRXhwUHJlc2VudCA9IHRydWU7XG4gIGlmKHNlcGFyYXRvckluZGV4ICE9PSAtMSl7Ly9zZXBhcmF0ZSB0YWcgbmFtZSBhbmQgYXR0cmlidXRlcyBleHByZXNzaW9uXG4gICAgdGFnTmFtZSA9IHRhZ0V4cC5zdWJzdHJpbmcoMCwgc2VwYXJhdG9ySW5kZXgpO1xuICAgIHRhZ0V4cCA9IHRhZ0V4cC5zdWJzdHJpbmcoc2VwYXJhdG9ySW5kZXggKyAxKS50cmltU3RhcnQoKTtcbiAgfVxuXG4gIGNvbnN0IHJhd1RhZ05hbWUgPSB0YWdOYW1lO1xuICBpZihyZW1vdmVOU1ByZWZpeCl7XG4gICAgY29uc3QgY29sb25JbmRleCA9IHRhZ05hbWUuaW5kZXhPZihcIjpcIik7XG4gICAgaWYoY29sb25JbmRleCAhPT0gLTEpe1xuICAgICAgdGFnTmFtZSA9IHRhZ05hbWUuc3Vic3RyKGNvbG9uSW5kZXgrMSk7XG4gICAgICBhdHRyRXhwUHJlc2VudCA9IHRhZ05hbWUgIT09IHJlc3VsdC5kYXRhLnN1YnN0cihjb2xvbkluZGV4ICsgMSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0YWdOYW1lOiB0YWdOYW1lLFxuICAgIHRhZ0V4cDogdGFnRXhwLFxuICAgIGNsb3NlSW5kZXg6IGNsb3NlSW5kZXgsXG4gICAgYXR0ckV4cFByZXNlbnQ6IGF0dHJFeHBQcmVzZW50LFxuICAgIHJhd1RhZ05hbWU6IHJhd1RhZ05hbWUsXG4gIH1cbn1cbi8qKlxuICogZmluZCBwYWlyZWQgdGFnIGZvciBhIHN0b3Agbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IHhtbERhdGEgXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZSBcbiAqIEBwYXJhbSB7bnVtYmVyfSBpIFxuICovXG5mdW5jdGlvbiByZWFkU3RvcE5vZGVEYXRhKHhtbERhdGEsIHRhZ05hbWUsIGkpe1xuICBjb25zdCBzdGFydEluZGV4ID0gaTtcbiAgLy8gU3RhcnRpbmcgYXQgMSBzaW5jZSB3ZSBhbHJlYWR5IGhhdmUgYW4gb3BlbiB0YWdcbiAgbGV0IG9wZW5UYWdDb3VudCA9IDE7XG5cbiAgZm9yICg7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYoIHhtbERhdGFbaV0gPT09IFwiPFwiKXsgXG4gICAgICBpZiAoeG1sRGF0YVtpKzFdID09PSBcIi9cIikgey8vY2xvc2UgdGFnXG4gICAgICAgICAgY29uc3QgY2xvc2VJbmRleCA9IGZpbmRDbG9zaW5nSW5kZXgoeG1sRGF0YSwgXCI+XCIsIGksIGAke3RhZ05hbWV9IGlzIG5vdCBjbG9zZWRgKTtcbiAgICAgICAgICBsZXQgY2xvc2VUYWdOYW1lID0geG1sRGF0YS5zdWJzdHJpbmcoaSsyLGNsb3NlSW5kZXgpLnRyaW0oKTtcbiAgICAgICAgICBpZihjbG9zZVRhZ05hbWUgPT09IHRhZ05hbWUpe1xuICAgICAgICAgICAgb3BlblRhZ0NvdW50LS07XG4gICAgICAgICAgICBpZiAob3BlblRhZ0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdGFnQ29udGVudDogeG1sRGF0YS5zdWJzdHJpbmcoc3RhcnRJbmRleCwgaSksXG4gICAgICAgICAgICAgICAgaSA6IGNsb3NlSW5kZXhcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpPWNsb3NlSW5kZXg7XG4gICAgICAgIH0gZWxzZSBpZih4bWxEYXRhW2krMV0gPT09ICc/JykgeyBcbiAgICAgICAgICBjb25zdCBjbG9zZUluZGV4ID0gZmluZENsb3NpbmdJbmRleCh4bWxEYXRhLCBcIj8+XCIsIGkrMSwgXCJTdG9wTm9kZSBpcyBub3QgY2xvc2VkLlwiKVxuICAgICAgICAgIGk9Y2xvc2VJbmRleDtcbiAgICAgICAgfSBlbHNlIGlmKHhtbERhdGEuc3Vic3RyKGkgKyAxLCAzKSA9PT0gJyEtLScpIHsgXG4gICAgICAgICAgY29uc3QgY2xvc2VJbmRleCA9IGZpbmRDbG9zaW5nSW5kZXgoeG1sRGF0YSwgXCItLT5cIiwgaSszLCBcIlN0b3BOb2RlIGlzIG5vdCBjbG9zZWQuXCIpXG4gICAgICAgICAgaT1jbG9zZUluZGV4O1xuICAgICAgICB9IGVsc2UgaWYoeG1sRGF0YS5zdWJzdHIoaSArIDEsIDIpID09PSAnIVsnKSB7IFxuICAgICAgICAgIGNvbnN0IGNsb3NlSW5kZXggPSBmaW5kQ2xvc2luZ0luZGV4KHhtbERhdGEsIFwiXV0+XCIsIGksIFwiU3RvcE5vZGUgaXMgbm90IGNsb3NlZC5cIikgLSAyO1xuICAgICAgICAgIGk9Y2xvc2VJbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB0YWdEYXRhID0gcmVhZFRhZ0V4cCh4bWxEYXRhLCBpLCAnPicpXG5cbiAgICAgICAgICBpZiAodGFnRGF0YSkge1xuICAgICAgICAgICAgY29uc3Qgb3BlblRhZ05hbWUgPSB0YWdEYXRhICYmIHRhZ0RhdGEudGFnTmFtZTtcbiAgICAgICAgICAgIGlmIChvcGVuVGFnTmFtZSA9PT0gdGFnTmFtZSAmJiB0YWdEYXRhLnRhZ0V4cFt0YWdEYXRhLnRhZ0V4cC5sZW5ndGgtMV0gIT09IFwiL1wiKSB7XG4gICAgICAgICAgICAgIG9wZW5UYWdDb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaT10YWdEYXRhLmNsb3NlSW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gIH0vL2VuZCBmb3IgbG9vcFxufVxuXG5mdW5jdGlvbiBwYXJzZVZhbHVlKHZhbCwgc2hvdWxkUGFyc2UsIG9wdGlvbnMpIHtcbiAgaWYgKHNob3VsZFBhcnNlICYmIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgLy9jb25zb2xlLmxvZyhvcHRpb25zKVxuICAgIGNvbnN0IG5ld3ZhbCA9IHZhbC50cmltKCk7XG4gICAgaWYobmV3dmFsID09PSAndHJ1ZScgKSByZXR1cm4gdHJ1ZTtcbiAgICBlbHNlIGlmKG5ld3ZhbCA9PT0gJ2ZhbHNlJyApIHJldHVybiBmYWxzZTtcbiAgICBlbHNlIHJldHVybiB0b051bWJlcih2YWwsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIGlmIChpc0V4aXN0KHZhbCkpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldElnbm9yZUF0dHJpYnV0ZXNGbihpZ25vcmVBdHRyaWJ1dGVzKSB7XG4gICAgaWYgKHR5cGVvZiBpZ25vcmVBdHRyaWJ1dGVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBpZ25vcmVBdHRyaWJ1dGVzXG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGlnbm9yZUF0dHJpYnV0ZXMpKSB7XG4gICAgICAgIHJldHVybiAoYXR0ck5hbWUpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBpZ25vcmVBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJyAmJiBhdHRyTmFtZSA9PT0gcGF0dGVybikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCAmJiBwYXR0ZXJuLnRlc3QoYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiBmYWxzZVxufSIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IFhtbE5vZGUgZnJvbSAnLi94bWxOb2RlLmpzJztcblxuY29uc3QgTUVUQURBVEFfU1lNQk9MID0gWG1sTm9kZS5nZXRNZXRhRGF0YVN5bWJvbCgpO1xuXG4vKipcbiAqIFxuICogQHBhcmFtIHthcnJheX0gbm9kZSBcbiAqIEBwYXJhbSB7YW55fSBvcHRpb25zIFxuICogQHJldHVybnMgXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXR0aWZ5KG5vZGUsIG9wdGlvbnMpe1xuICByZXR1cm4gY29tcHJlc3MoIG5vZGUsIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIFxuICogQHBhcmFtIHthcnJheX0gYXJyIFxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgXG4gKiBAcGFyYW0ge3N0cmluZ30galBhdGggXG4gKiBAcmV0dXJucyBvYmplY3RcbiAqL1xuZnVuY3Rpb24gY29tcHJlc3MoYXJyLCBvcHRpb25zLCBqUGF0aCl7XG4gIGxldCB0ZXh0O1xuICBjb25zdCBjb21wcmVzc2VkT2JqID0ge307XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdGFnT2JqID0gYXJyW2ldO1xuICAgIGNvbnN0IHByb3BlcnR5ID0gcHJvcE5hbWUodGFnT2JqKTtcbiAgICBsZXQgbmV3SnBhdGggPSBcIlwiO1xuICAgIGlmKGpQYXRoID09PSB1bmRlZmluZWQpIG5ld0pwYXRoID0gcHJvcGVydHk7XG4gICAgZWxzZSBuZXdKcGF0aCA9IGpQYXRoICsgXCIuXCIgKyBwcm9wZXJ0eTtcblxuICAgIGlmKHByb3BlcnR5ID09PSBvcHRpb25zLnRleHROb2RlTmFtZSl7XG4gICAgICBpZih0ZXh0ID09PSB1bmRlZmluZWQpIHRleHQgPSB0YWdPYmpbcHJvcGVydHldO1xuICAgICAgZWxzZSB0ZXh0ICs9IFwiXCIgKyB0YWdPYmpbcHJvcGVydHldO1xuICAgIH1lbHNlIGlmKHByb3BlcnR5ID09PSB1bmRlZmluZWQpe1xuICAgICAgY29udGludWU7XG4gICAgfWVsc2UgaWYodGFnT2JqW3Byb3BlcnR5XSl7XG4gICAgICBcbiAgICAgIGxldCB2YWwgPSBjb21wcmVzcyh0YWdPYmpbcHJvcGVydHldLCBvcHRpb25zLCBuZXdKcGF0aCk7XG4gICAgICBjb25zdCBpc0xlYWYgPSBpc0xlYWZUYWcodmFsLCBvcHRpb25zKTtcbiAgICAgIGlmICh0YWdPYmpbTUVUQURBVEFfU1lNQk9MXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhbFtNRVRBREFUQV9TWU1CT0xdID0gdGFnT2JqW01FVEFEQVRBX1NZTUJPTF07IC8vIGNvcHkgb3ZlciBtZXRhZGF0YVxuICAgICAgfVxuXG4gICAgICBpZih0YWdPYmpbXCI6QFwiXSl7XG4gICAgICAgIGFzc2lnbkF0dHJpYnV0ZXMoIHZhbCwgdGFnT2JqW1wiOkBcIl0sIG5ld0pwYXRoLCBvcHRpb25zKTtcbiAgICAgIH1lbHNlIGlmKE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoID09PSAxICYmIHZhbFtvcHRpb25zLnRleHROb2RlTmFtZV0gIT09IHVuZGVmaW5lZCAmJiAhb3B0aW9ucy5hbHdheXNDcmVhdGVUZXh0Tm9kZSl7XG4gICAgICAgIHZhbCA9IHZhbFtvcHRpb25zLnRleHROb2RlTmFtZV07XG4gICAgICB9ZWxzZSBpZihPYmplY3Qua2V5cyh2YWwpLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgIGlmKG9wdGlvbnMuYWx3YXlzQ3JlYXRlVGV4dE5vZGUpIHZhbFtvcHRpb25zLnRleHROb2RlTmFtZV0gPSBcIlwiO1xuICAgICAgICBlbHNlIHZhbCA9IFwiXCI7XG4gICAgICB9XG5cbiAgICAgIGlmKGNvbXByZXNzZWRPYmpbcHJvcGVydHldICE9PSB1bmRlZmluZWQgJiYgY29tcHJlc3NlZE9iai5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgaWYoIUFycmF5LmlzQXJyYXkoY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0pKSB7XG4gICAgICAgICAgICBjb21wcmVzc2VkT2JqW3Byb3BlcnR5XSA9IFsgY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0gXTtcbiAgICAgICAgfVxuICAgICAgICBjb21wcmVzc2VkT2JqW3Byb3BlcnR5XS5wdXNoKHZhbCk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgLy9UT0RPOiBpZiBhIG5vZGUgaXMgbm90IGFuIGFycmF5LCB0aGVuIGNoZWNrIGlmIGl0IHNob3VsZCBiZSBhbiBhcnJheVxuICAgICAgICAvL2Fsc28gZGV0ZXJtaW5lIGlmIGl0IGlzIGEgbGVhZiBub2RlXG4gICAgICAgIGlmIChvcHRpb25zLmlzQXJyYXkocHJvcGVydHksIG5ld0pwYXRoLCBpc0xlYWYgKSkge1xuICAgICAgICAgIGNvbXByZXNzZWRPYmpbcHJvcGVydHldID0gW3ZhbF07XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIGNvbXByZXNzZWRPYmpbcHJvcGVydHldID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFxuICB9XG4gIC8vIGlmKHRleHQgJiYgdGV4dC5sZW5ndGggPiAwKSBjb21wcmVzc2VkT2JqW29wdGlvbnMudGV4dE5vZGVOYW1lXSA9IHRleHQ7XG4gIGlmKHR5cGVvZiB0ZXh0ID09PSBcInN0cmluZ1wiKXtcbiAgICBpZih0ZXh0Lmxlbmd0aCA+IDApIGNvbXByZXNzZWRPYmpbb3B0aW9ucy50ZXh0Tm9kZU5hbWVdID0gdGV4dDtcbiAgfWVsc2UgaWYodGV4dCAhPT0gdW5kZWZpbmVkKSBjb21wcmVzc2VkT2JqW29wdGlvbnMudGV4dE5vZGVOYW1lXSA9IHRleHQ7XG4gIHJldHVybiBjb21wcmVzc2VkT2JqO1xufVxuXG5mdW5jdGlvbiBwcm9wTmFtZShvYmope1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICBpZihrZXkgIT09IFwiOkBcIikgcmV0dXJuIGtleTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NpZ25BdHRyaWJ1dGVzKG9iaiwgYXR0ck1hcCwganBhdGgsIG9wdGlvbnMpe1xuICBpZiAoYXR0ck1hcCkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhdHRyTWFwKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDsgLy9kb24ndCBtYWtlIGl0IGlubGluZVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGF0cnJOYW1lID0ga2V5c1tpXTtcbiAgICAgIGlmIChvcHRpb25zLmlzQXJyYXkoYXRyck5hbWUsIGpwYXRoICsgXCIuXCIgKyBhdHJyTmFtZSwgdHJ1ZSwgdHJ1ZSkpIHtcbiAgICAgICAgb2JqW2F0cnJOYW1lXSA9IFsgYXR0ck1hcFthdHJyTmFtZV0gXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9ialthdHJyTmFtZV0gPSBhdHRyTWFwW2F0cnJOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNMZWFmVGFnKG9iaiwgb3B0aW9ucyl7XG4gIGNvbnN0IHsgdGV4dE5vZGVOYW1lIH0gPSBvcHRpb25zO1xuICBjb25zdCBwcm9wQ291bnQgPSBPYmplY3Qua2V5cyhvYmopLmxlbmd0aDtcbiAgXG4gIGlmIChwcm9wQ291bnQgPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChcbiAgICBwcm9wQ291bnQgPT09IDEgJiZcbiAgICAob2JqW3RleHROb2RlTmFtZV0gfHwgdHlwZW9mIG9ialt0ZXh0Tm9kZU5hbWVdID09PSBcImJvb2xlYW5cIiB8fCBvYmpbdGV4dE5vZGVOYW1lXSA9PT0gMClcbiAgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7Z2V0QWxsTWF0Y2hlcywgaXNOYW1lfSBmcm9tICcuL3V0aWwuanMnO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgYWxsb3dCb29sZWFuQXR0cmlidXRlczogZmFsc2UsIC8vQSB0YWcgY2FuIGhhdmUgYXR0cmlidXRlcyB3aXRob3V0IGFueSB2YWx1ZVxuICB1bnBhaXJlZFRhZ3M6IFtdXG59O1xuXG4vL2NvbnN0IHRhZ3NQYXR0ZXJuID0gbmV3IFJlZ0V4cChcIjxcXFxcLz8oW1xcXFx3OlxcXFwtX1xcLl0rKVxcXFxzKlxcLz8+XCIsXCJnXCIpO1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlKHhtbERhdGEsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcblxuICAvL3htbERhdGEgPSB4bWxEYXRhLnJlcGxhY2UoLyhcXHJcXG58XFxufFxccikvZ20sXCJcIik7Ly9tYWtlIGl0IHNpbmdsZSBsaW5lXG4gIC8veG1sRGF0YSA9IHhtbERhdGEucmVwbGFjZSgvKF5cXHMqPFxcP3htbC4qP1xcPz4pL2csXCJcIik7Ly9SZW1vdmUgWE1MIHN0YXJ0aW5nIHRhZ1xuICAvL3htbERhdGEgPSB4bWxEYXRhLnJlcGxhY2UoLyg8IURPQ1RZUEVbXFxzXFx3XFxcIlxcLlxcL1xcLVxcOl0rKFxcWy4qXFxdKSpcXHMqPikvZyxcIlwiKTsvL1JlbW92ZSBET0NUWVBFXG4gIGNvbnN0IHRhZ3MgPSBbXTtcbiAgbGV0IHRhZ0ZvdW5kID0gZmFsc2U7XG5cbiAgLy9pbmRpY2F0ZXMgdGhhdCB0aGUgcm9vdCB0YWcgaGFzIGJlZW4gY2xvc2VkIChha2EuIGRlcHRoIDAgaGFzIGJlZW4gcmVhY2hlZClcbiAgbGV0IHJlYWNoZWRSb290ID0gZmFsc2U7XG5cbiAgaWYgKHhtbERhdGFbMF0gPT09ICdcXHVmZWZmJykge1xuICAgIC8vIGNoZWNrIGZvciBieXRlIG9yZGVyIG1hcmsgKEJPTSlcbiAgICB4bWxEYXRhID0geG1sRGF0YS5zdWJzdHIoMSk7XG4gIH1cbiAgXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKykge1xuXG4gICAgaWYgKHhtbERhdGFbaV0gPT09ICc8JyAmJiB4bWxEYXRhW2krMV0gPT09ICc/Jykge1xuICAgICAgaSs9MjtcbiAgICAgIGkgPSByZWFkUEkoeG1sRGF0YSxpKTtcbiAgICAgIGlmIChpLmVycikgcmV0dXJuIGk7XG4gICAgfWVsc2UgaWYgKHhtbERhdGFbaV0gPT09ICc8Jykge1xuICAgICAgLy9zdGFydGluZyBvZiB0YWdcbiAgICAgIC8vcmVhZCB1bnRpbCB5b3UgcmVhY2ggdG8gJz4nIGF2b2lkaW5nIGFueSAnPicgaW4gYXR0cmlidXRlIHZhbHVlXG4gICAgICBsZXQgdGFnU3RhcnRQb3MgPSBpO1xuICAgICAgaSsrO1xuICAgICAgXG4gICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJyEnKSB7XG4gICAgICAgIGkgPSByZWFkQ29tbWVudEFuZENEQVRBKHhtbERhdGEsIGkpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBjbG9zaW5nVGFnID0gZmFsc2U7XG4gICAgICAgIGlmICh4bWxEYXRhW2ldID09PSAnLycpIHtcbiAgICAgICAgICAvL2Nsb3NpbmcgdGFnXG4gICAgICAgICAgY2xvc2luZ1RhZyA9IHRydWU7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIC8vcmVhZCB0YWduYW1lXG4gICAgICAgIGxldCB0YWdOYW1lID0gJyc7XG4gICAgICAgIGZvciAoOyBpIDwgeG1sRGF0YS5sZW5ndGggJiZcbiAgICAgICAgICB4bWxEYXRhW2ldICE9PSAnPicgJiZcbiAgICAgICAgICB4bWxEYXRhW2ldICE9PSAnICcgJiZcbiAgICAgICAgICB4bWxEYXRhW2ldICE9PSAnXFx0JyAmJlxuICAgICAgICAgIHhtbERhdGFbaV0gIT09ICdcXG4nICYmXG4gICAgICAgICAgeG1sRGF0YVtpXSAhPT0gJ1xccic7IGkrK1xuICAgICAgICApIHtcbiAgICAgICAgICB0YWdOYW1lICs9IHhtbERhdGFbaV07XG4gICAgICAgIH1cbiAgICAgICAgdGFnTmFtZSA9IHRhZ05hbWUudHJpbSgpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKHRhZ05hbWUpO1xuXG4gICAgICAgIGlmICh0YWdOYW1lW3RhZ05hbWUubGVuZ3RoIC0gMV0gPT09ICcvJykge1xuICAgICAgICAgIC8vc2VsZiBjbG9zaW5nIHRhZyB3aXRob3V0IGF0dHJpYnV0ZXNcbiAgICAgICAgICB0YWdOYW1lID0gdGFnTmFtZS5zdWJzdHJpbmcoMCwgdGFnTmFtZS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAvL2NvbnRpbnVlO1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXZhbGlkYXRlVGFnTmFtZSh0YWdOYW1lKSkge1xuICAgICAgICAgIGxldCBtc2c7XG4gICAgICAgICAgaWYgKHRhZ05hbWUudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbXNnID0gXCJJbnZhbGlkIHNwYWNlIGFmdGVyICc8Jy5cIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbXNnID0gXCJUYWcgJ1wiK3RhZ05hbWUrXCInIGlzIGFuIGludmFsaWQgbmFtZS5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkVGFnJywgbXNnLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVhZEF0dHJpYnV0ZVN0cih4bWxEYXRhLCBpKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRBdHRyJywgXCJBdHRyaWJ1dGVzIGZvciAnXCIrdGFnTmFtZStcIicgaGF2ZSBvcGVuIHF1b3RlLlwiLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhdHRyU3RyID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpID0gcmVzdWx0LmluZGV4O1xuXG4gICAgICAgIGlmIChhdHRyU3RyW2F0dHJTdHIubGVuZ3RoIC0gMV0gPT09ICcvJykge1xuICAgICAgICAgIC8vc2VsZiBjbG9zaW5nIHRhZ1xuICAgICAgICAgIGNvbnN0IGF0dHJTdHJTdGFydCA9IGkgLSBhdHRyU3RyLmxlbmd0aDtcbiAgICAgICAgICBhdHRyU3RyID0gYXR0clN0ci5zdWJzdHJpbmcoMCwgYXR0clN0ci5sZW5ndGggLSAxKTtcbiAgICAgICAgICBjb25zdCBpc1ZhbGlkID0gdmFsaWRhdGVBdHRyaWJ1dGVTdHJpbmcoYXR0clN0ciwgb3B0aW9ucyk7XG4gICAgICAgICAgaWYgKGlzVmFsaWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRhZ0ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vY29udGludWU7IC8vdGV4dCBtYXkgcHJlc2VudHMgYWZ0ZXIgc2VsZiBjbG9zaW5nIHRhZ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL3RoZSByZXN1bHQgZnJvbSB0aGUgbmVzdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlIHBvc2l0aW9uIG9mIHRoZSBlcnJvciB3aXRoaW4gdGhlIGF0dHJpYnV0ZVxuICAgICAgICAgICAgLy9pbiBvcmRlciB0byBnZXQgdGhlICd0cnVlJyBlcnJvciBsaW5lLCB3ZSBuZWVkIHRvIGNhbGN1bGF0ZSB0aGUgcG9zaXRpb24gd2hlcmUgdGhlIGF0dHJpYnV0ZSBiZWdpbnMgKGkgLSBhdHRyU3RyLmxlbmd0aCkgYW5kIHRoZW4gYWRkIHRoZSBwb3NpdGlvbiB3aXRoaW4gdGhlIGF0dHJpYnV0ZVxuICAgICAgICAgICAgLy90aGlzIGdpdmVzIHVzIHRoZSBhYnNvbHV0ZSBpbmRleCBpbiB0aGUgZW50aXJlIHhtbCwgd2hpY2ggd2UgY2FuIHVzZSB0byBmaW5kIHRoZSBsaW5lIGF0IGxhc3RcbiAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdChpc1ZhbGlkLmVyci5jb2RlLCBpc1ZhbGlkLmVyci5tc2csIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBhdHRyU3RyU3RhcnQgKyBpc1ZhbGlkLmVyci5saW5lKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGNsb3NpbmdUYWcpIHtcbiAgICAgICAgICBpZiAoIXJlc3VsdC50YWdDbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZFRhZycsIFwiQ2xvc2luZyB0YWcgJ1wiK3RhZ05hbWUrXCInIGRvZXNuJ3QgaGF2ZSBwcm9wZXIgY2xvc2luZy5cIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGF0dHJTdHIudHJpbSgpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZFRhZycsIFwiQ2xvc2luZyB0YWcgJ1wiK3RhZ05hbWUrXCInIGNhbid0IGhhdmUgYXR0cmlidXRlcyBvciBpbnZhbGlkIHN0YXJ0aW5nLlwiLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgdGFnU3RhcnRQb3MpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRhZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRUYWcnLCBcIkNsb3NpbmcgdGFnICdcIit0YWdOYW1lK1wiJyBoYXMgbm90IGJlZW4gb3BlbmVkLlwiLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgdGFnU3RhcnRQb3MpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgb3RnID0gdGFncy5wb3AoKTtcbiAgICAgICAgICAgIGlmICh0YWdOYW1lICE9PSBvdGcudGFnTmFtZSkge1xuICAgICAgICAgICAgICBsZXQgb3BlblBvcyA9IGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBvdGcudGFnU3RhcnRQb3MpO1xuICAgICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRUYWcnLFxuICAgICAgICAgICAgICAgIFwiRXhwZWN0ZWQgY2xvc2luZyB0YWcgJ1wiK290Zy50YWdOYW1lK1wiJyAob3BlbmVkIGluIGxpbmUgXCIrb3BlblBvcy5saW5lK1wiLCBjb2wgXCIrb3BlblBvcy5jb2wrXCIpIGluc3RlYWQgb2YgY2xvc2luZyB0YWcgJ1wiK3RhZ05hbWUrXCInLlwiLFxuICAgICAgICAgICAgICAgIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCB0YWdTdGFydFBvcykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3doZW4gdGhlcmUgYXJlIG5vIG1vcmUgdGFncywgd2UgcmVhY2hlZCB0aGUgcm9vdCBsZXZlbC5cbiAgICAgICAgICAgIGlmICh0YWdzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgIHJlYWNoZWRSb290ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgaXNWYWxpZCA9IHZhbGlkYXRlQXR0cmlidXRlU3RyaW5nKGF0dHJTdHIsIG9wdGlvbnMpO1xuICAgICAgICAgIGlmIChpc1ZhbGlkICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAvL3RoZSByZXN1bHQgZnJvbSB0aGUgbmVzdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlIHBvc2l0aW9uIG9mIHRoZSBlcnJvciB3aXRoaW4gdGhlIGF0dHJpYnV0ZVxuICAgICAgICAgICAgLy9pbiBvcmRlciB0byBnZXQgdGhlICd0cnVlJyBlcnJvciBsaW5lLCB3ZSBuZWVkIHRvIGNhbGN1bGF0ZSB0aGUgcG9zaXRpb24gd2hlcmUgdGhlIGF0dHJpYnV0ZSBiZWdpbnMgKGkgLSBhdHRyU3RyLmxlbmd0aCkgYW5kIHRoZW4gYWRkIHRoZSBwb3NpdGlvbiB3aXRoaW4gdGhlIGF0dHJpYnV0ZVxuICAgICAgICAgICAgLy90aGlzIGdpdmVzIHVzIHRoZSBhYnNvbHV0ZSBpbmRleCBpbiB0aGUgZW50aXJlIHhtbCwgd2hpY2ggd2UgY2FuIHVzZSB0byBmaW5kIHRoZSBsaW5lIGF0IGxhc3RcbiAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdChpc1ZhbGlkLmVyci5jb2RlLCBpc1ZhbGlkLmVyci5tc2csIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpIC0gYXR0clN0ci5sZW5ndGggKyBpc1ZhbGlkLmVyci5saW5lKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy9pZiB0aGUgcm9vdCBsZXZlbCBoYXMgYmVlbiByZWFjaGVkIGJlZm9yZSAuLi5cbiAgICAgICAgICBpZiAocmVhY2hlZFJvb3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZFhtbCcsICdNdWx0aXBsZSBwb3NzaWJsZSByb290IG5vZGVzIGZvdW5kLicsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7XG4gICAgICAgICAgfSBlbHNlIGlmKG9wdGlvbnMudW5wYWlyZWRUYWdzLmluZGV4T2YodGFnTmFtZSkgIT09IC0xKXtcbiAgICAgICAgICAgIC8vZG9uJ3QgcHVzaCBpbnRvIHN0YWNrXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhZ3MucHVzaCh7dGFnTmFtZSwgdGFnU3RhcnRQb3N9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGFnRm91bmQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9za2lwIHRhZyB0ZXh0IHZhbHVlXG4gICAgICAgIC8vSXQgbWF5IGluY2x1ZGUgY29tbWVudHMgYW5kIENEQVRBIHZhbHVlXG4gICAgICAgIGZvciAoaSsrOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICh4bWxEYXRhW2ldID09PSAnPCcpIHtcbiAgICAgICAgICAgIGlmICh4bWxEYXRhW2kgKyAxXSA9PT0gJyEnKSB7XG4gICAgICAgICAgICAgIC8vY29tbWVudCBvciBDQURBVEFcbiAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICBpID0gcmVhZENvbW1lbnRBbmRDREFUQSh4bWxEYXRhLCBpKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHhtbERhdGFbaSsxXSA9PT0gJz8nKSB7XG4gICAgICAgICAgICAgIGkgPSByZWFkUEkoeG1sRGF0YSwgKytpKTtcbiAgICAgICAgICAgICAgaWYgKGkuZXJyKSByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZXtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh4bWxEYXRhW2ldID09PSAnJicpIHtcbiAgICAgICAgICAgIGNvbnN0IGFmdGVyQW1wID0gdmFsaWRhdGVBbXBlcnNhbmQoeG1sRGF0YSwgaSk7XG4gICAgICAgICAgICBpZiAoYWZ0ZXJBbXAgPT0gLTEpXG4gICAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZENoYXInLCBcImNoYXIgJyYnIGlzIG5vdCBleHBlY3RlZC5cIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkpKTtcbiAgICAgICAgICAgIGkgPSBhZnRlckFtcDtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGlmIChyZWFjaGVkUm9vdCA9PT0gdHJ1ZSAmJiAhaXNXaGl0ZVNwYWNlKHhtbERhdGFbaV0pKSB7XG4gICAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZFhtbCcsIFwiRXh0cmEgdGV4dCBhdCB0aGUgZW5kXCIsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vZW5kIG9mIHJlYWRpbmcgdGFnIHRleHQgdmFsdWVcbiAgICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICc8Jykge1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIGlzV2hpdGVTcGFjZSh4bWxEYXRhW2ldKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZENoYXInLCBcImNoYXIgJ1wiK3htbERhdGFbaV0rXCInIGlzIG5vdCBleHBlY3RlZC5cIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkpKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIXRhZ0ZvdW5kKSB7XG4gICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkWG1sJywgJ1N0YXJ0IHRhZyBleHBlY3RlZC4nLCAxKTtcbiAgfWVsc2UgaWYgKHRhZ3MubGVuZ3RoID09IDEpIHtcbiAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZFRhZycsIFwiVW5jbG9zZWQgdGFnICdcIit0YWdzWzBdLnRhZ05hbWUrXCInLlwiLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgdGFnc1swXS50YWdTdGFydFBvcykpO1xuICB9ZWxzZSBpZiAodGFncy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRYbWwnLCBcIkludmFsaWQgJ1wiK1xuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHRhZ3MubWFwKHQgPT4gdC50YWdOYW1lKSwgbnVsbCwgNCkucmVwbGFjZSgvXFxyP1xcbi9nLCAnJykrXG4gICAgICAgICAgXCInIGZvdW5kLlwiLCB7bGluZTogMSwgY29sOiAxfSk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIGlzV2hpdGVTcGFjZShjaGFyKXtcbiAgcmV0dXJuIGNoYXIgPT09ICcgJyB8fCBjaGFyID09PSAnXFx0JyB8fCBjaGFyID09PSAnXFxuJyAgfHwgY2hhciA9PT0gJ1xccic7XG59XG4vKipcbiAqIFJlYWQgUHJvY2Vzc2luZyBpbnNzdHJ1Y3Rpb25zIGFuZCBza2lwXG4gKiBAcGFyYW0geyp9IHhtbERhdGFcbiAqIEBwYXJhbSB7Kn0gaVxuICovXG5mdW5jdGlvbiByZWFkUEkoeG1sRGF0YSwgaSkge1xuICBjb25zdCBzdGFydCA9IGk7XG4gIGZvciAoOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGlmICh4bWxEYXRhW2ldID09ICc/JyB8fCB4bWxEYXRhW2ldID09ICcgJykge1xuICAgICAgLy90YWduYW1lXG4gICAgICBjb25zdCB0YWduYW1lID0geG1sRGF0YS5zdWJzdHIoc3RhcnQsIGkgLSBzdGFydCk7XG4gICAgICBpZiAoaSA+IDUgJiYgdGFnbmFtZSA9PT0gJ3htbCcpIHtcbiAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkWG1sJywgJ1hNTCBkZWNsYXJhdGlvbiBhbGxvd2VkIG9ubHkgYXQgdGhlIHN0YXJ0IG9mIHRoZSBkb2N1bWVudC4nLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSkpO1xuICAgICAgfSBlbHNlIGlmICh4bWxEYXRhW2ldID09ICc/JyAmJiB4bWxEYXRhW2kgKyAxXSA9PSAnPicpIHtcbiAgICAgICAgLy9jaGVjayBpZiB2YWxpZCBhdHRyaWJ1dCBzdHJpbmdcbiAgICAgICAgaSsrO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gaTtcbn1cblxuZnVuY3Rpb24gcmVhZENvbW1lbnRBbmRDREFUQSh4bWxEYXRhLCBpKSB7XG4gIGlmICh4bWxEYXRhLmxlbmd0aCA+IGkgKyA1ICYmIHhtbERhdGFbaSArIDFdID09PSAnLScgJiYgeG1sRGF0YVtpICsgMl0gPT09ICctJykge1xuICAgIC8vY29tbWVudFxuICAgIGZvciAoaSArPSAzOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICctJyAmJiB4bWxEYXRhW2kgKyAxXSA9PT0gJy0nICYmIHhtbERhdGFbaSArIDJdID09PSAnPicpIHtcbiAgICAgICAgaSArPSAyO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoXG4gICAgeG1sRGF0YS5sZW5ndGggPiBpICsgOCAmJlxuICAgIHhtbERhdGFbaSArIDFdID09PSAnRCcgJiZcbiAgICB4bWxEYXRhW2kgKyAyXSA9PT0gJ08nICYmXG4gICAgeG1sRGF0YVtpICsgM10gPT09ICdDJyAmJlxuICAgIHhtbERhdGFbaSArIDRdID09PSAnVCcgJiZcbiAgICB4bWxEYXRhW2kgKyA1XSA9PT0gJ1knICYmXG4gICAgeG1sRGF0YVtpICsgNl0gPT09ICdQJyAmJlxuICAgIHhtbERhdGFbaSArIDddID09PSAnRSdcbiAgKSB7XG4gICAgbGV0IGFuZ2xlQnJhY2tldHNDb3VudCA9IDE7XG4gICAgZm9yIChpICs9IDg7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJzwnKSB7XG4gICAgICAgIGFuZ2xlQnJhY2tldHNDb3VudCsrO1xuICAgICAgfSBlbHNlIGlmICh4bWxEYXRhW2ldID09PSAnPicpIHtcbiAgICAgICAgYW5nbGVCcmFja2V0c0NvdW50LS07XG4gICAgICAgIGlmIChhbmdsZUJyYWNrZXRzQ291bnQgPT09IDApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChcbiAgICB4bWxEYXRhLmxlbmd0aCA+IGkgKyA5ICYmXG4gICAgeG1sRGF0YVtpICsgMV0gPT09ICdbJyAmJlxuICAgIHhtbERhdGFbaSArIDJdID09PSAnQycgJiZcbiAgICB4bWxEYXRhW2kgKyAzXSA9PT0gJ0QnICYmXG4gICAgeG1sRGF0YVtpICsgNF0gPT09ICdBJyAmJlxuICAgIHhtbERhdGFbaSArIDVdID09PSAnVCcgJiZcbiAgICB4bWxEYXRhW2kgKyA2XSA9PT0gJ0EnICYmXG4gICAgeG1sRGF0YVtpICsgN10gPT09ICdbJ1xuICApIHtcbiAgICBmb3IgKGkgKz0gODsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh4bWxEYXRhW2ldID09PSAnXScgJiYgeG1sRGF0YVtpICsgMV0gPT09ICddJyAmJiB4bWxEYXRhW2kgKyAyXSA9PT0gJz4nKSB7XG4gICAgICAgIGkgKz0gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGk7XG59XG5cbmNvbnN0IGRvdWJsZVF1b3RlID0gJ1wiJztcbmNvbnN0IHNpbmdsZVF1b3RlID0gXCInXCI7XG5cbi8qKlxuICogS2VlcCByZWFkaW5nIHhtbERhdGEgdW50aWwgJzwnIGlzIGZvdW5kIG91dHNpZGUgdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB4bWxEYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gaVxuICovXG5mdW5jdGlvbiByZWFkQXR0cmlidXRlU3RyKHhtbERhdGEsIGkpIHtcbiAgbGV0IGF0dHJTdHIgPSAnJztcbiAgbGV0IHN0YXJ0Q2hhciA9ICcnO1xuICBsZXQgdGFnQ2xvc2VkID0gZmFsc2U7XG4gIGZvciAoOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGlmICh4bWxEYXRhW2ldID09PSBkb3VibGVRdW90ZSB8fCB4bWxEYXRhW2ldID09PSBzaW5nbGVRdW90ZSkge1xuICAgICAgaWYgKHN0YXJ0Q2hhciA9PT0gJycpIHtcbiAgICAgICAgc3RhcnRDaGFyID0geG1sRGF0YVtpXTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnRDaGFyICE9PSB4bWxEYXRhW2ldKSB7XG4gICAgICAgIC8vaWYgdmF1ZSBpcyBlbmNsb3NlZCB3aXRoIGRvdWJsZSBxdW90ZSB0aGVuIHNpbmdsZSBxdW90ZXMgYXJlIGFsbG93ZWQgaW5zaWRlIHRoZSB2YWx1ZSBhbmQgdmljZSB2ZXJzYVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhcnRDaGFyID0gJyc7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh4bWxEYXRhW2ldID09PSAnPicpIHtcbiAgICAgIGlmIChzdGFydENoYXIgPT09ICcnKSB7XG4gICAgICAgIHRhZ0Nsb3NlZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBhdHRyU3RyICs9IHhtbERhdGFbaV07XG4gIH1cbiAgaWYgKHN0YXJ0Q2hhciAhPT0gJycpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHZhbHVlOiBhdHRyU3RyLFxuICAgIGluZGV4OiBpLFxuICAgIHRhZ0Nsb3NlZDogdGFnQ2xvc2VkXG4gIH07XG59XG5cbi8qKlxuICogU2VsZWN0IGFsbCB0aGUgYXR0cmlidXRlcyB3aGV0aGVyIHZhbGlkIG9yIGludmFsaWQuXG4gKi9cbmNvbnN0IHZhbGlkQXR0clN0clJlZ3hwID0gbmV3IFJlZ0V4cCgnKFxcXFxzKikoW15cXFxccz1dKykoXFxcXHMqPSk/KFxcXFxzKihbXFwnXCJdKSgoW1xcXFxzXFxcXFNdKSo/KVxcXFw1KT8nLCAnZycpO1xuXG4vL2F0dHIsID1cInNkXCIsIGE9XCJhbWl0J3NcIiwgYT1cInNkXCJiPVwic2FmXCIsIGFiICBjZD1cIlwiXG5cbmZ1bmN0aW9uIHZhbGlkYXRlQXR0cmlidXRlU3RyaW5nKGF0dHJTdHIsIG9wdGlvbnMpIHtcbiAgLy9jb25zb2xlLmxvZyhcInN0YXJ0OlwiK2F0dHJTdHIrXCI6ZW5kXCIpO1xuXG4gIC8vaWYoYXR0clN0ci50cmltKCkubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTsgLy9lbXB0eSBzdHJpbmdcblxuICBjb25zdCBtYXRjaGVzID0gZ2V0QWxsTWF0Y2hlcyhhdHRyU3RyLCB2YWxpZEF0dHJTdHJSZWd4cCk7XG4gIGNvbnN0IGF0dHJOYW1lcyA9IHt9O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChtYXRjaGVzW2ldWzFdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy9ub3NwYWNlIGJlZm9yZSBhdHRyaWJ1dGUgbmFtZTogYT1cInNkXCJiPVwic2FmXCJcbiAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZEF0dHInLCBcIkF0dHJpYnV0ZSAnXCIrbWF0Y2hlc1tpXVsyXStcIicgaGFzIG5vIHNwYWNlIGluIHN0YXJ0aW5nLlwiLCBnZXRQb3NpdGlvbkZyb21NYXRjaChtYXRjaGVzW2ldKSlcbiAgICB9IGVsc2UgaWYgKG1hdGNoZXNbaV1bM10gIT09IHVuZGVmaW5lZCAmJiBtYXRjaGVzW2ldWzRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZEF0dHInLCBcIkF0dHJpYnV0ZSAnXCIrbWF0Y2hlc1tpXVsyXStcIicgaXMgd2l0aG91dCB2YWx1ZS5cIiwgZ2V0UG9zaXRpb25Gcm9tTWF0Y2gobWF0Y2hlc1tpXSkpO1xuICAgIH0gZWxzZSBpZiAobWF0Y2hlc1tpXVszXSA9PT0gdW5kZWZpbmVkICYmICFvcHRpb25zLmFsbG93Qm9vbGVhbkF0dHJpYnV0ZXMpIHtcbiAgICAgIC8vaW5kZXBlbmRlbnQgYXR0cmlidXRlOiBhYlxuICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkQXR0cicsIFwiYm9vbGVhbiBhdHRyaWJ1dGUgJ1wiK21hdGNoZXNbaV1bMl0rXCInIGlzIG5vdCBhbGxvd2VkLlwiLCBnZXRQb3NpdGlvbkZyb21NYXRjaChtYXRjaGVzW2ldKSk7XG4gICAgfVxuICAgIC8qIGVsc2UgaWYobWF0Y2hlc1tpXVs2XSA9PT0gdW5kZWZpbmVkKXsvL2F0dHJpYnV0ZSB3aXRob3V0IHZhbHVlOiBhYj1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyOiB7IGNvZGU6XCJJbnZhbGlkQXR0clwiLG1zZzpcImF0dHJpYnV0ZSBcIiArIG1hdGNoZXNbaV1bMl0gKyBcIiBoYXMgbm8gdmFsdWUgYXNzaWduZWQuXCJ9fTtcbiAgICAgICAgICAgICAgICB9ICovXG4gICAgY29uc3QgYXR0ck5hbWUgPSBtYXRjaGVzW2ldWzJdO1xuICAgIGlmICghdmFsaWRhdGVBdHRyTmFtZShhdHRyTmFtZSkpIHtcbiAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZEF0dHInLCBcIkF0dHJpYnV0ZSAnXCIrYXR0ck5hbWUrXCInIGlzIGFuIGludmFsaWQgbmFtZS5cIiwgZ2V0UG9zaXRpb25Gcm9tTWF0Y2gobWF0Y2hlc1tpXSkpO1xuICAgIH1cbiAgICBpZiAoIWF0dHJOYW1lcy5oYXNPd25Qcm9wZXJ0eShhdHRyTmFtZSkpIHtcbiAgICAgIC8vY2hlY2sgZm9yIGR1cGxpY2F0ZSBhdHRyaWJ1dGUuXG4gICAgICBhdHRyTmFtZXNbYXR0ck5hbWVdID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkQXR0cicsIFwiQXR0cmlidXRlICdcIithdHRyTmFtZStcIicgaXMgcmVwZWF0ZWQuXCIsIGdldFBvc2l0aW9uRnJvbU1hdGNoKG1hdGNoZXNbaV0pKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVOdW1iZXJBbXBlcnNhbmQoeG1sRGF0YSwgaSkge1xuICBsZXQgcmUgPSAvXFxkLztcbiAgaWYgKHhtbERhdGFbaV0gPT09ICd4Jykge1xuICAgIGkrKztcbiAgICByZSA9IC9bXFxkYS1mQS1GXS87XG4gIH1cbiAgZm9yICg7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHhtbERhdGFbaV0gPT09ICc7JylcbiAgICAgIHJldHVybiBpO1xuICAgIGlmICgheG1sRGF0YVtpXS5tYXRjaChyZSkpXG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQW1wZXJzYW5kKHhtbERhdGEsIGkpIHtcbiAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3htbC8jZHQtY2hhcnJlZlxuICBpKys7XG4gIGlmICh4bWxEYXRhW2ldID09PSAnOycpXG4gICAgcmV0dXJuIC0xO1xuICBpZiAoeG1sRGF0YVtpXSA9PT0gJyMnKSB7XG4gICAgaSsrO1xuICAgIHJldHVybiB2YWxpZGF0ZU51bWJlckFtcGVyc2FuZCh4bWxEYXRhLCBpKTtcbiAgfVxuICBsZXQgY291bnQgPSAwO1xuICBmb3IgKDsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyssIGNvdW50KyspIHtcbiAgICBpZiAoeG1sRGF0YVtpXS5tYXRjaCgvXFx3LykgJiYgY291bnQgPCAyMClcbiAgICAgIGNvbnRpbnVlO1xuICAgIGlmICh4bWxEYXRhW2ldID09PSAnOycpXG4gICAgICBicmVhaztcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgcmV0dXJuIGk7XG59XG5cbmZ1bmN0aW9uIGdldEVycm9yT2JqZWN0KGNvZGUsIG1lc3NhZ2UsIGxpbmVOdW1iZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBlcnI6IHtcbiAgICAgIGNvZGU6IGNvZGUsXG4gICAgICBtc2c6IG1lc3NhZ2UsXG4gICAgICBsaW5lOiBsaW5lTnVtYmVyLmxpbmUgfHwgbGluZU51bWJlcixcbiAgICAgIGNvbDogbGluZU51bWJlci5jb2wsXG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVBdHRyTmFtZShhdHRyTmFtZSkge1xuICByZXR1cm4gaXNOYW1lKGF0dHJOYW1lKTtcbn1cblxuLy8gY29uc3Qgc3RhcnRzV2l0aFhNTCA9IC9eeG1sL2k7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGFnTmFtZSh0YWduYW1lKSB7XG4gIHJldHVybiBpc05hbWUodGFnbmFtZSkgLyogJiYgIXRhZ25hbWUubWF0Y2goc3RhcnRzV2l0aFhNTCkgKi87XG59XG5cbi8vdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBsaW5lIG51bWJlciBmb3IgdGhlIGNoYXJhY3RlciBhdCB0aGUgZ2l2ZW4gaW5kZXhcbmZ1bmN0aW9uIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpbmRleCkge1xuICBjb25zdCBsaW5lcyA9IHhtbERhdGEuc3Vic3RyaW5nKDAsIGluZGV4KS5zcGxpdCgvXFxyP1xcbi8pO1xuICByZXR1cm4ge1xuICAgIGxpbmU6IGxpbmVzLmxlbmd0aCxcblxuICAgIC8vIGNvbHVtbiBudW1iZXIgaXMgbGFzdCBsaW5lJ3MgbGVuZ3RoICsgMSwgYmVjYXVzZSBjb2x1bW4gbnVtYmVyaW5nIHN0YXJ0cyBhdCAxOlxuICAgIGNvbDogbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubGVuZ3RoICsgMVxuICB9O1xufVxuXG4vL3RoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBtYXRjaCB3aXRoaW4gYXR0clN0clxuZnVuY3Rpb24gZ2V0UG9zaXRpb25Gcm9tTWF0Y2gobWF0Y2gpIHtcbiAgcmV0dXJuIG1hdGNoLnN0YXJ0SW5kZXggKyBtYXRjaFsxXS5sZW5ndGg7XG59XG4iLCJpbXBvcnQgeyBYTUxQYXJzZXIgfSBmcm9tIFwiZmFzdC14bWwtcGFyc2VyXCI7XG5jb25zdCBwYXJzZXIgPSBuZXcgWE1MUGFyc2VyKHtcbiAgICBhdHRyaWJ1dGVOYW1lUHJlZml4OiBcIlwiLFxuICAgIGh0bWxFbnRpdGllczogdHJ1ZSxcbiAgICBpZ25vcmVBdHRyaWJ1dGVzOiBmYWxzZSxcbiAgICBpZ25vcmVEZWNsYXJhdGlvbjogdHJ1ZSxcbiAgICBwYXJzZVRhZ1ZhbHVlOiBmYWxzZSxcbiAgICB0cmltVmFsdWVzOiBmYWxzZSxcbiAgICB0YWdWYWx1ZVByb2Nlc3NvcjogKF8sIHZhbCkgPT4gKHZhbC50cmltKCkgPT09IFwiXCIgJiYgdmFsLmluY2x1ZGVzKFwiXFxuXCIpID8gXCJcIiA6IHVuZGVmaW5lZCksXG59KTtcbnBhcnNlci5hZGRFbnRpdHkoXCIjeERcIiwgXCJcXHJcIik7XG5wYXJzZXIuYWRkRW50aXR5KFwiIzEwXCIsIFwiXFxuXCIpO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlWE1MKHhtbFN0cmluZykge1xuICAgIHJldHVybiBwYXJzZXIucGFyc2UoeG1sU3RyaW5nLCB0cnVlKTtcbn1cbiIsImltcG9ydCB7IGJ1aWxkT3B0aW9uc30gZnJvbSAnLi9PcHRpb25zQnVpbGRlci5qcyc7XG5pbXBvcnQgT3JkZXJlZE9ialBhcnNlciBmcm9tICcuL09yZGVyZWRPYmpQYXJzZXIuanMnO1xuaW1wb3J0IHByZXR0aWZ5IGZyb20gJy4vbm9kZTJqc29uLmpzJztcbmltcG9ydCB7dmFsaWRhdGV9IGZyb20gXCIuLi92YWxpZGF0b3IuanNcIjtcbmltcG9ydCBYbWxOb2RlIGZyb20gJy4veG1sTm9kZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhNTFBhcnNlcntcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKXtcbiAgICAgICAgdGhpcy5leHRlcm5hbEVudGl0aWVzID0ge307XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGJ1aWxkT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgXG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlIFhNTCBkYXRzIHRvIEpTIG9iamVjdCBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xCdWZmZXJ9IHhtbERhdGEgXG4gICAgICogQHBhcmFtIHtib29sZWFufE9iamVjdH0gdmFsaWRhdGlvbk9wdGlvbiBcbiAgICAgKi9cbiAgICBwYXJzZSh4bWxEYXRhLHZhbGlkYXRpb25PcHRpb24pe1xuICAgICAgICBpZih0eXBlb2YgeG1sRGF0YSA9PT0gXCJzdHJpbmdcIil7XG4gICAgICAgIH1lbHNlIGlmKCB4bWxEYXRhLnRvU3RyaW5nKXtcbiAgICAgICAgICAgIHhtbERhdGEgPSB4bWxEYXRhLnRvU3RyaW5nKCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWE1MIGRhdGEgaXMgYWNjZXB0ZWQgaW4gU3RyaW5nIG9yIEJ5dGVzW10gZm9ybS5cIilcbiAgICAgICAgfVxuICAgICAgICBpZiggdmFsaWRhdGlvbk9wdGlvbil7XG4gICAgICAgICAgICBpZih2YWxpZGF0aW9uT3B0aW9uID09PSB0cnVlKSB2YWxpZGF0aW9uT3B0aW9uID0ge307IC8vdmFsaWRhdGUgd2l0aCBkZWZhdWx0IG9wdGlvbnNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGUoeG1sRGF0YSwgdmFsaWRhdGlvbk9wdGlvbik7XG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKCBgJHtyZXN1bHQuZXJyLm1zZ306JHtyZXN1bHQuZXJyLmxpbmV9OiR7cmVzdWx0LmVyci5jb2x9YCApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBjb25zdCBvcmRlcmVkT2JqUGFyc2VyID0gbmV3IE9yZGVyZWRPYmpQYXJzZXIodGhpcy5vcHRpb25zKTtcbiAgICAgICAgb3JkZXJlZE9ialBhcnNlci5hZGRFeHRlcm5hbEVudGl0aWVzKHRoaXMuZXh0ZXJuYWxFbnRpdGllcyk7XG4gICAgICAgIGNvbnN0IG9yZGVyZWRSZXN1bHQgPSBvcmRlcmVkT2JqUGFyc2VyLnBhcnNlWG1sKHhtbERhdGEpO1xuICAgICAgICBpZih0aGlzLm9wdGlvbnMucHJlc2VydmVPcmRlciB8fCBvcmRlcmVkUmVzdWx0ID09PSB1bmRlZmluZWQpIHJldHVybiBvcmRlcmVkUmVzdWx0O1xuICAgICAgICBlbHNlIHJldHVybiBwcmV0dGlmeShvcmRlcmVkUmVzdWx0LCB0aGlzLm9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBFbnRpdHkgd2hpY2ggaXMgbm90IGJ5IGRlZmF1bHQgc3VwcG9ydGVkIGJ5IHRoaXMgbGlicmFyeVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFxuICAgICAqL1xuICAgIGFkZEVudGl0eShrZXksIHZhbHVlKXtcbiAgICAgICAgaWYodmFsdWUuaW5kZXhPZihcIiZcIikgIT09IC0xKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVudGl0eSB2YWx1ZSBjYW4ndCBoYXZlICcmJ1wiKVxuICAgICAgICB9ZWxzZSBpZihrZXkuaW5kZXhPZihcIiZcIikgIT09IC0xIHx8IGtleS5pbmRleE9mKFwiO1wiKSAhPT0gLTEpe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQW4gZW50aXR5IG11c3QgYmUgc2V0IHdpdGhvdXQgJyYnIGFuZCAnOycuIEVnLiB1c2UgJyN4RCcgZm9yICcmI3hEOydcIilcbiAgICAgICAgfWVsc2UgaWYodmFsdWUgPT09IFwiJlwiKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFuIGVudGl0eSB3aXRoIHZhbHVlICcmJyBpcyBub3QgcGVybWl0dGVkXCIpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRoaXMuZXh0ZXJuYWxFbnRpdGllc1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgU3ltYm9sIHRoYXQgY2FuIGJlIHVzZWQgdG8gYWNjZXNzIHRoZSBtZXRhZGF0YVxuICAgICAqIHByb3BlcnR5IG9uIGEgbm9kZS5cbiAgICAgKiBcbiAgICAgKiBJZiBTeW1ib2wgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgZW52aXJvbm1lbnQsIGFuIG9yZGluYXJ5IHByb3BlcnR5IGlzIHVzZWRcbiAgICAgKiBhbmQgdGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IGlzIGhlcmUgcmV0dXJuZWQuXG4gICAgICogXG4gICAgICogVGhlIFhNTE1ldGFEYXRhIHByb3BlcnR5IGlzIG9ubHkgcHJlc2VudCB3aGVuIGBjYXB0dXJlTWV0YURhdGFgXG4gICAgICogaXMgdHJ1ZSBpbiB0aGUgb3B0aW9ucy5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0TWV0YURhdGFTeW1ib2woKSB7XG4gICAgICAgIHJldHVybiBYbWxOb2RlLmdldE1ldGFEYXRhU3ltYm9sKCk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IGdldFZhbHVlRnJvbVRleHROb2RlID0gKG9iaikgPT4ge1xuICAgIGNvbnN0IHRleHROb2RlTmFtZSA9IFwiI3RleHRcIjtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIG9ialtrZXldW3RleHROb2RlTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb2JqW2tleV0gPSBvYmpba2V5XVt0ZXh0Tm9kZU5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBvYmpba2V5XSA9PT0gXCJvYmplY3RcIiAmJiBvYmpba2V5XSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgb2JqW2tleV0gPSBnZXRWYWx1ZUZyb21UZXh0Tm9kZShvYmpba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn07XG4iLCJpbXBvcnQgeyBwYXJzZVhNTCB9IGZyb20gXCJAYXdzLXNkay94bWwtYnVpbGRlclwiO1xuaW1wb3J0IHsgZ2V0VmFsdWVGcm9tVGV4dE5vZGUgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBjb2xsZWN0Qm9keVN0cmluZyB9IGZyb20gXCIuLi9jb21tb25cIjtcbmV4cG9ydCBjb25zdCBwYXJzZVhtbEJvZHkgPSAoc3RyZWFtQm9keSwgY29udGV4dCkgPT4gY29sbGVjdEJvZHlTdHJpbmcoc3RyZWFtQm9keSwgY29udGV4dCkudGhlbigoZW5jb2RlZCkgPT4ge1xuICAgIGlmIChlbmNvZGVkLmxlbmd0aCkge1xuICAgICAgICBsZXQgcGFyc2VkT2JqO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcGFyc2VkT2JqID0gcGFyc2VYTUwoZW5jb2RlZCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlICYmIHR5cGVvZiBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwiJHJlc3BvbnNlQm9keVRleHRcIiwge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZW5jb2RlZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGV4dE5vZGVOYW1lID0gXCIjdGV4dFwiO1xuICAgICAgICBjb25zdCBrZXkgPSBPYmplY3Qua2V5cyhwYXJzZWRPYmopWzBdO1xuICAgICAgICBjb25zdCBwYXJzZWRPYmpUb1JldHVybiA9IHBhcnNlZE9ialtrZXldO1xuICAgICAgICBpZiAocGFyc2VkT2JqVG9SZXR1cm5bdGV4dE5vZGVOYW1lXSkge1xuICAgICAgICAgICAgcGFyc2VkT2JqVG9SZXR1cm5ba2V5XSA9IHBhcnNlZE9ialRvUmV0dXJuW3RleHROb2RlTmFtZV07XG4gICAgICAgICAgICBkZWxldGUgcGFyc2VkT2JqVG9SZXR1cm5bdGV4dE5vZGVOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0VmFsdWVGcm9tVGV4dE5vZGUocGFyc2VkT2JqVG9SZXR1cm4pO1xuICAgIH1cbiAgICByZXR1cm4ge307XG59KTtcbmV4cG9ydCBjb25zdCBwYXJzZVhtbEVycm9yQm9keSA9IGFzeW5jIChlcnJvckJvZHksIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhcnNlWG1sQm9keShlcnJvckJvZHksIGNvbnRleHQpO1xuICAgIGlmICh2YWx1ZS5FcnJvcikge1xuICAgICAgICB2YWx1ZS5FcnJvci5tZXNzYWdlID0gdmFsdWUuRXJyb3IubWVzc2FnZSA/PyB2YWx1ZS5FcnJvci5NZXNzYWdlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuZXhwb3J0IGNvbnN0IGxvYWRSZXN0WG1sRXJyb3JDb2RlID0gKG91dHB1dCwgZGF0YSkgPT4ge1xuICAgIGlmIChkYXRhPy5FcnJvcj8uQ29kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBkYXRhLkVycm9yLkNvZGU7XG4gICAgfVxuICAgIGlmIChkYXRhPy5Db2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuQ29kZTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID09IDQwNCkge1xuICAgICAgICByZXR1cm4gXCJOb3RGb3VuZFwiO1xuICAgIH1cbn07XG4iLCJleHBvcnQgY29uc3QgYm9vbGVhblNlbGVjdG9yID0gKG9iaiwga2V5LCB0eXBlKSA9PiB7XG4gICAgaWYgKCEoa2V5IGluIG9iaikpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKG9ialtrZXldID09PSBcInRydWVcIilcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKG9ialtrZXldID09PSBcImZhbHNlXCIpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBsb2FkICR7dHlwZX0gXCIke2tleX1cIi4gRXhwZWN0ZWQgXCJ0cnVlXCIgb3IgXCJmYWxzZVwiLCBnb3QgJHtvYmpba2V5XX0uYCk7XG59O1xuIiwiaW1wb3J0IHsgaXNUaHJvdHRsaW5nRXJyb3IgfSBmcm9tIFwiQHNtaXRoeS9zZXJ2aWNlLWVycm9yLWNsYXNzaWZpY2F0aW9uXCI7XG5leHBvcnQgY2xhc3MgRGVmYXVsdFJhdGVMaW1pdGVyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY3VycmVudENhcGFjaXR5ID0gMDtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGFzdE1heFJhdGUgPSAwO1xuICAgICAgICB0aGlzLm1lYXN1cmVkVHhSYXRlID0gMDtcbiAgICAgICAgdGhpcy5yZXF1ZXN0Q291bnQgPSAwO1xuICAgICAgICB0aGlzLmxhc3RUaW1lc3RhbXAgPSAwO1xuICAgICAgICB0aGlzLnRpbWVXaW5kb3cgPSAwO1xuICAgICAgICB0aGlzLmJldGEgPSBvcHRpb25zPy5iZXRhID8/IDAuNztcbiAgICAgICAgdGhpcy5taW5DYXBhY2l0eSA9IG9wdGlvbnM/Lm1pbkNhcGFjaXR5ID8/IDE7XG4gICAgICAgIHRoaXMubWluRmlsbFJhdGUgPSBvcHRpb25zPy5taW5GaWxsUmF0ZSA/PyAwLjU7XG4gICAgICAgIHRoaXMuc2NhbGVDb25zdGFudCA9IG9wdGlvbnM/LnNjYWxlQ29uc3RhbnQgPz8gMC40O1xuICAgICAgICB0aGlzLnNtb290aCA9IG9wdGlvbnM/LnNtb290aCA/PyAwLjg7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lSW5TZWNvbmRzID0gdGhpcy5nZXRDdXJyZW50VGltZUluU2Vjb25kcygpO1xuICAgICAgICB0aGlzLmxhc3RUaHJvdHRsZVRpbWUgPSBjdXJyZW50VGltZUluU2Vjb25kcztcbiAgICAgICAgdGhpcy5sYXN0VHhSYXRlQnVja2V0ID0gTWF0aC5mbG9vcih0aGlzLmdldEN1cnJlbnRUaW1lSW5TZWNvbmRzKCkpO1xuICAgICAgICB0aGlzLmZpbGxSYXRlID0gdGhpcy5taW5GaWxsUmF0ZTtcbiAgICAgICAgdGhpcy5tYXhDYXBhY2l0eSA9IHRoaXMubWluQ2FwYWNpdHk7XG4gICAgfVxuICAgIGdldEN1cnJlbnRUaW1lSW5TZWNvbmRzKCkge1xuICAgICAgICByZXR1cm4gRGF0ZS5ub3coKSAvIDEwMDA7XG4gICAgfVxuICAgIGFzeW5jIGdldFNlbmRUb2tlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNxdWlyZVRva2VuQnVja2V0KDEpO1xuICAgIH1cbiAgICBhc3luYyBhY3F1aXJlVG9rZW5CdWNrZXQoYW1vdW50KSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWZpbGxUb2tlbkJ1Y2tldCgpO1xuICAgICAgICBpZiAoYW1vdW50ID4gdGhpcy5jdXJyZW50Q2FwYWNpdHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbGF5ID0gKChhbW91bnQgLSB0aGlzLmN1cnJlbnRDYXBhY2l0eSkgLyB0aGlzLmZpbGxSYXRlKSAqIDEwMDA7XG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gRGVmYXVsdFJhdGVMaW1pdGVyLnNldFRpbWVvdXRGbihyZXNvbHZlLCBkZWxheSkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudENhcGFjaXR5ID0gdGhpcy5jdXJyZW50Q2FwYWNpdHkgLSBhbW91bnQ7XG4gICAgfVxuICAgIHJlZmlsbFRva2VuQnVja2V0KCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSB0aGlzLmdldEN1cnJlbnRUaW1lSW5TZWNvbmRzKCk7XG4gICAgICAgIGlmICghdGhpcy5sYXN0VGltZXN0YW1wKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RUaW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlsbEFtb3VudCA9ICh0aW1lc3RhbXAgLSB0aGlzLmxhc3RUaW1lc3RhbXApICogdGhpcy5maWxsUmF0ZTtcbiAgICAgICAgdGhpcy5jdXJyZW50Q2FwYWNpdHkgPSBNYXRoLm1pbih0aGlzLm1heENhcGFjaXR5LCB0aGlzLmN1cnJlbnRDYXBhY2l0eSArIGZpbGxBbW91bnQpO1xuICAgICAgICB0aGlzLmxhc3RUaW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgfVxuICAgIHVwZGF0ZUNsaWVudFNlbmRpbmdSYXRlKHJlc3BvbnNlKSB7XG4gICAgICAgIGxldCBjYWxjdWxhdGVkUmF0ZTtcbiAgICAgICAgdGhpcy51cGRhdGVNZWFzdXJlZFJhdGUoKTtcbiAgICAgICAgaWYgKGlzVGhyb3R0bGluZ0Vycm9yKHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgY29uc3QgcmF0ZVRvVXNlID0gIXRoaXMuZW5hYmxlZCA/IHRoaXMubWVhc3VyZWRUeFJhdGUgOiBNYXRoLm1pbih0aGlzLm1lYXN1cmVkVHhSYXRlLCB0aGlzLmZpbGxSYXRlKTtcbiAgICAgICAgICAgIHRoaXMubGFzdE1heFJhdGUgPSByYXRlVG9Vc2U7XG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVRpbWVXaW5kb3coKTtcbiAgICAgICAgICAgIHRoaXMubGFzdFRocm90dGxlVGltZSA9IHRoaXMuZ2V0Q3VycmVudFRpbWVJblNlY29uZHMoKTtcbiAgICAgICAgICAgIGNhbGN1bGF0ZWRSYXRlID0gdGhpcy5jdWJpY1Rocm90dGxlKHJhdGVUb1VzZSk7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZVRva2VuQnVja2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVRpbWVXaW5kb3coKTtcbiAgICAgICAgICAgIGNhbGN1bGF0ZWRSYXRlID0gdGhpcy5jdWJpY1N1Y2Nlc3ModGhpcy5nZXRDdXJyZW50VGltZUluU2Vjb25kcygpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdSYXRlID0gTWF0aC5taW4oY2FsY3VsYXRlZFJhdGUsIDIgKiB0aGlzLm1lYXN1cmVkVHhSYXRlKTtcbiAgICAgICAgdGhpcy51cGRhdGVUb2tlbkJ1Y2tldFJhdGUobmV3UmF0ZSk7XG4gICAgfVxuICAgIGNhbGN1bGF0ZVRpbWVXaW5kb3coKSB7XG4gICAgICAgIHRoaXMudGltZVdpbmRvdyA9IHRoaXMuZ2V0UHJlY2lzZShNYXRoLnBvdygodGhpcy5sYXN0TWF4UmF0ZSAqICgxIC0gdGhpcy5iZXRhKSkgLyB0aGlzLnNjYWxlQ29uc3RhbnQsIDEgLyAzKSk7XG4gICAgfVxuICAgIGN1YmljVGhyb3R0bGUocmF0ZVRvVXNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFByZWNpc2UocmF0ZVRvVXNlICogdGhpcy5iZXRhKTtcbiAgICB9XG4gICAgY3ViaWNTdWNjZXNzKHRpbWVzdGFtcCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQcmVjaXNlKHRoaXMuc2NhbGVDb25zdGFudCAqIE1hdGgucG93KHRpbWVzdGFtcCAtIHRoaXMubGFzdFRocm90dGxlVGltZSAtIHRoaXMudGltZVdpbmRvdywgMykgKyB0aGlzLmxhc3RNYXhSYXRlKTtcbiAgICB9XG4gICAgZW5hYmxlVG9rZW5CdWNrZXQoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4gICAgfVxuICAgIHVwZGF0ZVRva2VuQnVja2V0UmF0ZShuZXdSYXRlKSB7XG4gICAgICAgIHRoaXMucmVmaWxsVG9rZW5CdWNrZXQoKTtcbiAgICAgICAgdGhpcy5maWxsUmF0ZSA9IE1hdGgubWF4KG5ld1JhdGUsIHRoaXMubWluRmlsbFJhdGUpO1xuICAgICAgICB0aGlzLm1heENhcGFjaXR5ID0gTWF0aC5tYXgobmV3UmF0ZSwgdGhpcy5taW5DYXBhY2l0eSk7XG4gICAgICAgIHRoaXMuY3VycmVudENhcGFjaXR5ID0gTWF0aC5taW4odGhpcy5jdXJyZW50Q2FwYWNpdHksIHRoaXMubWF4Q2FwYWNpdHkpO1xuICAgIH1cbiAgICB1cGRhdGVNZWFzdXJlZFJhdGUoKSB7XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmdldEN1cnJlbnRUaW1lSW5TZWNvbmRzKCk7XG4gICAgICAgIGNvbnN0IHRpbWVCdWNrZXQgPSBNYXRoLmZsb29yKHQgKiAyKSAvIDI7XG4gICAgICAgIHRoaXMucmVxdWVzdENvdW50Kys7XG4gICAgICAgIGlmICh0aW1lQnVja2V0ID4gdGhpcy5sYXN0VHhSYXRlQnVja2V0KSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50UmF0ZSA9IHRoaXMucmVxdWVzdENvdW50IC8gKHRpbWVCdWNrZXQgLSB0aGlzLmxhc3RUeFJhdGVCdWNrZXQpO1xuICAgICAgICAgICAgdGhpcy5tZWFzdXJlZFR4UmF0ZSA9IHRoaXMuZ2V0UHJlY2lzZShjdXJyZW50UmF0ZSAqIHRoaXMuc21vb3RoICsgdGhpcy5tZWFzdXJlZFR4UmF0ZSAqICgxIC0gdGhpcy5zbW9vdGgpKTtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdENvdW50ID0gMDtcbiAgICAgICAgICAgIHRoaXMubGFzdFR4UmF0ZUJ1Y2tldCA9IHRpbWVCdWNrZXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0UHJlY2lzZShudW0pIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobnVtLnRvRml4ZWQoOCkpO1xuICAgIH1cbn1cbkRlZmF1bHRSYXRlTGltaXRlci5zZXRUaW1lb3V0Rm4gPSBzZXRUaW1lb3V0O1xuIiwiaW1wb3J0IHsgREVGQVVMVF9SRVRSWV9ERUxBWV9CQVNFLCBNQVhJTVVNX1JFVFJZX0RFTEFZIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgY29uc3QgZ2V0RGVmYXVsdFJldHJ5QmFja29mZlN0cmF0ZWd5ID0gKCkgPT4ge1xuICAgIGxldCBkZWxheUJhc2UgPSBERUZBVUxUX1JFVFJZX0RFTEFZX0JBU0U7XG4gICAgY29uc3QgY29tcHV0ZU5leHRCYWNrb2ZmRGVsYXkgPSAoYXR0ZW1wdHMpID0+IHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5taW4oTUFYSU1VTV9SRVRSWV9ERUxBWSwgTWF0aC5yYW5kb20oKSAqIDIgKiogYXR0ZW1wdHMgKiBkZWxheUJhc2UpKTtcbiAgICB9O1xuICAgIGNvbnN0IHNldERlbGF5QmFzZSA9IChkZWxheSkgPT4ge1xuICAgICAgICBkZWxheUJhc2UgPSBkZWxheTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbXB1dGVOZXh0QmFja29mZkRlbGF5LFxuICAgICAgICBzZXREZWxheUJhc2UsXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBNQVhJTVVNX1JFVFJZX0RFTEFZIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgY29uc3QgY3JlYXRlRGVmYXVsdFJldHJ5VG9rZW4gPSAoeyByZXRyeURlbGF5LCByZXRyeUNvdW50LCByZXRyeUNvc3QsIH0pID0+IHtcbiAgICBjb25zdCBnZXRSZXRyeUNvdW50ID0gKCkgPT4gcmV0cnlDb3VudDtcbiAgICBjb25zdCBnZXRSZXRyeURlbGF5ID0gKCkgPT4gTWF0aC5taW4oTUFYSU1VTV9SRVRSWV9ERUxBWSwgcmV0cnlEZWxheSk7XG4gICAgY29uc3QgZ2V0UmV0cnlDb3N0ID0gKCkgPT4gcmV0cnlDb3N0O1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldFJldHJ5Q291bnQsXG4gICAgICAgIGdldFJldHJ5RGVsYXksXG4gICAgICAgIGdldFJldHJ5Q29zdCxcbiAgICB9O1xufTtcbiIsImltcG9ydCB7IERFRkFVTFRfTUFYX0FUVEVNUFRTLCBSRVRSWV9NT0RFUyB9IGZyb20gXCIuL2NvbmZpZ1wiO1xuaW1wb3J0IHsgREVGQVVMVF9SRVRSWV9ERUxBWV9CQVNFLCBJTklUSUFMX1JFVFJZX1RPS0VOUywgTk9fUkVUUllfSU5DUkVNRU5ULCBSRVRSWV9DT1NULCBUSFJPVFRMSU5HX1JFVFJZX0RFTEFZX0JBU0UsIFRJTUVPVVRfUkVUUllfQ09TVCwgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRSZXRyeUJhY2tvZmZTdHJhdGVneSB9IGZyb20gXCIuL2RlZmF1bHRSZXRyeUJhY2tvZmZTdHJhdGVneVwiO1xuaW1wb3J0IHsgY3JlYXRlRGVmYXVsdFJldHJ5VG9rZW4gfSBmcm9tIFwiLi9kZWZhdWx0UmV0cnlUb2tlblwiO1xuZXhwb3J0IGNsYXNzIFN0YW5kYXJkUmV0cnlTdHJhdGVneSB7XG4gICAgY29uc3RydWN0b3IobWF4QXR0ZW1wdHMpIHtcbiAgICAgICAgdGhpcy5tYXhBdHRlbXB0cyA9IG1heEF0dGVtcHRzO1xuICAgICAgICB0aGlzLm1vZGUgPSBSRVRSWV9NT0RFUy5TVEFOREFSRDtcbiAgICAgICAgdGhpcy5jYXBhY2l0eSA9IElOSVRJQUxfUkVUUllfVE9LRU5TO1xuICAgICAgICB0aGlzLnJldHJ5QmFja29mZlN0cmF0ZWd5ID0gZ2V0RGVmYXVsdFJldHJ5QmFja29mZlN0cmF0ZWd5KCk7XG4gICAgICAgIHRoaXMubWF4QXR0ZW1wdHNQcm92aWRlciA9IHR5cGVvZiBtYXhBdHRlbXB0cyA9PT0gXCJmdW5jdGlvblwiID8gbWF4QXR0ZW1wdHMgOiBhc3luYyAoKSA9PiBtYXhBdHRlbXB0cztcbiAgICB9XG4gICAgYXN5bmMgYWNxdWlyZUluaXRpYWxSZXRyeVRva2VuKHJldHJ5VG9rZW5TY29wZSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRGVmYXVsdFJldHJ5VG9rZW4oe1xuICAgICAgICAgICAgcmV0cnlEZWxheTogREVGQVVMVF9SRVRSWV9ERUxBWV9CQVNFLFxuICAgICAgICAgICAgcmV0cnlDb3VudDogMCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHJlZnJlc2hSZXRyeVRva2VuRm9yUmV0cnkodG9rZW4sIGVycm9ySW5mbykge1xuICAgICAgICBjb25zdCBtYXhBdHRlbXB0cyA9IGF3YWl0IHRoaXMuZ2V0TWF4QXR0ZW1wdHMoKTtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkUmV0cnkodG9rZW4sIGVycm9ySW5mbywgbWF4QXR0ZW1wdHMpKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvclR5cGUgPSBlcnJvckluZm8uZXJyb3JUeXBlO1xuICAgICAgICAgICAgdGhpcy5yZXRyeUJhY2tvZmZTdHJhdGVneS5zZXREZWxheUJhc2UoZXJyb3JUeXBlID09PSBcIlRIUk9UVExJTkdcIiA/IFRIUk9UVExJTkdfUkVUUllfREVMQVlfQkFTRSA6IERFRkFVTFRfUkVUUllfREVMQVlfQkFTRSk7XG4gICAgICAgICAgICBjb25zdCBkZWxheUZyb21FcnJvclR5cGUgPSB0aGlzLnJldHJ5QmFja29mZlN0cmF0ZWd5LmNvbXB1dGVOZXh0QmFja29mZkRlbGF5KHRva2VuLmdldFJldHJ5Q291bnQoKSk7XG4gICAgICAgICAgICBjb25zdCByZXRyeURlbGF5ID0gZXJyb3JJbmZvLnJldHJ5QWZ0ZXJIaW50XG4gICAgICAgICAgICAgICAgPyBNYXRoLm1heChlcnJvckluZm8ucmV0cnlBZnRlckhpbnQuZ2V0VGltZSgpIC0gRGF0ZS5ub3coKSB8fCAwLCBkZWxheUZyb21FcnJvclR5cGUpXG4gICAgICAgICAgICAgICAgOiBkZWxheUZyb21FcnJvclR5cGU7XG4gICAgICAgICAgICBjb25zdCBjYXBhY2l0eUNvc3QgPSB0aGlzLmdldENhcGFjaXR5Q29zdChlcnJvclR5cGUpO1xuICAgICAgICAgICAgdGhpcy5jYXBhY2l0eSAtPSBjYXBhY2l0eUNvc3Q7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRGVmYXVsdFJldHJ5VG9rZW4oe1xuICAgICAgICAgICAgICAgIHJldHJ5RGVsYXksXG4gICAgICAgICAgICAgICAgcmV0cnlDb3VudDogdG9rZW4uZ2V0UmV0cnlDb3VudCgpICsgMSxcbiAgICAgICAgICAgICAgICByZXRyeUNvc3Q6IGNhcGFjaXR5Q29zdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHJldHJ5IHRva2VuIGF2YWlsYWJsZVwiKTtcbiAgICB9XG4gICAgcmVjb3JkU3VjY2Vzcyh0b2tlbikge1xuICAgICAgICB0aGlzLmNhcGFjaXR5ID0gTWF0aC5tYXgoSU5JVElBTF9SRVRSWV9UT0tFTlMsIHRoaXMuY2FwYWNpdHkgKyAodG9rZW4uZ2V0UmV0cnlDb3N0KCkgPz8gTk9fUkVUUllfSU5DUkVNRU5UKSk7XG4gICAgfVxuICAgIGdldENhcGFjaXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYXBhY2l0eTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0TWF4QXR0ZW1wdHMoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5tYXhBdHRlbXB0c1Byb3ZpZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYE1heCBhdHRlbXB0cyBwcm92aWRlciBjb3VsZCBub3QgcmVzb2x2ZS4gVXNpbmcgZGVmYXVsdCBvZiAke0RFRkFVTFRfTUFYX0FUVEVNUFRTfWApO1xuICAgICAgICAgICAgcmV0dXJuIERFRkFVTFRfTUFYX0FUVEVNUFRTO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNob3VsZFJldHJ5KHRva2VuVG9SZW5ldywgZXJyb3JJbmZvLCBtYXhBdHRlbXB0cykge1xuICAgICAgICBjb25zdCBhdHRlbXB0cyA9IHRva2VuVG9SZW5ldy5nZXRSZXRyeUNvdW50KCkgKyAxO1xuICAgICAgICByZXR1cm4gKGF0dGVtcHRzIDwgbWF4QXR0ZW1wdHMgJiZcbiAgICAgICAgICAgIHRoaXMuY2FwYWNpdHkgPj0gdGhpcy5nZXRDYXBhY2l0eUNvc3QoZXJyb3JJbmZvLmVycm9yVHlwZSkgJiZcbiAgICAgICAgICAgIHRoaXMuaXNSZXRyeWFibGVFcnJvcihlcnJvckluZm8uZXJyb3JUeXBlKSk7XG4gICAgfVxuICAgIGdldENhcGFjaXR5Q29zdChlcnJvclR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yVHlwZSA9PT0gXCJUUkFOU0lFTlRcIiA/IFRJTUVPVVRfUkVUUllfQ09TVCA6IFJFVFJZX0NPU1Q7XG4gICAgfVxuICAgIGlzUmV0cnlhYmxlRXJyb3IoZXJyb3JUeXBlKSB7XG4gICAgICAgIHJldHVybiBlcnJvclR5cGUgPT09IFwiVEhST1RUTElOR1wiIHx8IGVycm9yVHlwZSA9PT0gXCJUUkFOU0lFTlRcIjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBSRVRSWV9NT0RFUyB9IGZyb20gXCIuL2NvbmZpZ1wiO1xuaW1wb3J0IHsgRGVmYXVsdFJhdGVMaW1pdGVyIH0gZnJvbSBcIi4vRGVmYXVsdFJhdGVMaW1pdGVyXCI7XG5pbXBvcnQgeyBTdGFuZGFyZFJldHJ5U3RyYXRlZ3kgfSBmcm9tIFwiLi9TdGFuZGFyZFJldHJ5U3RyYXRlZ3lcIjtcbmV4cG9ydCBjbGFzcyBBZGFwdGl2ZVJldHJ5U3RyYXRlZ3kge1xuICAgIGNvbnN0cnVjdG9yKG1heEF0dGVtcHRzUHJvdmlkZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5tYXhBdHRlbXB0c1Byb3ZpZGVyID0gbWF4QXR0ZW1wdHNQcm92aWRlcjtcbiAgICAgICAgdGhpcy5tb2RlID0gUkVUUllfTU9ERVMuQURBUFRJVkU7XG4gICAgICAgIGNvbnN0IHsgcmF0ZUxpbWl0ZXIgfSA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIHRoaXMucmF0ZUxpbWl0ZXIgPSByYXRlTGltaXRlciA/PyBuZXcgRGVmYXVsdFJhdGVMaW1pdGVyKCk7XG4gICAgICAgIHRoaXMuc3RhbmRhcmRSZXRyeVN0cmF0ZWd5ID0gbmV3IFN0YW5kYXJkUmV0cnlTdHJhdGVneShtYXhBdHRlbXB0c1Byb3ZpZGVyKTtcbiAgICB9XG4gICAgYXN5bmMgYWNxdWlyZUluaXRpYWxSZXRyeVRva2VuKHJldHJ5VG9rZW5TY29wZSkge1xuICAgICAgICBhd2FpdCB0aGlzLnJhdGVMaW1pdGVyLmdldFNlbmRUb2tlbigpO1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFuZGFyZFJldHJ5U3RyYXRlZ3kuYWNxdWlyZUluaXRpYWxSZXRyeVRva2VuKHJldHJ5VG9rZW5TY29wZSk7XG4gICAgfVxuICAgIGFzeW5jIHJlZnJlc2hSZXRyeVRva2VuRm9yUmV0cnkodG9rZW5Ub1JlbmV3LCBlcnJvckluZm8pIHtcbiAgICAgICAgdGhpcy5yYXRlTGltaXRlci51cGRhdGVDbGllbnRTZW5kaW5nUmF0ZShlcnJvckluZm8pO1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFuZGFyZFJldHJ5U3RyYXRlZ3kucmVmcmVzaFJldHJ5VG9rZW5Gb3JSZXRyeSh0b2tlblRvUmVuZXcsIGVycm9ySW5mbyk7XG4gICAgfVxuICAgIHJlY29yZFN1Y2Nlc3ModG9rZW4pIHtcbiAgICAgICAgdGhpcy5yYXRlTGltaXRlci51cGRhdGVDbGllbnRTZW5kaW5nUmF0ZSh7fSk7XG4gICAgICAgIHRoaXMuc3RhbmRhcmRSZXRyeVN0cmF0ZWd5LnJlY29yZFN1Y2Nlc3ModG9rZW4pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IG5vcm1hbGl6ZVByb3ZpZGVyIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1taWRkbGV3YXJlXCI7XG5pbXBvcnQgeyBBZGFwdGl2ZVJldHJ5U3RyYXRlZ3ksIERFRkFVTFRfTUFYX0FUVEVNUFRTLCBERUZBVUxUX1JFVFJZX01PREUsIFJFVFJZX01PREVTLCBTdGFuZGFyZFJldHJ5U3RyYXRlZ3ksIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1yZXRyeVwiO1xuZXhwb3J0IGNvbnN0IEVOVl9NQVhfQVRURU1QVFMgPSBcIkFXU19NQVhfQVRURU1QVFNcIjtcbmV4cG9ydCBjb25zdCBDT05GSUdfTUFYX0FUVEVNUFRTID0gXCJtYXhfYXR0ZW1wdHNcIjtcbmV4cG9ydCBjb25zdCBOT0RFX01BWF9BVFRFTVBUX0NPTkZJR19PUFRJT05TID0ge1xuICAgIGVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvcjogKGVudikgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGVudltFTlZfTUFYX0FUVEVNUFRTXTtcbiAgICAgICAgaWYgKCF2YWx1ZSlcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IG1heEF0dGVtcHQgPSBwYXJzZUludCh2YWx1ZSk7XG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4obWF4QXR0ZW1wdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRW52aXJvbm1lbnQgdmFyaWFibGUgJHtFTlZfTUFYX0FUVEVNUFRTfSBtYXN0IGJlIGEgbnVtYmVyLCBnb3QgXCIke3ZhbHVlfVwiYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heEF0dGVtcHQ7XG4gICAgfSxcbiAgICBjb25maWdGaWxlU2VsZWN0b3I6IChwcm9maWxlKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcHJvZmlsZVtDT05GSUdfTUFYX0FUVEVNUFRTXTtcbiAgICAgICAgaWYgKCF2YWx1ZSlcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IG1heEF0dGVtcHQgPSBwYXJzZUludCh2YWx1ZSk7XG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4obWF4QXR0ZW1wdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU2hhcmVkIGNvbmZpZyBmaWxlIGVudHJ5ICR7Q09ORklHX01BWF9BVFRFTVBUU30gbWFzdCBiZSBhIG51bWJlciwgZ290IFwiJHt2YWx1ZX1cImApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXhBdHRlbXB0O1xuICAgIH0sXG4gICAgZGVmYXVsdDogREVGQVVMVF9NQVhfQVRURU1QVFMsXG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVSZXRyeUNvbmZpZyA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHsgcmV0cnlTdHJhdGVneSwgcmV0cnlNb2RlOiBfcmV0cnlNb2RlLCBtYXhBdHRlbXB0czogX21heEF0dGVtcHRzIH0gPSBpbnB1dDtcbiAgICBjb25zdCBtYXhBdHRlbXB0cyA9IG5vcm1hbGl6ZVByb3ZpZGVyKF9tYXhBdHRlbXB0cyA/PyBERUZBVUxUX01BWF9BVFRFTVBUUyk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oaW5wdXQsIHtcbiAgICAgICAgbWF4QXR0ZW1wdHMsXG4gICAgICAgIHJldHJ5U3RyYXRlZ3k6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXRyeVN0cmF0ZWd5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldHJ5U3RyYXRlZ3k7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXRyeU1vZGUgPSBhd2FpdCBub3JtYWxpemVQcm92aWRlcihfcmV0cnlNb2RlKSgpO1xuICAgICAgICAgICAgaWYgKHJldHJ5TW9kZSA9PT0gUkVUUllfTU9ERVMuQURBUFRJVkUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFkYXB0aXZlUmV0cnlTdHJhdGVneShtYXhBdHRlbXB0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0YW5kYXJkUmV0cnlTdHJhdGVneShtYXhBdHRlbXB0cyk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59O1xuZXhwb3J0IGNvbnN0IEVOVl9SRVRSWV9NT0RFID0gXCJBV1NfUkVUUllfTU9ERVwiO1xuZXhwb3J0IGNvbnN0IENPTkZJR19SRVRSWV9NT0RFID0gXCJyZXRyeV9tb2RlXCI7XG5leHBvcnQgY29uc3QgTk9ERV9SRVRSWV9NT0RFX0NPTkZJR19PUFRJT05TID0ge1xuICAgIGVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvcjogKGVudikgPT4gZW52W0VOVl9SRVRSWV9NT0RFXSxcbiAgICBjb25maWdGaWxlU2VsZWN0b3I6IChwcm9maWxlKSA9PiBwcm9maWxlW0NPTkZJR19SRVRSWV9NT0RFXSxcbiAgICBkZWZhdWx0OiBERUZBVUxUX1JFVFJZX01PREUsXG59O1xuIiwiZXhwb3J0IGNsYXNzIFByb3ZpZGVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgb3B0aW9ucyA9IHRydWUpIHtcbiAgICAgICAgbGV0IGxvZ2dlcjtcbiAgICAgICAgbGV0IHRyeU5leHRMaW5rID0gdHJ1ZTtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgbG9nZ2VyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdHJ5TmV4dExpbmsgPSBvcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMgIT0gbnVsbCAmJiB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgbG9nZ2VyID0gb3B0aW9ucy5sb2dnZXI7XG4gICAgICAgICAgICB0cnlOZXh0TGluayA9IG9wdGlvbnMudHJ5TmV4dExpbmsgPz8gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJQcm92aWRlckVycm9yXCI7XG4gICAgICAgIHRoaXMudHJ5TmV4dExpbmsgPSB0cnlOZXh0TGluaztcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFByb3ZpZGVyRXJyb3IucHJvdG90eXBlKTtcbiAgICAgICAgbG9nZ2VyPy5kZWJ1Zz8uKGBAc21pdGh5L3Byb3BlcnR5LXByb3ZpZGVyICR7dHJ5TmV4dExpbmsgPyBcIi0+XCIgOiBcIighKVwifSAke21lc3NhZ2V9YCk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tKGVycm9yLCBvcHRpb25zID0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgdGhpcyhlcnJvci5tZXNzYWdlLCBvcHRpb25zKSwgZXJyb3IpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNNSVRIWV9DT05URVhUX0tFWSB9IGZyb20gXCJAc21pdGh5L3R5cGVzXCI7XG5leHBvcnQgY29uc3QgZ2V0U21pdGh5Q29udGV4dCA9IChjb250ZXh0KSA9PiBjb250ZXh0W1NNSVRIWV9DT05URVhUX0tFWV0gfHwgKGNvbnRleHRbU01JVEhZX0NPTlRFWFRfS0VZXSA9IHt9KTtcbiIsImV4cG9ydCBjb25zdCBnZXRTa2V3Q29ycmVjdGVkRGF0ZSA9IChzeXN0ZW1DbG9ja09mZnNldCkgPT4gbmV3IERhdGUoRGF0ZS5ub3coKSArIHN5c3RlbUNsb2NrT2Zmc2V0KTtcbiIsImltcG9ydCB7IEh0dHBSZXNwb25zZSB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmV4cG9ydCBjb25zdCBnZXREYXRlSGVhZGVyID0gKHJlc3BvbnNlKSA9PiBIdHRwUmVzcG9uc2UuaXNJbnN0YW5jZShyZXNwb25zZSkgPyByZXNwb25zZS5oZWFkZXJzPy5kYXRlID8/IHJlc3BvbnNlLmhlYWRlcnM/LkRhdGUgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyBpc0Nsb2NrU2tld2VkIH0gZnJvbSBcIi4vaXNDbG9ja1NrZXdlZFwiO1xuZXhwb3J0IGNvbnN0IGdldFVwZGF0ZWRTeXN0ZW1DbG9ja09mZnNldCA9IChjbG9ja1RpbWUsIGN1cnJlbnRTeXN0ZW1DbG9ja09mZnNldCkgPT4ge1xuICAgIGNvbnN0IGNsb2NrVGltZUluTXMgPSBEYXRlLnBhcnNlKGNsb2NrVGltZSk7XG4gICAgaWYgKGlzQ2xvY2tTa2V3ZWQoY2xvY2tUaW1lSW5NcywgY3VycmVudFN5c3RlbUNsb2NrT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gY2xvY2tUaW1lSW5NcyAtIERhdGUubm93KCk7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50U3lzdGVtQ2xvY2tPZmZzZXQ7XG59O1xuIiwiaW1wb3J0IHsgZ2V0U2tld0NvcnJlY3RlZERhdGUgfSBmcm9tIFwiLi9nZXRTa2V3Q29ycmVjdGVkRGF0ZVwiO1xuZXhwb3J0IGNvbnN0IGlzQ2xvY2tTa2V3ZWQgPSAoY2xvY2tUaW1lLCBzeXN0ZW1DbG9ja09mZnNldCkgPT4gTWF0aC5hYnMoZ2V0U2tld0NvcnJlY3RlZERhdGUoc3lzdGVtQ2xvY2tPZmZzZXQpLmdldFRpbWUoKSAtIGNsb2NrVGltZSkgPj0gMzAwMDAwO1xuIiwiaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tIFwiQHNtaXRoeS9wcm90b2NvbC1odHRwXCI7XG5pbXBvcnQgeyBnZXREYXRlSGVhZGVyLCBnZXRTa2V3Q29ycmVjdGVkRGF0ZSwgZ2V0VXBkYXRlZFN5c3RlbUNsb2NrT2Zmc2V0IH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5jb25zdCB0aHJvd1NpZ25pbmdQcm9wZXJ0eUVycm9yID0gKG5hbWUsIHByb3BlcnR5KSA9PiB7XG4gICAgaWYgKCFwcm9wZXJ0eSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFByb3BlcnR5IFxcYCR7bmFtZX1cXGAgaXMgbm90IHJlc29sdmVkIGZvciBBV1MgU0RLIFNpZ1Y0QXV0aGApO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcGVydHk7XG59O1xuZXhwb3J0IGNvbnN0IHZhbGlkYXRlU2lnbmluZ1Byb3BlcnRpZXMgPSBhc3luYyAoc2lnbmluZ1Byb3BlcnRpZXMpID0+IHtcbiAgICBjb25zdCBjb250ZXh0ID0gdGhyb3dTaWduaW5nUHJvcGVydHlFcnJvcihcImNvbnRleHRcIiwgc2lnbmluZ1Byb3BlcnRpZXMuY29udGV4dCk7XG4gICAgY29uc3QgY29uZmlnID0gdGhyb3dTaWduaW5nUHJvcGVydHlFcnJvcihcImNvbmZpZ1wiLCBzaWduaW5nUHJvcGVydGllcy5jb25maWcpO1xuICAgIGNvbnN0IGF1dGhTY2hlbWUgPSBjb250ZXh0LmVuZHBvaW50VjI/LnByb3BlcnRpZXM/LmF1dGhTY2hlbWVzPy5bMF07XG4gICAgY29uc3Qgc2lnbmVyRnVuY3Rpb24gPSB0aHJvd1NpZ25pbmdQcm9wZXJ0eUVycm9yKFwic2lnbmVyXCIsIGNvbmZpZy5zaWduZXIpO1xuICAgIGNvbnN0IHNpZ25lciA9IGF3YWl0IHNpZ25lckZ1bmN0aW9uKGF1dGhTY2hlbWUpO1xuICAgIGNvbnN0IHNpZ25pbmdSZWdpb24gPSBzaWduaW5nUHJvcGVydGllcz8uc2lnbmluZ1JlZ2lvbjtcbiAgICBjb25zdCBzaWduaW5nUmVnaW9uU2V0ID0gc2lnbmluZ1Byb3BlcnRpZXM/LnNpZ25pbmdSZWdpb25TZXQ7XG4gICAgY29uc3Qgc2lnbmluZ05hbWUgPSBzaWduaW5nUHJvcGVydGllcz8uc2lnbmluZ05hbWU7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29uZmlnLFxuICAgICAgICBzaWduZXIsXG4gICAgICAgIHNpZ25pbmdSZWdpb24sXG4gICAgICAgIHNpZ25pbmdSZWdpb25TZXQsXG4gICAgICAgIHNpZ25pbmdOYW1lLFxuICAgIH07XG59O1xuZXhwb3J0IGNsYXNzIEF3c1Nka1NpZ1Y0U2lnbmVyIHtcbiAgICBhc3luYyBzaWduKGh0dHBSZXF1ZXN0LCBpZGVudGl0eSwgc2lnbmluZ1Byb3BlcnRpZXMpIHtcbiAgICAgICAgaWYgKCFIdHRwUmVxdWVzdC5pc0luc3RhbmNlKGh0dHBSZXF1ZXN0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHJlcXVlc3QgaXMgbm90IGFuIGluc3RhbmNlIG9mIGBIdHRwUmVxdWVzdGAgYW5kIGNhbm5vdCBiZSBzaWduZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsaWRhdGVkUHJvcHMgPSBhd2FpdCB2YWxpZGF0ZVNpZ25pbmdQcm9wZXJ0aWVzKHNpZ25pbmdQcm9wZXJ0aWVzKTtcbiAgICAgICAgY29uc3QgeyBjb25maWcsIHNpZ25lciB9ID0gdmFsaWRhdGVkUHJvcHM7XG4gICAgICAgIGxldCB7IHNpZ25pbmdSZWdpb24sIHNpZ25pbmdOYW1lIH0gPSB2YWxpZGF0ZWRQcm9wcztcbiAgICAgICAgY29uc3QgaGFuZGxlckV4ZWN1dGlvbkNvbnRleHQgPSBzaWduaW5nUHJvcGVydGllcy5jb250ZXh0O1xuICAgICAgICBpZiAoaGFuZGxlckV4ZWN1dGlvbkNvbnRleHQ/LmF1dGhTY2hlbWVzPy5sZW5ndGggPz8gMCA+IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IFtmaXJzdCwgc2Vjb25kXSA9IGhhbmRsZXJFeGVjdXRpb25Db250ZXh0LmF1dGhTY2hlbWVzO1xuICAgICAgICAgICAgaWYgKGZpcnN0Py5uYW1lID09PSBcInNpZ3Y0YVwiICYmIHNlY29uZD8ubmFtZSA9PT0gXCJzaWd2NFwiKSB7XG4gICAgICAgICAgICAgICAgc2lnbmluZ1JlZ2lvbiA9IHNlY29uZD8uc2lnbmluZ1JlZ2lvbiA/PyBzaWduaW5nUmVnaW9uO1xuICAgICAgICAgICAgICAgIHNpZ25pbmdOYW1lID0gc2Vjb25kPy5zaWduaW5nTmFtZSA/PyBzaWduaW5nTmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzaWduZWRSZXF1ZXN0ID0gYXdhaXQgc2lnbmVyLnNpZ24oaHR0cFJlcXVlc3QsIHtcbiAgICAgICAgICAgIHNpZ25pbmdEYXRlOiBnZXRTa2V3Q29ycmVjdGVkRGF0ZShjb25maWcuc3lzdGVtQ2xvY2tPZmZzZXQpLFxuICAgICAgICAgICAgc2lnbmluZ1JlZ2lvbjogc2lnbmluZ1JlZ2lvbixcbiAgICAgICAgICAgIHNpZ25pbmdTZXJ2aWNlOiBzaWduaW5nTmFtZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzaWduZWRSZXF1ZXN0O1xuICAgIH1cbiAgICBlcnJvckhhbmRsZXIoc2lnbmluZ1Byb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VydmVyVGltZSA9IGVycm9yLlNlcnZlclRpbWUgPz8gZ2V0RGF0ZUhlYWRlcihlcnJvci4kcmVzcG9uc2UpO1xuICAgICAgICAgICAgaWYgKHNlcnZlclRpbWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSB0aHJvd1NpZ25pbmdQcm9wZXJ0eUVycm9yKFwiY29uZmlnXCIsIHNpZ25pbmdQcm9wZXJ0aWVzLmNvbmZpZyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5pdGlhbFN5c3RlbUNsb2NrT2Zmc2V0ID0gY29uZmlnLnN5c3RlbUNsb2NrT2Zmc2V0O1xuICAgICAgICAgICAgICAgIGNvbmZpZy5zeXN0ZW1DbG9ja09mZnNldCA9IGdldFVwZGF0ZWRTeXN0ZW1DbG9ja09mZnNldChzZXJ2ZXJUaW1lLCBjb25maWcuc3lzdGVtQ2xvY2tPZmZzZXQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsb2NrU2tld0NvcnJlY3RlZCA9IGNvbmZpZy5zeXN0ZW1DbG9ja09mZnNldCAhPT0gaW5pdGlhbFN5c3RlbUNsb2NrT2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmIChjbG9ja1NrZXdDb3JyZWN0ZWQgJiYgZXJyb3IuJG1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLiRtZXRhZGF0YS5jbG9ja1NrZXdDb3JyZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBzdWNjZXNzSGFuZGxlcihodHRwUmVzcG9uc2UsIHNpZ25pbmdQcm9wZXJ0aWVzKSB7XG4gICAgICAgIGNvbnN0IGRhdGVIZWFkZXIgPSBnZXREYXRlSGVhZGVyKGh0dHBSZXNwb25zZSk7XG4gICAgICAgIGlmIChkYXRlSGVhZGVyKSB7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSB0aHJvd1NpZ25pbmdQcm9wZXJ0eUVycm9yKFwiY29uZmlnXCIsIHNpZ25pbmdQcm9wZXJ0aWVzLmNvbmZpZyk7XG4gICAgICAgICAgICBjb25maWcuc3lzdGVtQ2xvY2tPZmZzZXQgPSBnZXRVcGRhdGVkU3lzdGVtQ2xvY2tPZmZzZXQoZGF0ZUhlYWRlciwgY29uZmlnLnN5c3RlbUNsb2NrT2Zmc2V0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBBV1NTREtTaWdWNFNpZ25lciA9IEF3c1Nka1NpZ1Y0U2lnbmVyO1xuIiwiZXhwb3J0IGNvbnN0IEVOVl9QUk9GSUxFID0gXCJBV1NfUFJPRklMRVwiO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfUFJPRklMRSA9IFwiZGVmYXVsdFwiO1xuZXhwb3J0IGNvbnN0IGdldFByb2ZpbGVOYW1lID0gKGluaXQpID0+IGluaXQucHJvZmlsZSB8fCBwcm9jZXNzLmVudltFTlZfUFJPRklMRV0gfHwgREVGQVVMVF9QUk9GSUxFO1xuIiwiZXhwb3J0IGNvbnN0IHBhcnNlQm9vbGVhbiA9ICh2YWx1ZSkgPT4ge1xuICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgY2FzZSBcInRydWVcIjpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlIFwiZmFsc2VcIjpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIHBhcnNlIGJvb2xlYW4gdmFsdWUgXCIke3ZhbHVlfVwiYCk7XG4gICAgfVxufTtcbmV4cG9ydCBjb25zdCBleHBlY3RCb29sZWFuID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBpZiAodmFsdWUgPT09IDAgfHwgdmFsdWUgPT09IDEpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKHN0YWNrVHJhY2VXYXJuaW5nKGBFeHBlY3RlZCBib29sZWFuLCBnb3QgJHt0eXBlb2YgdmFsdWV9OiAke3ZhbHVlfWApKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY29uc3QgbG93ZXIgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAobG93ZXIgPT09IFwiZmFsc2VcIiB8fCBsb3dlciA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKHN0YWNrVHJhY2VXYXJuaW5nKGBFeHBlY3RlZCBib29sZWFuLCBnb3QgJHt0eXBlb2YgdmFsdWV9OiAke3ZhbHVlfWApKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG93ZXIgPT09IFwiZmFsc2VcIikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb3dlciA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgYm9vbGVhbiwgZ290ICR7dHlwZW9mIHZhbHVlfTogJHt2YWx1ZX1gKTtcbn07XG5leHBvcnQgY29uc3QgZXhwZWN0TnVtYmVyID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNOYU4ocGFyc2VkKSkge1xuICAgICAgICAgICAgaWYgKFN0cmluZyhwYXJzZWQpICE9PSBTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oc3RhY2tUcmFjZVdhcm5pbmcoYEV4cGVjdGVkIG51bWJlciBidXQgb2JzZXJ2ZWQgc3RyaW5nOiAke3ZhbHVlfWApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIG51bWJlciwgZ290ICR7dHlwZW9mIHZhbHVlfTogJHt2YWx1ZX1gKTtcbn07XG5jb25zdCBNQVhfRkxPQVQgPSBNYXRoLmNlaWwoMiAqKiAxMjcgKiAoMiAtIDIgKiogLTIzKSk7XG5leHBvcnQgY29uc3QgZXhwZWN0RmxvYXQzMiA9ICh2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IGV4cGVjdGVkID0gZXhwZWN0TnVtYmVyKHZhbHVlKTtcbiAgICBpZiAoZXhwZWN0ZWQgIT09IHVuZGVmaW5lZCAmJiAhTnVtYmVyLmlzTmFOKGV4cGVjdGVkKSAmJiBleHBlY3RlZCAhPT0gSW5maW5pdHkgJiYgZXhwZWN0ZWQgIT09IC1JbmZpbml0eSkge1xuICAgICAgICBpZiAoTWF0aC5hYnMoZXhwZWN0ZWQpID4gTUFYX0ZMT0FUKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCAzMi1iaXQgZmxvYXQsIGdvdCAke3ZhbHVlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBleHBlY3RlZDtcbn07XG5leHBvcnQgY29uc3QgZXhwZWN0TG9uZyA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSAmJiAhTnVtYmVyLmlzTmFOKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIGludGVnZXIsIGdvdCAke3R5cGVvZiB2YWx1ZX06ICR7dmFsdWV9YCk7XG59O1xuZXhwb3J0IGNvbnN0IGV4cGVjdEludCA9IGV4cGVjdExvbmc7XG5leHBvcnQgY29uc3QgZXhwZWN0SW50MzIgPSAodmFsdWUpID0+IGV4cGVjdFNpemVkSW50KHZhbHVlLCAzMik7XG5leHBvcnQgY29uc3QgZXhwZWN0U2hvcnQgPSAodmFsdWUpID0+IGV4cGVjdFNpemVkSW50KHZhbHVlLCAxNik7XG5leHBvcnQgY29uc3QgZXhwZWN0Qnl0ZSA9ICh2YWx1ZSkgPT4gZXhwZWN0U2l6ZWRJbnQodmFsdWUsIDgpO1xuY29uc3QgZXhwZWN0U2l6ZWRJbnQgPSAodmFsdWUsIHNpemUpID0+IHtcbiAgICBjb25zdCBleHBlY3RlZCA9IGV4cGVjdExvbmcodmFsdWUpO1xuICAgIGlmIChleHBlY3RlZCAhPT0gdW5kZWZpbmVkICYmIGNhc3RJbnQoZXhwZWN0ZWQsIHNpemUpICE9PSBleHBlY3RlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCAke3NpemV9LWJpdCBpbnRlZ2VyLCBnb3QgJHt2YWx1ZX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cGVjdGVkO1xufTtcbmNvbnN0IGNhc3RJbnQgPSAodmFsdWUsIHNpemUpID0+IHtcbiAgICBzd2l0Y2ggKHNpemUpIHtcbiAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgIHJldHVybiBJbnQzMkFycmF5Lm9mKHZhbHVlKVswXTtcbiAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgIHJldHVybiBJbnQxNkFycmF5Lm9mKHZhbHVlKVswXTtcbiAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgcmV0dXJuIEludDhBcnJheS5vZih2YWx1ZSlbMF07XG4gICAgfVxufTtcbmV4cG9ydCBjb25zdCBleHBlY3ROb25OdWxsID0gKHZhbHVlLCBsb2NhdGlvbikgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChsb2NhdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgYSBub24tbnVsbCB2YWx1ZSBmb3IgJHtsb2NhdGlvbn1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYSBub24tbnVsbCB2YWx1ZVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcbmV4cG9ydCBjb25zdCBleHBlY3RPYmplY3QgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IHJlY2VpdmVkVHlwZSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gXCJhcnJheVwiIDogdHlwZW9mIHZhbHVlO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIG9iamVjdCwgZ290ICR7cmVjZWl2ZWRUeXBlfTogJHt2YWx1ZX1gKTtcbn07XG5leHBvcnQgY29uc3QgZXhwZWN0U3RyaW5nID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmIChbXCJib29sZWFuXCIsIFwibnVtYmVyXCIsIFwiYmlnaW50XCJdLmluY2x1ZGVzKHR5cGVvZiB2YWx1ZSkpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oc3RhY2tUcmFjZVdhcm5pbmcoYEV4cGVjdGVkIHN0cmluZywgZ290ICR7dHlwZW9mIHZhbHVlfTogJHt2YWx1ZX1gKSk7XG4gICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBzdHJpbmcsIGdvdCAke3R5cGVvZiB2YWx1ZX06ICR7dmFsdWV9YCk7XG59O1xuZXhwb3J0IGNvbnN0IGV4cGVjdFVuaW9uID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgYXNPYmplY3QgPSBleHBlY3RPYmplY3QodmFsdWUpO1xuICAgIGNvbnN0IHNldEtleXMgPSBPYmplY3QuZW50cmllcyhhc09iamVjdClcbiAgICAgICAgLmZpbHRlcigoWywgdl0pID0+IHYgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoW2tdKSA9PiBrKTtcbiAgICBpZiAoc2V0S2V5cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVW5pb25zIG11c3QgaGF2ZSBleGFjdGx5IG9uZSBub24tbnVsbCBtZW1iZXIuIE5vbmUgd2VyZSBmb3VuZC5gKTtcbiAgICB9XG4gICAgaWYgKHNldEtleXMubGVuZ3RoID4gMSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBVbmlvbnMgbXVzdCBoYXZlIGV4YWN0bHkgb25lIG5vbi1udWxsIG1lbWJlci4gS2V5cyAke3NldEtleXN9IHdlcmUgbm90IG51bGwuYCk7XG4gICAgfVxuICAgIHJldHVybiBhc09iamVjdDtcbn07XG5leHBvcnQgY29uc3Qgc3RyaWN0UGFyc2VEb3VibGUgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGV4cGVjdE51bWJlcihwYXJzZU51bWJlcih2YWx1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gZXhwZWN0TnVtYmVyKHZhbHVlKTtcbn07XG5leHBvcnQgY29uc3Qgc3RyaWN0UGFyc2VGbG9hdCA9IHN0cmljdFBhcnNlRG91YmxlO1xuZXhwb3J0IGNvbnN0IHN0cmljdFBhcnNlRmxvYXQzMiA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZXhwZWN0RmxvYXQzMihwYXJzZU51bWJlcih2YWx1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gZXhwZWN0RmxvYXQzMih2YWx1ZSk7XG59O1xuY29uc3QgTlVNQkVSX1JFR0VYID0gLygtPyg/OjB8WzEtOV1cXGQqKSg/OlxcLlxcZCspPyg/OltlRV1bKy1dP1xcZCspPyl8KC0/SW5maW5pdHkpfChOYU4pL2c7XG5jb25zdCBwYXJzZU51bWJlciA9ICh2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IG1hdGNoZXMgPSB2YWx1ZS5tYXRjaChOVU1CRVJfUkVHRVgpO1xuICAgIGlmIChtYXRjaGVzID09PSBudWxsIHx8IG1hdGNoZXNbMF0ubGVuZ3RoICE9PSB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgcmVhbCBudW1iZXIsIGdvdCBpbXBsaWNpdCBOYU5gKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xufTtcbmV4cG9ydCBjb25zdCBsaW1pdGVkUGFyc2VEb3VibGUgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXRTdHJpbmcodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gZXhwZWN0TnVtYmVyKHZhbHVlKTtcbn07XG5leHBvcnQgY29uc3QgaGFuZGxlRmxvYXQgPSBsaW1pdGVkUGFyc2VEb3VibGU7XG5leHBvcnQgY29uc3QgbGltaXRlZFBhcnNlRmxvYXQgPSBsaW1pdGVkUGFyc2VEb3VibGU7XG5leHBvcnQgY29uc3QgbGltaXRlZFBhcnNlRmxvYXQzMiA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdFN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBleHBlY3RGbG9hdDMyKHZhbHVlKTtcbn07XG5jb25zdCBwYXJzZUZsb2F0U3RyaW5nID0gKHZhbHVlKSA9PiB7XG4gICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICBjYXNlIFwiTmFOXCI6XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICBjYXNlIFwiSW5maW5pdHlcIjpcbiAgICAgICAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICAgICAgY2FzZSBcIi1JbmZpbml0eVwiOlxuICAgICAgICAgICAgcmV0dXJuIC1JbmZpbml0eTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIHBhcnNlIGZsb2F0IHZhbHVlOiAke3ZhbHVlfWApO1xuICAgIH1cbn07XG5leHBvcnQgY29uc3Qgc3RyaWN0UGFyc2VMb25nID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZXhwZWN0TG9uZyhwYXJzZU51bWJlcih2YWx1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gZXhwZWN0TG9uZyh2YWx1ZSk7XG59O1xuZXhwb3J0IGNvbnN0IHN0cmljdFBhcnNlSW50ID0gc3RyaWN0UGFyc2VMb25nO1xuZXhwb3J0IGNvbnN0IHN0cmljdFBhcnNlSW50MzIgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBleHBlY3RJbnQzMihwYXJzZU51bWJlcih2YWx1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gZXhwZWN0SW50MzIodmFsdWUpO1xufTtcbmV4cG9ydCBjb25zdCBzdHJpY3RQYXJzZVNob3J0ID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZXhwZWN0U2hvcnQocGFyc2VOdW1iZXIodmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cGVjdFNob3J0KHZhbHVlKTtcbn07XG5leHBvcnQgY29uc3Qgc3RyaWN0UGFyc2VCeXRlID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZXhwZWN0Qnl0ZShwYXJzZU51bWJlcih2YWx1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gZXhwZWN0Qnl0ZSh2YWx1ZSk7XG59O1xuY29uc3Qgc3RhY2tUcmFjZVdhcm5pbmcgPSAobWVzc2FnZSkgPT4ge1xuICAgIHJldHVybiBTdHJpbmcobmV3IFR5cGVFcnJvcihtZXNzYWdlKS5zdGFjayB8fCBtZXNzYWdlKVxuICAgICAgICAuc3BsaXQoXCJcXG5cIilcbiAgICAgICAgLnNsaWNlKDAsIDUpXG4gICAgICAgIC5maWx0ZXIoKHMpID0+ICFzLmluY2x1ZGVzKFwic3RhY2tUcmFjZVdhcm5pbmdcIikpXG4gICAgICAgIC5qb2luKFwiXFxuXCIpO1xufTtcbmV4cG9ydCBjb25zdCBsb2dnZXIgPSB7XG4gICAgd2FybjogY29uc29sZS53YXJuLFxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInBhdGhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY3J5cHRvXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInVybFwiKTsiLCJpbXBvcnQgeyBob21lZGlyIH0gZnJvbSBcIm9zXCI7XG5pbXBvcnQgeyBzZXAgfSBmcm9tIFwicGF0aFwiO1xuY29uc3QgaG9tZURpckNhY2hlID0ge307XG5jb25zdCBnZXRIb21lRGlyQ2FjaGVLZXkgPSAoKSA9PiB7XG4gICAgaWYgKHByb2Nlc3MgJiYgcHJvY2Vzcy5nZXRldWlkKSB7XG4gICAgICAgIHJldHVybiBgJHtwcm9jZXNzLmdldGV1aWQoKX1gO1xuICAgIH1cbiAgICByZXR1cm4gXCJERUZBVUxUXCI7XG59O1xuZXhwb3J0IGNvbnN0IGdldEhvbWVEaXIgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBIT01FLCBVU0VSUFJPRklMRSwgSE9NRVBBVEgsIEhPTUVEUklWRSA9IGBDOiR7c2VwfWAgfSA9IHByb2Nlc3MuZW52O1xuICAgIGlmIChIT01FKVxuICAgICAgICByZXR1cm4gSE9NRTtcbiAgICBpZiAoVVNFUlBST0ZJTEUpXG4gICAgICAgIHJldHVybiBVU0VSUFJPRklMRTtcbiAgICBpZiAoSE9NRVBBVEgpXG4gICAgICAgIHJldHVybiBgJHtIT01FRFJJVkV9JHtIT01FUEFUSH1gO1xuICAgIGNvbnN0IGhvbWVEaXJDYWNoZUtleSA9IGdldEhvbWVEaXJDYWNoZUtleSgpO1xuICAgIGlmICghaG9tZURpckNhY2hlW2hvbWVEaXJDYWNoZUtleV0pXG4gICAgICAgIGhvbWVEaXJDYWNoZVtob21lRGlyQ2FjaGVLZXldID0gaG9tZWRpcigpO1xuICAgIHJldHVybiBob21lRGlyQ2FjaGVbaG9tZURpckNhY2hlS2V5XTtcbn07XG4iLCJleHBvcnQgY29uc3QgREVGQVVMVF9SRVRSWV9ERUxBWV9CQVNFID0gMTAwO1xuZXhwb3J0IGNvbnN0IE1BWElNVU1fUkVUUllfREVMQVkgPSAyMCAqIDEwMDA7XG5leHBvcnQgY29uc3QgVEhST1RUTElOR19SRVRSWV9ERUxBWV9CQVNFID0gNTAwO1xuZXhwb3J0IGNvbnN0IElOSVRJQUxfUkVUUllfVE9LRU5TID0gNTAwO1xuZXhwb3J0IGNvbnN0IFJFVFJZX0NPU1QgPSA1O1xuZXhwb3J0IGNvbnN0IFRJTUVPVVRfUkVUUllfQ09TVCA9IDEwO1xuZXhwb3J0IGNvbnN0IE5PX1JFVFJZX0lOQ1JFTUVOVCA9IDE7XG5leHBvcnQgY29uc3QgSU5WT0NBVElPTl9JRF9IRUFERVIgPSBcImFtei1zZGstaW52b2NhdGlvbi1pZFwiO1xuZXhwb3J0IGNvbnN0IFJFUVVFU1RfSEVBREVSID0gXCJhbXotc2RrLXJlcXVlc3RcIjtcbiIsImV4cG9ydCBjb25zdCBkZWJ1Z0lkID0gXCJlbmRwb2ludHNcIjtcbiIsImV4cG9ydCBmdW5jdGlvbiB0b0RlYnVnU3RyaW5nKGlucHV0KSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgaWYgKFwicmVmXCIgaW4gaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGAkJHt0b0RlYnVnU3RyaW5nKGlucHV0LnJlZil9YDtcbiAgICB9XG4gICAgaWYgKFwiZm5cIiBpbiBpbnB1dCkge1xuICAgICAgICByZXR1cm4gYCR7aW5wdXQuZm59KCR7KGlucHV0LmFyZ3YgfHwgW10pLm1hcCh0b0RlYnVnU3RyaW5nKS5qb2luKFwiLCBcIil9KWA7XG4gICAgfVxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShpbnB1dCwgbnVsbCwgMik7XG59XG4iLCJleHBvcnQgY2xhc3MgRW5kcG9pbnRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkVuZHBvaW50RXJyb3JcIjtcbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgYm9vbGVhbkVxdWFscyA9ICh2YWx1ZTEsIHZhbHVlMikgPT4gdmFsdWUxID09PSB2YWx1ZTI7XG4iLCJpbXBvcnQgeyBFbmRwb2ludEVycm9yIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBnZXRBdHRyUGF0aExpc3QgfSBmcm9tIFwiLi9nZXRBdHRyUGF0aExpc3RcIjtcbmV4cG9ydCBjb25zdCBnZXRBdHRyID0gKHZhbHVlLCBwYXRoKSA9PiBnZXRBdHRyUGF0aExpc3QocGF0aCkucmVkdWNlKChhY2MsIGluZGV4KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBhY2MgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVuZHBvaW50RXJyb3IoYEluZGV4ICcke2luZGV4fScgaW4gJyR7cGF0aH0nIG5vdCBmb3VuZCBpbiAnJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9J2ApO1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFjYykpIHtcbiAgICAgICAgcmV0dXJuIGFjY1twYXJzZUludChpbmRleCldO1xuICAgIH1cbiAgICByZXR1cm4gYWNjW2luZGV4XTtcbn0sIHZhbHVlKTtcbiIsImltcG9ydCB7IEVuZHBvaW50RXJyb3IgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmV4cG9ydCBjb25zdCBnZXRBdHRyUGF0aExpc3QgPSAocGF0aCkgPT4ge1xuICAgIGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdChcIi5cIik7XG4gICAgY29uc3QgcGF0aExpc3QgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHMpIHtcbiAgICAgICAgY29uc3Qgc3F1YXJlQnJhY2tldEluZGV4ID0gcGFydC5pbmRleE9mKFwiW1wiKTtcbiAgICAgICAgaWYgKHNxdWFyZUJyYWNrZXRJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmluZGV4T2YoXCJdXCIpICE9PSBwYXJ0Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRW5kcG9pbnRFcnJvcihgUGF0aDogJyR7cGF0aH0nIGRvZXMgbm90IGVuZCB3aXRoICddJ2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYXJyYXlJbmRleCA9IHBhcnQuc2xpY2Uoc3F1YXJlQnJhY2tldEluZGV4ICsgMSwgLTEpO1xuICAgICAgICAgICAgaWYgKE51bWJlci5pc05hTihwYXJzZUludChhcnJheUluZGV4KSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRW5kcG9pbnRFcnJvcihgSW52YWxpZCBhcnJheSBpbmRleDogJyR7YXJyYXlJbmRleH0nIGluIHBhdGg6ICcke3BhdGh9J2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNxdWFyZUJyYWNrZXRJbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHBhdGhMaXN0LnB1c2gocGFydC5zbGljZSgwLCBzcXVhcmVCcmFja2V0SW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhdGhMaXN0LnB1c2goYXJyYXlJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXRoTGlzdC5wdXNoKHBhcnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXRoTGlzdDtcbn07XG4iLCJleHBvcnQgdmFyIEVuZHBvaW50VVJMU2NoZW1lO1xuKGZ1bmN0aW9uIChFbmRwb2ludFVSTFNjaGVtZSkge1xuICAgIEVuZHBvaW50VVJMU2NoZW1lW1wiSFRUUFwiXSA9IFwiaHR0cFwiO1xuICAgIEVuZHBvaW50VVJMU2NoZW1lW1wiSFRUUFNcIl0gPSBcImh0dHBzXCI7XG59KShFbmRwb2ludFVSTFNjaGVtZSB8fCAoRW5kcG9pbnRVUkxTY2hlbWUgPSB7fSkpO1xuIiwiaW1wb3J0IHsgRW5kcG9pbnRVUkxTY2hlbWUgfSBmcm9tIFwiQHNtaXRoeS90eXBlc1wiO1xuaW1wb3J0IHsgaXNJcEFkZHJlc3MgfSBmcm9tIFwiLi9pc0lwQWRkcmVzc1wiO1xuY29uc3QgREVGQVVMVF9QT1JUUyA9IHtcbiAgICBbRW5kcG9pbnRVUkxTY2hlbWUuSFRUUF06IDgwLFxuICAgIFtFbmRwb2ludFVSTFNjaGVtZS5IVFRQU106IDQ0Myxcbn07XG5leHBvcnQgY29uc3QgcGFyc2VVUkwgPSAodmFsdWUpID0+IHtcbiAgICBjb25zdCB3aGF0d2dVUkwgPSAoKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVVJMKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiBcImhvc3RuYW1lXCIgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGhvc3RuYW1lLCBwb3J0LCBwcm90b2NvbCA9IFwiXCIsIHBhdGggPSBcIlwiLCBxdWVyeSA9IHt9IH0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGAke3Byb3RvY29sfS8vJHtob3N0bmFtZX0ke3BvcnQgPyBgOiR7cG9ydH1gIDogXCJcIn0ke3BhdGh9YCk7XG4gICAgICAgICAgICAgICAgdXJsLnNlYXJjaCA9IE9iamVjdC5lbnRyaWVzKHF1ZXJ5KVxuICAgICAgICAgICAgICAgICAgICAubWFwKChbaywgdl0pID0+IGAke2t9PSR7dn1gKVxuICAgICAgICAgICAgICAgICAgICAuam9pbihcIiZcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgVVJMKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfSkoKTtcbiAgICBpZiAoIXdoYXR3Z1VSTCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBVbmFibGUgdG8gcGFyc2UgJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9IGFzIGEgd2hhdHdnIFVSTC5gKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHVybFN0cmluZyA9IHdoYXR3Z1VSTC5ocmVmO1xuICAgIGNvbnN0IHsgaG9zdCwgaG9zdG5hbWUsIHBhdGhuYW1lLCBwcm90b2NvbCwgc2VhcmNoIH0gPSB3aGF0d2dVUkw7XG4gICAgaWYgKHNlYXJjaCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3Qgc2NoZW1lID0gcHJvdG9jb2wuc2xpY2UoMCwgLTEpO1xuICAgIGlmICghT2JqZWN0LnZhbHVlcyhFbmRwb2ludFVSTFNjaGVtZSkuaW5jbHVkZXMoc2NoZW1lKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgaXNJcCA9IGlzSXBBZGRyZXNzKGhvc3RuYW1lKTtcbiAgICBjb25zdCBpbnB1dENvbnRhaW5zRGVmYXVsdFBvcnQgPSB1cmxTdHJpbmcuaW5jbHVkZXMoYCR7aG9zdH06JHtERUZBVUxUX1BPUlRTW3NjaGVtZV19YCkgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZS5pbmNsdWRlcyhgJHtob3N0fToke0RFRkFVTFRfUE9SVFNbc2NoZW1lXX1gKSk7XG4gICAgY29uc3QgYXV0aG9yaXR5ID0gYCR7aG9zdH0ke2lucHV0Q29udGFpbnNEZWZhdWx0UG9ydCA/IGA6JHtERUZBVUxUX1BPUlRTW3NjaGVtZV19YCA6IGBgfWA7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2NoZW1lLFxuICAgICAgICBhdXRob3JpdHksXG4gICAgICAgIHBhdGg6IHBhdGhuYW1lLFxuICAgICAgICBub3JtYWxpemVkUGF0aDogcGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpID8gcGF0aG5hbWUgOiBgJHtwYXRobmFtZX0vYCxcbiAgICAgICAgaXNJcCxcbiAgICB9O1xufTtcbiIsImltcG9ydCB7IGJvb2xlYW5FcXVhbHMsIGdldEF0dHIsIGlzU2V0LCBpc1ZhbGlkSG9zdExhYmVsLCBub3QsIHBhcnNlVVJMLCBzdHJpbmdFcXVhbHMsIHN1YnN0cmluZywgdXJpRW5jb2RlLCB9IGZyb20gXCIuLi9saWJcIjtcbmV4cG9ydCBjb25zdCBlbmRwb2ludEZ1bmN0aW9ucyA9IHtcbiAgICBib29sZWFuRXF1YWxzLFxuICAgIGdldEF0dHIsXG4gICAgaXNTZXQsXG4gICAgaXNWYWxpZEhvc3RMYWJlbCxcbiAgICBub3QsXG4gICAgcGFyc2VVUkwsXG4gICAgc3RyaW5nRXF1YWxzLFxuICAgIHN1YnN0cmluZyxcbiAgICB1cmlFbmNvZGUsXG59O1xuIiwiZXhwb3J0IGNvbnN0IGlzU2V0ID0gKHZhbHVlKSA9PiB2YWx1ZSAhPSBudWxsO1xuIiwiZXhwb3J0IGNvbnN0IG5vdCA9ICh2YWx1ZSkgPT4gIXZhbHVlO1xuIiwiZXhwb3J0IGNvbnN0IHN0cmluZ0VxdWFscyA9ICh2YWx1ZTEsIHZhbHVlMikgPT4gdmFsdWUxID09PSB2YWx1ZTI7XG4iLCJleHBvcnQgY29uc3Qgc3Vic3RyaW5nID0gKGlucHV0LCBzdGFydCwgc3RvcCwgcmV2ZXJzZSkgPT4ge1xuICAgIGlmIChzdGFydCA+PSBzdG9wIHx8IGlucHV0Lmxlbmd0aCA8IHN0b3ApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICghcmV2ZXJzZSkge1xuICAgICAgICByZXR1cm4gaW5wdXQuc3Vic3RyaW5nKHN0YXJ0LCBzdG9wKTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0LnN1YnN0cmluZyhpbnB1dC5sZW5ndGggLSBzdG9wLCBpbnB1dC5sZW5ndGggLSBzdGFydCk7XG59O1xuIiwiZXhwb3J0IGNvbnN0IHVyaUVuY29kZSA9ICh2YWx1ZSkgPT4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKS5yZXBsYWNlKC9bISonKCldL2csIChjKSA9PiBgJSR7Yy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfWApO1xuIiwiaW1wb3J0IHsgZ2V0QXR0ciB9IGZyb20gXCIuLi9saWJcIjtcbmV4cG9ydCBjb25zdCBldmFsdWF0ZVRlbXBsYXRlID0gKHRlbXBsYXRlLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgZXZhbHVhdGVkVGVtcGxhdGVBcnIgPSBbXTtcbiAgICBjb25zdCB0ZW1wbGF0ZUNvbnRleHQgPSB7XG4gICAgICAgIC4uLm9wdGlvbnMuZW5kcG9pbnRQYXJhbXMsXG4gICAgICAgIC4uLm9wdGlvbnMucmVmZXJlbmNlUmVjb3JkLFxuICAgIH07XG4gICAgbGV0IGN1cnJlbnRJbmRleCA9IDA7XG4gICAgd2hpbGUgKGN1cnJlbnRJbmRleCA8IHRlbXBsYXRlLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBvcGVuaW5nQnJhY2VJbmRleCA9IHRlbXBsYXRlLmluZGV4T2YoXCJ7XCIsIGN1cnJlbnRJbmRleCk7XG4gICAgICAgIGlmIChvcGVuaW5nQnJhY2VJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGV2YWx1YXRlZFRlbXBsYXRlQXJyLnB1c2godGVtcGxhdGUuc2xpY2UoY3VycmVudEluZGV4KSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBldmFsdWF0ZWRUZW1wbGF0ZUFyci5wdXNoKHRlbXBsYXRlLnNsaWNlKGN1cnJlbnRJbmRleCwgb3BlbmluZ0JyYWNlSW5kZXgpKTtcbiAgICAgICAgY29uc3QgY2xvc2luZ0JyYWNlSW5kZXggPSB0ZW1wbGF0ZS5pbmRleE9mKFwifVwiLCBvcGVuaW5nQnJhY2VJbmRleCk7XG4gICAgICAgIGlmIChjbG9zaW5nQnJhY2VJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGV2YWx1YXRlZFRlbXBsYXRlQXJyLnB1c2godGVtcGxhdGUuc2xpY2Uob3BlbmluZ0JyYWNlSW5kZXgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZW1wbGF0ZVtvcGVuaW5nQnJhY2VJbmRleCArIDFdID09PSBcIntcIiAmJiB0ZW1wbGF0ZVtjbG9zaW5nQnJhY2VJbmRleCArIDFdID09PSBcIn1cIikge1xuICAgICAgICAgICAgZXZhbHVhdGVkVGVtcGxhdGVBcnIucHVzaCh0ZW1wbGF0ZS5zbGljZShvcGVuaW5nQnJhY2VJbmRleCArIDEsIGNsb3NpbmdCcmFjZUluZGV4KSk7XG4gICAgICAgICAgICBjdXJyZW50SW5kZXggPSBjbG9zaW5nQnJhY2VJbmRleCArIDI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyYW1ldGVyTmFtZSA9IHRlbXBsYXRlLnN1YnN0cmluZyhvcGVuaW5nQnJhY2VJbmRleCArIDEsIGNsb3NpbmdCcmFjZUluZGV4KTtcbiAgICAgICAgaWYgKHBhcmFtZXRlck5hbWUuaW5jbHVkZXMoXCIjXCIpKSB7XG4gICAgICAgICAgICBjb25zdCBbcmVmTmFtZSwgYXR0ck5hbWVdID0gcGFyYW1ldGVyTmFtZS5zcGxpdChcIiNcIik7XG4gICAgICAgICAgICBldmFsdWF0ZWRUZW1wbGF0ZUFyci5wdXNoKGdldEF0dHIodGVtcGxhdGVDb250ZXh0W3JlZk5hbWVdLCBhdHRyTmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXZhbHVhdGVkVGVtcGxhdGVBcnIucHVzaCh0ZW1wbGF0ZUNvbnRleHRbcGFyYW1ldGVyTmFtZV0pO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRJbmRleCA9IGNsb3NpbmdCcmFjZUluZGV4ICsgMTtcbiAgICB9XG4gICAgcmV0dXJuIGV2YWx1YXRlZFRlbXBsYXRlQXJyLmpvaW4oXCJcIik7XG59O1xuIiwiaW1wb3J0IHsgRW5kcG9pbnRFcnJvciB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgY2FsbEZ1bmN0aW9uIH0gZnJvbSBcIi4vY2FsbEZ1bmN0aW9uXCI7XG5pbXBvcnQgeyBldmFsdWF0ZVRlbXBsYXRlIH0gZnJvbSBcIi4vZXZhbHVhdGVUZW1wbGF0ZVwiO1xuaW1wb3J0IHsgZ2V0UmVmZXJlbmNlVmFsdWUgfSBmcm9tIFwiLi9nZXRSZWZlcmVuY2VWYWx1ZVwiO1xuZXhwb3J0IGNvbnN0IGV2YWx1YXRlRXhwcmVzc2lvbiA9IChvYmosIGtleU5hbWUsIG9wdGlvbnMpID0+IHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZXZhbHVhdGVUZW1wbGF0ZShvYmosIG9wdGlvbnMpO1xuICAgIH1cbiAgICBlbHNlIGlmIChvYmpbXCJmblwiXSkge1xuICAgICAgICByZXR1cm4gY2FsbEZ1bmN0aW9uKG9iaiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9ialtcInJlZlwiXSkge1xuICAgICAgICByZXR1cm4gZ2V0UmVmZXJlbmNlVmFsdWUob2JqLCBvcHRpb25zKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVuZHBvaW50RXJyb3IoYCcke2tleU5hbWV9JzogJHtTdHJpbmcob2JqKX0gaXMgbm90IGEgc3RyaW5nLCBmdW5jdGlvbiBvciByZWZlcmVuY2UuYCk7XG59O1xuIiwiZXhwb3J0IGNvbnN0IGdldFJlZmVyZW5jZVZhbHVlID0gKHsgcmVmIH0sIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCByZWZlcmVuY2VSZWNvcmQgPSB7XG4gICAgICAgIC4uLm9wdGlvbnMuZW5kcG9pbnRQYXJhbXMsXG4gICAgICAgIC4uLm9wdGlvbnMucmVmZXJlbmNlUmVjb3JkLFxuICAgIH07XG4gICAgcmV0dXJuIHJlZmVyZW5jZVJlY29yZFtyZWZdO1xufTtcbiIsImltcG9ydCB7IGN1c3RvbUVuZHBvaW50RnVuY3Rpb25zIH0gZnJvbSBcIi4vY3VzdG9tRW5kcG9pbnRGdW5jdGlvbnNcIjtcbmltcG9ydCB7IGVuZHBvaW50RnVuY3Rpb25zIH0gZnJvbSBcIi4vZW5kcG9pbnRGdW5jdGlvbnNcIjtcbmltcG9ydCB7IGV2YWx1YXRlRXhwcmVzc2lvbiB9IGZyb20gXCIuL2V2YWx1YXRlRXhwcmVzc2lvblwiO1xuZXhwb3J0IGNvbnN0IGNhbGxGdW5jdGlvbiA9ICh7IGZuLCBhcmd2IH0sIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBldmFsdWF0ZWRBcmdzID0gYXJndi5tYXAoKGFyZykgPT4gW1wiYm9vbGVhblwiLCBcIm51bWJlclwiXS5pbmNsdWRlcyh0eXBlb2YgYXJnKSA/IGFyZyA6IGV2YWx1YXRlRXhwcmVzc2lvbihhcmcsIFwiYXJnXCIsIG9wdGlvbnMpKTtcbiAgICBjb25zdCBmblNlZ21lbnRzID0gZm4uc3BsaXQoXCIuXCIpO1xuICAgIGlmIChmblNlZ21lbnRzWzBdIGluIGN1c3RvbUVuZHBvaW50RnVuY3Rpb25zICYmIGZuU2VnbWVudHNbMV0gIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gY3VzdG9tRW5kcG9pbnRGdW5jdGlvbnNbZm5TZWdtZW50c1swXV1bZm5TZWdtZW50c1sxXV0oLi4uZXZhbHVhdGVkQXJncyk7XG4gICAgfVxuICAgIHJldHVybiBlbmRwb2ludEZ1bmN0aW9uc1tmbl0oLi4uZXZhbHVhdGVkQXJncyk7XG59O1xuIiwiaW1wb3J0IHsgZGVidWdJZCwgdG9EZWJ1Z1N0cmluZyB9IGZyb20gXCIuLi9kZWJ1Z1wiO1xuaW1wb3J0IHsgRW5kcG9pbnRFcnJvciB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgY2FsbEZ1bmN0aW9uIH0gZnJvbSBcIi4vY2FsbEZ1bmN0aW9uXCI7XG5leHBvcnQgY29uc3QgZXZhbHVhdGVDb25kaXRpb24gPSAoeyBhc3NpZ24sIC4uLmZuQXJncyB9LCBvcHRpb25zKSA9PiB7XG4gICAgaWYgKGFzc2lnbiAmJiBhc3NpZ24gaW4gb3B0aW9ucy5yZWZlcmVuY2VSZWNvcmQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVuZHBvaW50RXJyb3IoYCcke2Fzc2lnbn0nIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBSZWZlcmVuY2UgUmVjb3JkLmApO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IGNhbGxGdW5jdGlvbihmbkFyZ3MsIG9wdGlvbnMpO1xuICAgIG9wdGlvbnMubG9nZ2VyPy5kZWJ1Zz8uKGAke2RlYnVnSWR9IGV2YWx1YXRlQ29uZGl0aW9uOiAke3RvRGVidWdTdHJpbmcoZm5BcmdzKX0gPSAke3RvRGVidWdTdHJpbmcodmFsdWUpfWApO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3VsdDogdmFsdWUgPT09IFwiXCIgPyB0cnVlIDogISF2YWx1ZSxcbiAgICAgICAgLi4uKGFzc2lnbiAhPSBudWxsICYmIHsgdG9Bc3NpZ246IHsgbmFtZTogYXNzaWduLCB2YWx1ZSB9IH0pLFxuICAgIH07XG59O1xuIiwiaW1wb3J0IHsgZGVidWdJZCwgdG9EZWJ1Z1N0cmluZyB9IGZyb20gXCIuLi9kZWJ1Z1wiO1xuaW1wb3J0IHsgZXZhbHVhdGVDb25kaXRpb24gfSBmcm9tIFwiLi9ldmFsdWF0ZUNvbmRpdGlvblwiO1xuZXhwb3J0IGNvbnN0IGV2YWx1YXRlQ29uZGl0aW9ucyA9IChjb25kaXRpb25zID0gW10sIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBjb25kaXRpb25zUmVmZXJlbmNlUmVjb3JkID0ge307XG4gICAgZm9yIChjb25zdCBjb25kaXRpb24gb2YgY29uZGl0aW9ucykge1xuICAgICAgICBjb25zdCB7IHJlc3VsdCwgdG9Bc3NpZ24gfSA9IGV2YWx1YXRlQ29uZGl0aW9uKGNvbmRpdGlvbiwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIHJlZmVyZW5jZVJlY29yZDoge1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMucmVmZXJlbmNlUmVjb3JkLFxuICAgICAgICAgICAgICAgIC4uLmNvbmRpdGlvbnNSZWZlcmVuY2VSZWNvcmQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHJlc3VsdCB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b0Fzc2lnbikge1xuICAgICAgICAgICAgY29uZGl0aW9uc1JlZmVyZW5jZVJlY29yZFt0b0Fzc2lnbi5uYW1lXSA9IHRvQXNzaWduLnZhbHVlO1xuICAgICAgICAgICAgb3B0aW9ucy5sb2dnZXI/LmRlYnVnPy4oYCR7ZGVidWdJZH0gYXNzaWduOiAke3RvQXNzaWduLm5hbWV9IDo9ICR7dG9EZWJ1Z1N0cmluZyh0b0Fzc2lnbi52YWx1ZSl9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgcmVzdWx0OiB0cnVlLCByZWZlcmVuY2VSZWNvcmQ6IGNvbmRpdGlvbnNSZWZlcmVuY2VSZWNvcmQgfTtcbn07XG4iLCJpbXBvcnQgeyBFbmRwb2ludEVycm9yIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBldmFsdWF0ZUV4cHJlc3Npb24gfSBmcm9tIFwiLi9ldmFsdWF0ZUV4cHJlc3Npb25cIjtcbmV4cG9ydCBjb25zdCBnZXRFbmRwb2ludEhlYWRlcnMgPSAoaGVhZGVycywgb3B0aW9ucykgPT4gT2JqZWN0LmVudHJpZXMoaGVhZGVycykucmVkdWNlKChhY2MsIFtoZWFkZXJLZXksIGhlYWRlclZhbF0pID0+ICh7XG4gICAgLi4uYWNjLFxuICAgIFtoZWFkZXJLZXldOiBoZWFkZXJWYWwubWFwKChoZWFkZXJWYWxFbnRyeSkgPT4ge1xuICAgICAgICBjb25zdCBwcm9jZXNzZWRFeHByID0gZXZhbHVhdGVFeHByZXNzaW9uKGhlYWRlclZhbEVudHJ5LCBcIkhlYWRlciB2YWx1ZSBlbnRyeVwiLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzZWRFeHByICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRW5kcG9pbnRFcnJvcihgSGVhZGVyICcke2hlYWRlcktleX0nIHZhbHVlICcke3Byb2Nlc3NlZEV4cHJ9JyBpcyBub3QgYSBzdHJpbmdgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvY2Vzc2VkRXhwcjtcbiAgICB9KSxcbn0pLCB7fSk7XG4iLCJpbXBvcnQgeyBFbmRwb2ludEVycm9yIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBldmFsdWF0ZVRlbXBsYXRlIH0gZnJvbSBcIi4vZXZhbHVhdGVUZW1wbGF0ZVwiO1xuaW1wb3J0IHsgZ2V0RW5kcG9pbnRQcm9wZXJ0aWVzIH0gZnJvbSBcIi4vZ2V0RW5kcG9pbnRQcm9wZXJ0aWVzXCI7XG5leHBvcnQgY29uc3QgZ2V0RW5kcG9pbnRQcm9wZXJ0eSA9IChwcm9wZXJ0eSwgb3B0aW9ucykgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BlcnR5KSkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHkubWFwKChwcm9wZXJ0eUVudHJ5KSA9PiBnZXRFbmRwb2ludFByb3BlcnR5KHByb3BlcnR5RW50cnksIG9wdGlvbnMpKTtcbiAgICB9XG4gICAgc3dpdGNoICh0eXBlb2YgcHJvcGVydHkpIHtcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgcmV0dXJuIGV2YWx1YXRlVGVtcGxhdGUocHJvcGVydHksIG9wdGlvbnMpO1xuICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICBpZiAocHJvcGVydHkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRW5kcG9pbnRFcnJvcihgVW5leHBlY3RlZCBlbmRwb2ludCBwcm9wZXJ0eTogJHtwcm9wZXJ0eX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBnZXRFbmRwb2ludFByb3BlcnRpZXMocHJvcGVydHksIG9wdGlvbnMpO1xuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVuZHBvaW50RXJyb3IoYFVuZXhwZWN0ZWQgZW5kcG9pbnQgcHJvcGVydHkgdHlwZTogJHt0eXBlb2YgcHJvcGVydHl9YCk7XG4gICAgfVxufTtcbiIsImltcG9ydCB7IGdldEVuZHBvaW50UHJvcGVydHkgfSBmcm9tIFwiLi9nZXRFbmRwb2ludFByb3BlcnR5XCI7XG5leHBvcnQgY29uc3QgZ2V0RW5kcG9pbnRQcm9wZXJ0aWVzID0gKHByb3BlcnRpZXMsIG9wdGlvbnMpID0+IE9iamVjdC5lbnRyaWVzKHByb3BlcnRpZXMpLnJlZHVjZSgoYWNjLCBbcHJvcGVydHlLZXksIHByb3BlcnR5VmFsXSkgPT4gKHtcbiAgICAuLi5hY2MsXG4gICAgW3Byb3BlcnR5S2V5XTogZ2V0RW5kcG9pbnRQcm9wZXJ0eShwcm9wZXJ0eVZhbCwgb3B0aW9ucyksXG59KSwge30pO1xuIiwiaW1wb3J0IHsgRW5kcG9pbnRFcnJvciB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgZXZhbHVhdGVFeHByZXNzaW9uIH0gZnJvbSBcIi4vZXZhbHVhdGVFeHByZXNzaW9uXCI7XG5leHBvcnQgY29uc3QgZ2V0RW5kcG9pbnRVcmwgPSAoZW5kcG9pbnRVcmwsIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBleHByZXNzaW9uID0gZXZhbHVhdGVFeHByZXNzaW9uKGVuZHBvaW50VXJsLCBcIkVuZHBvaW50IFVSTFwiLCBvcHRpb25zKTtcbiAgICBpZiAodHlwZW9mIGV4cHJlc3Npb24gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVVJMKGV4cHJlc3Npb24pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGNvbnN0cnVjdCBVUkwgd2l0aCAke2V4cHJlc3Npb259YCwgZXJyb3IpO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVuZHBvaW50RXJyb3IoYEVuZHBvaW50IFVSTCBtdXN0IGJlIGEgc3RyaW5nLCBnb3QgJHt0eXBlb2YgZXhwcmVzc2lvbn1gKTtcbn07XG4iLCJpbXBvcnQgeyBkZWJ1Z0lkLCB0b0RlYnVnU3RyaW5nIH0gZnJvbSBcIi4uL2RlYnVnXCI7XG5pbXBvcnQgeyBldmFsdWF0ZUNvbmRpdGlvbnMgfSBmcm9tIFwiLi9ldmFsdWF0ZUNvbmRpdGlvbnNcIjtcbmltcG9ydCB7IGdldEVuZHBvaW50SGVhZGVycyB9IGZyb20gXCIuL2dldEVuZHBvaW50SGVhZGVyc1wiO1xuaW1wb3J0IHsgZ2V0RW5kcG9pbnRQcm9wZXJ0aWVzIH0gZnJvbSBcIi4vZ2V0RW5kcG9pbnRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBnZXRFbmRwb2ludFVybCB9IGZyb20gXCIuL2dldEVuZHBvaW50VXJsXCI7XG5leHBvcnQgY29uc3QgZXZhbHVhdGVFbmRwb2ludFJ1bGUgPSAoZW5kcG9pbnRSdWxlLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgeyBjb25kaXRpb25zLCBlbmRwb2ludCB9ID0gZW5kcG9pbnRSdWxlO1xuICAgIGNvbnN0IHsgcmVzdWx0LCByZWZlcmVuY2VSZWNvcmQgfSA9IGV2YWx1YXRlQ29uZGl0aW9ucyhjb25kaXRpb25zLCBvcHRpb25zKTtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGVuZHBvaW50UnVsZU9wdGlvbnMgPSB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIHJlZmVyZW5jZVJlY29yZDogeyAuLi5vcHRpb25zLnJlZmVyZW5jZVJlY29yZCwgLi4ucmVmZXJlbmNlUmVjb3JkIH0sXG4gICAgfTtcbiAgICBjb25zdCB7IHVybCwgcHJvcGVydGllcywgaGVhZGVycyB9ID0gZW5kcG9pbnQ7XG4gICAgb3B0aW9ucy5sb2dnZXI/LmRlYnVnPy4oYCR7ZGVidWdJZH0gUmVzb2x2aW5nIGVuZHBvaW50IGZyb20gdGVtcGxhdGU6ICR7dG9EZWJ1Z1N0cmluZyhlbmRwb2ludCl9YCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uKGhlYWRlcnMgIT0gdW5kZWZpbmVkICYmIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IGdldEVuZHBvaW50SGVhZGVycyhoZWFkZXJzLCBlbmRwb2ludFJ1bGVPcHRpb25zKSxcbiAgICAgICAgfSksXG4gICAgICAgIC4uLihwcm9wZXJ0aWVzICE9IHVuZGVmaW5lZCAmJiB7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiBnZXRFbmRwb2ludFByb3BlcnRpZXMocHJvcGVydGllcywgZW5kcG9pbnRSdWxlT3B0aW9ucyksXG4gICAgICAgIH0pLFxuICAgICAgICB1cmw6IGdldEVuZHBvaW50VXJsKHVybCwgZW5kcG9pbnRSdWxlT3B0aW9ucyksXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBFbmRwb2ludEVycm9yIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBldmFsdWF0ZUNvbmRpdGlvbnMgfSBmcm9tIFwiLi9ldmFsdWF0ZUNvbmRpdGlvbnNcIjtcbmltcG9ydCB7IGV2YWx1YXRlRXhwcmVzc2lvbiB9IGZyb20gXCIuL2V2YWx1YXRlRXhwcmVzc2lvblwiO1xuZXhwb3J0IGNvbnN0IGV2YWx1YXRlRXJyb3JSdWxlID0gKGVycm9yUnVsZSwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHsgY29uZGl0aW9ucywgZXJyb3IgfSA9IGVycm9yUnVsZTtcbiAgICBjb25zdCB7IHJlc3VsdCwgcmVmZXJlbmNlUmVjb3JkIH0gPSBldmFsdWF0ZUNvbmRpdGlvbnMoY29uZGl0aW9ucywgb3B0aW9ucyk7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRW5kcG9pbnRFcnJvcihldmFsdWF0ZUV4cHJlc3Npb24oZXJyb3IsIFwiRXJyb3JcIiwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICByZWZlcmVuY2VSZWNvcmQ6IHsgLi4ub3B0aW9ucy5yZWZlcmVuY2VSZWNvcmQsIC4uLnJlZmVyZW5jZVJlY29yZCB9LFxuICAgIH0pKTtcbn07XG4iLCJpbXBvcnQgeyBldmFsdWF0ZUNvbmRpdGlvbnMgfSBmcm9tIFwiLi9ldmFsdWF0ZUNvbmRpdGlvbnNcIjtcbmltcG9ydCB7IGV2YWx1YXRlUnVsZXMgfSBmcm9tIFwiLi9ldmFsdWF0ZVJ1bGVzXCI7XG5leHBvcnQgY29uc3QgZXZhbHVhdGVUcmVlUnVsZSA9ICh0cmVlUnVsZSwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHsgY29uZGl0aW9ucywgcnVsZXMgfSA9IHRyZWVSdWxlO1xuICAgIGNvbnN0IHsgcmVzdWx0LCByZWZlcmVuY2VSZWNvcmQgfSA9IGV2YWx1YXRlQ29uZGl0aW9ucyhjb25kaXRpb25zLCBvcHRpb25zKTtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBldmFsdWF0ZVJ1bGVzKHJ1bGVzLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIHJlZmVyZW5jZVJlY29yZDogeyAuLi5vcHRpb25zLnJlZmVyZW5jZVJlY29yZCwgLi4ucmVmZXJlbmNlUmVjb3JkIH0sXG4gICAgfSk7XG59O1xuIiwiaW1wb3J0IHsgRW5kcG9pbnRFcnJvciB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgZXZhbHVhdGVFbmRwb2ludFJ1bGUgfSBmcm9tIFwiLi9ldmFsdWF0ZUVuZHBvaW50UnVsZVwiO1xuaW1wb3J0IHsgZXZhbHVhdGVFcnJvclJ1bGUgfSBmcm9tIFwiLi9ldmFsdWF0ZUVycm9yUnVsZVwiO1xuaW1wb3J0IHsgZXZhbHVhdGVUcmVlUnVsZSB9IGZyb20gXCIuL2V2YWx1YXRlVHJlZVJ1bGVcIjtcbmV4cG9ydCBjb25zdCBldmFsdWF0ZVJ1bGVzID0gKHJ1bGVzLCBvcHRpb25zKSA9PiB7XG4gICAgZm9yIChjb25zdCBydWxlIG9mIHJ1bGVzKSB7XG4gICAgICAgIGlmIChydWxlLnR5cGUgPT09IFwiZW5kcG9pbnRcIikge1xuICAgICAgICAgICAgY29uc3QgZW5kcG9pbnRPclVuZGVmaW5lZCA9IGV2YWx1YXRlRW5kcG9pbnRSdWxlKHJ1bGUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKGVuZHBvaW50T3JVbmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5kcG9pbnRPclVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChydWxlLnR5cGUgPT09IFwiZXJyb3JcIikge1xuICAgICAgICAgICAgZXZhbHVhdGVFcnJvclJ1bGUocnVsZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocnVsZS50eXBlID09PSBcInRyZWVcIikge1xuICAgICAgICAgICAgY29uc3QgZW5kcG9pbnRPclVuZGVmaW5lZCA9IGV2YWx1YXRlVHJlZVJ1bGUocnVsZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoZW5kcG9pbnRPclVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbmRwb2ludE9yVW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVuZHBvaW50RXJyb3IoYFVua25vd24gZW5kcG9pbnQgcnVsZTogJHtydWxlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFbmRwb2ludEVycm9yKGBSdWxlcyBldmFsdWF0aW9uIGZhaWxlZGApO1xufTtcbiIsImltcG9ydCB7IGRlYnVnSWQsIHRvRGVidWdTdHJpbmcgfSBmcm9tIFwiLi9kZWJ1Z1wiO1xuaW1wb3J0IHsgRW5kcG9pbnRFcnJvciB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBldmFsdWF0ZVJ1bGVzIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmV4cG9ydCBjb25zdCByZXNvbHZlRW5kcG9pbnQgPSAocnVsZVNldE9iamVjdCwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHsgZW5kcG9pbnRQYXJhbXMsIGxvZ2dlciB9ID0gb3B0aW9ucztcbiAgICBjb25zdCB7IHBhcmFtZXRlcnMsIHJ1bGVzIH0gPSBydWxlU2V0T2JqZWN0O1xuICAgIG9wdGlvbnMubG9nZ2VyPy5kZWJ1Zz8uKGAke2RlYnVnSWR9IEluaXRpYWwgRW5kcG9pbnRQYXJhbXM6ICR7dG9EZWJ1Z1N0cmluZyhlbmRwb2ludFBhcmFtcyl9YCk7XG4gICAgY29uc3QgcGFyYW1zV2l0aERlZmF1bHQgPSBPYmplY3QuZW50cmllcyhwYXJhbWV0ZXJzKVxuICAgICAgICAuZmlsdGVyKChbLCB2XSkgPT4gdi5kZWZhdWx0ICE9IG51bGwpXG4gICAgICAgIC5tYXAoKFtrLCB2XSkgPT4gW2ssIHYuZGVmYXVsdF0pO1xuICAgIGlmIChwYXJhbXNXaXRoRGVmYXVsdC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoY29uc3QgW3BhcmFtS2V5LCBwYXJhbURlZmF1bHRWYWx1ZV0gb2YgcGFyYW1zV2l0aERlZmF1bHQpIHtcbiAgICAgICAgICAgIGVuZHBvaW50UGFyYW1zW3BhcmFtS2V5XSA9IGVuZHBvaW50UGFyYW1zW3BhcmFtS2V5XSA/PyBwYXJhbURlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXF1aXJlZFBhcmFtcyA9IE9iamVjdC5lbnRyaWVzKHBhcmFtZXRlcnMpXG4gICAgICAgIC5maWx0ZXIoKFssIHZdKSA9PiB2LnJlcXVpcmVkKVxuICAgICAgICAubWFwKChba10pID0+IGspO1xuICAgIGZvciAoY29uc3QgcmVxdWlyZWRQYXJhbSBvZiByZXF1aXJlZFBhcmFtcykge1xuICAgICAgICBpZiAoZW5kcG9pbnRQYXJhbXNbcmVxdWlyZWRQYXJhbV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVuZHBvaW50RXJyb3IoYE1pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiAnJHtyZXF1aXJlZFBhcmFtfSdgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBlbmRwb2ludCA9IGV2YWx1YXRlUnVsZXMocnVsZXMsIHsgZW5kcG9pbnRQYXJhbXMsIGxvZ2dlciwgcmVmZXJlbmNlUmVjb3JkOiB7fSB9KTtcbiAgICBvcHRpb25zLmxvZ2dlcj8uZGVidWc/LihgJHtkZWJ1Z0lkfSBSZXNvbHZlZCBlbmRwb2ludDogJHt0b0RlYnVnU3RyaW5nKGVuZHBvaW50KX1gKTtcbiAgICByZXR1cm4gZW5kcG9pbnQ7XG59O1xuIiwiZXhwb3J0IGNvbnN0IFNNSVRIWV9DT05URVhUX0tFWSA9IFwiX19zbWl0aHlfY29udGV4dFwiO1xuIiwiZXhwb3J0IGNvbnN0IF9qc29uID0gKG9iaikgPT4ge1xuICAgIGlmIChvYmogPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai5maWx0ZXIoKF8pID0+IF8gIT0gbnVsbCkubWFwKF9qc29uKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG9iaikpIHtcbiAgICAgICAgICAgIGlmIChvYmpba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IF9qc29uKG9ialtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufTtcbiIsImltcG9ydCB7IG5vcm1hbGl6ZVByb3ZpZGVyIH0gZnJvbSBcIkBzbWl0aHkvY29yZVwiO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfVUFfQVBQX0lEID0gdW5kZWZpbmVkO1xuZnVuY3Rpb24gaXNWYWxpZFVzZXJBZ2VudEFwcElkKGFwcElkKSB7XG4gICAgaWYgKGFwcElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgYXBwSWQgPT09IFwic3RyaW5nXCIgJiYgYXBwSWQubGVuZ3RoIDw9IDUwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVVc2VyQWdlbnRDb25maWcoaW5wdXQpIHtcbiAgICBjb25zdCBub3JtYWxpemVkQXBwSWRQcm92aWRlciA9IG5vcm1hbGl6ZVByb3ZpZGVyKGlucHV0LnVzZXJBZ2VudEFwcElkID8/IERFRkFVTFRfVUFfQVBQX0lEKTtcbiAgICBjb25zdCB7IGN1c3RvbVVzZXJBZ2VudCB9ID0gaW5wdXQ7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oaW5wdXQsIHtcbiAgICAgICAgY3VzdG9tVXNlckFnZW50OiB0eXBlb2YgY3VzdG9tVXNlckFnZW50ID09PSBcInN0cmluZ1wiID8gW1tjdXN0b21Vc2VyQWdlbnRdXSA6IGN1c3RvbVVzZXJBZ2VudCxcbiAgICAgICAgdXNlckFnZW50QXBwSWQ6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFwcElkID0gYXdhaXQgbm9ybWFsaXplZEFwcElkUHJvdmlkZXIoKTtcbiAgICAgICAgICAgIGlmICghaXNWYWxpZFVzZXJBZ2VudEFwcElkKGFwcElkKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvZ2dlciA9IGlucHV0LmxvZ2dlcj8uY29uc3RydWN0b3I/Lm5hbWUgPT09IFwiTm9PcExvZ2dlclwiIHx8ICFpbnB1dC5sb2dnZXIgPyBjb25zb2xlIDogaW5wdXQubG9nZ2VyO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXBwSWQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyPy53YXJuKFwidXNlckFnZW50QXBwSWQgbXVzdCBiZSBhIHN0cmluZyBvciB1bmRlZmluZWQuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhcHBJZC5sZW5ndGggPiA1MCkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXI/Lndhcm4oXCJUaGUgcHJvdmlkZWQgdXNlckFnZW50QXBwSWQgZXhjZWVkcyB0aGUgbWF4aW11bSBsZW5ndGggb2YgNTAgY2hhcmFjdGVycy5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFwcElkO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuIiwiZXhwb3J0IGNsYXNzIEh0dHBSZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gb3B0aW9ucy5tZXRob2QgfHwgXCJHRVRcIjtcbiAgICAgICAgdGhpcy5ob3N0bmFtZSA9IG9wdGlvbnMuaG9zdG5hbWUgfHwgXCJsb2NhbGhvc3RcIjtcbiAgICAgICAgdGhpcy5wb3J0ID0gb3B0aW9ucy5wb3J0O1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gb3B0aW9ucy5xdWVyeSB8fCB7fTtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzIHx8IHt9O1xuICAgICAgICB0aGlzLmJvZHkgPSBvcHRpb25zLmJvZHk7XG4gICAgICAgIHRoaXMucHJvdG9jb2wgPSBvcHRpb25zLnByb3RvY29sXG4gICAgICAgICAgICA/IG9wdGlvbnMucHJvdG9jb2wuc2xpY2UoLTEpICE9PSBcIjpcIlxuICAgICAgICAgICAgICAgID8gYCR7b3B0aW9ucy5wcm90b2NvbH06YFxuICAgICAgICAgICAgICAgIDogb3B0aW9ucy5wcm90b2NvbFxuICAgICAgICAgICAgOiBcImh0dHBzOlwiO1xuICAgICAgICB0aGlzLnBhdGggPSBvcHRpb25zLnBhdGggPyAob3B0aW9ucy5wYXRoLmNoYXJBdCgwKSAhPT0gXCIvXCIgPyBgLyR7b3B0aW9ucy5wYXRofWAgOiBvcHRpb25zLnBhdGgpIDogXCIvXCI7XG4gICAgICAgIHRoaXMudXNlcm5hbWUgPSBvcHRpb25zLnVzZXJuYW1lO1xuICAgICAgICB0aGlzLnBhc3N3b3JkID0gb3B0aW9ucy5wYXNzd29yZDtcbiAgICAgICAgdGhpcy5mcmFnbWVudCA9IG9wdGlvbnMuZnJhZ21lbnQ7XG4gICAgfVxuICAgIHN0YXRpYyBjbG9uZShyZXF1ZXN0KSB7XG4gICAgICAgIGNvbnN0IGNsb25lZCA9IG5ldyBIdHRwUmVxdWVzdCh7XG4gICAgICAgICAgICAuLi5yZXF1ZXN0LFxuICAgICAgICAgICAgaGVhZGVyczogeyAuLi5yZXF1ZXN0LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjbG9uZWQucXVlcnkpIHtcbiAgICAgICAgICAgIGNsb25lZC5xdWVyeSA9IGNsb25lUXVlcnkoY2xvbmVkLnF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xvbmVkO1xuICAgIH1cbiAgICBzdGF0aWMgaXNJbnN0YW5jZShyZXF1ZXN0KSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcSA9IHJlcXVlc3Q7XG4gICAgICAgIHJldHVybiAoXCJtZXRob2RcIiBpbiByZXEgJiZcbiAgICAgICAgICAgIFwicHJvdG9jb2xcIiBpbiByZXEgJiZcbiAgICAgICAgICAgIFwiaG9zdG5hbWVcIiBpbiByZXEgJiZcbiAgICAgICAgICAgIFwicGF0aFwiIGluIHJlcSAmJlxuICAgICAgICAgICAgdHlwZW9mIHJlcVtcInF1ZXJ5XCJdID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICB0eXBlb2YgcmVxW1wiaGVhZGVyc1wiXSA9PT0gXCJvYmplY3RcIik7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gSHR0cFJlcXVlc3QuY2xvbmUodGhpcyk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xvbmVRdWVyeShxdWVyeSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhxdWVyeSkucmVkdWNlKChjYXJyeSwgcGFyYW1OYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcmFtID0gcXVlcnlbcGFyYW1OYW1lXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmNhcnJ5LFxuICAgICAgICAgICAgW3BhcmFtTmFtZV06IEFycmF5LmlzQXJyYXkocGFyYW0pID8gWy4uLnBhcmFtXSA6IHBhcmFtLFxuICAgICAgICB9O1xuICAgIH0sIHt9KTtcbn1cbiIsImV4cG9ydCB2YXIgUkVUUllfTU9ERVM7XG4oZnVuY3Rpb24gKFJFVFJZX01PREVTKSB7XG4gICAgUkVUUllfTU9ERVNbXCJTVEFOREFSRFwiXSA9IFwic3RhbmRhcmRcIjtcbiAgICBSRVRSWV9NT0RFU1tcIkFEQVBUSVZFXCJdID0gXCJhZGFwdGl2ZVwiO1xufSkoUkVUUllfTU9ERVMgfHwgKFJFVFJZX01PREVTID0ge30pKTtcbmV4cG9ydCBjb25zdCBERUZBVUxUX01BWF9BVFRFTVBUUyA9IDM7XG5leHBvcnQgY29uc3QgREVGQVVMVF9SRVRSWV9NT0RFID0gUkVUUllfTU9ERVMuU1RBTkRBUkQ7XG4iLCJpbXBvcnQgeyBmcm9tU3RyaW5nIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1idWZmZXItZnJvbVwiO1xuZXhwb3J0IGNvbnN0IGZyb21VdGY4ID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgYnVmID0gZnJvbVN0cmluZyhpbnB1dCwgXCJ1dGY4XCIpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShidWYuYnVmZmVyLCBidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVMZW5ndGggLyBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UKTtcbn07XG4iLCJleHBvcnQgY2xhc3MgRW5kcG9pbnRDYWNoZSB7XG4gICAgY29uc3RydWN0b3IoeyBzaXplLCBwYXJhbXMgfSkge1xuICAgICAgICB0aGlzLmRhdGEgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMucGFyYW1ldGVycyA9IFtdO1xuICAgICAgICB0aGlzLmNhcGFjaXR5ID0gc2l6ZSA/PyA1MDtcbiAgICAgICAgaWYgKHBhcmFtcykge1xuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzID0gcGFyYW1zO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldChlbmRwb2ludFBhcmFtcywgcmVzb2x2ZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5oYXNoKGVuZHBvaW50UGFyYW1zKTtcbiAgICAgICAgaWYgKGtleSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5kYXRhLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhLnNpemUgPiB0aGlzLmNhcGFjaXR5ICsgMTApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlzID0gdGhpcy5kYXRhLmtleXMoKTtcbiAgICAgICAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0ga2V5cy5uZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5kZWxldGUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSB8fCArK2kgPiAxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRhdGEuc2V0KGtleSwgcmVzb2x2ZXIoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5nZXQoa2V5KTtcbiAgICB9XG4gICAgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5zaXplO1xuICAgIH1cbiAgICBoYXNoKGVuZHBvaW50UGFyYW1zKSB7XG4gICAgICAgIGxldCBidWZmZXIgPSBcIlwiO1xuICAgICAgICBjb25zdCB7IHBhcmFtZXRlcnMgfSA9IHRoaXM7XG4gICAgICAgIGlmIChwYXJhbWV0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgcGFyYW0gb2YgcGFyYW1ldGVycykge1xuICAgICAgICAgICAgY29uc3QgdmFsID0gU3RyaW5nKGVuZHBvaW50UGFyYW1zW3BhcmFtXSA/PyBcIlwiKTtcbiAgICAgICAgICAgIGlmICh2YWwuaW5jbHVkZXMoXCJ8O1wiKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlciArPSB2YWwgKyBcInw7XCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBmcm9tQXJyYXlCdWZmZXIgfSBmcm9tIFwiQHNtaXRoeS91dGlsLWJ1ZmZlci1mcm9tXCI7XG5leHBvcnQgY29uc3QgdG9VdGY4ID0gKGlucHV0KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGlucHV0LmJ5dGVPZmZzZXQgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGlucHV0LmJ5dGVMZW5ndGggIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQHNtaXRoeS91dGlsLXV0Zjg6IHRvVXRmOCBlbmNvZGVyIGZ1bmN0aW9uIG9ubHkgYWNjZXB0cyBzdHJpbmcgfCBVaW50OEFycmF5LlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcihpbnB1dC5idWZmZXIsIGlucHV0LmJ5dGVPZmZzZXQsIGlucHV0LmJ5dGVMZW5ndGgpLnRvU3RyaW5nKFwidXRmOFwiKTtcbn07XG4iLCJleHBvcnQgY29uc3QgbG9nZ2VyTWlkZGxld2FyZSA9ICgpID0+IChuZXh0LCBjb250ZXh0KSA9PiBhc3luYyAoYXJncykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbmV4dChhcmdzKTtcbiAgICAgICAgY29uc3QgeyBjbGllbnROYW1lLCBjb21tYW5kTmFtZSwgbG9nZ2VyLCBkeW5hbW9EYkRvY3VtZW50Q2xpZW50T3B0aW9ucyA9IHt9IH0gPSBjb250ZXh0O1xuICAgICAgICBjb25zdCB7IG92ZXJyaWRlSW5wdXRGaWx0ZXJTZW5zaXRpdmVMb2csIG92ZXJyaWRlT3V0cHV0RmlsdGVyU2Vuc2l0aXZlTG9nIH0gPSBkeW5hbW9EYkRvY3VtZW50Q2xpZW50T3B0aW9ucztcbiAgICAgICAgY29uc3QgaW5wdXRGaWx0ZXJTZW5zaXRpdmVMb2cgPSBvdmVycmlkZUlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nID8/IGNvbnRleHQuaW5wdXRGaWx0ZXJTZW5zaXRpdmVMb2c7XG4gICAgICAgIGNvbnN0IG91dHB1dEZpbHRlclNlbnNpdGl2ZUxvZyA9IG92ZXJyaWRlT3V0cHV0RmlsdGVyU2Vuc2l0aXZlTG9nID8/IGNvbnRleHQub3V0cHV0RmlsdGVyU2Vuc2l0aXZlTG9nO1xuICAgICAgICBjb25zdCB7ICRtZXRhZGF0YSwgLi4ub3V0cHV0V2l0aG91dE1ldGFkYXRhIH0gPSByZXNwb25zZS5vdXRwdXQ7XG4gICAgICAgIGxvZ2dlcj8uaW5mbz8uKHtcbiAgICAgICAgICAgIGNsaWVudE5hbWUsXG4gICAgICAgICAgICBjb21tYW5kTmFtZSxcbiAgICAgICAgICAgIGlucHV0OiBpbnB1dEZpbHRlclNlbnNpdGl2ZUxvZyhhcmdzLmlucHV0KSxcbiAgICAgICAgICAgIG91dHB1dDogb3V0cHV0RmlsdGVyU2Vuc2l0aXZlTG9nKG91dHB1dFdpdGhvdXRNZXRhZGF0YSksXG4gICAgICAgICAgICBtZXRhZGF0YTogJG1ldGFkYXRhLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgeyBjbGllbnROYW1lLCBjb21tYW5kTmFtZSwgbG9nZ2VyLCBkeW5hbW9EYkRvY3VtZW50Q2xpZW50T3B0aW9ucyA9IHt9IH0gPSBjb250ZXh0O1xuICAgICAgICBjb25zdCB7IG92ZXJyaWRlSW5wdXRGaWx0ZXJTZW5zaXRpdmVMb2cgfSA9IGR5bmFtb0RiRG9jdW1lbnRDbGllbnRPcHRpb25zO1xuICAgICAgICBjb25zdCBpbnB1dEZpbHRlclNlbnNpdGl2ZUxvZyA9IG92ZXJyaWRlSW5wdXRGaWx0ZXJTZW5zaXRpdmVMb2cgPz8gY29udGV4dC5pbnB1dEZpbHRlclNlbnNpdGl2ZUxvZztcbiAgICAgICAgbG9nZ2VyPy5lcnJvcj8uKHtcbiAgICAgICAgICAgIGNsaWVudE5hbWUsXG4gICAgICAgICAgICBjb21tYW5kTmFtZSxcbiAgICAgICAgICAgIGlucHV0OiBpbnB1dEZpbHRlclNlbnNpdGl2ZUxvZyhhcmdzLmlucHV0KSxcbiAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgbWV0YWRhdGE6IGVycm9yLiRtZXRhZGF0YSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn07XG5leHBvcnQgY29uc3QgbG9nZ2VyTWlkZGxld2FyZU9wdGlvbnMgPSB7XG4gICAgbmFtZTogXCJsb2dnZXJNaWRkbGV3YXJlXCIsXG4gICAgdGFnczogW1wiTE9HR0VSXCJdLFxuICAgIHN0ZXA6IFwiaW5pdGlhbGl6ZVwiLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxufTtcbmV4cG9ydCBjb25zdCBnZXRMb2dnZXJQbHVnaW4gPSAob3B0aW9ucykgPT4gKHtcbiAgICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgICAgICBjbGllbnRTdGFjay5hZGQobG9nZ2VyTWlkZGxld2FyZSgpLCBsb2dnZXJNaWRkbGV3YXJlT3B0aW9ucyk7XG4gICAgfSxcbn0pO1xuIiwiaW1wb3J0IHsgY29uc3RydWN0U3RhY2sgfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLXN0YWNrXCI7XG5leHBvcnQgY2xhc3MgQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrID0gY29uc3RydWN0U3RhY2soKTtcbiAgICB9XG4gICAgc2VuZChjb21tYW5kLCBvcHRpb25zT3JDYiwgY2IpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zT3JDYiAhPT0gXCJmdW5jdGlvblwiID8gb3B0aW9uc09yQ2IgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gdHlwZW9mIG9wdGlvbnNPckNiID09PSBcImZ1bmN0aW9uXCIgPyBvcHRpb25zT3JDYiA6IGNiO1xuICAgICAgICBjb25zdCB1c2VIYW5kbGVyQ2FjaGUgPSBvcHRpb25zID09PSB1bmRlZmluZWQgJiYgdGhpcy5jb25maWcuY2FjaGVNaWRkbGV3YXJlID09PSB0cnVlO1xuICAgICAgICBsZXQgaGFuZGxlcjtcbiAgICAgICAgaWYgKHVzZUhhbmRsZXJDYWNoZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmhhbmRsZXJzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVycyA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnM7XG4gICAgICAgICAgICBpZiAoaGFuZGxlcnMuaGFzKGNvbW1hbmQuY29uc3RydWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlciA9IGhhbmRsZXJzLmdldChjb21tYW5kLmNvbnN0cnVjdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBjb21tYW5kLnJlc29sdmVNaWRkbGV3YXJlKHRoaXMubWlkZGxld2FyZVN0YWNrLCB0aGlzLmNvbmZpZywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaGFuZGxlcnMuc2V0KGNvbW1hbmQuY29uc3RydWN0b3IsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuaGFuZGxlcnM7XG4gICAgICAgICAgICBoYW5kbGVyID0gY29tbWFuZC5yZXNvbHZlTWlkZGxld2FyZSh0aGlzLm1pZGRsZXdhcmVTdGFjaywgdGhpcy5jb25maWcsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgaGFuZGxlcihjb21tYW5kKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IGNhbGxiYWNrKG51bGwsIHJlc3VsdC5vdXRwdXQpLCAoZXJyKSA9PiBjYWxsYmFjayhlcnIpKVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIoY29tbWFuZCkudGhlbigocmVzdWx0KSA9PiByZXN1bHQub3V0cHV0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmNvbmZpZz8ucmVxdWVzdEhhbmRsZXI/LmRlc3Ryb3k/LigpO1xuICAgICAgICBkZWxldGUgdGhpcy5oYW5kbGVycztcbiAgICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQoc3RyKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpKl0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmV0dXJuIFwiJVwiICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xufVxuIiwiZXhwb3J0IGNvbnN0IHJlY3Vyc2lvbkRldGVjdGlvbk1pZGRsZXdhcmVPcHRpb25zID0ge1xuICAgIHN0ZXA6IFwiYnVpbGRcIixcbiAgICB0YWdzOiBbXCJSRUNVUlNJT05fREVURUNUSU9OXCJdLFxuICAgIG5hbWU6IFwicmVjdXJzaW9uRGV0ZWN0aW9uTWlkZGxld2FyZVwiLFxuICAgIG92ZXJyaWRlOiB0cnVlLFxuICAgIHByaW9yaXR5OiBcImxvd1wiLFxufTtcbiIsImltcG9ydCB7IEludm9rZVN0b3JlIH0gZnJvbSBcIkBhd3MvbGFtYmRhLWludm9rZS1zdG9yZVwiO1xuaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tIFwiQHNtaXRoeS9wcm90b2NvbC1odHRwXCI7XG5jb25zdCBUUkFDRV9JRF9IRUFERVJfTkFNRSA9IFwiWC1BbXpuLVRyYWNlLUlkXCI7XG5jb25zdCBFTlZfTEFNQkRBX0ZVTkNUSU9OX05BTUUgPSBcIkFXU19MQU1CREFfRlVOQ1RJT05fTkFNRVwiO1xuY29uc3QgRU5WX1RSQUNFX0lEID0gXCJfWF9BTVpOX1RSQUNFX0lEXCI7XG5leHBvcnQgY29uc3QgcmVjdXJzaW9uRGV0ZWN0aW9uTWlkZGxld2FyZSA9ICgpID0+IChuZXh0KSA9PiBhc3luYyAoYXJncykgPT4ge1xuICAgIGNvbnN0IHsgcmVxdWVzdCB9ID0gYXJncztcbiAgICBpZiAoIUh0dHBSZXF1ZXN0LmlzSW5zdGFuY2UocmVxdWVzdCkpIHtcbiAgICAgICAgcmV0dXJuIG5leHQoYXJncyk7XG4gICAgfVxuICAgIGNvbnN0IHRyYWNlSWRIZWFkZXIgPSBPYmplY3Qua2V5cyhyZXF1ZXN0LmhlYWRlcnMgPz8ge30pLmZpbmQoKGgpID0+IGgudG9Mb3dlckNhc2UoKSA9PT0gVFJBQ0VfSURfSEVBREVSX05BTUUudG9Mb3dlckNhc2UoKSkgPz9cbiAgICAgICAgVFJBQ0VfSURfSEVBREVSX05BTUU7XG4gICAgaWYgKHJlcXVlc3QuaGVhZGVycy5oYXNPd25Qcm9wZXJ0eSh0cmFjZUlkSGVhZGVyKSkge1xuICAgICAgICByZXR1cm4gbmV4dChhcmdzKTtcbiAgICB9XG4gICAgY29uc3QgZnVuY3Rpb25OYW1lID0gcHJvY2Vzcy5lbnZbRU5WX0xBTUJEQV9GVU5DVElPTl9OQU1FXTtcbiAgICBjb25zdCB0cmFjZUlkRnJvbUVudiA9IHByb2Nlc3MuZW52W0VOVl9UUkFDRV9JRF07XG4gICAgY29uc3QgdHJhY2VJZEZyb21JbnZva2VTdG9yZSA9IEludm9rZVN0b3JlLmdldFhSYXlUcmFjZUlkKCk7XG4gICAgY29uc3QgdHJhY2VJZCA9IHRyYWNlSWRGcm9tSW52b2tlU3RvcmUgPz8gdHJhY2VJZEZyb21FbnY7XG4gICAgY29uc3Qgbm9uRW1wdHlTdHJpbmcgPSAoc3RyKSA9PiB0eXBlb2Ygc3RyID09PSBcInN0cmluZ1wiICYmIHN0ci5sZW5ndGggPiAwO1xuICAgIGlmIChub25FbXB0eVN0cmluZyhmdW5jdGlvbk5hbWUpICYmIG5vbkVtcHR5U3RyaW5nKHRyYWNlSWQpKSB7XG4gICAgICAgIHJlcXVlc3QuaGVhZGVyc1tUUkFDRV9JRF9IRUFERVJfTkFNRV0gPSB0cmFjZUlkO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dCh7XG4gICAgICAgIC4uLmFyZ3MsXG4gICAgICAgIHJlcXVlc3QsXG4gICAgfSk7XG59O1xuIiwiaW1wb3J0IHsgcmVjdXJzaW9uRGV0ZWN0aW9uTWlkZGxld2FyZU9wdGlvbnMgfSBmcm9tIFwiLi9jb25maWd1cmF0aW9uXCI7XG5pbXBvcnQgeyByZWN1cnNpb25EZXRlY3Rpb25NaWRkbGV3YXJlIH0gZnJvbSBcIi4vcmVjdXJzaW9uRGV0ZWN0aW9uTWlkZGxld2FyZVwiO1xuZXhwb3J0IGNvbnN0IGdldFJlY3Vyc2lvbkRldGVjdGlvblBsdWdpbiA9IChvcHRpb25zKSA9PiAoe1xuICAgIGFwcGx5VG9TdGFjazogKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgICAgIGNsaWVudFN0YWNrLmFkZChyZWN1cnNpb25EZXRlY3Rpb25NaWRkbGV3YXJlKCksIHJlY3Vyc2lvbkRldGVjdGlvbk1pZGRsZXdhcmVPcHRpb25zKTtcbiAgICB9LFxufSk7XG4iLCJleHBvcnQgY29uc3QgY3JlYXRlSXNJZGVudGl0eUV4cGlyZWRGdW5jdGlvbiA9IChleHBpcmF0aW9uTXMpID0+IChpZGVudGl0eSkgPT4gZG9lc0lkZW50aXR5UmVxdWlyZVJlZnJlc2goaWRlbnRpdHkpICYmIGlkZW50aXR5LmV4cGlyYXRpb24uZ2V0VGltZSgpIC0gRGF0ZS5ub3coKSA8IGV4cGlyYXRpb25NcztcbmV4cG9ydCBjb25zdCBFWFBJUkFUSU9OX01TID0gMzAwMDAwO1xuZXhwb3J0IGNvbnN0IGlzSWRlbnRpdHlFeHBpcmVkID0gY3JlYXRlSXNJZGVudGl0eUV4cGlyZWRGdW5jdGlvbihFWFBJUkFUSU9OX01TKTtcbmV4cG9ydCBjb25zdCBkb2VzSWRlbnRpdHlSZXF1aXJlUmVmcmVzaCA9IChpZGVudGl0eSkgPT4gaWRlbnRpdHkuZXhwaXJhdGlvbiAhPT0gdW5kZWZpbmVkO1xuZXhwb3J0IGNvbnN0IG1lbW9pemVJZGVudGl0eVByb3ZpZGVyID0gKHByb3ZpZGVyLCBpc0V4cGlyZWQsIHJlcXVpcmVzUmVmcmVzaCkgPT4ge1xuICAgIGlmIChwcm92aWRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IG5vcm1hbGl6ZWRQcm92aWRlciA9IHR5cGVvZiBwcm92aWRlciAhPT0gXCJmdW5jdGlvblwiID8gYXN5bmMgKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHByb3ZpZGVyKSA6IHByb3ZpZGVyO1xuICAgIGxldCByZXNvbHZlZDtcbiAgICBsZXQgcGVuZGluZztcbiAgICBsZXQgaGFzUmVzdWx0O1xuICAgIGxldCBpc0NvbnN0YW50ID0gZmFsc2U7XG4gICAgY29uc3QgY29hbGVzY2VQcm92aWRlciA9IGFzeW5jIChvcHRpb25zKSA9PiB7XG4gICAgICAgIGlmICghcGVuZGluZykge1xuICAgICAgICAgICAgcGVuZGluZyA9IG5vcm1hbGl6ZWRQcm92aWRlcihvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzb2x2ZWQgPSBhd2FpdCBwZW5kaW5nO1xuICAgICAgICAgICAgaGFzUmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGlzQ29uc3RhbnQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgIH07XG4gICAgaWYgKGlzRXhwaXJlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBhc3luYyAob3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgaWYgKCFoYXNSZXN1bHQgfHwgb3B0aW9ucz8uZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWQgPSBhd2FpdCBjb2FsZXNjZVByb3ZpZGVyKG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICAgICAgaWYgKCFoYXNSZXN1bHQgfHwgb3B0aW9ucz8uZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgICByZXNvbHZlZCA9IGF3YWl0IGNvYWxlc2NlUHJvdmlkZXIob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ29uc3RhbnQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlcXVpcmVzUmVmcmVzaChyZXNvbHZlZCkpIHtcbiAgICAgICAgICAgIGlzQ29uc3RhbnQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0V4cGlyZWQocmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICBhd2FpdCBjb2FsZXNjZVByb3ZpZGVyKG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICB9O1xufTtcbiIsImV4cG9ydCBjb25zdCBBTEdPUklUSE1fUVVFUllfUEFSQU0gPSBcIlgtQW16LUFsZ29yaXRobVwiO1xuZXhwb3J0IGNvbnN0IENSRURFTlRJQUxfUVVFUllfUEFSQU0gPSBcIlgtQW16LUNyZWRlbnRpYWxcIjtcbmV4cG9ydCBjb25zdCBBTVpfREFURV9RVUVSWV9QQVJBTSA9IFwiWC1BbXotRGF0ZVwiO1xuZXhwb3J0IGNvbnN0IFNJR05FRF9IRUFERVJTX1FVRVJZX1BBUkFNID0gXCJYLUFtei1TaWduZWRIZWFkZXJzXCI7XG5leHBvcnQgY29uc3QgRVhQSVJFU19RVUVSWV9QQVJBTSA9IFwiWC1BbXotRXhwaXJlc1wiO1xuZXhwb3J0IGNvbnN0IFNJR05BVFVSRV9RVUVSWV9QQVJBTSA9IFwiWC1BbXotU2lnbmF0dXJlXCI7XG5leHBvcnQgY29uc3QgVE9LRU5fUVVFUllfUEFSQU0gPSBcIlgtQW16LVNlY3VyaXR5LVRva2VuXCI7XG5leHBvcnQgY29uc3QgUkVHSU9OX1NFVF9QQVJBTSA9IFwiWC1BbXotUmVnaW9uLVNldFwiO1xuZXhwb3J0IGNvbnN0IEFVVEhfSEVBREVSID0gXCJhdXRob3JpemF0aW9uXCI7XG5leHBvcnQgY29uc3QgQU1aX0RBVEVfSEVBREVSID0gQU1aX0RBVEVfUVVFUllfUEFSQU0udG9Mb3dlckNhc2UoKTtcbmV4cG9ydCBjb25zdCBEQVRFX0hFQURFUiA9IFwiZGF0ZVwiO1xuZXhwb3J0IGNvbnN0IEdFTkVSQVRFRF9IRUFERVJTID0gW0FVVEhfSEVBREVSLCBBTVpfREFURV9IRUFERVIsIERBVEVfSEVBREVSXTtcbmV4cG9ydCBjb25zdCBTSUdOQVRVUkVfSEVBREVSID0gU0lHTkFUVVJFX1FVRVJZX1BBUkFNLnRvTG93ZXJDYXNlKCk7XG5leHBvcnQgY29uc3QgU0hBMjU2X0hFQURFUiA9IFwieC1hbXotY29udGVudC1zaGEyNTZcIjtcbmV4cG9ydCBjb25zdCBUT0tFTl9IRUFERVIgPSBUT0tFTl9RVUVSWV9QQVJBTS50b0xvd2VyQ2FzZSgpO1xuZXhwb3J0IGNvbnN0IEhPU1RfSEVBREVSID0gXCJob3N0XCI7XG5leHBvcnQgY29uc3QgQUxXQVlTX1VOU0lHTkFCTEVfSEVBREVSUyA9IHtcbiAgICBhdXRob3JpemF0aW9uOiB0cnVlLFxuICAgIFwiY2FjaGUtY29udHJvbFwiOiB0cnVlLFxuICAgIGNvbm5lY3Rpb246IHRydWUsXG4gICAgZXhwZWN0OiB0cnVlLFxuICAgIGZyb206IHRydWUsXG4gICAgXCJrZWVwLWFsaXZlXCI6IHRydWUsXG4gICAgXCJtYXgtZm9yd2FyZHNcIjogdHJ1ZSxcbiAgICBwcmFnbWE6IHRydWUsXG4gICAgcmVmZXJlcjogdHJ1ZSxcbiAgICB0ZTogdHJ1ZSxcbiAgICB0cmFpbGVyOiB0cnVlLFxuICAgIFwidHJhbnNmZXItZW5jb2RpbmdcIjogdHJ1ZSxcbiAgICB1cGdyYWRlOiB0cnVlLFxuICAgIFwidXNlci1hZ2VudFwiOiB0cnVlLFxuICAgIFwieC1hbXpuLXRyYWNlLWlkXCI6IHRydWUsXG59O1xuZXhwb3J0IGNvbnN0IFBST1hZX0hFQURFUl9QQVRURVJOID0gL15wcm94eS0vO1xuZXhwb3J0IGNvbnN0IFNFQ19IRUFERVJfUEFUVEVSTiA9IC9ec2VjLS87XG5leHBvcnQgY29uc3QgVU5TSUdOQUJMRV9QQVRURVJOUyA9IFsvXnByb3h5LS9pLCAvXnNlYy0vaV07XG5leHBvcnQgY29uc3QgQUxHT1JJVEhNX0lERU5USUZJRVIgPSBcIkFXUzQtSE1BQy1TSEEyNTZcIjtcbmV4cG9ydCBjb25zdCBBTEdPUklUSE1fSURFTlRJRklFUl9WNEEgPSBcIkFXUzQtRUNEU0EtUDI1Ni1TSEEyNTZcIjtcbmV4cG9ydCBjb25zdCBFVkVOVF9BTEdPUklUSE1fSURFTlRJRklFUiA9IFwiQVdTNC1ITUFDLVNIQTI1Ni1QQVlMT0FEXCI7XG5leHBvcnQgY29uc3QgVU5TSUdORURfUEFZTE9BRCA9IFwiVU5TSUdORUQtUEFZTE9BRFwiO1xuZXhwb3J0IGNvbnN0IE1BWF9DQUNIRV9TSVpFID0gNTA7XG5leHBvcnQgY29uc3QgS0VZX1RZUEVfSURFTlRJRklFUiA9IFwiYXdzNF9yZXF1ZXN0XCI7XG5leHBvcnQgY29uc3QgTUFYX1BSRVNJR05FRF9UVEwgPSA2MCAqIDYwICogMjQgKiA3O1xuIiwiaW1wb3J0IHsgdG9IZXggfSBmcm9tIFwiQHNtaXRoeS91dGlsLWhleC1lbmNvZGluZ1wiO1xuaW1wb3J0IHsgdG9VaW50OEFycmF5IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC11dGY4XCI7XG5pbXBvcnQgeyBLRVlfVFlQRV9JREVOVElGSUVSLCBNQVhfQ0FDSEVfU0laRSB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuY29uc3Qgc2lnbmluZ0tleUNhY2hlID0ge307XG5jb25zdCBjYWNoZVF1ZXVlID0gW107XG5leHBvcnQgY29uc3QgY3JlYXRlU2NvcGUgPSAoc2hvcnREYXRlLCByZWdpb24sIHNlcnZpY2UpID0+IGAke3Nob3J0RGF0ZX0vJHtyZWdpb259LyR7c2VydmljZX0vJHtLRVlfVFlQRV9JREVOVElGSUVSfWA7XG5leHBvcnQgY29uc3QgZ2V0U2lnbmluZ0tleSA9IGFzeW5jIChzaGEyNTZDb25zdHJ1Y3RvciwgY3JlZGVudGlhbHMsIHNob3J0RGF0ZSwgcmVnaW9uLCBzZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgY3JlZHNIYXNoID0gYXdhaXQgaG1hYyhzaGEyNTZDb25zdHJ1Y3RvciwgY3JlZGVudGlhbHMuc2VjcmV0QWNjZXNzS2V5LCBjcmVkZW50aWFscy5hY2Nlc3NLZXlJZCk7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBgJHtzaG9ydERhdGV9OiR7cmVnaW9ufToke3NlcnZpY2V9OiR7dG9IZXgoY3JlZHNIYXNoKX06JHtjcmVkZW50aWFscy5zZXNzaW9uVG9rZW59YDtcbiAgICBpZiAoY2FjaGVLZXkgaW4gc2lnbmluZ0tleUNhY2hlKSB7XG4gICAgICAgIHJldHVybiBzaWduaW5nS2V5Q2FjaGVbY2FjaGVLZXldO1xuICAgIH1cbiAgICBjYWNoZVF1ZXVlLnB1c2goY2FjaGVLZXkpO1xuICAgIHdoaWxlIChjYWNoZVF1ZXVlLmxlbmd0aCA+IE1BWF9DQUNIRV9TSVpFKSB7XG4gICAgICAgIGRlbGV0ZSBzaWduaW5nS2V5Q2FjaGVbY2FjaGVRdWV1ZS5zaGlmdCgpXTtcbiAgICB9XG4gICAgbGV0IGtleSA9IGBBV1M0JHtjcmVkZW50aWFscy5zZWNyZXRBY2Nlc3NLZXl9YDtcbiAgICBmb3IgKGNvbnN0IHNpZ25hYmxlIG9mIFtzaG9ydERhdGUsIHJlZ2lvbiwgc2VydmljZSwgS0VZX1RZUEVfSURFTlRJRklFUl0pIHtcbiAgICAgICAga2V5ID0gYXdhaXQgaG1hYyhzaGEyNTZDb25zdHJ1Y3Rvciwga2V5LCBzaWduYWJsZSk7XG4gICAgfVxuICAgIHJldHVybiAoc2lnbmluZ0tleUNhY2hlW2NhY2hlS2V5XSA9IGtleSk7XG59O1xuZXhwb3J0IGNvbnN0IGNsZWFyQ3JlZGVudGlhbENhY2hlID0gKCkgPT4ge1xuICAgIGNhY2hlUXVldWUubGVuZ3RoID0gMDtcbiAgICBPYmplY3Qua2V5cyhzaWduaW5nS2V5Q2FjaGUpLmZvckVhY2goKGNhY2hlS2V5KSA9PiB7XG4gICAgICAgIGRlbGV0ZSBzaWduaW5nS2V5Q2FjaGVbY2FjaGVLZXldO1xuICAgIH0pO1xufTtcbmNvbnN0IGhtYWMgPSAoY3Rvciwgc2VjcmV0LCBkYXRhKSA9PiB7XG4gICAgY29uc3QgaGFzaCA9IG5ldyBjdG9yKHNlY3JldCk7XG4gICAgaGFzaC51cGRhdGUodG9VaW50OEFycmF5KGRhdGEpKTtcbiAgICByZXR1cm4gaGFzaC5kaWdlc3QoKTtcbn07XG4iLCJpbXBvcnQgeyBBTFdBWVNfVU5TSUdOQUJMRV9IRUFERVJTLCBQUk9YWV9IRUFERVJfUEFUVEVSTiwgU0VDX0hFQURFUl9QQVRURVJOIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgY29uc3QgZ2V0Q2Fub25pY2FsSGVhZGVycyA9ICh7IGhlYWRlcnMgfSwgdW5zaWduYWJsZUhlYWRlcnMsIHNpZ25hYmxlSGVhZGVycykgPT4ge1xuICAgIGNvbnN0IGNhbm9uaWNhbCA9IHt9O1xuICAgIGZvciAoY29uc3QgaGVhZGVyTmFtZSBvZiBPYmplY3Qua2V5cyhoZWFkZXJzKS5zb3J0KCkpIHtcbiAgICAgICAgaWYgKGhlYWRlcnNbaGVhZGVyTmFtZV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYW5vbmljYWxIZWFkZXJOYW1lID0gaGVhZGVyTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoY2Fub25pY2FsSGVhZGVyTmFtZSBpbiBBTFdBWVNfVU5TSUdOQUJMRV9IRUFERVJTIHx8XG4gICAgICAgICAgICB1bnNpZ25hYmxlSGVhZGVycz8uaGFzKGNhbm9uaWNhbEhlYWRlck5hbWUpIHx8XG4gICAgICAgICAgICBQUk9YWV9IRUFERVJfUEFUVEVSTi50ZXN0KGNhbm9uaWNhbEhlYWRlck5hbWUpIHx8XG4gICAgICAgICAgICBTRUNfSEVBREVSX1BBVFRFUk4udGVzdChjYW5vbmljYWxIZWFkZXJOYW1lKSkge1xuICAgICAgICAgICAgaWYgKCFzaWduYWJsZUhlYWRlcnMgfHwgKHNpZ25hYmxlSGVhZGVycyAmJiAhc2lnbmFibGVIZWFkZXJzLmhhcyhjYW5vbmljYWxIZWFkZXJOYW1lKSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYW5vbmljYWxbY2Fub25pY2FsSGVhZGVyTmFtZV0gPSBoZWFkZXJzW2hlYWRlck5hbWVdLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhbm9uaWNhbDtcbn07XG4iLCJpbXBvcnQgeyBpc0FycmF5QnVmZmVyIH0gZnJvbSBcIkBzbWl0aHkvaXMtYXJyYXktYnVmZmVyXCI7XG5pbXBvcnQgeyB0b0hleCB9IGZyb20gXCJAc21pdGh5L3V0aWwtaGV4LWVuY29kaW5nXCI7XG5pbXBvcnQgeyB0b1VpbnQ4QXJyYXkgfSBmcm9tIFwiQHNtaXRoeS91dGlsLXV0ZjhcIjtcbmltcG9ydCB7IFNIQTI1Nl9IRUFERVIsIFVOU0lHTkVEX1BBWUxPQUQgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCBjb25zdCBnZXRQYXlsb2FkSGFzaCA9IGFzeW5jICh7IGhlYWRlcnMsIGJvZHkgfSwgaGFzaENvbnN0cnVjdG9yKSA9PiB7XG4gICAgZm9yIChjb25zdCBoZWFkZXJOYW1lIG9mIE9iamVjdC5rZXlzKGhlYWRlcnMpKSB7XG4gICAgICAgIGlmIChoZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFNIQTI1Nl9IRUFERVIpIHtcbiAgICAgICAgICAgIHJldHVybiBoZWFkZXJzW2hlYWRlck5hbWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChib2R5ID09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gXCJlM2IwYzQ0Mjk4ZmMxYzE0OWFmYmY0Yzg5OTZmYjkyNDI3YWU0MWU0NjQ5YjkzNGNhNDk1OTkxYjc4NTJiODU1XCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSBcInN0cmluZ1wiIHx8IEFycmF5QnVmZmVyLmlzVmlldyhib2R5KSB8fCBpc0FycmF5QnVmZmVyKGJvZHkpKSB7XG4gICAgICAgIGNvbnN0IGhhc2hDdG9yID0gbmV3IGhhc2hDb25zdHJ1Y3RvcigpO1xuICAgICAgICBoYXNoQ3Rvci51cGRhdGUodG9VaW50OEFycmF5KGJvZHkpKTtcbiAgICAgICAgcmV0dXJuIHRvSGV4KGF3YWl0IGhhc2hDdG9yLmRpZ2VzdCgpKTtcbiAgICB9XG4gICAgcmV0dXJuIFVOU0lHTkVEX1BBWUxPQUQ7XG59O1xuIiwiaW1wb3J0IHsgZnJvbUhleCwgdG9IZXggfSBmcm9tIFwiQHNtaXRoeS91dGlsLWhleC1lbmNvZGluZ1wiO1xuaW1wb3J0IHsgZnJvbVV0ZjggfSBmcm9tIFwiQHNtaXRoeS91dGlsLXV0ZjhcIjtcbmV4cG9ydCBjbGFzcyBIZWFkZXJGb3JtYXR0ZXIge1xuICAgIGZvcm1hdChoZWFkZXJzKSB7XG4gICAgICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGhlYWRlck5hbWUgb2YgT2JqZWN0LmtleXMoaGVhZGVycykpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gZnJvbVV0ZjgoaGVhZGVyTmFtZSk7XG4gICAgICAgICAgICBjaHVua3MucHVzaChVaW50OEFycmF5LmZyb20oW2J5dGVzLmJ5dGVMZW5ndGhdKSwgYnl0ZXMsIHRoaXMuZm9ybWF0SGVhZGVyVmFsdWUoaGVhZGVyc1toZWFkZXJOYW1lXSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KGNodW5rcy5yZWR1Y2UoKGNhcnJ5LCBieXRlcykgPT4gY2FycnkgKyBieXRlcy5ieXRlTGVuZ3RoLCAwKSk7XG4gICAgICAgIGxldCBwb3NpdGlvbiA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgY2h1bmsgb2YgY2h1bmtzKSB7XG4gICAgICAgICAgICBvdXQuc2V0KGNodW5rLCBwb3NpdGlvbik7XG4gICAgICAgICAgICBwb3NpdGlvbiArPSBjaHVuay5ieXRlTGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGZvcm1hdEhlYWRlclZhbHVlKGhlYWRlcikge1xuICAgICAgICBzd2l0Y2ggKGhlYWRlci50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oW2hlYWRlci52YWx1ZSA/IDAgOiAxXSk7XG4gICAgICAgICAgICBjYXNlIFwiYnl0ZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oWzIsIGhlYWRlci52YWx1ZV0pO1xuICAgICAgICAgICAgY2FzZSBcInNob3J0XCI6XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hvcnRWaWV3ID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigzKSk7XG4gICAgICAgICAgICAgICAgc2hvcnRWaWV3LnNldFVpbnQ4KDAsIDMpO1xuICAgICAgICAgICAgICAgIHNob3J0Vmlldy5zZXRJbnQxNigxLCBoZWFkZXIudmFsdWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc2hvcnRWaWV3LmJ1ZmZlcik7XG4gICAgICAgICAgICBjYXNlIFwiaW50ZWdlclwiOlxuICAgICAgICAgICAgICAgIGNvbnN0IGludFZpZXcgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDUpKTtcbiAgICAgICAgICAgICAgICBpbnRWaWV3LnNldFVpbnQ4KDAsIDQpO1xuICAgICAgICAgICAgICAgIGludFZpZXcuc2V0SW50MzIoMSwgaGVhZGVyLnZhbHVlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGludFZpZXcuYnVmZmVyKTtcbiAgICAgICAgICAgIGNhc2UgXCJsb25nXCI6XG4gICAgICAgICAgICAgICAgY29uc3QgbG9uZ0J5dGVzID0gbmV3IFVpbnQ4QXJyYXkoOSk7XG4gICAgICAgICAgICAgICAgbG9uZ0J5dGVzWzBdID0gNTtcbiAgICAgICAgICAgICAgICBsb25nQnl0ZXMuc2V0KGhlYWRlci52YWx1ZS5ieXRlcywgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvbmdCeXRlcztcbiAgICAgICAgICAgIGNhc2UgXCJiaW5hcnlcIjpcbiAgICAgICAgICAgICAgICBjb25zdCBiaW5WaWV3ID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigzICsgaGVhZGVyLnZhbHVlLmJ5dGVMZW5ndGgpKTtcbiAgICAgICAgICAgICAgICBiaW5WaWV3LnNldFVpbnQ4KDAsIDYpO1xuICAgICAgICAgICAgICAgIGJpblZpZXcuc2V0VWludDE2KDEsIGhlYWRlci52YWx1ZS5ieXRlTGVuZ3RoLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYmluQnl0ZXMgPSBuZXcgVWludDhBcnJheShiaW5WaWV3LmJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgYmluQnl0ZXMuc2V0KGhlYWRlci52YWx1ZSwgMyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpbkJ5dGVzO1xuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICAgIGNvbnN0IHV0ZjhCeXRlcyA9IGZyb21VdGY4KGhlYWRlci52YWx1ZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RyVmlldyA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMyArIHV0ZjhCeXRlcy5ieXRlTGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgc3RyVmlldy5zZXRVaW50OCgwLCA3KTtcbiAgICAgICAgICAgICAgICBzdHJWaWV3LnNldFVpbnQxNigxLCB1dGY4Qnl0ZXMuYnl0ZUxlbmd0aCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0ckJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoc3RyVmlldy5idWZmZXIpO1xuICAgICAgICAgICAgICAgIHN0ckJ5dGVzLnNldCh1dGY4Qnl0ZXMsIDMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJCeXRlcztcbiAgICAgICAgICAgIGNhc2UgXCJ0aW1lc3RhbXBcIjpcbiAgICAgICAgICAgICAgICBjb25zdCB0c0J5dGVzID0gbmV3IFVpbnQ4QXJyYXkoOSk7XG4gICAgICAgICAgICAgICAgdHNCeXRlc1swXSA9IDg7XG4gICAgICAgICAgICAgICAgdHNCeXRlcy5zZXQoSW50NjQuZnJvbU51bWJlcihoZWFkZXIudmFsdWUudmFsdWVPZigpKS5ieXRlcywgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRzQnl0ZXM7XG4gICAgICAgICAgICBjYXNlIFwidXVpZFwiOlxuICAgICAgICAgICAgICAgIGlmICghVVVJRF9QQVRURVJOLnRlc3QoaGVhZGVyLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgVVVJRCByZWNlaXZlZDogJHtoZWFkZXIudmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHV1aWRCeXRlcyA9IG5ldyBVaW50OEFycmF5KDE3KTtcbiAgICAgICAgICAgICAgICB1dWlkQnl0ZXNbMF0gPSA5O1xuICAgICAgICAgICAgICAgIHV1aWRCeXRlcy5zZXQoZnJvbUhleChoZWFkZXIudmFsdWUucmVwbGFjZSgvXFwtL2csIFwiXCIpKSwgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHV1aWRCeXRlcztcbiAgICAgICAgfVxuICAgIH1cbn1cbnZhciBIRUFERVJfVkFMVUVfVFlQRTtcbihmdW5jdGlvbiAoSEVBREVSX1ZBTFVFX1RZUEUpIHtcbiAgICBIRUFERVJfVkFMVUVfVFlQRVtIRUFERVJfVkFMVUVfVFlQRVtcImJvb2xUcnVlXCJdID0gMF0gPSBcImJvb2xUcnVlXCI7XG4gICAgSEVBREVSX1ZBTFVFX1RZUEVbSEVBREVSX1ZBTFVFX1RZUEVbXCJib29sRmFsc2VcIl0gPSAxXSA9IFwiYm9vbEZhbHNlXCI7XG4gICAgSEVBREVSX1ZBTFVFX1RZUEVbSEVBREVSX1ZBTFVFX1RZUEVbXCJieXRlXCJdID0gMl0gPSBcImJ5dGVcIjtcbiAgICBIRUFERVJfVkFMVUVfVFlQRVtIRUFERVJfVkFMVUVfVFlQRVtcInNob3J0XCJdID0gM10gPSBcInNob3J0XCI7XG4gICAgSEVBREVSX1ZBTFVFX1RZUEVbSEVBREVSX1ZBTFVFX1RZUEVbXCJpbnRlZ2VyXCJdID0gNF0gPSBcImludGVnZXJcIjtcbiAgICBIRUFERVJfVkFMVUVfVFlQRVtIRUFERVJfVkFMVUVfVFlQRVtcImxvbmdcIl0gPSA1XSA9IFwibG9uZ1wiO1xuICAgIEhFQURFUl9WQUxVRV9UWVBFW0hFQURFUl9WQUxVRV9UWVBFW1wiYnl0ZUFycmF5XCJdID0gNl0gPSBcImJ5dGVBcnJheVwiO1xuICAgIEhFQURFUl9WQUxVRV9UWVBFW0hFQURFUl9WQUxVRV9UWVBFW1wic3RyaW5nXCJdID0gN10gPSBcInN0cmluZ1wiO1xuICAgIEhFQURFUl9WQUxVRV9UWVBFW0hFQURFUl9WQUxVRV9UWVBFW1widGltZXN0YW1wXCJdID0gOF0gPSBcInRpbWVzdGFtcFwiO1xuICAgIEhFQURFUl9WQUxVRV9UWVBFW0hFQURFUl9WQUxVRV9UWVBFW1widXVpZFwiXSA9IDldID0gXCJ1dWlkXCI7XG59KShIRUFERVJfVkFMVUVfVFlQRSB8fCAoSEVBREVSX1ZBTFVFX1RZUEUgPSB7fSkpO1xuY29uc3QgVVVJRF9QQVRURVJOID0gL15bYS1mMC05XXs4fS1bYS1mMC05XXs0fS1bYS1mMC05XXs0fS1bYS1mMC05XXs0fS1bYS1mMC05XXsxMn0kLztcbmV4cG9ydCBjbGFzcyBJbnQ2NCB7XG4gICAgY29uc3RydWN0b3IoYnl0ZXMpIHtcbiAgICAgICAgdGhpcy5ieXRlcyA9IGJ5dGVzO1xuICAgICAgICBpZiAoYnl0ZXMuYnl0ZUxlbmd0aCAhPT0gOCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW50NjQgYnVmZmVycyBtdXN0IGJlIGV4YWN0bHkgOCBieXRlc1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZnJvbU51bWJlcihudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA+IDkyMjMzNzIwMzY4NTQ3NzYwMDAgfHwgbnVtYmVyIDwgLTkyMjMzNzIwMzY4NTQ3NzYwMDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtudW1iZXJ9IGlzIHRvbyBsYXJnZSAob3IsIGlmIG5lZ2F0aXZlLCB0b28gc21hbGwpIHRvIHJlcHJlc2VudCBhcyBhbiBJbnQ2NGApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoOCk7XG4gICAgICAgIGZvciAobGV0IGkgPSA3LCByZW1haW5pbmcgPSBNYXRoLmFicyhNYXRoLnJvdW5kKG51bWJlcikpOyBpID4gLTEgJiYgcmVtYWluaW5nID4gMDsgaS0tLCByZW1haW5pbmcgLz0gMjU2KSB7XG4gICAgICAgICAgICBieXRlc1tpXSA9IHJlbWFpbmluZztcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgbmVnYXRlKGJ5dGVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEludDY0KGJ5dGVzKTtcbiAgICB9XG4gICAgdmFsdWVPZigpIHtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSB0aGlzLmJ5dGVzLnNsaWNlKDApO1xuICAgICAgICBjb25zdCBuZWdhdGl2ZSA9IGJ5dGVzWzBdICYgMGIxMDAwMDAwMDtcbiAgICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgICAgICBuZWdhdGUoYnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZUludCh0b0hleChieXRlcyksIDE2KSAqIChuZWdhdGl2ZSA/IC0xIDogMSk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKHRoaXMudmFsdWVPZigpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBuZWdhdGUoYnl0ZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDg7IGkrKykge1xuICAgICAgICBieXRlc1tpXSBePSAweGZmO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gNzsgaSA+IC0xOyBpLS0pIHtcbiAgICAgICAgYnl0ZXNbaV0rKztcbiAgICAgICAgaWYgKGJ5dGVzW2ldICE9PSAwKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tIFwiQHNtaXRoeS9wcm90b2NvbC1odHRwXCI7XG5leHBvcnQgY29uc3QgbW92ZUhlYWRlcnNUb1F1ZXJ5ID0gKHJlcXVlc3QsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHsgaGVhZGVycywgcXVlcnkgPSB7fSB9ID0gSHR0cFJlcXVlc3QuY2xvbmUocmVxdWVzdCk7XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5rZXlzKGhlYWRlcnMpKSB7XG4gICAgICAgIGNvbnN0IGxuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoKGxuYW1lLnNsaWNlKDAsIDYpID09PSBcIngtYW16LVwiICYmICFvcHRpb25zLnVuaG9pc3RhYmxlSGVhZGVycz8uaGFzKGxuYW1lKSkgfHxcbiAgICAgICAgICAgIG9wdGlvbnMuaG9pc3RhYmxlSGVhZGVycz8uaGFzKGxuYW1lKSkge1xuICAgICAgICAgICAgcXVlcnlbbmFtZV0gPSBoZWFkZXJzW25hbWVdO1xuICAgICAgICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucmVxdWVzdCxcbiAgICAgICAgaGVhZGVycyxcbiAgICAgICAgcXVlcnksXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IEdFTkVSQVRFRF9IRUFERVJTIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgY29uc3QgcHJlcGFyZVJlcXVlc3QgPSAocmVxdWVzdCkgPT4ge1xuICAgIHJlcXVlc3QgPSBIdHRwUmVxdWVzdC5jbG9uZShyZXF1ZXN0KTtcbiAgICBmb3IgKGNvbnN0IGhlYWRlck5hbWUgb2YgT2JqZWN0LmtleXMocmVxdWVzdC5oZWFkZXJzKSkge1xuICAgICAgICBpZiAoR0VORVJBVEVEX0hFQURFUlMuaW5kZXhPZihoZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCkpID4gLTEpIHtcbiAgICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0LmhlYWRlcnNbaGVhZGVyTmFtZV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcXVlc3Q7XG59O1xuIiwiaW1wb3J0IHsgdG9IZXggfSBmcm9tIFwiQHNtaXRoeS91dGlsLWhleC1lbmNvZGluZ1wiO1xuaW1wb3J0IHsgbm9ybWFsaXplUHJvdmlkZXIgfSBmcm9tIFwiQHNtaXRoeS91dGlsLW1pZGRsZXdhcmVcIjtcbmltcG9ydCB7IGVzY2FwZVVyaSB9IGZyb20gXCJAc21pdGh5L3V0aWwtdXJpLWVzY2FwZVwiO1xuaW1wb3J0IHsgdG9VaW50OEFycmF5IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC11dGY4XCI7XG5pbXBvcnQgeyBnZXRDYW5vbmljYWxRdWVyeSB9IGZyb20gXCIuL2dldENhbm9uaWNhbFF1ZXJ5XCI7XG5pbXBvcnQgeyBpc284NjAxIH0gZnJvbSBcIi4vdXRpbERhdGVcIjtcbmV4cG9ydCBjbGFzcyBTaWduYXR1cmVWNEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKHsgYXBwbHlDaGVja3N1bSwgY3JlZGVudGlhbHMsIHJlZ2lvbiwgc2VydmljZSwgc2hhMjU2LCB1cmlFc2NhcGVQYXRoID0gdHJ1ZSwgfSkge1xuICAgICAgICB0aGlzLnNlcnZpY2UgPSBzZXJ2aWNlO1xuICAgICAgICB0aGlzLnNoYTI1NiA9IHNoYTI1NjtcbiAgICAgICAgdGhpcy51cmlFc2NhcGVQYXRoID0gdXJpRXNjYXBlUGF0aDtcbiAgICAgICAgdGhpcy5hcHBseUNoZWNrc3VtID0gdHlwZW9mIGFwcGx5Q2hlY2tzdW0gPT09IFwiYm9vbGVhblwiID8gYXBwbHlDaGVja3N1bSA6IHRydWU7XG4gICAgICAgIHRoaXMucmVnaW9uUHJvdmlkZXIgPSBub3JtYWxpemVQcm92aWRlcihyZWdpb24pO1xuICAgICAgICB0aGlzLmNyZWRlbnRpYWxQcm92aWRlciA9IG5vcm1hbGl6ZVByb3ZpZGVyKGNyZWRlbnRpYWxzKTtcbiAgICB9XG4gICAgY3JlYXRlQ2Fub25pY2FsUmVxdWVzdChyZXF1ZXN0LCBjYW5vbmljYWxIZWFkZXJzLCBwYXlsb2FkSGFzaCkge1xuICAgICAgICBjb25zdCBzb3J0ZWRIZWFkZXJzID0gT2JqZWN0LmtleXMoY2Fub25pY2FsSGVhZGVycykuc29ydCgpO1xuICAgICAgICByZXR1cm4gYCR7cmVxdWVzdC5tZXRob2R9XG4ke3RoaXMuZ2V0Q2Fub25pY2FsUGF0aChyZXF1ZXN0KX1cbiR7Z2V0Q2Fub25pY2FsUXVlcnkocmVxdWVzdCl9XG4ke3NvcnRlZEhlYWRlcnMubWFwKChuYW1lKSA9PiBgJHtuYW1lfToke2Nhbm9uaWNhbEhlYWRlcnNbbmFtZV19YCkuam9pbihcIlxcblwiKX1cblxuJHtzb3J0ZWRIZWFkZXJzLmpvaW4oXCI7XCIpfVxuJHtwYXlsb2FkSGFzaH1gO1xuICAgIH1cbiAgICBhc3luYyBjcmVhdGVTdHJpbmdUb1NpZ24obG9uZ0RhdGUsIGNyZWRlbnRpYWxTY29wZSwgY2Fub25pY2FsUmVxdWVzdCwgYWxnb3JpdGhtSWRlbnRpZmllcikge1xuICAgICAgICBjb25zdCBoYXNoID0gbmV3IHRoaXMuc2hhMjU2KCk7XG4gICAgICAgIGhhc2gudXBkYXRlKHRvVWludDhBcnJheShjYW5vbmljYWxSZXF1ZXN0KSk7XG4gICAgICAgIGNvbnN0IGhhc2hlZFJlcXVlc3QgPSBhd2FpdCBoYXNoLmRpZ2VzdCgpO1xuICAgICAgICByZXR1cm4gYCR7YWxnb3JpdGhtSWRlbnRpZmllcn1cbiR7bG9uZ0RhdGV9XG4ke2NyZWRlbnRpYWxTY29wZX1cbiR7dG9IZXgoaGFzaGVkUmVxdWVzdCl9YDtcbiAgICB9XG4gICAgZ2V0Q2Fub25pY2FsUGF0aCh7IHBhdGggfSkge1xuICAgICAgICBpZiAodGhpcy51cmlFc2NhcGVQYXRoKSB7XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkUGF0aFNlZ21lbnRzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhdGhTZWdtZW50IG9mIHBhdGguc3BsaXQoXCIvXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhdGhTZWdtZW50Py5sZW5ndGggPT09IDApXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmIChwYXRoU2VnbWVudCA9PT0gXCIuXCIpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmIChwYXRoU2VnbWVudCA9PT0gXCIuLlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRQYXRoU2VnbWVudHMucG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkUGF0aFNlZ21lbnRzLnB1c2gocGF0aFNlZ21lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRQYXRoID0gYCR7cGF0aD8uc3RhcnRzV2l0aChcIi9cIikgPyBcIi9cIiA6IFwiXCJ9JHtub3JtYWxpemVkUGF0aFNlZ21lbnRzLmpvaW4oXCIvXCIpfSR7bm9ybWFsaXplZFBhdGhTZWdtZW50cy5sZW5ndGggPiAwICYmIHBhdGg/LmVuZHNXaXRoKFwiL1wiKSA/IFwiL1wiIDogXCJcIn1gO1xuICAgICAgICAgICAgY29uc3QgZG91YmxlRW5jb2RlZCA9IGVzY2FwZVVyaShub3JtYWxpemVkUGF0aCk7XG4gICAgICAgICAgICByZXR1cm4gZG91YmxlRW5jb2RlZC5yZXBsYWNlKC8lMkYvZywgXCIvXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICB2YWxpZGF0ZVJlc29sdmVkQ3JlZGVudGlhbHMoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjcmVkZW50aWFscyAhPT0gXCJvYmplY3RcIiB8fFxuICAgICAgICAgICAgdHlwZW9mIGNyZWRlbnRpYWxzLmFjY2Vzc0tleUlkICE9PSBcInN0cmluZ1wiIHx8XG4gICAgICAgICAgICB0eXBlb2YgY3JlZGVudGlhbHMuc2VjcmV0QWNjZXNzS2V5ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZXNvbHZlZCBjcmVkZW50aWFsIG9iamVjdCBpcyBub3QgdmFsaWRcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9ybWF0RGF0ZShub3cpIHtcbiAgICAgICAgY29uc3QgbG9uZ0RhdGUgPSBpc284NjAxKG5vdykucmVwbGFjZSgvW1xcLTpdL2csIFwiXCIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9uZ0RhdGUsXG4gICAgICAgICAgICBzaG9ydERhdGU6IGxvbmdEYXRlLnNsaWNlKDAsIDgpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRDYW5vbmljYWxIZWFkZXJMaXN0KGhlYWRlcnMpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGhlYWRlcnMpLnNvcnQoKS5qb2luKFwiO1wiKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBlc2NhcGVVcmkgfSBmcm9tIFwiQHNtaXRoeS91dGlsLXVyaS1lc2NhcGVcIjtcbmltcG9ydCB7IFNJR05BVFVSRV9IRUFERVIgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCBjb25zdCBnZXRDYW5vbmljYWxRdWVyeSA9ICh7IHF1ZXJ5ID0ge30gfSkgPT4ge1xuICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICBjb25zdCBzZXJpYWxpemVkID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocXVlcnkpKSB7XG4gICAgICAgIGlmIChrZXkudG9Mb3dlckNhc2UoKSA9PT0gU0lHTkFUVVJFX0hFQURFUikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW5jb2RlZEtleSA9IGVzY2FwZVVyaShrZXkpO1xuICAgICAgICBrZXlzLnB1c2goZW5jb2RlZEtleSk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcXVlcnlba2V5XTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgc2VyaWFsaXplZFtlbmNvZGVkS2V5XSA9IGAke2VuY29kZWRLZXl9PSR7ZXNjYXBlVXJpKHZhbHVlKX1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBzZXJpYWxpemVkW2VuY29kZWRLZXldID0gdmFsdWVcbiAgICAgICAgICAgICAgICAuc2xpY2UoMClcbiAgICAgICAgICAgICAgICAucmVkdWNlKChlbmNvZGVkLCB2YWx1ZSkgPT4gZW5jb2RlZC5jb25jYXQoW2Ake2VuY29kZWRLZXl9PSR7ZXNjYXBlVXJpKHZhbHVlKX1gXSksIFtdKVxuICAgICAgICAgICAgICAgIC5zb3J0KClcbiAgICAgICAgICAgICAgICAuam9pbihcIiZcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGtleXNcbiAgICAgICAgLnNvcnQoKVxuICAgICAgICAubWFwKChrZXkpID0+IHNlcmlhbGl6ZWRba2V5XSlcbiAgICAgICAgLmZpbHRlcigoc2VyaWFsaXplZCkgPT4gc2VyaWFsaXplZClcbiAgICAgICAgLmpvaW4oXCImXCIpO1xufTtcbiIsImV4cG9ydCBjb25zdCBpc284NjAxID0gKHRpbWUpID0+IHRvRGF0ZSh0aW1lKVxuICAgIC50b0lTT1N0cmluZygpXG4gICAgLnJlcGxhY2UoL1xcLlxcZHszfVokLywgXCJaXCIpO1xuZXhwb3J0IGNvbnN0IHRvRGF0ZSA9ICh0aW1lKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB0aW1lID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aW1lICogMTAwMCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGltZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAoTnVtYmVyKHRpbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoTnVtYmVyKHRpbWUpICogMTAwMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRpbWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGltZTtcbn07XG4iLCJpbXBvcnQgeyB0b0hleCB9IGZyb20gXCJAc21pdGh5L3V0aWwtaGV4LWVuY29kaW5nXCI7XG5pbXBvcnQgeyB0b1VpbnQ4QXJyYXkgfSBmcm9tIFwiQHNtaXRoeS91dGlsLXV0ZjhcIjtcbmltcG9ydCB7IEFMR09SSVRITV9JREVOVElGSUVSLCBBTEdPUklUSE1fUVVFUllfUEFSQU0sIEFNWl9EQVRFX0hFQURFUiwgQU1aX0RBVEVfUVVFUllfUEFSQU0sIEFVVEhfSEVBREVSLCBDUkVERU5USUFMX1FVRVJZX1BBUkFNLCBFVkVOVF9BTEdPUklUSE1fSURFTlRJRklFUiwgRVhQSVJFU19RVUVSWV9QQVJBTSwgTUFYX1BSRVNJR05FRF9UVEwsIFNIQTI1Nl9IRUFERVIsIFNJR05BVFVSRV9RVUVSWV9QQVJBTSwgU0lHTkVEX0hFQURFUlNfUVVFUllfUEFSQU0sIFRPS0VOX0hFQURFUiwgVE9LRU5fUVVFUllfUEFSQU0sIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBjcmVhdGVTY29wZSwgZ2V0U2lnbmluZ0tleSB9IGZyb20gXCIuL2NyZWRlbnRpYWxEZXJpdmF0aW9uXCI7XG5pbXBvcnQgeyBnZXRDYW5vbmljYWxIZWFkZXJzIH0gZnJvbSBcIi4vZ2V0Q2Fub25pY2FsSGVhZGVyc1wiO1xuaW1wb3J0IHsgZ2V0UGF5bG9hZEhhc2ggfSBmcm9tIFwiLi9nZXRQYXlsb2FkSGFzaFwiO1xuaW1wb3J0IHsgSGVhZGVyRm9ybWF0dGVyIH0gZnJvbSBcIi4vSGVhZGVyRm9ybWF0dGVyXCI7XG5pbXBvcnQgeyBoYXNIZWFkZXIgfSBmcm9tIFwiLi9oZWFkZXJVdGlsXCI7XG5pbXBvcnQgeyBtb3ZlSGVhZGVyc1RvUXVlcnkgfSBmcm9tIFwiLi9tb3ZlSGVhZGVyc1RvUXVlcnlcIjtcbmltcG9ydCB7IHByZXBhcmVSZXF1ZXN0IH0gZnJvbSBcIi4vcHJlcGFyZVJlcXVlc3RcIjtcbmltcG9ydCB7IFNpZ25hdHVyZVY0QmFzZSB9IGZyb20gXCIuL1NpZ25hdHVyZVY0QmFzZVwiO1xuZXhwb3J0IGNsYXNzIFNpZ25hdHVyZVY0IGV4dGVuZHMgU2lnbmF0dXJlVjRCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGFwcGx5Q2hlY2tzdW0sIGNyZWRlbnRpYWxzLCByZWdpb24sIHNlcnZpY2UsIHNoYTI1NiwgdXJpRXNjYXBlUGF0aCA9IHRydWUsIH0pIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgYXBwbHlDaGVja3N1bSxcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzLFxuICAgICAgICAgICAgcmVnaW9uLFxuICAgICAgICAgICAgc2VydmljZSxcbiAgICAgICAgICAgIHNoYTI1NixcbiAgICAgICAgICAgIHVyaUVzY2FwZVBhdGgsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmhlYWRlckZvcm1hdHRlciA9IG5ldyBIZWFkZXJGb3JtYXR0ZXIoKTtcbiAgICB9XG4gICAgYXN5bmMgcHJlc2lnbihvcmlnaW5hbFJlcXVlc3QsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IHNpZ25pbmdEYXRlID0gbmV3IERhdGUoKSwgZXhwaXJlc0luID0gMzYwMCwgdW5zaWduYWJsZUhlYWRlcnMsIHVuaG9pc3RhYmxlSGVhZGVycywgc2lnbmFibGVIZWFkZXJzLCBob2lzdGFibGVIZWFkZXJzLCBzaWduaW5nUmVnaW9uLCBzaWduaW5nU2VydmljZSwgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gYXdhaXQgdGhpcy5jcmVkZW50aWFsUHJvdmlkZXIoKTtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVJlc29sdmVkQ3JlZGVudGlhbHMoY3JlZGVudGlhbHMpO1xuICAgICAgICBjb25zdCByZWdpb24gPSBzaWduaW5nUmVnaW9uID8/IChhd2FpdCB0aGlzLnJlZ2lvblByb3ZpZGVyKCkpO1xuICAgICAgICBjb25zdCB7IGxvbmdEYXRlLCBzaG9ydERhdGUgfSA9IHRoaXMuZm9ybWF0RGF0ZShzaWduaW5nRGF0ZSk7XG4gICAgICAgIGlmIChleHBpcmVzSW4gPiBNQVhfUFJFU0lHTkVEX1RUTCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwiU2lnbmF0dXJlIHZlcnNpb24gNCBwcmVzaWduZWQgVVJMc1wiICsgXCIgbXVzdCBoYXZlIGFuIGV4cGlyYXRpb24gZGF0ZSBsZXNzIHRoYW4gb25lIHdlZWsgaW5cIiArIFwiIHRoZSBmdXR1cmVcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NvcGUgPSBjcmVhdGVTY29wZShzaG9ydERhdGUsIHJlZ2lvbiwgc2lnbmluZ1NlcnZpY2UgPz8gdGhpcy5zZXJ2aWNlKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG1vdmVIZWFkZXJzVG9RdWVyeShwcmVwYXJlUmVxdWVzdChvcmlnaW5hbFJlcXVlc3QpLCB7IHVuaG9pc3RhYmxlSGVhZGVycywgaG9pc3RhYmxlSGVhZGVycyB9KTtcbiAgICAgICAgaWYgKGNyZWRlbnRpYWxzLnNlc3Npb25Ub2tlbikge1xuICAgICAgICAgICAgcmVxdWVzdC5xdWVyeVtUT0tFTl9RVUVSWV9QQVJBTV0gPSBjcmVkZW50aWFscy5zZXNzaW9uVG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgcmVxdWVzdC5xdWVyeVtBTEdPUklUSE1fUVVFUllfUEFSQU1dID0gQUxHT1JJVEhNX0lERU5USUZJRVI7XG4gICAgICAgIHJlcXVlc3QucXVlcnlbQ1JFREVOVElBTF9RVUVSWV9QQVJBTV0gPSBgJHtjcmVkZW50aWFscy5hY2Nlc3NLZXlJZH0vJHtzY29wZX1gO1xuICAgICAgICByZXF1ZXN0LnF1ZXJ5W0FNWl9EQVRFX1FVRVJZX1BBUkFNXSA9IGxvbmdEYXRlO1xuICAgICAgICByZXF1ZXN0LnF1ZXJ5W0VYUElSRVNfUVVFUllfUEFSQU1dID0gZXhwaXJlc0luLnRvU3RyaW5nKDEwKTtcbiAgICAgICAgY29uc3QgY2Fub25pY2FsSGVhZGVycyA9IGdldENhbm9uaWNhbEhlYWRlcnMocmVxdWVzdCwgdW5zaWduYWJsZUhlYWRlcnMsIHNpZ25hYmxlSGVhZGVycyk7XG4gICAgICAgIHJlcXVlc3QucXVlcnlbU0lHTkVEX0hFQURFUlNfUVVFUllfUEFSQU1dID0gdGhpcy5nZXRDYW5vbmljYWxIZWFkZXJMaXN0KGNhbm9uaWNhbEhlYWRlcnMpO1xuICAgICAgICByZXF1ZXN0LnF1ZXJ5W1NJR05BVFVSRV9RVUVSWV9QQVJBTV0gPSBhd2FpdCB0aGlzLmdldFNpZ25hdHVyZShsb25nRGF0ZSwgc2NvcGUsIHRoaXMuZ2V0U2lnbmluZ0tleShjcmVkZW50aWFscywgcmVnaW9uLCBzaG9ydERhdGUsIHNpZ25pbmdTZXJ2aWNlKSwgdGhpcy5jcmVhdGVDYW5vbmljYWxSZXF1ZXN0KHJlcXVlc3QsIGNhbm9uaWNhbEhlYWRlcnMsIGF3YWl0IGdldFBheWxvYWRIYXNoKG9yaWdpbmFsUmVxdWVzdCwgdGhpcy5zaGEyNTYpKSk7XG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH1cbiAgICBhc3luYyBzaWduKHRvU2lnbiwgb3B0aW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIHRvU2lnbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2lnblN0cmluZyh0b1NpZ24sIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRvU2lnbi5oZWFkZXJzICYmIHRvU2lnbi5wYXlsb2FkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zaWduRXZlbnQodG9TaWduLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0b1NpZ24ubWVzc2FnZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2lnbk1lc3NhZ2UodG9TaWduLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNpZ25SZXF1ZXN0KHRvU2lnbiwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgc2lnbkV2ZW50KHsgaGVhZGVycywgcGF5bG9hZCB9LCB7IHNpZ25pbmdEYXRlID0gbmV3IERhdGUoKSwgcHJpb3JTaWduYXR1cmUsIHNpZ25pbmdSZWdpb24sIHNpZ25pbmdTZXJ2aWNlIH0pIHtcbiAgICAgICAgY29uc3QgcmVnaW9uID0gc2lnbmluZ1JlZ2lvbiA/PyAoYXdhaXQgdGhpcy5yZWdpb25Qcm92aWRlcigpKTtcbiAgICAgICAgY29uc3QgeyBzaG9ydERhdGUsIGxvbmdEYXRlIH0gPSB0aGlzLmZvcm1hdERhdGUoc2lnbmluZ0RhdGUpO1xuICAgICAgICBjb25zdCBzY29wZSA9IGNyZWF0ZVNjb3BlKHNob3J0RGF0ZSwgcmVnaW9uLCBzaWduaW5nU2VydmljZSA/PyB0aGlzLnNlcnZpY2UpO1xuICAgICAgICBjb25zdCBoYXNoZWRQYXlsb2FkID0gYXdhaXQgZ2V0UGF5bG9hZEhhc2goeyBoZWFkZXJzOiB7fSwgYm9keTogcGF5bG9hZCB9LCB0aGlzLnNoYTI1Nik7XG4gICAgICAgIGNvbnN0IGhhc2ggPSBuZXcgdGhpcy5zaGEyNTYoKTtcbiAgICAgICAgaGFzaC51cGRhdGUoaGVhZGVycyk7XG4gICAgICAgIGNvbnN0IGhhc2hlZEhlYWRlcnMgPSB0b0hleChhd2FpdCBoYXNoLmRpZ2VzdCgpKTtcbiAgICAgICAgY29uc3Qgc3RyaW5nVG9TaWduID0gW1xuICAgICAgICAgICAgRVZFTlRfQUxHT1JJVEhNX0lERU5USUZJRVIsXG4gICAgICAgICAgICBsb25nRGF0ZSxcbiAgICAgICAgICAgIHNjb3BlLFxuICAgICAgICAgICAgcHJpb3JTaWduYXR1cmUsXG4gICAgICAgICAgICBoYXNoZWRIZWFkZXJzLFxuICAgICAgICAgICAgaGFzaGVkUGF5bG9hZCxcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5zaWduU3RyaW5nKHN0cmluZ1RvU2lnbiwgeyBzaWduaW5nRGF0ZSwgc2lnbmluZ1JlZ2lvbjogcmVnaW9uLCBzaWduaW5nU2VydmljZSB9KTtcbiAgICB9XG4gICAgYXN5bmMgc2lnbk1lc3NhZ2Uoc2lnbmFibGVNZXNzYWdlLCB7IHNpZ25pbmdEYXRlID0gbmV3IERhdGUoKSwgc2lnbmluZ1JlZ2lvbiwgc2lnbmluZ1NlcnZpY2UgfSkge1xuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5zaWduRXZlbnQoe1xuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJGb3JtYXR0ZXIuZm9ybWF0KHNpZ25hYmxlTWVzc2FnZS5tZXNzYWdlLmhlYWRlcnMpLFxuICAgICAgICAgICAgcGF5bG9hZDogc2lnbmFibGVNZXNzYWdlLm1lc3NhZ2UuYm9keSxcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgc2lnbmluZ0RhdGUsXG4gICAgICAgICAgICBzaWduaW5nUmVnaW9uLFxuICAgICAgICAgICAgc2lnbmluZ1NlcnZpY2UsXG4gICAgICAgICAgICBwcmlvclNpZ25hdHVyZTogc2lnbmFibGVNZXNzYWdlLnByaW9yU2lnbmF0dXJlLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbigoc2lnbmF0dXJlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiBzaWduYWJsZU1lc3NhZ2UubWVzc2FnZSwgc2lnbmF0dXJlIH07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBzaWduU3RyaW5nKHN0cmluZ1RvU2lnbiwgeyBzaWduaW5nRGF0ZSA9IG5ldyBEYXRlKCksIHNpZ25pbmdSZWdpb24sIHNpZ25pbmdTZXJ2aWNlIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IGF3YWl0IHRoaXMuY3JlZGVudGlhbFByb3ZpZGVyKCk7XG4gICAgICAgIHRoaXMudmFsaWRhdGVSZXNvbHZlZENyZWRlbnRpYWxzKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgY29uc3QgcmVnaW9uID0gc2lnbmluZ1JlZ2lvbiA/PyAoYXdhaXQgdGhpcy5yZWdpb25Qcm92aWRlcigpKTtcbiAgICAgICAgY29uc3QgeyBzaG9ydERhdGUgfSA9IHRoaXMuZm9ybWF0RGF0ZShzaWduaW5nRGF0ZSk7XG4gICAgICAgIGNvbnN0IGhhc2ggPSBuZXcgdGhpcy5zaGEyNTYoYXdhaXQgdGhpcy5nZXRTaWduaW5nS2V5KGNyZWRlbnRpYWxzLCByZWdpb24sIHNob3J0RGF0ZSwgc2lnbmluZ1NlcnZpY2UpKTtcbiAgICAgICAgaGFzaC51cGRhdGUodG9VaW50OEFycmF5KHN0cmluZ1RvU2lnbikpO1xuICAgICAgICByZXR1cm4gdG9IZXgoYXdhaXQgaGFzaC5kaWdlc3QoKSk7XG4gICAgfVxuICAgIGFzeW5jIHNpZ25SZXF1ZXN0KHJlcXVlc3RUb1NpZ24sIHsgc2lnbmluZ0RhdGUgPSBuZXcgRGF0ZSgpLCBzaWduYWJsZUhlYWRlcnMsIHVuc2lnbmFibGVIZWFkZXJzLCBzaWduaW5nUmVnaW9uLCBzaWduaW5nU2VydmljZSwgfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gYXdhaXQgdGhpcy5jcmVkZW50aWFsUHJvdmlkZXIoKTtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVJlc29sdmVkQ3JlZGVudGlhbHMoY3JlZGVudGlhbHMpO1xuICAgICAgICBjb25zdCByZWdpb24gPSBzaWduaW5nUmVnaW9uID8/IChhd2FpdCB0aGlzLnJlZ2lvblByb3ZpZGVyKCkpO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gcHJlcGFyZVJlcXVlc3QocmVxdWVzdFRvU2lnbik7XG4gICAgICAgIGNvbnN0IHsgbG9uZ0RhdGUsIHNob3J0RGF0ZSB9ID0gdGhpcy5mb3JtYXREYXRlKHNpZ25pbmdEYXRlKTtcbiAgICAgICAgY29uc3Qgc2NvcGUgPSBjcmVhdGVTY29wZShzaG9ydERhdGUsIHJlZ2lvbiwgc2lnbmluZ1NlcnZpY2UgPz8gdGhpcy5zZXJ2aWNlKTtcbiAgICAgICAgcmVxdWVzdC5oZWFkZXJzW0FNWl9EQVRFX0hFQURFUl0gPSBsb25nRGF0ZTtcbiAgICAgICAgaWYgKGNyZWRlbnRpYWxzLnNlc3Npb25Ub2tlbikge1xuICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzW1RPS0VOX0hFQURFUl0gPSBjcmVkZW50aWFscy5zZXNzaW9uVG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF5bG9hZEhhc2ggPSBhd2FpdCBnZXRQYXlsb2FkSGFzaChyZXF1ZXN0LCB0aGlzLnNoYTI1Nik7XG4gICAgICAgIGlmICghaGFzSGVhZGVyKFNIQTI1Nl9IRUFERVIsIHJlcXVlc3QuaGVhZGVycykgJiYgdGhpcy5hcHBseUNoZWNrc3VtKSB7XG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnNbU0hBMjU2X0hFQURFUl0gPSBwYXlsb2FkSGFzaDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYW5vbmljYWxIZWFkZXJzID0gZ2V0Q2Fub25pY2FsSGVhZGVycyhyZXF1ZXN0LCB1bnNpZ25hYmxlSGVhZGVycywgc2lnbmFibGVIZWFkZXJzKTtcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgdGhpcy5nZXRTaWduYXR1cmUobG9uZ0RhdGUsIHNjb3BlLCB0aGlzLmdldFNpZ25pbmdLZXkoY3JlZGVudGlhbHMsIHJlZ2lvbiwgc2hvcnREYXRlLCBzaWduaW5nU2VydmljZSksIHRoaXMuY3JlYXRlQ2Fub25pY2FsUmVxdWVzdChyZXF1ZXN0LCBjYW5vbmljYWxIZWFkZXJzLCBwYXlsb2FkSGFzaCkpO1xuICAgICAgICByZXF1ZXN0LmhlYWRlcnNbQVVUSF9IRUFERVJdID1cbiAgICAgICAgICAgIGAke0FMR09SSVRITV9JREVOVElGSUVSfSBgICtcbiAgICAgICAgICAgICAgICBgQ3JlZGVudGlhbD0ke2NyZWRlbnRpYWxzLmFjY2Vzc0tleUlkfS8ke3Njb3BlfSwgYCArXG4gICAgICAgICAgICAgICAgYFNpZ25lZEhlYWRlcnM9JHt0aGlzLmdldENhbm9uaWNhbEhlYWRlckxpc3QoY2Fub25pY2FsSGVhZGVycyl9LCBgICtcbiAgICAgICAgICAgICAgICBgU2lnbmF0dXJlPSR7c2lnbmF0dXJlfWA7XG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH1cbiAgICBhc3luYyBnZXRTaWduYXR1cmUobG9uZ0RhdGUsIGNyZWRlbnRpYWxTY29wZSwga2V5UHJvbWlzZSwgY2Fub25pY2FsUmVxdWVzdCkge1xuICAgICAgICBjb25zdCBzdHJpbmdUb1NpZ24gPSBhd2FpdCB0aGlzLmNyZWF0ZVN0cmluZ1RvU2lnbihsb25nRGF0ZSwgY3JlZGVudGlhbFNjb3BlLCBjYW5vbmljYWxSZXF1ZXN0LCBBTEdPUklUSE1fSURFTlRJRklFUik7XG4gICAgICAgIGNvbnN0IGhhc2ggPSBuZXcgdGhpcy5zaGEyNTYoYXdhaXQga2V5UHJvbWlzZSk7XG4gICAgICAgIGhhc2gudXBkYXRlKHRvVWludDhBcnJheShzdHJpbmdUb1NpZ24pKTtcbiAgICAgICAgcmV0dXJuIHRvSGV4KGF3YWl0IGhhc2guZGlnZXN0KCkpO1xuICAgIH1cbiAgICBnZXRTaWduaW5nS2V5KGNyZWRlbnRpYWxzLCByZWdpb24sIHNob3J0RGF0ZSwgc2VydmljZSkge1xuICAgICAgICByZXR1cm4gZ2V0U2lnbmluZ0tleSh0aGlzLnNoYTI1NiwgY3JlZGVudGlhbHMsIHNob3J0RGF0ZSwgcmVnaW9uLCBzZXJ2aWNlIHx8IHRoaXMuc2VydmljZSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IGhhc0hlYWRlciA9IChzb3VnaHRIZWFkZXIsIGhlYWRlcnMpID0+IHtcbiAgICBzb3VnaHRIZWFkZXIgPSBzb3VnaHRIZWFkZXIudG9Mb3dlckNhc2UoKTtcbiAgICBmb3IgKGNvbnN0IGhlYWRlck5hbWUgb2YgT2JqZWN0LmtleXMoaGVhZGVycykpIHtcbiAgICAgICAgaWYgKHNvdWdodEhlYWRlciA9PT0gaGVhZGVyTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuZXhwb3J0IGNvbnN0IGdldEhlYWRlclZhbHVlID0gKHNvdWdodEhlYWRlciwgaGVhZGVycykgPT4ge1xuICAgIHNvdWdodEhlYWRlciA9IHNvdWdodEhlYWRlci50b0xvd2VyQ2FzZSgpO1xuICAgIGZvciAoY29uc3QgaGVhZGVyTmFtZSBvZiBPYmplY3Qua2V5cyhoZWFkZXJzKSkge1xuICAgICAgICBpZiAoc291Z2h0SGVhZGVyID09PSBoZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBoZWFkZXJzW2hlYWRlck5hbWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuZXhwb3J0IGNvbnN0IGRlbGV0ZUhlYWRlciA9IChzb3VnaHRIZWFkZXIsIGhlYWRlcnMpID0+IHtcbiAgICBzb3VnaHRIZWFkZXIgPSBzb3VnaHRIZWFkZXIudG9Mb3dlckNhc2UoKTtcbiAgICBmb3IgKGNvbnN0IGhlYWRlck5hbWUgb2YgT2JqZWN0LmtleXMoaGVhZGVycykpIHtcbiAgICAgICAgaWYgKHNvdWdodEhlYWRlciA9PT0gaGVhZGVyTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICBkZWxldGUgaGVhZGVyc1toZWFkZXJOYW1lXTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4iLCJpbXBvcnQgeyBzZXRDcmVkZW50aWFsRmVhdHVyZSB9IGZyb20gXCJAYXdzLXNkay9jb3JlL2NsaWVudFwiO1xuaW1wb3J0IHsgZG9lc0lkZW50aXR5UmVxdWlyZVJlZnJlc2gsIGlzSWRlbnRpdHlFeHBpcmVkLCBtZW1vaXplSWRlbnRpdHlQcm92aWRlciwgbm9ybWFsaXplUHJvdmlkZXIsIH0gZnJvbSBcIkBzbWl0aHkvY29yZVwiO1xuaW1wb3J0IHsgU2lnbmF0dXJlVjQgfSBmcm9tIFwiQHNtaXRoeS9zaWduYXR1cmUtdjRcIjtcbmV4cG9ydCBjb25zdCByZXNvbHZlQXdzU2RrU2lnVjRDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgbGV0IGlucHV0Q3JlZGVudGlhbHMgPSBjb25maWcuY3JlZGVudGlhbHM7XG4gICAgbGV0IGlzVXNlclN1cHBsaWVkID0gISFjb25maWcuY3JlZGVudGlhbHM7XG4gICAgbGV0IHJlc29sdmVkQ3JlZGVudGlhbHMgPSB1bmRlZmluZWQ7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbmZpZywgXCJjcmVkZW50aWFsc1wiLCB7XG4gICAgICAgIHNldChjcmVkZW50aWFscykge1xuICAgICAgICAgICAgaWYgKGNyZWRlbnRpYWxzICYmIGNyZWRlbnRpYWxzICE9PSBpbnB1dENyZWRlbnRpYWxzICYmIGNyZWRlbnRpYWxzICE9PSByZXNvbHZlZENyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICAgICAgaXNVc2VyU3VwcGxpZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5wdXRDcmVkZW50aWFscyA9IGNyZWRlbnRpYWxzO1xuICAgICAgICAgICAgY29uc3QgbWVtb2l6ZWRQcm92aWRlciA9IG5vcm1hbGl6ZUNyZWRlbnRpYWxQcm92aWRlcihjb25maWcsIHtcbiAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogaW5wdXRDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBjcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyOiBjb25maWcuY3JlZGVudGlhbERlZmF1bHRQcm92aWRlcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgYm91bmRQcm92aWRlciA9IGJpbmRDYWxsZXJDb25maWcoY29uZmlnLCBtZW1vaXplZFByb3ZpZGVyKTtcbiAgICAgICAgICAgIGlmIChpc1VzZXJTdXBwbGllZCAmJiAhYm91bmRQcm92aWRlci5hdHRyaWJ1dGVkKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDcmVkZW50aWFscyA9IGFzeW5jIChvcHRpb25zKSA9PiBib3VuZFByb3ZpZGVyKG9wdGlvbnMpLnRoZW4oKGNyZWRzKSA9PiBzZXRDcmVkZW50aWFsRmVhdHVyZShjcmVkcywgXCJDUkVERU5USUFMU19DT0RFXCIsIFwiZVwiKSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDcmVkZW50aWFscy5tZW1vaXplZCA9IGJvdW5kUHJvdmlkZXIubWVtb2l6ZWQ7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDcmVkZW50aWFscy5jb25maWdCb3VuZCA9IGJvdW5kUHJvdmlkZXIuY29uZmlnQm91bmQ7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDcmVkZW50aWFscy5hdHRyaWJ1dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmVkQ3JlZGVudGlhbHMgPSBib3VuZFByb3ZpZGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWRDcmVkZW50aWFscztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIH0pO1xuICAgIGNvbmZpZy5jcmVkZW50aWFscyA9IGlucHV0Q3JlZGVudGlhbHM7XG4gICAgY29uc3QgeyBzaWduaW5nRXNjYXBlUGF0aCA9IHRydWUsIHN5c3RlbUNsb2NrT2Zmc2V0ID0gY29uZmlnLnN5c3RlbUNsb2NrT2Zmc2V0IHx8IDAsIHNoYTI1NiwgfSA9IGNvbmZpZztcbiAgICBsZXQgc2lnbmVyO1xuICAgIGlmIChjb25maWcuc2lnbmVyKSB7XG4gICAgICAgIHNpZ25lciA9IG5vcm1hbGl6ZVByb3ZpZGVyKGNvbmZpZy5zaWduZXIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb25maWcucmVnaW9uSW5mb1Byb3ZpZGVyKSB7XG4gICAgICAgIHNpZ25lciA9ICgpID0+IG5vcm1hbGl6ZVByb3ZpZGVyKGNvbmZpZy5yZWdpb24pKClcbiAgICAgICAgICAgIC50aGVuKGFzeW5jIChyZWdpb24pID0+IFtcbiAgICAgICAgICAgIChhd2FpdCBjb25maWcucmVnaW9uSW5mb1Byb3ZpZGVyKHJlZ2lvbiwge1xuICAgICAgICAgICAgICAgIHVzZUZpcHNFbmRwb2ludDogYXdhaXQgY29uZmlnLnVzZUZpcHNFbmRwb2ludCgpLFxuICAgICAgICAgICAgICAgIHVzZUR1YWxzdGFja0VuZHBvaW50OiBhd2FpdCBjb25maWcudXNlRHVhbHN0YWNrRW5kcG9pbnQoKSxcbiAgICAgICAgICAgIH0pKSB8fCB7fSxcbiAgICAgICAgICAgIHJlZ2lvbixcbiAgICAgICAgXSlcbiAgICAgICAgICAgIC50aGVuKChbcmVnaW9uSW5mbywgcmVnaW9uXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBzaWduaW5nUmVnaW9uLCBzaWduaW5nU2VydmljZSB9ID0gcmVnaW9uSW5mbztcbiAgICAgICAgICAgIGNvbmZpZy5zaWduaW5nUmVnaW9uID0gY29uZmlnLnNpZ25pbmdSZWdpb24gfHwgc2lnbmluZ1JlZ2lvbiB8fCByZWdpb247XG4gICAgICAgICAgICBjb25maWcuc2lnbmluZ05hbWUgPSBjb25maWcuc2lnbmluZ05hbWUgfHwgc2lnbmluZ1NlcnZpY2UgfHwgY29uZmlnLnNlcnZpY2VJZDtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6IGNvbmZpZy5jcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICByZWdpb246IGNvbmZpZy5zaWduaW5nUmVnaW9uLFxuICAgICAgICAgICAgICAgIHNlcnZpY2U6IGNvbmZpZy5zaWduaW5nTmFtZSxcbiAgICAgICAgICAgICAgICBzaGEyNTYsXG4gICAgICAgICAgICAgICAgdXJpRXNjYXBlUGF0aDogc2lnbmluZ0VzY2FwZVBhdGgsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgU2lnbmVyQ3RvciA9IGNvbmZpZy5zaWduZXJDb25zdHJ1Y3RvciB8fCBTaWduYXR1cmVWNDtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2lnbmVyQ3RvcihwYXJhbXMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNpZ25lciA9IGFzeW5jIChhdXRoU2NoZW1lKSA9PiB7XG4gICAgICAgICAgICBhdXRoU2NoZW1lID0gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwic2lndjRcIixcbiAgICAgICAgICAgICAgICBzaWduaW5nTmFtZTogY29uZmlnLnNpZ25pbmdOYW1lIHx8IGNvbmZpZy5kZWZhdWx0U2lnbmluZ05hbWUsXG4gICAgICAgICAgICAgICAgc2lnbmluZ1JlZ2lvbjogYXdhaXQgbm9ybWFsaXplUHJvdmlkZXIoY29uZmlnLnJlZ2lvbikoKSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgICAgIH0sIGF1dGhTY2hlbWUpO1xuICAgICAgICAgICAgY29uc3Qgc2lnbmluZ1JlZ2lvbiA9IGF1dGhTY2hlbWUuc2lnbmluZ1JlZ2lvbjtcbiAgICAgICAgICAgIGNvbnN0IHNpZ25pbmdTZXJ2aWNlID0gYXV0aFNjaGVtZS5zaWduaW5nTmFtZTtcbiAgICAgICAgICAgIGNvbmZpZy5zaWduaW5nUmVnaW9uID0gY29uZmlnLnNpZ25pbmdSZWdpb24gfHwgc2lnbmluZ1JlZ2lvbjtcbiAgICAgICAgICAgIGNvbmZpZy5zaWduaW5nTmFtZSA9IGNvbmZpZy5zaWduaW5nTmFtZSB8fCBzaWduaW5nU2VydmljZSB8fCBjb25maWcuc2VydmljZUlkO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogY29uZmlnLmNyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIHJlZ2lvbjogY29uZmlnLnNpZ25pbmdSZWdpb24sXG4gICAgICAgICAgICAgICAgc2VydmljZTogY29uZmlnLnNpZ25pbmdOYW1lLFxuICAgICAgICAgICAgICAgIHNoYTI1NixcbiAgICAgICAgICAgICAgICB1cmlFc2NhcGVQYXRoOiBzaWduaW5nRXNjYXBlUGF0aCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBTaWduZXJDdG9yID0gY29uZmlnLnNpZ25lckNvbnN0cnVjdG9yIHx8IFNpZ25hdHVyZVY0O1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTaWduZXJDdG9yKHBhcmFtcyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHJlc29sdmVkQ29uZmlnID0gT2JqZWN0LmFzc2lnbihjb25maWcsIHtcbiAgICAgICAgc3lzdGVtQ2xvY2tPZmZzZXQsXG4gICAgICAgIHNpZ25pbmdFc2NhcGVQYXRoLFxuICAgICAgICBzaWduZXIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc29sdmVkQ29uZmlnO1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlQVdTU0RLU2lnVjRDb25maWcgPSByZXNvbHZlQXdzU2RrU2lnVjRDb25maWc7XG5mdW5jdGlvbiBub3JtYWxpemVDcmVkZW50aWFsUHJvdmlkZXIoY29uZmlnLCB7IGNyZWRlbnRpYWxzLCBjcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyLCB9KSB7XG4gICAgbGV0IGNyZWRlbnRpYWxzUHJvdmlkZXI7XG4gICAgaWYgKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIGlmICghY3JlZGVudGlhbHM/Lm1lbW9pemVkKSB7XG4gICAgICAgICAgICBjcmVkZW50aWFsc1Byb3ZpZGVyID0gbWVtb2l6ZUlkZW50aXR5UHJvdmlkZXIoY3JlZGVudGlhbHMsIGlzSWRlbnRpdHlFeHBpcmVkLCBkb2VzSWRlbnRpdHlSZXF1aXJlUmVmcmVzaCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjcmVkZW50aWFsc1Byb3ZpZGVyID0gY3JlZGVudGlhbHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChjcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyKSB7XG4gICAgICAgICAgICBjcmVkZW50aWFsc1Byb3ZpZGVyID0gbm9ybWFsaXplUHJvdmlkZXIoY3JlZGVudGlhbERlZmF1bHRQcm92aWRlcihPYmplY3QuYXNzaWduKHt9LCBjb25maWcsIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRDbGllbnRDb25maWc6IGNvbmZpZyxcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjcmVkZW50aWFsc1Byb3ZpZGVyID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkBhd3Mtc2RrL2NvcmU6OnJlc29sdmVBd3NTZGtTaWdWNENvbmZpZyAtIGBjcmVkZW50aWFsc2Agbm90IHByb3ZpZGVkIGFuZCBubyBjcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyIHdhcyBjb25maWd1cmVkLlwiKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlZGVudGlhbHNQcm92aWRlci5tZW1vaXplZCA9IHRydWU7XG4gICAgcmV0dXJuIGNyZWRlbnRpYWxzUHJvdmlkZXI7XG59XG5mdW5jdGlvbiBiaW5kQ2FsbGVyQ29uZmlnKGNvbmZpZywgY3JlZGVudGlhbHNQcm92aWRlcikge1xuICAgIGlmIChjcmVkZW50aWFsc1Byb3ZpZGVyLmNvbmZpZ0JvdW5kKSB7XG4gICAgICAgIHJldHVybiBjcmVkZW50aWFsc1Byb3ZpZGVyO1xuICAgIH1cbiAgICBjb25zdCBmbiA9IGFzeW5jIChvcHRpb25zKSA9PiBjcmVkZW50aWFsc1Byb3ZpZGVyKHsgLi4ub3B0aW9ucywgY2FsbGVyQ2xpZW50Q29uZmlnOiBjb25maWcgfSk7XG4gICAgZm4ubWVtb2l6ZWQgPSBjcmVkZW50aWFsc1Byb3ZpZGVyLm1lbW9pemVkO1xuICAgIGZuLmNvbmZpZ0JvdW5kID0gdHJ1ZTtcbiAgICByZXR1cm4gZm47XG59XG4iLCJjb25zdCBTSE9SVF9UT19IRVggPSB7fTtcbmNvbnN0IEhFWF9UT19TSE9SVCA9IHt9O1xuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgIGxldCBlbmNvZGVkQnl0ZSA9IGkudG9TdHJpbmcoMTYpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGVuY29kZWRCeXRlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbmNvZGVkQnl0ZSA9IGAwJHtlbmNvZGVkQnl0ZX1gO1xuICAgIH1cbiAgICBTSE9SVF9UT19IRVhbaV0gPSBlbmNvZGVkQnl0ZTtcbiAgICBIRVhfVE9fU0hPUlRbZW5jb2RlZEJ5dGVdID0gaTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tSGV4KGVuY29kZWQpIHtcbiAgICBpZiAoZW5jb2RlZC5sZW5ndGggJSAyICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkhleCBlbmNvZGVkIHN0cmluZ3MgbXVzdCBoYXZlIGFuIGV2ZW4gbnVtYmVyIGxlbmd0aFwiKTtcbiAgICB9XG4gICAgY29uc3Qgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoZW5jb2RlZC5sZW5ndGggLyAyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVuY29kZWQubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgY29uc3QgZW5jb2RlZEJ5dGUgPSBlbmNvZGVkLnNsaWNlKGksIGkgKyAyKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoZW5jb2RlZEJ5dGUgaW4gSEVYX1RPX1NIT1JUKSB7XG4gICAgICAgICAgICBvdXRbaSAvIDJdID0gSEVYX1RPX1NIT1JUW2VuY29kZWRCeXRlXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGRlY29kZSB1bnJlY29nbml6ZWQgc2VxdWVuY2UgJHtlbmNvZGVkQnl0ZX0gYXMgaGV4YWRlY2ltYWxgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRvSGV4KGJ5dGVzKSB7XG4gICAgbGV0IG91dCA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5ieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgb3V0ICs9IFNIT1JUX1RPX0hFWFtieXRlc1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gc2V0RmVhdHVyZShjb250ZXh0LCBmZWF0dXJlLCB2YWx1ZSkge1xuICAgIGlmICghY29udGV4dC5fX2F3c19zZGtfY29udGV4dCkge1xuICAgICAgICBjb250ZXh0Ll9fYXdzX3Nka19jb250ZXh0ID0ge1xuICAgICAgICAgICAgZmVhdHVyZXM6IHt9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmICghY29udGV4dC5fX2F3c19zZGtfY29udGV4dC5mZWF0dXJlcykge1xuICAgICAgICBjb250ZXh0Ll9fYXdzX3Nka19jb250ZXh0LmZlYXR1cmVzID0ge307XG4gICAgfVxuICAgIGNvbnRleHQuX19hd3Nfc2RrX2NvbnRleHQuZmVhdHVyZXNbZmVhdHVyZV0gPSB2YWx1ZTtcbn1cbiIsImltcG9ydCB7IHNldEZlYXR1cmUgfSBmcm9tIFwiQGF3cy1zZGsvY29yZVwiO1xuY29uc3QgQUNDT1VOVF9JRF9FTkRQT0lOVF9SRUdFWCA9IC9cXGR7MTJ9XFwuZGRiLztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja0ZlYXR1cmVzKGNvbnRleHQsIGNvbmZpZywgYXJncykge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBhcmdzLnJlcXVlc3Q7XG4gICAgaWYgKHJlcXVlc3Q/LmhlYWRlcnM/LltcInNtaXRoeS1wcm90b2NvbFwiXSA9PT0gXCJycGMtdjItY2JvclwiKSB7XG4gICAgICAgIHNldEZlYXR1cmUoY29udGV4dCwgXCJQUk9UT0NPTF9SUENfVjJfQ0JPUlwiLCBcIk1cIik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29uZmlnLnJldHJ5U3RyYXRlZ3kgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjb25zdCByZXRyeVN0cmF0ZWd5ID0gYXdhaXQgY29uZmlnLnJldHJ5U3RyYXRlZ3koKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXRyeVN0cmF0ZWd5LmFjcXVpcmVJbml0aWFsUmV0cnlUb2tlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBpZiAocmV0cnlTdHJhdGVneS5jb25zdHJ1Y3Rvcj8ubmFtZT8uaW5jbHVkZXMoXCJBZGFwdGl2ZVwiKSkge1xuICAgICAgICAgICAgICAgIHNldEZlYXR1cmUoY29udGV4dCwgXCJSRVRSWV9NT0RFX0FEQVBUSVZFXCIsIFwiRlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldEZlYXR1cmUoY29udGV4dCwgXCJSRVRSWV9NT0RFX1NUQU5EQVJEXCIsIFwiRVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNldEZlYXR1cmUoY29udGV4dCwgXCJSRVRSWV9NT0RFX0xFR0FDWVwiLCBcIkRcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb25maWcuYWNjb3VudElkRW5kcG9pbnRNb2RlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY29uc3QgZW5kcG9pbnRWMiA9IGNvbnRleHQuZW5kcG9pbnRWMjtcbiAgICAgICAgaWYgKFN0cmluZyhlbmRwb2ludFYyPy51cmw/Lmhvc3RuYW1lKS5tYXRjaChBQ0NPVU5UX0lEX0VORFBPSU5UX1JFR0VYKSkge1xuICAgICAgICAgICAgc2V0RmVhdHVyZShjb250ZXh0LCBcIkFDQ09VTlRfSURfRU5EUE9JTlRcIiwgXCJPXCIpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoYXdhaXQgY29uZmlnLmFjY291bnRJZEVuZHBvaW50TW9kZT8uKCkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJkaXNhYmxlZFwiOlxuICAgICAgICAgICAgICAgIHNldEZlYXR1cmUoY29udGV4dCwgXCJBQ0NPVU5UX0lEX01PREVfRElTQUJMRURcIiwgXCJRXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInByZWZlcnJlZFwiOlxuICAgICAgICAgICAgICAgIHNldEZlYXR1cmUoY29udGV4dCwgXCJBQ0NPVU5UX0lEX01PREVfUFJFRkVSUkVEXCIsIFwiUFwiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJyZXF1aXJlZFwiOlxuICAgICAgICAgICAgICAgIHNldEZlYXR1cmUoY29udGV4dCwgXCJBQ0NPVU5UX0lEX01PREVfUkVRVUlSRURcIiwgXCJSXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGlkZW50aXR5ID0gY29udGV4dC5fX3NtaXRoeV9jb250ZXh0Py5zZWxlY3RlZEh0dHBBdXRoU2NoZW1lPy5pZGVudGl0eTtcbiAgICBpZiAoaWRlbnRpdHk/LiRzb3VyY2UpIHtcbiAgICAgICAgY29uc3QgY3JlZGVudGlhbHMgPSBpZGVudGl0eTtcbiAgICAgICAgaWYgKGNyZWRlbnRpYWxzLmFjY291bnRJZCkge1xuICAgICAgICAgICAgc2V0RmVhdHVyZShjb250ZXh0LCBcIlJFU09MVkVEX0FDQ09VTlRfSURcIiwgXCJUXCIpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGNyZWRlbnRpYWxzLiRzb3VyY2UgPz8ge30pKSB7XG4gICAgICAgICAgICBzZXRGZWF0dXJlKGNvbnRleHQsIGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IFVTRVJfQUdFTlQgPSBcInVzZXItYWdlbnRcIjtcbmV4cG9ydCBjb25zdCBYX0FNWl9VU0VSX0FHRU5UID0gXCJ4LWFtei11c2VyLWFnZW50XCI7XG5leHBvcnQgY29uc3QgU1BBQ0UgPSBcIiBcIjtcbmV4cG9ydCBjb25zdCBVQV9OQU1FX1NFUEFSQVRPUiA9IFwiL1wiO1xuZXhwb3J0IGNvbnN0IFVBX05BTUVfRVNDQVBFX1JFR0VYID0gL1teXFwhXFwkXFwlXFwmXFwnXFwqXFwrXFwtXFwuXFxeXFxfXFxgXFx8XFx+XFxkXFx3XS9nO1xuZXhwb3J0IGNvbnN0IFVBX1ZBTFVFX0VTQ0FQRV9SRUdFWCA9IC9bXlxcIVxcJFxcJVxcJlxcJ1xcKlxcK1xcLVxcLlxcXlxcX1xcYFxcfFxcflxcZFxcd1xcI10vZztcbmV4cG9ydCBjb25zdCBVQV9FU0NBUEVfQ0hBUiA9IFwiLVwiO1xuIiwiaW1wb3J0IHsgZ2V0VXNlckFnZW50UHJlZml4IH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtZW5kcG9pbnRzXCI7XG5pbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IGNoZWNrRmVhdHVyZXMgfSBmcm9tIFwiLi9jaGVjay1mZWF0dXJlc1wiO1xuaW1wb3J0IHsgU1BBQ0UsIFVBX0VTQ0FQRV9DSEFSLCBVQV9OQU1FX0VTQ0FQRV9SRUdFWCwgVUFfTkFNRV9TRVBBUkFUT1IsIFVBX1ZBTFVFX0VTQ0FQRV9SRUdFWCwgVVNFUl9BR0VOVCwgWF9BTVpfVVNFUl9BR0VOVCwgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGVuY29kZUZlYXR1cmVzIH0gZnJvbSBcIi4vZW5jb2RlLWZlYXR1cmVzXCI7XG5leHBvcnQgY29uc3QgdXNlckFnZW50TWlkZGxld2FyZSA9IChvcHRpb25zKSA9PiAobmV4dCwgY29udGV4dCkgPT4gYXN5bmMgKGFyZ3MpID0+IHtcbiAgICBjb25zdCB7IHJlcXVlc3QgfSA9IGFyZ3M7XG4gICAgaWYgKCFIdHRwUmVxdWVzdC5pc0luc3RhbmNlKHJlcXVlc3QpKSB7XG4gICAgICAgIHJldHVybiBuZXh0KGFyZ3MpO1xuICAgIH1cbiAgICBjb25zdCB7IGhlYWRlcnMgfSA9IHJlcXVlc3Q7XG4gICAgY29uc3QgdXNlckFnZW50ID0gY29udGV4dD8udXNlckFnZW50Py5tYXAoZXNjYXBlVXNlckFnZW50KSB8fCBbXTtcbiAgICBjb25zdCBkZWZhdWx0VXNlckFnZW50ID0gKGF3YWl0IG9wdGlvbnMuZGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyKCkpLm1hcChlc2NhcGVVc2VyQWdlbnQpO1xuICAgIGF3YWl0IGNoZWNrRmVhdHVyZXMoY29udGV4dCwgb3B0aW9ucywgYXJncyk7XG4gICAgY29uc3QgYXdzQ29udGV4dCA9IGNvbnRleHQ7XG4gICAgZGVmYXVsdFVzZXJBZ2VudC5wdXNoKGBtLyR7ZW5jb2RlRmVhdHVyZXMoT2JqZWN0LmFzc2lnbih7fSwgY29udGV4dC5fX3NtaXRoeV9jb250ZXh0Py5mZWF0dXJlcywgYXdzQ29udGV4dC5fX2F3c19zZGtfY29udGV4dD8uZmVhdHVyZXMpKX1gKTtcbiAgICBjb25zdCBjdXN0b21Vc2VyQWdlbnQgPSBvcHRpb25zPy5jdXN0b21Vc2VyQWdlbnQ/Lm1hcChlc2NhcGVVc2VyQWdlbnQpIHx8IFtdO1xuICAgIGNvbnN0IGFwcElkID0gYXdhaXQgb3B0aW9ucy51c2VyQWdlbnRBcHBJZCgpO1xuICAgIGlmIChhcHBJZCkge1xuICAgICAgICBkZWZhdWx0VXNlckFnZW50LnB1c2goZXNjYXBlVXNlckFnZW50KFtgYXBwLyR7YXBwSWR9YF0pKTtcbiAgICB9XG4gICAgY29uc3QgcHJlZml4ID0gZ2V0VXNlckFnZW50UHJlZml4KCk7XG4gICAgY29uc3Qgc2RrVXNlckFnZW50VmFsdWUgPSAocHJlZml4ID8gW3ByZWZpeF0gOiBbXSlcbiAgICAgICAgLmNvbmNhdChbLi4uZGVmYXVsdFVzZXJBZ2VudCwgLi4udXNlckFnZW50LCAuLi5jdXN0b21Vc2VyQWdlbnRdKVxuICAgICAgICAuam9pbihTUEFDRSk7XG4gICAgY29uc3Qgbm9ybWFsVUFWYWx1ZSA9IFtcbiAgICAgICAgLi4uZGVmYXVsdFVzZXJBZ2VudC5maWx0ZXIoKHNlY3Rpb24pID0+IHNlY3Rpb24uc3RhcnRzV2l0aChcImF3cy1zZGstXCIpKSxcbiAgICAgICAgLi4uY3VzdG9tVXNlckFnZW50LFxuICAgIF0uam9pbihTUEFDRSk7XG4gICAgaWYgKG9wdGlvbnMucnVudGltZSAhPT0gXCJicm93c2VyXCIpIHtcbiAgICAgICAgaWYgKG5vcm1hbFVBVmFsdWUpIHtcbiAgICAgICAgICAgIGhlYWRlcnNbWF9BTVpfVVNFUl9BR0VOVF0gPSBoZWFkZXJzW1hfQU1aX1VTRVJfQUdFTlRdXG4gICAgICAgICAgICAgICAgPyBgJHtoZWFkZXJzW1VTRVJfQUdFTlRdfSAke25vcm1hbFVBVmFsdWV9YFxuICAgICAgICAgICAgICAgIDogbm9ybWFsVUFWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXJzW1VTRVJfQUdFTlRdID0gc2RrVXNlckFnZW50VmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBoZWFkZXJzW1hfQU1aX1VTRVJfQUdFTlRdID0gc2RrVXNlckFnZW50VmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBuZXh0KHtcbiAgICAgICAgLi4uYXJncyxcbiAgICAgICAgcmVxdWVzdCxcbiAgICB9KTtcbn07XG5jb25zdCBlc2NhcGVVc2VyQWdlbnQgPSAodXNlckFnZW50UGFpcikgPT4ge1xuICAgIGNvbnN0IG5hbWUgPSB1c2VyQWdlbnRQYWlyWzBdXG4gICAgICAgIC5zcGxpdChVQV9OQU1FX1NFUEFSQVRPUilcbiAgICAgICAgLm1hcCgocGFydCkgPT4gcGFydC5yZXBsYWNlKFVBX05BTUVfRVNDQVBFX1JFR0VYLCBVQV9FU0NBUEVfQ0hBUikpXG4gICAgICAgIC5qb2luKFVBX05BTUVfU0VQQVJBVE9SKTtcbiAgICBjb25zdCB2ZXJzaW9uID0gdXNlckFnZW50UGFpclsxXT8ucmVwbGFjZShVQV9WQUxVRV9FU0NBUEVfUkVHRVgsIFVBX0VTQ0FQRV9DSEFSKTtcbiAgICBjb25zdCBwcmVmaXhTZXBhcmF0b3JJbmRleCA9IG5hbWUuaW5kZXhPZihVQV9OQU1FX1NFUEFSQVRPUik7XG4gICAgY29uc3QgcHJlZml4ID0gbmFtZS5zdWJzdHJpbmcoMCwgcHJlZml4U2VwYXJhdG9ySW5kZXgpO1xuICAgIGxldCB1YU5hbWUgPSBuYW1lLnN1YnN0cmluZyhwcmVmaXhTZXBhcmF0b3JJbmRleCArIDEpO1xuICAgIGlmIChwcmVmaXggPT09IFwiYXBpXCIpIHtcbiAgICAgICAgdWFOYW1lID0gdWFOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIHJldHVybiBbcHJlZml4LCB1YU5hbWUsIHZlcnNpb25dXG4gICAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0gJiYgaXRlbS5sZW5ndGggPiAwKVxuICAgICAgICAucmVkdWNlKChhY2MsIGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgIHN3aXRjaCAoaW5kZXgpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7YWNjfS8ke2l0ZW19YDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2FjY30jJHtpdGVtfWA7XG4gICAgICAgIH1cbiAgICB9LCBcIlwiKTtcbn07XG5leHBvcnQgY29uc3QgZ2V0VXNlckFnZW50TWlkZGxld2FyZU9wdGlvbnMgPSB7XG4gICAgbmFtZTogXCJnZXRVc2VyQWdlbnRNaWRkbGV3YXJlXCIsXG4gICAgc3RlcDogXCJidWlsZFwiLFxuICAgIHByaW9yaXR5OiBcImxvd1wiLFxuICAgIHRhZ3M6IFtcIlNFVF9VU0VSX0FHRU5UXCIsIFwiVVNFUl9BR0VOVFwiXSxcbiAgICBvdmVycmlkZTogdHJ1ZSxcbn07XG5leHBvcnQgY29uc3QgZ2V0VXNlckFnZW50UGx1Z2luID0gKGNvbmZpZykgPT4gKHtcbiAgICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgICAgICBjbGllbnRTdGFjay5hZGQodXNlckFnZW50TWlkZGxld2FyZShjb25maWcpLCBnZXRVc2VyQWdlbnRNaWRkbGV3YXJlT3B0aW9ucyk7XG4gICAgfSxcbn0pO1xuIiwiY29uc3QgQllURV9MSU1JVCA9IDEwMjQ7XG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlRmVhdHVyZXMoZmVhdHVyZXMpIHtcbiAgICBsZXQgYnVmZmVyID0gXCJcIjtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmZWF0dXJlcykge1xuICAgICAgICBjb25zdCB2YWwgPSBmZWF0dXJlc1trZXldO1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCArIHZhbC5sZW5ndGggKyAxIDw9IEJZVEVfTElNSVQpIHtcbiAgICAgICAgICAgIGlmIChidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyICs9IFwiLFwiICsgdmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyICs9IHZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gYnVmZmVyO1xufVxuIiwiaW1wb3J0IHsgUHJvdmlkZXJFcnJvciB9IGZyb20gXCIuL1Byb3ZpZGVyRXJyb3JcIjtcbmV4cG9ydCBjb25zdCBjaGFpbiA9ICguLi5wcm92aWRlcnMpID0+IGFzeW5jICgpID0+IHtcbiAgICBpZiAocHJvdmlkZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgUHJvdmlkZXJFcnJvcihcIk5vIHByb3ZpZGVycyBpbiBjaGFpblwiKTtcbiAgICB9XG4gICAgbGV0IGxhc3RQcm92aWRlckVycm9yO1xuICAgIGZvciAoY29uc3QgcHJvdmlkZXIgb2YgcHJvdmlkZXJzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IGF3YWl0IHByb3ZpZGVyKCk7XG4gICAgICAgICAgICByZXR1cm4gY3JlZGVudGlhbHM7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgbGFzdFByb3ZpZGVyRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICBpZiAoZXJyPy50cnlOZXh0TGluaykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IGxhc3RQcm92aWRlckVycm9yO1xufTtcbiIsImltcG9ydCB7IGNvbGxlY3RCb2R5IH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgdG9VdGY4IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC11dGY4XCI7XG5leHBvcnQgY29uc3QgY29sbGVjdEJvZHlTdHJpbmcgPSAoc3RyZWFtQm9keSwgY29udGV4dCkgPT4gY29sbGVjdEJvZHkoc3RyZWFtQm9keSwgY29udGV4dCkudGhlbigoYm9keSkgPT4gKGNvbnRleHQ/LnV0ZjhFbmNvZGVyID8/IHRvVXRmOCkoYm9keSkpO1xuIiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJwcm9jZXNzXCIpOyIsImltcG9ydCB7IHBsYXRmb3JtLCByZWxlYXNlIH0gZnJvbSBcIm9zXCI7XG5pbXBvcnQgeyBlbnYsIHZlcnNpb25zIH0gZnJvbSBcInByb2Nlc3NcIjtcbmltcG9ydCB7IGlzQ3J0QXZhaWxhYmxlIH0gZnJvbSBcIi4vaXMtY3J0LWF2YWlsYWJsZVwiO1xuZXhwb3J0IHsgY3J0QXZhaWxhYmlsaXR5IH0gZnJvbSBcIi4vY3J0LWF2YWlsYWJpbGl0eVwiO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZURlZmF1bHRVc2VyQWdlbnRQcm92aWRlciA9ICh7IHNlcnZpY2VJZCwgY2xpZW50VmVyc2lvbiB9KSA9PiB7XG4gICAgcmV0dXJuIGFzeW5jIChjb25maWcpID0+IHtcbiAgICAgICAgY29uc3Qgc2VjdGlvbnMgPSBbXG4gICAgICAgICAgICBbXCJhd3Mtc2RrLWpzXCIsIGNsaWVudFZlcnNpb25dLFxuICAgICAgICAgICAgW1widWFcIiwgXCIyLjFcIl0sXG4gICAgICAgICAgICBbYG9zLyR7cGxhdGZvcm0oKX1gLCByZWxlYXNlKCldLFxuICAgICAgICAgICAgW1wibGFuZy9qc1wiXSxcbiAgICAgICAgICAgIFtcIm1kL25vZGVqc1wiLCBgJHt2ZXJzaW9ucy5ub2RlfWBdLFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBjcnRBdmFpbGFibGUgPSBpc0NydEF2YWlsYWJsZSgpO1xuICAgICAgICBpZiAoY3J0QXZhaWxhYmxlKSB7XG4gICAgICAgICAgICBzZWN0aW9ucy5wdXNoKGNydEF2YWlsYWJsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcnZpY2VJZCkge1xuICAgICAgICAgICAgc2VjdGlvbnMucHVzaChbYGFwaS8ke3NlcnZpY2VJZH1gLCBjbGllbnRWZXJzaW9uXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVudi5BV1NfRVhFQ1VUSU9OX0VOVikge1xuICAgICAgICAgICAgc2VjdGlvbnMucHVzaChbYGV4ZWMtZW52LyR7ZW52LkFXU19FWEVDVVRJT05fRU5WfWBdKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhcHBJZCA9IGF3YWl0IGNvbmZpZz8udXNlckFnZW50QXBwSWQ/LigpO1xuICAgICAgICBjb25zdCByZXNvbHZlZFVzZXJBZ2VudCA9IGFwcElkID8gWy4uLnNlY3Rpb25zLCBbYGFwcC8ke2FwcElkfWBdXSA6IFsuLi5zZWN0aW9uc107XG4gICAgICAgIHJldHVybiByZXNvbHZlZFVzZXJBZ2VudDtcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCBkZWZhdWx0VXNlckFnZW50ID0gY3JlYXRlRGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyO1xuIiwiaW1wb3J0IHsgcGFyc2VVcmwgfSBmcm9tIFwiQHNtaXRoeS91cmwtcGFyc2VyXCI7XG5leHBvcnQgY29uc3QgdG9FbmRwb2ludFYxID0gKGVuZHBvaW50KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBlbmRwb2ludCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBpZiAoXCJ1cmxcIiBpbiBlbmRwb2ludCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlVXJsKGVuZHBvaW50LnVybCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuZHBvaW50O1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VVcmwoZW5kcG9pbnQpO1xufTtcbiIsImV4cG9ydCBjb25zdCBkZXJlZiA9IChzY2hlbWFSZWYpID0+IHtcbiAgICBpZiAodHlwZW9mIHNjaGVtYVJlZiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBzY2hlbWFSZWYoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNjaGVtYVJlZjtcbn07XG4iLCJleHBvcnQgY2xhc3MgVHlwZVJlZ2lzdHJ5IHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lc3BhY2UsIHNjaGVtYXMgPSBuZXcgTWFwKCksIGV4Y2VwdGlvbnMgPSBuZXcgTWFwKCkpIHtcbiAgICAgICAgdGhpcy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gICAgICAgIHRoaXMuc2NoZW1hcyA9IHNjaGVtYXM7XG4gICAgICAgIHRoaXMuZXhjZXB0aW9ucyA9IGV4Y2VwdGlvbnM7XG4gICAgfVxuICAgIHN0YXRpYyBmb3IobmFtZXNwYWNlKSB7XG4gICAgICAgIGlmICghVHlwZVJlZ2lzdHJ5LnJlZ2lzdHJpZXMuaGFzKG5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgIFR5cGVSZWdpc3RyeS5yZWdpc3RyaWVzLnNldChuYW1lc3BhY2UsIG5ldyBUeXBlUmVnaXN0cnkobmFtZXNwYWNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFR5cGVSZWdpc3RyeS5yZWdpc3RyaWVzLmdldChuYW1lc3BhY2UpO1xuICAgIH1cbiAgICByZWdpc3RlcihzaGFwZUlkLCBzY2hlbWEpIHtcbiAgICAgICAgY29uc3QgcXVhbGlmaWVkTmFtZSA9IHRoaXMubm9ybWFsaXplU2hhcGVJZChzaGFwZUlkKTtcbiAgICAgICAgdGhpcy5zY2hlbWFzLnNldChxdWFsaWZpZWROYW1lLCBzY2hlbWEpO1xuICAgIH1cbiAgICBnZXRTY2hlbWEoc2hhcGVJZCkge1xuICAgICAgICBjb25zdCBpZCA9IHRoaXMubm9ybWFsaXplU2hhcGVJZChzaGFwZUlkKTtcbiAgICAgICAgaWYgKCF0aGlzLnNjaGVtYXMuaGFzKGlkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBAc21pdGh5L2NvcmUvc2NoZW1hIC0gc2NoZW1hIG5vdCBmb3VuZCBmb3IgJHtpZH1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zY2hlbWFzLmdldChpZCk7XG4gICAgfVxuICAgIHJlZ2lzdGVyRXJyb3IoZXJyb3JTY2hlbWEsIGN0b3IpIHtcbiAgICAgICAgdGhpcy5leGNlcHRpb25zLnNldChlcnJvclNjaGVtYSwgY3Rvcik7XG4gICAgfVxuICAgIGdldEVycm9yQ3RvcihlcnJvclNjaGVtYSkge1xuICAgICAgICByZXR1cm4gdGhpcy5leGNlcHRpb25zLmdldChlcnJvclNjaGVtYSk7XG4gICAgfVxuICAgIGdldEJhc2VFeGNlcHRpb24oKSB7XG4gICAgICAgIGZvciAoY29uc3QgW2lkLCBzY2hlbWFdIG9mIHRoaXMuc2NoZW1hcy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIGlmIChpZC5zdGFydHNXaXRoKFwic21pdGh5LnRzLnNkay5zeW50aGV0aWMuXCIpICYmIGlkLmVuZHNXaXRoKFwiU2VydmljZUV4Y2VwdGlvblwiKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY2hlbWE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZmluZChwcmVkaWNhdGUpIHtcbiAgICAgICAgcmV0dXJuIFsuLi50aGlzLnNjaGVtYXMudmFsdWVzKCldLmZpbmQocHJlZGljYXRlKTtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuc2NoZW1hcy5jbGVhcigpO1xuICAgICAgICB0aGlzLmV4Y2VwdGlvbnMuY2xlYXIoKTtcbiAgICB9XG4gICAgbm9ybWFsaXplU2hhcGVJZChzaGFwZUlkKSB7XG4gICAgICAgIGlmIChzaGFwZUlkLmluY2x1ZGVzKFwiI1wiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNoYXBlSWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZXNwYWNlICsgXCIjXCIgKyBzaGFwZUlkO1xuICAgIH1cbiAgICBnZXROYW1lc3BhY2Uoc2hhcGVJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxpemVTaGFwZUlkKHNoYXBlSWQpLnNwbGl0KFwiI1wiKVswXTtcbiAgICB9XG59XG5UeXBlUmVnaXN0cnkucmVnaXN0cmllcyA9IG5ldyBNYXAoKTtcbiIsImltcG9ydCB7IFR5cGVSZWdpc3RyeSB9IGZyb20gXCIuLi9UeXBlUmVnaXN0cnlcIjtcbmV4cG9ydCBjbGFzcyBTY2hlbWEge1xuICAgIHN0YXRpYyBhc3NpZ24oaW5zdGFuY2UsIHZhbHVlcykge1xuICAgICAgICBjb25zdCBzY2hlbWEgPSBPYmplY3QuYXNzaWduKGluc3RhbmNlLCB2YWx1ZXMpO1xuICAgICAgICBUeXBlUmVnaXN0cnkuZm9yKHNjaGVtYS5uYW1lc3BhY2UpLnJlZ2lzdGVyKHNjaGVtYS5uYW1lLCBzY2hlbWEpO1xuICAgICAgICByZXR1cm4gc2NoZW1hO1xuICAgIH1cbiAgICBzdGF0aWMgW1N5bWJvbC5oYXNJbnN0YW5jZV0obGhzKSB7XG4gICAgICAgIGNvbnN0IGlzUHJvdG90eXBlID0gdGhpcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihsaHMpO1xuICAgICAgICBpZiAoIWlzUHJvdG90eXBlICYmIHR5cGVvZiBsaHMgPT09IFwib2JqZWN0XCIgJiYgbGhzICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ID0gbGhzO1xuICAgICAgICAgICAgcmV0dXJuIGxpc3Quc3ltYm9sID09PSB0aGlzLnN5bWJvbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNQcm90b3R5cGU7XG4gICAgfVxuICAgIGdldE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWVzcGFjZSArIFwiI1wiICsgdGhpcy5uYW1lO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNjaGVtYSB9IGZyb20gXCIuL1NjaGVtYVwiO1xuZXhwb3J0IGNsYXNzIExpc3RTY2hlbWEgZXh0ZW5kcyBTY2hlbWEge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnN5bWJvbCA9IExpc3RTY2hlbWEuc3ltYm9sO1xuICAgIH1cbn1cbkxpc3RTY2hlbWEuc3ltYm9sID0gU3ltYm9sLmZvcihcIkBzbWl0aHkvbGlzXCIpO1xuZXhwb3J0IGNvbnN0IGxpc3QgPSAobmFtZXNwYWNlLCBuYW1lLCB0cmFpdHMsIHZhbHVlU2NoZW1hKSA9PiBTY2hlbWEuYXNzaWduKG5ldyBMaXN0U2NoZW1hKCksIHtcbiAgICBuYW1lLFxuICAgIG5hbWVzcGFjZSxcbiAgICB0cmFpdHMsXG4gICAgdmFsdWVTY2hlbWEsXG59KTtcbiIsImltcG9ydCB7IFNjaGVtYSB9IGZyb20gXCIuL1NjaGVtYVwiO1xuZXhwb3J0IGNsYXNzIE1hcFNjaGVtYSBleHRlbmRzIFNjaGVtYSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuc3ltYm9sID0gTWFwU2NoZW1hLnN5bWJvbDtcbiAgICB9XG59XG5NYXBTY2hlbWEuc3ltYm9sID0gU3ltYm9sLmZvcihcIkBzbWl0aHkvbWFwXCIpO1xuZXhwb3J0IGNvbnN0IG1hcCA9IChuYW1lc3BhY2UsIG5hbWUsIHRyYWl0cywga2V5U2NoZW1hLCB2YWx1ZVNjaGVtYSkgPT4gU2NoZW1hLmFzc2lnbihuZXcgTWFwU2NoZW1hKCksIHtcbiAgICBuYW1lLFxuICAgIG5hbWVzcGFjZSxcbiAgICB0cmFpdHMsXG4gICAga2V5U2NoZW1hLFxuICAgIHZhbHVlU2NoZW1hLFxufSk7XG4iLCJleHBvcnQgY29uc3QgU0NIRU1BID0ge1xuICAgIEJMT0I6IDIxLFxuICAgIFNUUkVBTUlOR19CTE9COiA0MixcbiAgICBCT09MRUFOOiAyLFxuICAgIFNUUklORzogMCxcbiAgICBOVU1FUklDOiAxLFxuICAgIEJJR19JTlRFR0VSOiAxNyxcbiAgICBCSUdfREVDSU1BTDogMTksXG4gICAgRE9DVU1FTlQ6IDE1LFxuICAgIFRJTUVTVEFNUF9ERUZBVUxUOiA0LFxuICAgIFRJTUVTVEFNUF9EQVRFX1RJTUU6IDUsXG4gICAgVElNRVNUQU1QX0hUVFBfREFURTogNixcbiAgICBUSU1FU1RBTVBfRVBPQ0hfU0VDT05EUzogNyxcbiAgICBMSVNUX01PRElGSUVSOiA2NCxcbiAgICBNQVBfTU9ESUZJRVI6IDEyOCxcbn07XG4iLCJpbXBvcnQgeyBTY2hlbWEgfSBmcm9tIFwiLi9TY2hlbWFcIjtcbmV4cG9ydCBjbGFzcyBTaW1wbGVTY2hlbWEgZXh0ZW5kcyBTY2hlbWEge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnN5bWJvbCA9IFNpbXBsZVNjaGVtYS5zeW1ib2w7XG4gICAgfVxufVxuU2ltcGxlU2NoZW1hLnN5bWJvbCA9IFN5bWJvbC5mb3IoXCJAc21pdGh5L3NpbVwiKTtcbmV4cG9ydCBjb25zdCBzaW0gPSAobmFtZXNwYWNlLCBuYW1lLCBzY2hlbWFSZWYsIHRyYWl0cykgPT4gU2NoZW1hLmFzc2lnbihuZXcgU2ltcGxlU2NoZW1hKCksIHtcbiAgICBuYW1lLFxuICAgIG5hbWVzcGFjZSxcbiAgICB0cmFpdHMsXG4gICAgc2NoZW1hUmVmLFxufSk7XG4iLCJpbXBvcnQgeyBTY2hlbWEgfSBmcm9tIFwiLi9TY2hlbWFcIjtcbmV4cG9ydCBjbGFzcyBTdHJ1Y3R1cmVTY2hlbWEgZXh0ZW5kcyBTY2hlbWEge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnN5bWJvbCA9IFN0cnVjdHVyZVNjaGVtYS5zeW1ib2w7XG4gICAgfVxufVxuU3RydWN0dXJlU2NoZW1hLnN5bWJvbCA9IFN5bWJvbC5mb3IoXCJAc21pdGh5L3N0clwiKTtcbmV4cG9ydCBjb25zdCBzdHJ1Y3QgPSAobmFtZXNwYWNlLCBuYW1lLCB0cmFpdHMsIG1lbWJlck5hbWVzLCBtZW1iZXJMaXN0KSA9PiBTY2hlbWEuYXNzaWduKG5ldyBTdHJ1Y3R1cmVTY2hlbWEoKSwge1xuICAgIG5hbWUsXG4gICAgbmFtZXNwYWNlLFxuICAgIHRyYWl0cyxcbiAgICBtZW1iZXJOYW1lcyxcbiAgICBtZW1iZXJMaXN0LFxufSk7XG4iLCJpbXBvcnQgeyBkZXJlZiB9IGZyb20gXCIuLi9kZXJlZlwiO1xuaW1wb3J0IHsgTGlzdFNjaGVtYSB9IGZyb20gXCIuL0xpc3RTY2hlbWFcIjtcbmltcG9ydCB7IE1hcFNjaGVtYSB9IGZyb20gXCIuL01hcFNjaGVtYVwiO1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSBcIi4vU2NoZW1hXCI7XG5pbXBvcnQgeyBTQ0hFTUEgfSBmcm9tIFwiLi9zZW50aW5lbHNcIjtcbmltcG9ydCB7IFNpbXBsZVNjaGVtYSB9IGZyb20gXCIuL1NpbXBsZVNjaGVtYVwiO1xuaW1wb3J0IHsgU3RydWN0dXJlU2NoZW1hIH0gZnJvbSBcIi4vU3RydWN0dXJlU2NoZW1hXCI7XG5leHBvcnQgY2xhc3MgTm9ybWFsaXplZFNjaGVtYSB7XG4gICAgY29uc3RydWN0b3IocmVmLCBtZW1iZXJOYW1lKSB7XG4gICAgICAgIHRoaXMucmVmID0gcmVmO1xuICAgICAgICB0aGlzLm1lbWJlck5hbWUgPSBtZW1iZXJOYW1lO1xuICAgICAgICB0aGlzLnN5bWJvbCA9IE5vcm1hbGl6ZWRTY2hlbWEuc3ltYm9sO1xuICAgICAgICBjb25zdCB0cmFpdFN0YWNrID0gW107XG4gICAgICAgIGxldCBfcmVmID0gcmVmO1xuICAgICAgICBsZXQgc2NoZW1hID0gcmVmO1xuICAgICAgICB0aGlzLl9pc01lbWJlclNjaGVtYSA9IGZhbHNlO1xuICAgICAgICB3aGlsZSAoQXJyYXkuaXNBcnJheShfcmVmKSkge1xuICAgICAgICAgICAgdHJhaXRTdGFjay5wdXNoKF9yZWZbMV0pO1xuICAgICAgICAgICAgX3JlZiA9IF9yZWZbMF07XG4gICAgICAgICAgICBzY2hlbWEgPSBkZXJlZihfcmVmKTtcbiAgICAgICAgICAgIHRoaXMuX2lzTWVtYmVyU2NoZW1hID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhaXRTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLm1lbWJlclRyYWl0cyA9IHt9O1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRyYWl0U3RhY2subGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFpdFNldCA9IHRyYWl0U3RhY2tbaV07XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLm1lbWJlclRyYWl0cywgTm9ybWFsaXplZFNjaGVtYS50cmFuc2xhdGVUcmFpdHModHJhaXRTZXQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWVtYmVyVHJhaXRzID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZW1hIGluc3RhbmNlb2YgTm9ybWFsaXplZFNjaGVtYSkge1xuICAgICAgICAgICAgY29uc3QgY29tcHV0ZWRNZW1iZXJUcmFpdHMgPSB0aGlzLm1lbWJlclRyYWl0cztcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgc2NoZW1hKTtcbiAgICAgICAgICAgIHRoaXMubWVtYmVyVHJhaXRzID0gT2JqZWN0LmFzc2lnbih7fSwgY29tcHV0ZWRNZW1iZXJUcmFpdHMsIHNjaGVtYS5nZXRNZW1iZXJUcmFpdHMoKSwgdGhpcy5nZXRNZW1iZXJUcmFpdHMoKSk7XG4gICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZWRUcmFpdHMgPSB2b2lkIDA7XG4gICAgICAgICAgICB0aGlzLm1lbWJlck5hbWUgPSBtZW1iZXJOYW1lID8/IHNjaGVtYS5tZW1iZXJOYW1lO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2NoZW1hID0gZGVyZWYoc2NoZW1hKTtcbiAgICAgICAgaWYgKHRoaXMuc2NoZW1hICYmIHR5cGVvZiB0aGlzLnNjaGVtYSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgdGhpcy50cmFpdHMgPSB0aGlzLnNjaGVtYT8udHJhaXRzID8/IHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50cmFpdHMgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmFtZSA9XG4gICAgICAgICAgICAodGhpcy5zY2hlbWEgaW5zdGFuY2VvZiBTY2hlbWEgPyB0aGlzLnNjaGVtYS5nZXROYW1lPy4oKSA6IHZvaWQgMCkgPz8gdGhpcy5tZW1iZXJOYW1lID8/IHRoaXMuZ2V0U2NoZW1hTmFtZSgpO1xuICAgICAgICBpZiAodGhpcy5faXNNZW1iZXJTY2hlbWEgJiYgIW1lbWJlck5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQHNtaXRoeS9jb3JlL3NjaGVtYSAtIE5vcm1hbGl6ZWRTY2hlbWEgbWVtYmVyIGluaXQgJHt0aGlzLmdldE5hbWUodHJ1ZSl9IG1pc3NpbmcgbWVtYmVyIG5hbWUuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIFtTeW1ib2wuaGFzSW5zdGFuY2VdKGxocykge1xuICAgICAgICByZXR1cm4gU2NoZW1hW1N5bWJvbC5oYXNJbnN0YW5jZV0uYmluZCh0aGlzKShsaHMpO1xuICAgIH1cbiAgICBzdGF0aWMgb2YocmVmKSB7XG4gICAgICAgIGlmIChyZWYgaW5zdGFuY2VvZiBOb3JtYWxpemVkU2NoZW1hKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVmO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlZikpIHtcbiAgICAgICAgICAgIGNvbnN0IFtucywgdHJhaXRzXSA9IHJlZjtcbiAgICAgICAgICAgIGlmIChucyBpbnN0YW5jZW9mIE5vcm1hbGl6ZWRTY2hlbWEpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKG5zLmdldE1lcmdlZFRyYWl0cygpLCBOb3JtYWxpemVkU2NoZW1hLnRyYW5zbGF0ZVRyYWl0cyh0cmFpdHMpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEBzbWl0aHkvY29yZS9zY2hlbWEgLSBtYXkgbm90IGluaXQgdW53cmFwcGVkIG1lbWJlciBzY2hlbWE9JHtKU09OLnN0cmluZ2lmeShyZWYsIG51bGwsIDIpfS5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE5vcm1hbGl6ZWRTY2hlbWEocmVmKTtcbiAgICB9XG4gICAgc3RhdGljIHRyYW5zbGF0ZVRyYWl0cyhpbmRpY2F0b3IpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbmRpY2F0b3IgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRpY2F0b3I7XG4gICAgICAgIH1cbiAgICAgICAgaW5kaWNhdG9yID0gaW5kaWNhdG9yIHwgMDtcbiAgICAgICAgY29uc3QgdHJhaXRzID0ge307XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yIChjb25zdCB0cmFpdCBvZiBbXG4gICAgICAgICAgICBcImh0dHBMYWJlbFwiLFxuICAgICAgICAgICAgXCJpZGVtcG90ZW50XCIsXG4gICAgICAgICAgICBcImlkZW1wb3RlbmN5VG9rZW5cIixcbiAgICAgICAgICAgIFwic2Vuc2l0aXZlXCIsXG4gICAgICAgICAgICBcImh0dHBQYXlsb2FkXCIsXG4gICAgICAgICAgICBcImh0dHBSZXNwb25zZUNvZGVcIixcbiAgICAgICAgICAgIFwiaHR0cFF1ZXJ5UGFyYW1zXCIsXG4gICAgICAgIF0pIHtcbiAgICAgICAgICAgIGlmICgoKGluZGljYXRvciA+PiBpKyspICYgMSkgPT09IDEpIHtcbiAgICAgICAgICAgICAgICB0cmFpdHNbdHJhaXRdID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhaXRzO1xuICAgIH1cbiAgICBnZXRTY2hlbWEoKSB7XG4gICAgICAgIGlmICh0aGlzLnNjaGVtYSBpbnN0YW5jZW9mIE5vcm1hbGl6ZWRTY2hlbWEpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgeyBzY2hlbWE6IHRoaXMuc2NoZW1hLmdldFNjaGVtYSgpIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NoZW1hO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNjaGVtYSBpbnN0YW5jZW9mIFNpbXBsZVNjaGVtYSkge1xuICAgICAgICAgICAgcmV0dXJuIGRlcmVmKHRoaXMuc2NoZW1hLnNjaGVtYVJlZik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlcmVmKHRoaXMuc2NoZW1hKTtcbiAgICB9XG4gICAgZ2V0TmFtZSh3aXRoTmFtZXNwYWNlID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKCF3aXRoTmFtZXNwYWNlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5uYW1lICYmIHRoaXMubmFtZS5pbmNsdWRlcyhcIiNcIikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lLnNwbGl0KFwiI1wiKVsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lIHx8IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0TWVtYmVyTmFtZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzTWVtYmVyU2NoZW1hKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQHNtaXRoeS9jb3JlL3NjaGVtYSAtIG5vbi1tZW1iZXIgc2NoZW1hOiAke3RoaXMuZ2V0TmFtZSh0cnVlKX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5tZW1iZXJOYW1lO1xuICAgIH1cbiAgICBpc01lbWJlclNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzTWVtYmVyU2NoZW1hO1xuICAgIH1cbiAgICBpc1VuaXRTY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNjaGVtYSgpID09PSBcInVuaXRcIjtcbiAgICB9XG4gICAgaXNMaXN0U2NoZW1hKCkge1xuICAgICAgICBjb25zdCBpbm5lciA9IHRoaXMuZ2V0U2NoZW1hKCk7XG4gICAgICAgIGlmICh0eXBlb2YgaW5uZXIgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBpbm5lciA+PSBTQ0hFTUEuTElTVF9NT0RJRklFUiAmJiBpbm5lciA8IFNDSEVNQS5NQVBfTU9ESUZJRVI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlubmVyIGluc3RhbmNlb2YgTGlzdFNjaGVtYTtcbiAgICB9XG4gICAgaXNNYXBTY2hlbWEoKSB7XG4gICAgICAgIGNvbnN0IGlubmVyID0gdGhpcy5nZXRTY2hlbWEoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbm5lciA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgcmV0dXJuIGlubmVyID49IFNDSEVNQS5NQVBfTU9ESUZJRVIgJiYgaW5uZXIgPD0gMjU1O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbm5lciBpbnN0YW5jZW9mIE1hcFNjaGVtYTtcbiAgICB9XG4gICAgaXNTdHJ1Y3RTY2hlbWEoKSB7XG4gICAgICAgIGNvbnN0IGlubmVyID0gdGhpcy5nZXRTY2hlbWEoKTtcbiAgICAgICAgcmV0dXJuIChpbm5lciAhPT0gbnVsbCAmJiB0eXBlb2YgaW5uZXIgPT09IFwib2JqZWN0XCIgJiYgXCJtZW1iZXJzXCIgaW4gaW5uZXIpIHx8IGlubmVyIGluc3RhbmNlb2YgU3RydWN0dXJlU2NoZW1hO1xuICAgIH1cbiAgICBpc0Jsb2JTY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNjaGVtYSgpID09PSBTQ0hFTUEuQkxPQiB8fCB0aGlzLmdldFNjaGVtYSgpID09PSBTQ0hFTUEuU1RSRUFNSU5HX0JMT0I7XG4gICAgfVxuICAgIGlzVGltZXN0YW1wU2NoZW1hKCkge1xuICAgICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLmdldFNjaGVtYSgpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIHNjaGVtYSA9PT0gXCJudW1iZXJcIiAmJiBzY2hlbWEgPj0gU0NIRU1BLlRJTUVTVEFNUF9ERUZBVUxUICYmIHNjaGVtYSA8PSBTQ0hFTUEuVElNRVNUQU1QX0VQT0NIX1NFQ09ORFM7XG4gICAgfVxuICAgIGlzRG9jdW1lbnRTY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNjaGVtYSgpID09PSBTQ0hFTUEuRE9DVU1FTlQ7XG4gICAgfVxuICAgIGlzU3RyaW5nU2NoZW1hKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTY2hlbWEoKSA9PT0gU0NIRU1BLlNUUklORztcbiAgICB9XG4gICAgaXNCb29sZWFuU2NoZW1hKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTY2hlbWEoKSA9PT0gU0NIRU1BLkJPT0xFQU47XG4gICAgfVxuICAgIGlzTnVtZXJpY1NjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2NoZW1hKCkgPT09IFNDSEVNQS5OVU1FUklDO1xuICAgIH1cbiAgICBpc0JpZ0ludGVnZXJTY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNjaGVtYSgpID09PSBTQ0hFTUEuQklHX0lOVEVHRVI7XG4gICAgfVxuICAgIGlzQmlnRGVjaW1hbFNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2NoZW1hKCkgPT09IFNDSEVNQS5CSUdfREVDSU1BTDtcbiAgICB9XG4gICAgaXNTdHJlYW1pbmcoKSB7XG4gICAgICAgIGNvbnN0IHN0cmVhbWluZyA9ICEhdGhpcy5nZXRNZXJnZWRUcmFpdHMoKS5zdHJlYW1pbmc7XG4gICAgICAgIGlmIChzdHJlYW1pbmcpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNjaGVtYSgpID09PSBTQ0hFTUEuU1RSRUFNSU5HX0JMT0I7XG4gICAgfVxuICAgIGlzSWRlbXBvdGVuY3lUb2tlbigpIHtcbiAgICAgICAgaWYgKHRoaXMubm9ybWFsaXplZFRyYWl0cykge1xuICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5ub3JtYWxpemVkVHJhaXRzLmlkZW1wb3RlbmN5VG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB0cmFpdHMgb2YgW3RoaXMudHJhaXRzLCB0aGlzLm1lbWJlclRyYWl0c10pIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdHJhaXRzID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCh0cmFpdHMgJiAwYjAxMDApID09PSAwYjAxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHRyYWl0cyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIGlmICghIXRyYWl0cy5pZGVtcG90ZW5jeVRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGdldE1lcmdlZFRyYWl0cygpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLm5vcm1hbGl6ZWRUcmFpdHMgPz9cbiAgICAgICAgICAgICh0aGlzLm5vcm1hbGl6ZWRUcmFpdHMgPSB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5nZXRPd25UcmFpdHMoKSxcbiAgICAgICAgICAgICAgICAuLi50aGlzLmdldE1lbWJlclRyYWl0cygpLFxuICAgICAgICAgICAgfSkpO1xuICAgIH1cbiAgICBnZXRNZW1iZXJUcmFpdHMoKSB7XG4gICAgICAgIHJldHVybiBOb3JtYWxpemVkU2NoZW1hLnRyYW5zbGF0ZVRyYWl0cyh0aGlzLm1lbWJlclRyYWl0cyk7XG4gICAgfVxuICAgIGdldE93blRyYWl0cygpIHtcbiAgICAgICAgcmV0dXJuIE5vcm1hbGl6ZWRTY2hlbWEudHJhbnNsYXRlVHJhaXRzKHRoaXMudHJhaXRzKTtcbiAgICB9XG4gICAgZ2V0S2V5U2NoZW1hKCkge1xuICAgICAgICBpZiAodGhpcy5pc0RvY3VtZW50U2NoZW1hKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1lbWJlckZyb20oW1NDSEVNQS5ET0NVTUVOVCwgMF0sIFwia2V5XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc01hcFNjaGVtYSgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEBzbWl0aHkvY29yZS9zY2hlbWEgLSBjYW5ub3QgZ2V0IGtleSBmb3Igbm9uLW1hcDogJHt0aGlzLmdldE5hbWUodHJ1ZSl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NoZW1hID0gdGhpcy5nZXRTY2hlbWEoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1lbWJlckZyb20oWzYzICYgc2NoZW1hLCAwXSwgXCJrZXlcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWVtYmVyRnJvbShbc2NoZW1hLmtleVNjaGVtYSwgMF0sIFwia2V5XCIpO1xuICAgIH1cbiAgICBnZXRWYWx1ZVNjaGVtYSgpIHtcbiAgICAgICAgY29uc3Qgc2NoZW1hID0gdGhpcy5nZXRTY2hlbWEoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzTWFwU2NoZW1hKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZW1iZXJGcm9tKFs2MyAmIHNjaGVtYSwgMF0sIFwidmFsdWVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmlzTGlzdFNjaGVtYSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVtYmVyRnJvbShbNjMgJiBzY2hlbWEsIDBdLCBcIm1lbWJlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZW1hICYmIHR5cGVvZiBzY2hlbWEgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzU3RydWN0U2NoZW1hKCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG1heSBub3QgZ2V0VmFsdWVTY2hlbWEoKSBvbiBzdHJ1Y3R1cmUgJHt0aGlzLmdldE5hbWUodHJ1ZSl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb2xsZWN0aW9uID0gc2NoZW1hO1xuICAgICAgICAgICAgaWYgKFwidmFsdWVTY2hlbWFcIiBpbiBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNNYXBTY2hlbWEoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZW1iZXJGcm9tKFtjb2xsZWN0aW9uLnZhbHVlU2NoZW1hLCAwXSwgXCJ2YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pc0xpc3RTY2hlbWEoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZW1iZXJGcm9tKFtjb2xsZWN0aW9uLnZhbHVlU2NoZW1hLCAwXSwgXCJtZW1iZXJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzRG9jdW1lbnRTY2hlbWEoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVtYmVyRnJvbShbU0NIRU1BLkRPQ1VNRU5ULCAwXSwgXCJ2YWx1ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEBzbWl0aHkvY29yZS9zY2hlbWEgLSAke3RoaXMuZ2V0TmFtZSh0cnVlKX0gaGFzIG5vIHZhbHVlIG1lbWJlci5gKTtcbiAgICB9XG4gICAgaGFzTWVtYmVyU2NoZW1hKG1lbWJlcikge1xuICAgICAgICBpZiAodGhpcy5pc1N0cnVjdFNjaGVtYSgpKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJ1Y3QgPSB0aGlzLmdldFNjaGVtYSgpO1xuICAgICAgICAgICAgcmV0dXJuIHN0cnVjdC5tZW1iZXJOYW1lcy5pbmNsdWRlcyhtZW1iZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZ2V0TWVtYmVyU2NoZW1hKG1lbWJlcikge1xuICAgICAgICBpZiAodGhpcy5pc1N0cnVjdFNjaGVtYSgpKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJ1Y3QgPSB0aGlzLmdldFNjaGVtYSgpO1xuICAgICAgICAgICAgaWYgKCFzdHJ1Y3QubWVtYmVyTmFtZXMuaW5jbHVkZXMobWVtYmVyKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQHNtaXRoeS9jb3JlL3NjaGVtYSAtICR7dGhpcy5nZXROYW1lKHRydWUpfSBoYXMgbm8gbWVtYmVyPSR7bWVtYmVyfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGkgPSBzdHJ1Y3QubWVtYmVyTmFtZXMuaW5kZXhPZihtZW1iZXIpO1xuICAgICAgICAgICAgY29uc3QgbWVtYmVyU2NoZW1hID0gc3RydWN0Lm1lbWJlckxpc3RbaV07XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tZW1iZXJGcm9tKEFycmF5LmlzQXJyYXkobWVtYmVyU2NoZW1hKSA/IG1lbWJlclNjaGVtYSA6IFttZW1iZXJTY2hlbWEsIDBdLCBtZW1iZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzRG9jdW1lbnRTY2hlbWEoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVtYmVyRnJvbShbU0NIRU1BLkRPQ1VNRU5ULCAwXSwgbWVtYmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEBzbWl0aHkvY29yZS9zY2hlbWEgLSAke3RoaXMuZ2V0TmFtZSh0cnVlKX0gaGFzIG5vIG1lbWJlcnMuYCk7XG4gICAgfVxuICAgIGdldE1lbWJlclNjaGVtYXMoKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHt9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgdGhpcy5zdHJ1Y3RJdGVyYXRvcigpKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyW2tdID0gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoaWdub3JlZCkgeyB9XG4gICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgfVxuICAgIGdldEV2ZW50U3RyZWFtTWVtYmVyKCkge1xuICAgICAgICBpZiAodGhpcy5pc1N0cnVjdFNjaGVtYSgpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFttZW1iZXJOYW1lLCBtZW1iZXJTY2hlbWFdIG9mIHRoaXMuc3RydWN0SXRlcmF0b3IoKSkge1xuICAgICAgICAgICAgICAgIGlmIChtZW1iZXJTY2hlbWEuaXNTdHJlYW1pbmcoKSAmJiBtZW1iZXJTY2hlbWEuaXNTdHJ1Y3RTY2hlbWEoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVtYmVyTmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgICpzdHJ1Y3RJdGVyYXRvcigpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNVbml0U2NoZW1hKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXNTdHJ1Y3RTY2hlbWEoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQHNtaXRoeS9jb3JlL3NjaGVtYSAtIGNhbm5vdCBpdGVyYXRlIG5vbi1zdHJ1Y3Qgc2NoZW1hLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdHJ1Y3QgPSB0aGlzLmdldFNjaGVtYSgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0cnVjdC5tZW1iZXJOYW1lcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgeWllbGQgW3N0cnVjdC5tZW1iZXJOYW1lc1tpXSwgdGhpcy5tZW1iZXJGcm9tKFtzdHJ1Y3QubWVtYmVyTGlzdFtpXSwgMF0sIHN0cnVjdC5tZW1iZXJOYW1lc1tpXSldO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1lbWJlckZyb20obWVtYmVyU2NoZW1hLCBtZW1iZXJOYW1lKSB7XG4gICAgICAgIGlmIChtZW1iZXJTY2hlbWEgaW5zdGFuY2VvZiBOb3JtYWxpemVkU2NoZW1hKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihtZW1iZXJTY2hlbWEsIHtcbiAgICAgICAgICAgICAgICBtZW1iZXJOYW1lLFxuICAgICAgICAgICAgICAgIF9pc01lbWJlclNjaGVtYTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgTm9ybWFsaXplZFNjaGVtYShtZW1iZXJTY2hlbWEsIG1lbWJlck5hbWUpO1xuICAgIH1cbiAgICBnZXRTY2hlbWFOYW1lKCkge1xuICAgICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLmdldFNjaGVtYSgpO1xuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgY29uc3QgX3NjaGVtYSA9IDYzICYgc2NoZW1hO1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gMTkyICYgc2NoZW1hO1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IE9iamVjdC5lbnRyaWVzKFNDSEVNQSkuZmluZCgoWywgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSBfc2NoZW1hO1xuICAgICAgICAgICAgfSk/LlswXSA/PyBcIlVua25vd25cIjtcbiAgICAgICAgICAgIHN3aXRjaCAoY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBTQ0hFTUEuTUFQX01PRElGSUVSOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7dHlwZX1NYXBgO1xuICAgICAgICAgICAgICAgIGNhc2UgU0NIRU1BLkxJU1RfTU9ESUZJRVI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHt0eXBlfUxpc3RgO1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiVW5rbm93blwiO1xuICAgIH1cbn1cbk5vcm1hbGl6ZWRTY2hlbWEuc3ltYm9sID0gU3ltYm9sLmZvcihcIkBzbWl0aHkvbm9yXCIpO1xuIiwiaW1wb3J0IHsgTm9ybWFsaXplZFNjaGVtYSB9IGZyb20gXCJAc21pdGh5L2NvcmUvc2NoZW1hXCI7XG5jb25zdCBTRU5TSVRJVkVfU1RSSU5HID0gXCIqKipTZW5zaXRpdmVJbmZvcm1hdGlvbioqKlwiO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVtYUxvZ0ZpbHRlcihzY2hlbWEsIGRhdGEpIHtcbiAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBjb25zdCBucyA9IE5vcm1hbGl6ZWRTY2hlbWEub2Yoc2NoZW1hKTtcbiAgICBpZiAobnMuZ2V0TWVyZ2VkVHJhaXRzKCkuc2Vuc2l0aXZlKSB7XG4gICAgICAgIHJldHVybiBTRU5TSVRJVkVfU1RSSU5HO1xuICAgIH1cbiAgICBpZiAobnMuaXNMaXN0U2NoZW1hKCkpIHtcbiAgICAgICAgY29uc3QgaXNTZW5zaXRpdmUgPSAhIW5zLmdldFZhbHVlU2NoZW1hKCkuZ2V0TWVyZ2VkVHJhaXRzKCkuc2Vuc2l0aXZlO1xuICAgICAgICBpZiAoaXNTZW5zaXRpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiBTRU5TSVRJVkVfU1RSSU5HO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKG5zLmlzTWFwU2NoZW1hKCkpIHtcbiAgICAgICAgY29uc3QgaXNTZW5zaXRpdmUgPSAhIW5zLmdldEtleVNjaGVtYSgpLmdldE1lcmdlZFRyYWl0cygpLnNlbnNpdGl2ZSB8fCAhIW5zLmdldFZhbHVlU2NoZW1hKCkuZ2V0TWVyZ2VkVHJhaXRzKCkuc2Vuc2l0aXZlO1xuICAgICAgICBpZiAoaXNTZW5zaXRpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiBTRU5TSVRJVkVfU1RSSU5HO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKG5zLmlzU3RydWN0U2NoZW1hKCkgJiYgdHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgY29uc3Qgb2JqZWN0ID0gZGF0YTtcbiAgICAgICAgY29uc3QgbmV3T2JqZWN0ID0ge307XG4gICAgICAgIGZvciAoY29uc3QgW21lbWJlciwgbWVtYmVyTnNdIG9mIG5zLnN0cnVjdEl0ZXJhdG9yKCkpIHtcbiAgICAgICAgICAgIGlmIChvYmplY3RbbWVtYmVyXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmV3T2JqZWN0W21lbWJlcl0gPSBzY2hlbWFMb2dGaWx0ZXIobWVtYmVyTnMsIG9iamVjdFttZW1iZXJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3T2JqZWN0O1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbiIsImltcG9ydCB7IGNvbnN0cnVjdFN0YWNrIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1zdGFja1wiO1xuaW1wb3J0IHsgU01JVEhZX0NPTlRFWFRfS0VZIH0gZnJvbSBcIkBzbWl0aHkvdHlwZXNcIjtcbmltcG9ydCB7IHNjaGVtYUxvZ0ZpbHRlciB9IGZyb20gXCIuL3NjaGVtYUxvZ0ZpbHRlclwiO1xuZXhwb3J0IGNsYXNzIENvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjayA9IGNvbnN0cnVjdFN0YWNrKCk7XG4gICAgfVxuICAgIHN0YXRpYyBjbGFzc0J1aWxkZXIoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2xhc3NCdWlsZGVyKCk7XG4gICAgfVxuICAgIHJlc29sdmVNaWRkbGV3YXJlV2l0aENvbnRleHQoY2xpZW50U3RhY2ssIGNvbmZpZ3VyYXRpb24sIG9wdGlvbnMsIHsgbWlkZGxld2FyZUZuLCBjbGllbnROYW1lLCBjb21tYW5kTmFtZSwgaW5wdXRGaWx0ZXJTZW5zaXRpdmVMb2csIG91dHB1dEZpbHRlclNlbnNpdGl2ZUxvZywgc21pdGh5Q29udGV4dCwgYWRkaXRpb25hbENvbnRleHQsIENvbW1hbmRDdG9yLCB9KSB7XG4gICAgICAgIGZvciAoY29uc3QgbXcgb2YgbWlkZGxld2FyZUZuLmJpbmQodGhpcykoQ29tbWFuZEN0b3IsIGNsaWVudFN0YWNrLCBjb25maWd1cmF0aW9uLCBvcHRpb25zKSkge1xuICAgICAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKG13KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFjayA9IGNsaWVudFN0YWNrLmNvbmNhdCh0aGlzLm1pZGRsZXdhcmVTdGFjayk7XG4gICAgICAgIGNvbnN0IHsgbG9nZ2VyIH0gPSBjb25maWd1cmF0aW9uO1xuICAgICAgICBjb25zdCBoYW5kbGVyRXhlY3V0aW9uQ29udGV4dCA9IHtcbiAgICAgICAgICAgIGxvZ2dlcixcbiAgICAgICAgICAgIGNsaWVudE5hbWUsXG4gICAgICAgICAgICBjb21tYW5kTmFtZSxcbiAgICAgICAgICAgIGlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nLFxuICAgICAgICAgICAgb3V0cHV0RmlsdGVyU2Vuc2l0aXZlTG9nLFxuICAgICAgICAgICAgW1NNSVRIWV9DT05URVhUX0tFWV06IHtcbiAgICAgICAgICAgICAgICBjb21tYW5kSW5zdGFuY2U6IHRoaXMsXG4gICAgICAgICAgICAgICAgLi4uc21pdGh5Q29udGV4dCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAuLi5hZGRpdGlvbmFsQ29udGV4dCxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyByZXF1ZXN0SGFuZGxlciB9ID0gY29uZmlndXJhdGlvbjtcbiAgICAgICAgcmV0dXJuIHN0YWNrLnJlc29sdmUoKHJlcXVlc3QpID0+IHJlcXVlc3RIYW5kbGVyLmhhbmRsZShyZXF1ZXN0LnJlcXVlc3QsIG9wdGlvbnMgfHwge30pLCBoYW5kbGVyRXhlY3V0aW9uQ29udGV4dCk7XG4gICAgfVxufVxuY2xhc3MgQ2xhc3NCdWlsZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5faW5pdCA9ICgpID0+IHsgfTtcbiAgICAgICAgdGhpcy5fZXAgPSB7fTtcbiAgICAgICAgdGhpcy5fbWlkZGxld2FyZUZuID0gKCkgPT4gW107XG4gICAgICAgIHRoaXMuX2NvbW1hbmROYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5fY2xpZW50TmFtZSA9IFwiXCI7XG4gICAgICAgIHRoaXMuX2FkZGl0aW9uYWxDb250ZXh0ID0ge307XG4gICAgICAgIHRoaXMuX3NtaXRoeUNvbnRleHQgPSB7fTtcbiAgICAgICAgdGhpcy5faW5wdXRGaWx0ZXJTZW5zaXRpdmVMb2cgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX291dHB1dEZpbHRlclNlbnNpdGl2ZUxvZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc2VyaWFsaXplciA9IG51bGw7XG4gICAgICAgIHRoaXMuX2Rlc2VyaWFsaXplciA9IG51bGw7XG4gICAgfVxuICAgIGluaXQoY2IpIHtcbiAgICAgICAgdGhpcy5faW5pdCA9IGNiO1xuICAgIH1cbiAgICBlcChlbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucykge1xuICAgICAgICB0aGlzLl9lcCA9IGVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgbShtaWRkbGV3YXJlU3VwcGxpZXIpIHtcbiAgICAgICAgdGhpcy5fbWlkZGxld2FyZUZuID0gbWlkZGxld2FyZVN1cHBsaWVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcyhzZXJ2aWNlLCBvcGVyYXRpb24sIHNtaXRoeUNvbnRleHQgPSB7fSkge1xuICAgICAgICB0aGlzLl9zbWl0aHlDb250ZXh0ID0ge1xuICAgICAgICAgICAgc2VydmljZSxcbiAgICAgICAgICAgIG9wZXJhdGlvbixcbiAgICAgICAgICAgIC4uLnNtaXRoeUNvbnRleHQsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjKGFkZGl0aW9uYWxDb250ZXh0ID0ge30pIHtcbiAgICAgICAgdGhpcy5fYWRkaXRpb25hbENvbnRleHQgPSBhZGRpdGlvbmFsQ29udGV4dDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIG4oY2xpZW50TmFtZSwgY29tbWFuZE5hbWUpIHtcbiAgICAgICAgdGhpcy5fY2xpZW50TmFtZSA9IGNsaWVudE5hbWU7XG4gICAgICAgIHRoaXMuX2NvbW1hbmROYW1lID0gY29tbWFuZE5hbWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBmKGlucHV0RmlsdGVyID0gKF8pID0+IF8sIG91dHB1dEZpbHRlciA9IChfKSA9PiBfKSB7XG4gICAgICAgIHRoaXMuX2lucHV0RmlsdGVyU2Vuc2l0aXZlTG9nID0gaW5wdXRGaWx0ZXI7XG4gICAgICAgIHRoaXMuX291dHB1dEZpbHRlclNlbnNpdGl2ZUxvZyA9IG91dHB1dEZpbHRlcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNlcihzZXJpYWxpemVyKSB7XG4gICAgICAgIHRoaXMuX3NlcmlhbGl6ZXIgPSBzZXJpYWxpemVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGUoZGVzZXJpYWxpemVyKSB7XG4gICAgICAgIHRoaXMuX2Rlc2VyaWFsaXplciA9IGRlc2VyaWFsaXplcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNjKG9wZXJhdGlvbikge1xuICAgICAgICB0aGlzLl9vcGVyYXRpb25TY2hlbWEgPSBvcGVyYXRpb247XG4gICAgICAgIHRoaXMuX3NtaXRoeUNvbnRleHQub3BlcmF0aW9uU2NoZW1hID0gb3BlcmF0aW9uO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYnVpbGQoKSB7XG4gICAgICAgIGNvbnN0IGNsb3N1cmUgPSB0aGlzO1xuICAgICAgICBsZXQgQ29tbWFuZFJlZjtcbiAgICAgICAgcmV0dXJuIChDb21tYW5kUmVmID0gY2xhc3MgZXh0ZW5kcyBDb21tYW5kIHtcbiAgICAgICAgICAgIHN0YXRpYyBnZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvc3VyZS5fZXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdHJ1Y3RvciguLi5baW5wdXRdKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlcmlhbGl6ZSA9IGNsb3N1cmUuX3NlcmlhbGl6ZXI7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXNlcmlhbGl6ZSA9IGNsb3N1cmUuX2Rlc2VyaWFsaXplcjtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0ID0gaW5wdXQgPz8ge307XG4gICAgICAgICAgICAgICAgY2xvc3VyZS5faW5pdCh0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYSA9IGNsb3N1cmUuX29wZXJhdGlvblNjaGVtYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc29sdmVNaWRkbGV3YXJlKHN0YWNrLCBjb25maWd1cmF0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZU1pZGRsZXdhcmVXaXRoQ29udGV4dChzdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucywge1xuICAgICAgICAgICAgICAgICAgICBDb21tYW5kQ3RvcjogQ29tbWFuZFJlZixcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZUZuOiBjbG9zdXJlLl9taWRkbGV3YXJlRm4sXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudE5hbWU6IGNsb3N1cmUuX2NsaWVudE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmROYW1lOiBjbG9zdXJlLl9jb21tYW5kTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRGaWx0ZXJTZW5zaXRpdmVMb2c6IGNsb3N1cmUuX2lucHV0RmlsdGVyU2Vuc2l0aXZlTG9nID8/XG4gICAgICAgICAgICAgICAgICAgICAgICAoY2xvc3VyZS5fb3BlcmF0aW9uU2NoZW1hID8gc2NoZW1hTG9nRmlsdGVyLmJpbmQobnVsbCwgY2xvc3VyZS5fb3BlcmF0aW9uU2NoZW1hLmlucHV0KSA6IChfKSA9PiBfKSxcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0RmlsdGVyU2Vuc2l0aXZlTG9nOiBjbG9zdXJlLl9vdXRwdXRGaWx0ZXJTZW5zaXRpdmVMb2cgPz9cbiAgICAgICAgICAgICAgICAgICAgICAgIChjbG9zdXJlLl9vcGVyYXRpb25TY2hlbWEgPyBzY2hlbWFMb2dGaWx0ZXIuYmluZChudWxsLCBjbG9zdXJlLl9vcGVyYXRpb25TY2hlbWEub3V0cHV0KSA6IChfKSA9PiBfKSxcbiAgICAgICAgICAgICAgICAgICAgc21pdGh5Q29udGV4dDogY2xvc3VyZS5fc21pdGh5Q29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbENvbnRleHQ6IGNsb3N1cmUuX2FkZGl0aW9uYWxDb250ZXh0LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJodHRwXCIpOyIsImltcG9ydCB7IENPTkZJR19QUkVGSVhfU0VQQVJBVE9SIH0gZnJvbSBcIkBzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlclwiO1xuY29uc3QgRU5WX0VORFBPSU5UX1VSTCA9IFwiQVdTX0VORFBPSU5UX1VSTFwiO1xuY29uc3QgQ09ORklHX0VORFBPSU5UX1VSTCA9IFwiZW5kcG9pbnRfdXJsXCI7XG5leHBvcnQgY29uc3QgZ2V0RW5kcG9pbnRVcmxDb25maWcgPSAoc2VydmljZUlkKSA9PiAoe1xuICAgIGVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvcjogKGVudikgPT4ge1xuICAgICAgICBjb25zdCBzZXJ2aWNlU3VmZml4UGFydHMgPSBzZXJ2aWNlSWQuc3BsaXQoXCIgXCIpLm1hcCgodykgPT4gdy50b1VwcGVyQ2FzZSgpKTtcbiAgICAgICAgY29uc3Qgc2VydmljZUVuZHBvaW50VXJsID0gZW52W1tFTlZfRU5EUE9JTlRfVVJMLCAuLi5zZXJ2aWNlU3VmZml4UGFydHNdLmpvaW4oXCJfXCIpXTtcbiAgICAgICAgaWYgKHNlcnZpY2VFbmRwb2ludFVybClcbiAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlRW5kcG9pbnRVcmw7XG4gICAgICAgIGNvbnN0IGVuZHBvaW50VXJsID0gZW52W0VOVl9FTkRQT0lOVF9VUkxdO1xuICAgICAgICBpZiAoZW5kcG9pbnRVcmwpXG4gICAgICAgICAgICByZXR1cm4gZW5kcG9pbnRVcmw7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSxcbiAgICBjb25maWdGaWxlU2VsZWN0b3I6IChwcm9maWxlLCBjb25maWcpID0+IHtcbiAgICAgICAgaWYgKGNvbmZpZyAmJiBwcm9maWxlLnNlcnZpY2VzKSB7XG4gICAgICAgICAgICBjb25zdCBzZXJ2aWNlc1NlY3Rpb24gPSBjb25maWdbW1wic2VydmljZXNcIiwgcHJvZmlsZS5zZXJ2aWNlc10uam9pbihDT05GSUdfUFJFRklYX1NFUEFSQVRPUildO1xuICAgICAgICAgICAgaWYgKHNlcnZpY2VzU2VjdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcnZpY2VQcmVmaXhQYXJ0cyA9IHNlcnZpY2VJZC5zcGxpdChcIiBcIikubWFwKCh3KSA9PiB3LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZHBvaW50VXJsID0gc2VydmljZXNTZWN0aW9uW1tzZXJ2aWNlUHJlZml4UGFydHMuam9pbihcIl9cIiksIENPTkZJR19FTkRQT0lOVF9VUkxdLmpvaW4oQ09ORklHX1BSRUZJWF9TRVBBUkFUT1IpXTtcbiAgICAgICAgICAgICAgICBpZiAoZW5kcG9pbnRVcmwpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmRwb2ludFVybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbmRwb2ludFVybCA9IHByb2ZpbGVbQ09ORklHX0VORFBPSU5UX1VSTF07XG4gICAgICAgIGlmIChlbmRwb2ludFVybClcbiAgICAgICAgICAgIHJldHVybiBlbmRwb2ludFVybDtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIGRlZmF1bHQ6IHVuZGVmaW5lZCxcbn0pO1xuIiwiaW1wb3J0IHsgbG9hZENvbmZpZyB9IGZyb20gXCJAc21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBnZXRFbmRwb2ludFVybENvbmZpZyB9IGZyb20gXCIuL2dldEVuZHBvaW50VXJsQ29uZmlnXCI7XG5leHBvcnQgY29uc3QgZ2V0RW5kcG9pbnRGcm9tQ29uZmlnID0gYXN5bmMgKHNlcnZpY2VJZCkgPT4gbG9hZENvbmZpZyhnZXRFbmRwb2ludFVybENvbmZpZyhzZXJ2aWNlSWQgPz8gXCJcIikpKCk7XG4iLCJjb25zdCBWQUxJRF9IT1NUX0xBQkVMX1JFR0VYID0gbmV3IFJlZ0V4cChgXig/IS4qLSQpKD8hLSlbYS16QS1aMC05LV17MSw2M30kYCk7XG5leHBvcnQgY29uc3QgaXNWYWxpZEhvc3RMYWJlbCA9ICh2YWx1ZSwgYWxsb3dTdWJEb21haW5zID0gZmFsc2UpID0+IHtcbiAgICBpZiAoIWFsbG93U3ViRG9tYWlucykge1xuICAgICAgICByZXR1cm4gVkFMSURfSE9TVF9MQUJFTF9SRUdFWC50ZXN0KHZhbHVlKTtcbiAgICB9XG4gICAgY29uc3QgbGFiZWxzID0gdmFsdWUuc3BsaXQoXCIuXCIpO1xuICAgIGZvciAoY29uc3QgbGFiZWwgb2YgbGFiZWxzKSB7XG4gICAgICAgIGlmICghaXNWYWxpZEhvc3RMYWJlbChsYWJlbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4iLCJleHBvcnQgY29uc3Qgbm9ybWFsaXplUHJvdmlkZXIgPSAoaW5wdXQpID0+IHtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICBjb25zdCBwcm9taXNpZmllZCA9IFByb21pc2UucmVzb2x2ZShpbnB1dCk7XG4gICAgcmV0dXJuICgpID0+IHByb21pc2lmaWVkO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInV0aWxcIik7IiwiaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tIFwiQHNtaXRoeS9wcm90b2NvbC1odHRwXCI7XG5pbXBvcnQgeyByZXNvbHZlZFBhdGggfSBmcm9tIFwiLi9yZXNvbHZlLXBhdGhcIjtcbmV4cG9ydCBmdW5jdGlvbiByZXF1ZXN0QnVpbGRlcihpbnB1dCwgY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgUmVxdWVzdEJ1aWxkZXIoaW5wdXQsIGNvbnRleHQpO1xufVxuZXhwb3J0IGNsYXNzIFJlcXVlc3RCdWlsZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dCwgY29udGV4dCkge1xuICAgICAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMucXVlcnkgPSB7fTtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIlwiO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5wYXRoID0gXCJcIjtcbiAgICAgICAgdGhpcy5ib2R5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5ob3N0bmFtZSA9IFwiXCI7XG4gICAgICAgIHRoaXMucmVzb2x2ZVBhdGhTdGFjayA9IFtdO1xuICAgIH1cbiAgICBhc3luYyBidWlsZCgpIHtcbiAgICAgICAgY29uc3QgeyBob3N0bmFtZSwgcHJvdG9jb2wgPSBcImh0dHBzXCIsIHBvcnQsIHBhdGg6IGJhc2VQYXRoIH0gPSBhd2FpdCB0aGlzLmNvbnRleHQuZW5kcG9pbnQoKTtcbiAgICAgICAgdGhpcy5wYXRoID0gYmFzZVBhdGg7XG4gICAgICAgIGZvciAoY29uc3QgcmVzb2x2ZVBhdGggb2YgdGhpcy5yZXNvbHZlUGF0aFN0YWNrKSB7XG4gICAgICAgICAgICByZXNvbHZlUGF0aCh0aGlzLnBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgSHR0cFJlcXVlc3Qoe1xuICAgICAgICAgICAgcHJvdG9jb2wsXG4gICAgICAgICAgICBob3N0bmFtZTogdGhpcy5ob3N0bmFtZSB8fCBob3N0bmFtZSxcbiAgICAgICAgICAgIHBvcnQsXG4gICAgICAgICAgICBtZXRob2Q6IHRoaXMubWV0aG9kLFxuICAgICAgICAgICAgcGF0aDogdGhpcy5wYXRoLFxuICAgICAgICAgICAgcXVlcnk6IHRoaXMucXVlcnksXG4gICAgICAgICAgICBib2R5OiB0aGlzLmJvZHksXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBobihob3N0bmFtZSkge1xuICAgICAgICB0aGlzLmhvc3RuYW1lID0gaG9zdG5hbWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBicCh1cmlMYWJlbCkge1xuICAgICAgICB0aGlzLnJlc29sdmVQYXRoU3RhY2sucHVzaCgoYmFzZVBhdGgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGF0aCA9IGAke2Jhc2VQYXRoPy5lbmRzV2l0aChcIi9cIikgPyBiYXNlUGF0aC5zbGljZSgwLCAtMSkgOiBiYXNlUGF0aCB8fCBcIlwifWAgKyB1cmlMYWJlbDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBwKG1lbWJlck5hbWUsIGxhYmVsVmFsdWVQcm92aWRlciwgdXJpTGFiZWwsIGlzR3JlZWR5TGFiZWwpIHtcbiAgICAgICAgdGhpcy5yZXNvbHZlUGF0aFN0YWNrLnB1c2goKHBhdGgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGF0aCA9IHJlc29sdmVkUGF0aChwYXRoLCB0aGlzLmlucHV0LCBtZW1iZXJOYW1lLCBsYWJlbFZhbHVlUHJvdmlkZXIsIHVyaUxhYmVsLCBpc0dyZWVkeUxhYmVsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBoKGhlYWRlcnMpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHEocXVlcnkpIHtcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYihib2R5KSB7XG4gICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBtKG1ldGhvZCkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQgfSBmcm9tIFwiLi9leHRlbmRlZC1lbmNvZGUtdXJpLWNvbXBvbmVudFwiO1xuZXhwb3J0IGNvbnN0IHJlc29sdmVkUGF0aCA9IChyZXNvbHZlZFBhdGgsIGlucHV0LCBtZW1iZXJOYW1lLCBsYWJlbFZhbHVlUHJvdmlkZXIsIHVyaUxhYmVsLCBpc0dyZWVkeUxhYmVsKSA9PiB7XG4gICAgaWYgKGlucHV0ICE9IG51bGwgJiYgaW5wdXRbbWVtYmVyTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBsYWJlbFZhbHVlID0gbGFiZWxWYWx1ZVByb3ZpZGVyKCk7XG4gICAgICAgIGlmIChsYWJlbFZhbHVlLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbXB0eSB2YWx1ZSBwcm92aWRlZCBmb3IgaW5wdXQgSFRUUCBsYWJlbDogXCIgKyBtZW1iZXJOYW1lICsgXCIuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmVkUGF0aCA9IHJlc29sdmVkUGF0aC5yZXBsYWNlKHVyaUxhYmVsLCBpc0dyZWVkeUxhYmVsXG4gICAgICAgICAgICA/IGxhYmVsVmFsdWVcbiAgICAgICAgICAgICAgICAuc3BsaXQoXCIvXCIpXG4gICAgICAgICAgICAgICAgLm1hcCgoc2VnbWVudCkgPT4gZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQoc2VnbWVudCkpXG4gICAgICAgICAgICAgICAgLmpvaW4oXCIvXCIpXG4gICAgICAgICAgICA6IGV4dGVuZGVkRW5jb2RlVVJJQ29tcG9uZW50KGxhYmVsVmFsdWUpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHZhbHVlIHByb3ZpZGVkIGZvciBpbnB1dCBIVFRQIGxhYmVsOiBcIiArIG1lbWJlck5hbWUgKyBcIi5cIik7XG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlZFBhdGg7XG59O1xuIiwiaW1wb3J0IHsgaXNBcnJheUJ1ZmZlciB9IGZyb20gXCJAc21pdGh5L2lzLWFycmF5LWJ1ZmZlclwiO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcImJ1ZmZlclwiO1xuZXhwb3J0IGNvbnN0IGZyb21BcnJheUJ1ZmZlciA9IChpbnB1dCwgb2Zmc2V0ID0gMCwgbGVuZ3RoID0gaW5wdXQuYnl0ZUxlbmd0aCAtIG9mZnNldCkgPT4ge1xuICAgIGlmICghaXNBcnJheUJ1ZmZlcihpbnB1dCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVGhlIFwiaW5wdXRcIiBhcmd1bWVudCBtdXN0IGJlIEFycmF5QnVmZmVyLiBSZWNlaXZlZCB0eXBlICR7dHlwZW9mIGlucHV0fSAoJHtpbnB1dH0pYCk7XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuZnJvbShpbnB1dCwgb2Zmc2V0LCBsZW5ndGgpO1xufTtcbmV4cG9ydCBjb25zdCBmcm9tU3RyaW5nID0gKGlucHV0LCBlbmNvZGluZykgPT4ge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVGhlIFwiaW5wdXRcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlICR7dHlwZW9mIGlucHV0fSAoJHtpbnB1dH0pYCk7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGluZyA/IEJ1ZmZlci5mcm9tKGlucHV0LCBlbmNvZGluZykgOiBCdWZmZXIuZnJvbShpbnB1dCk7XG59O1xuIiwiaW1wb3J0IHsgZnJvbUFycmF5QnVmZmVyIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1idWZmZXItZnJvbVwiO1xuaW1wb3J0IHsgZnJvbVV0ZjggfSBmcm9tIFwiQHNtaXRoeS91dGlsLXV0ZjhcIjtcbmV4cG9ydCBjb25zdCB0b0Jhc2U2NCA9IChfaW5wdXQpID0+IHtcbiAgICBsZXQgaW5wdXQ7XG4gICAgaWYgKHR5cGVvZiBfaW5wdXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaW5wdXQgPSBmcm9tVXRmOChfaW5wdXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaW5wdXQgPSBfaW5wdXQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGlucHV0LmJ5dGVPZmZzZXQgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGlucHV0LmJ5dGVMZW5ndGggIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQHNtaXRoeS91dGlsLWJhc2U2NDogdG9CYXNlNjQgZW5jb2RlciBmdW5jdGlvbiBvbmx5IGFjY2VwdHMgc3RyaW5nIHwgVWludDhBcnJheS5cIik7XG4gICAgfVxuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIoaW5wdXQuYnVmZmVyLCBpbnB1dC5ieXRlT2Zmc2V0LCBpbnB1dC5ieXRlTGVuZ3RoKS50b1N0cmluZyhcImJhc2U2NFwiKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJmc1wiKTsiLCJpbXBvcnQgeyBERUZBVUxUX1VBX0FQUF9JRCB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLXVzZXItYWdlbnRcIjtcbmV4cG9ydCBjb25zdCBVQV9BUFBfSURfRU5WX05BTUUgPSBcIkFXU19TREtfVUFfQVBQX0lEXCI7XG5leHBvcnQgY29uc3QgVUFfQVBQX0lEX0lOSV9OQU1FID0gXCJzZGtfdWFfYXBwX2lkXCI7XG5jb25zdCBVQV9BUFBfSURfSU5JX05BTUVfREVQUkVDQVRFRCA9IFwic2RrLXVhLWFwcC1pZFwiO1xuZXhwb3J0IGNvbnN0IE5PREVfQVBQX0lEX0NPTkZJR19PUFRJT05TID0ge1xuICAgIGVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvcjogKGVudikgPT4gZW52W1VBX0FQUF9JRF9FTlZfTkFNRV0sXG4gICAgY29uZmlnRmlsZVNlbGVjdG9yOiAocHJvZmlsZSkgPT4gcHJvZmlsZVtVQV9BUFBfSURfSU5JX05BTUVdID8/IHByb2ZpbGVbVUFfQVBQX0lEX0lOSV9OQU1FX0RFUFJFQ0FURURdLFxuICAgIGRlZmF1bHQ6IERFRkFVTFRfVUFfQVBQX0lELFxufTtcbiIsImV4cG9ydCB2YXIgQWxnb3JpdGhtSWQ7XG4oZnVuY3Rpb24gKEFsZ29yaXRobUlkKSB7XG4gICAgQWxnb3JpdGhtSWRbXCJNRDVcIl0gPSBcIm1kNVwiO1xuICAgIEFsZ29yaXRobUlkW1wiQ1JDMzJcIl0gPSBcImNyYzMyXCI7XG4gICAgQWxnb3JpdGhtSWRbXCJDUkMzMkNcIl0gPSBcImNyYzMyY1wiO1xuICAgIEFsZ29yaXRobUlkW1wiU0hBMVwiXSA9IFwic2hhMVwiO1xuICAgIEFsZ29yaXRobUlkW1wiU0hBMjU2XCJdID0gXCJzaGEyNTZcIjtcbn0pKEFsZ29yaXRobUlkIHx8IChBbGdvcml0aG1JZCA9IHt9KSk7XG5leHBvcnQgY29uc3QgZ2V0Q2hlY2tzdW1Db25maWd1cmF0aW9uID0gKHJ1bnRpbWVDb25maWcpID0+IHtcbiAgICBjb25zdCBjaGVja3N1bUFsZ29yaXRobXMgPSBbXTtcbiAgICBpZiAocnVudGltZUNvbmZpZy5zaGEyNTYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjaGVja3N1bUFsZ29yaXRobXMucHVzaCh7XG4gICAgICAgICAgICBhbGdvcml0aG1JZDogKCkgPT4gQWxnb3JpdGhtSWQuU0hBMjU2LFxuICAgICAgICAgICAgY2hlY2tzdW1Db25zdHJ1Y3RvcjogKCkgPT4gcnVudGltZUNvbmZpZy5zaGEyNTYsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAocnVudGltZUNvbmZpZy5tZDUgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNoZWNrc3VtQWxnb3JpdGhtcy5wdXNoKHtcbiAgICAgICAgICAgIGFsZ29yaXRobUlkOiAoKSA9PiBBbGdvcml0aG1JZC5NRDUsXG4gICAgICAgICAgICBjaGVja3N1bUNvbnN0cnVjdG9yOiAoKSA9PiBydW50aW1lQ29uZmlnLm1kNSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGFkZENoZWNrc3VtQWxnb3JpdGhtKGFsZ28pIHtcbiAgICAgICAgICAgIGNoZWNrc3VtQWxnb3JpdGhtcy5wdXNoKGFsZ28pO1xuICAgICAgICB9LFxuICAgICAgICBjaGVja3N1bUFsZ29yaXRobXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tzdW1BbGdvcml0aG1zO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVDaGVja3N1bVJ1bnRpbWVDb25maWcgPSAoY2xpZW50Q29uZmlnKSA9PiB7XG4gICAgY29uc3QgcnVudGltZUNvbmZpZyA9IHt9O1xuICAgIGNsaWVudENvbmZpZy5jaGVja3N1bUFsZ29yaXRobXMoKS5mb3JFYWNoKChjaGVja3N1bUFsZ29yaXRobSkgPT4ge1xuICAgICAgICBydW50aW1lQ29uZmlnW2NoZWNrc3VtQWxnb3JpdGhtLmFsZ29yaXRobUlkKCldID0gY2hlY2tzdW1BbGdvcml0aG0uY2hlY2tzdW1Db25zdHJ1Y3RvcigpO1xuICAgIH0pO1xuICAgIHJldHVybiBydW50aW1lQ29uZmlnO1xufTtcbiIsImltcG9ydCB7IGdldENoZWNrc3VtQ29uZmlndXJhdGlvbiwgcmVzb2x2ZUNoZWNrc3VtUnVudGltZUNvbmZpZyB9IGZyb20gXCIuL2NoZWNrc3VtXCI7XG5pbXBvcnQgeyBnZXRSZXRyeUNvbmZpZ3VyYXRpb24sIHJlc29sdmVSZXRyeVJ1bnRpbWVDb25maWcgfSBmcm9tIFwiLi9yZXRyeVwiO1xuZXhwb3J0IGNvbnN0IGdldERlZmF1bHRFeHRlbnNpb25Db25maWd1cmF0aW9uID0gKHJ1bnRpbWVDb25maWcpID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihnZXRDaGVja3N1bUNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZyksIGdldFJldHJ5Q29uZmlndXJhdGlvbihydW50aW1lQ29uZmlnKSk7XG59O1xuZXhwb3J0IGNvbnN0IGdldERlZmF1bHRDbGllbnRDb25maWd1cmF0aW9uID0gZ2V0RGVmYXVsdEV4dGVuc2lvbkNvbmZpZ3VyYXRpb247XG5leHBvcnQgY29uc3QgcmVzb2x2ZURlZmF1bHRSdW50aW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHJlc29sdmVDaGVja3N1bVJ1bnRpbWVDb25maWcoY29uZmlnKSwgcmVzb2x2ZVJldHJ5UnVudGltZUNvbmZpZyhjb25maWcpKTtcbn07XG4iLCJpbXBvcnQgeyBBbGdvcml0aG1JZCB9IGZyb20gXCJAc21pdGh5L3R5cGVzXCI7XG5leHBvcnQgeyBBbGdvcml0aG1JZCB9O1xuZXhwb3J0IGNvbnN0IGdldENoZWNrc3VtQ29uZmlndXJhdGlvbiA9IChydW50aW1lQ29uZmlnKSA9PiB7XG4gICAgY29uc3QgY2hlY2tzdW1BbGdvcml0aG1zID0gW107XG4gICAgZm9yIChjb25zdCBpZCBpbiBBbGdvcml0aG1JZCkge1xuICAgICAgICBjb25zdCBhbGdvcml0aG1JZCA9IEFsZ29yaXRobUlkW2lkXTtcbiAgICAgICAgaWYgKHJ1bnRpbWVDb25maWdbYWxnb3JpdGhtSWRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNoZWNrc3VtQWxnb3JpdGhtcy5wdXNoKHtcbiAgICAgICAgICAgIGFsZ29yaXRobUlkOiAoKSA9PiBhbGdvcml0aG1JZCxcbiAgICAgICAgICAgIGNoZWNrc3VtQ29uc3RydWN0b3I6ICgpID0+IHJ1bnRpbWVDb25maWdbYWxnb3JpdGhtSWRdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkQ2hlY2tzdW1BbGdvcml0aG0oYWxnbykge1xuICAgICAgICAgICAgY2hlY2tzdW1BbGdvcml0aG1zLnB1c2goYWxnbyk7XG4gICAgICAgIH0sXG4gICAgICAgIGNoZWNrc3VtQWxnb3JpdGhtcygpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVja3N1bUFsZ29yaXRobXM7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5leHBvcnQgY29uc3QgcmVzb2x2ZUNoZWNrc3VtUnVudGltZUNvbmZpZyA9IChjbGllbnRDb25maWcpID0+IHtcbiAgICBjb25zdCBydW50aW1lQ29uZmlnID0ge307XG4gICAgY2xpZW50Q29uZmlnLmNoZWNrc3VtQWxnb3JpdGhtcygpLmZvckVhY2goKGNoZWNrc3VtQWxnb3JpdGhtKSA9PiB7XG4gICAgICAgIHJ1bnRpbWVDb25maWdbY2hlY2tzdW1BbGdvcml0aG0uYWxnb3JpdGhtSWQoKV0gPSBjaGVja3N1bUFsZ29yaXRobS5jaGVja3N1bUNvbnN0cnVjdG9yKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJ1bnRpbWVDb25maWc7XG59O1xuIiwiZXhwb3J0IGNvbnN0IGdldFJldHJ5Q29uZmlndXJhdGlvbiA9IChydW50aW1lQ29uZmlnKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2V0UmV0cnlTdHJhdGVneShyZXRyeVN0cmF0ZWd5KSB7XG4gICAgICAgICAgICBydW50aW1lQ29uZmlnLnJldHJ5U3RyYXRlZ3kgPSByZXRyeVN0cmF0ZWd5O1xuICAgICAgICB9LFxuICAgICAgICByZXRyeVN0cmF0ZWd5KCkge1xuICAgICAgICAgICAgcmV0dXJuIHJ1bnRpbWVDb25maWcucmV0cnlTdHJhdGVneTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlUmV0cnlSdW50aW1lQ29uZmlnID0gKHJldHJ5U3RyYXRlZ3lDb25maWd1cmF0aW9uKSA9PiB7XG4gICAgY29uc3QgcnVudGltZUNvbmZpZyA9IHt9O1xuICAgIHJ1bnRpbWVDb25maWcucmV0cnlTdHJhdGVneSA9IHJldHJ5U3RyYXRlZ3lDb25maWd1cmF0aW9uLnJldHJ5U3RyYXRlZ3koKTtcbiAgICByZXR1cm4gcnVudGltZUNvbmZpZztcbn07XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBQcm9taXNlLmFsbChPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmYpLnJlZHVjZSgocHJvbWlzZXMsIGtleSkgPT4ge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZltrZXldKGNodW5rSWQsIHByb21pc2VzKTtcblx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdH0sIFtdKSk7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLmpzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgeyByZXNvbHZlQXdzU2RrU2lnVjRDb25maWcsIH0gZnJvbSBcIkBhd3Mtc2RrL2NvcmVcIjtcbmltcG9ydCB7IGdldFNtaXRoeUNvbnRleHQsIG5vcm1hbGl6ZVByb3ZpZGVyIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1taWRkbGV3YXJlXCI7XG5leHBvcnQgY29uc3QgZGVmYXVsdENsb3VkVHJhaWxIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciA9IGFzeW5jIChjb25maWcsIGNvbnRleHQsIGlucHV0KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb3BlcmF0aW9uOiBnZXRTbWl0aHlDb250ZXh0KGNvbnRleHQpLm9wZXJhdGlvbixcbiAgICAgICAgcmVnaW9uOiAoYXdhaXQgbm9ybWFsaXplUHJvdmlkZXIoY29uZmlnLnJlZ2lvbikoKSkgfHxcbiAgICAgICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZXhwZWN0ZWQgYHJlZ2lvbmAgdG8gYmUgY29uZmlndXJlZCBmb3IgYGF3cy5hdXRoI3NpZ3Y0YFwiKTtcbiAgICAgICAgICAgIH0pKCksXG4gICAgfTtcbn07XG5mdW5jdGlvbiBjcmVhdGVBd3NBdXRoU2lndjRIdHRwQXV0aE9wdGlvbihhdXRoUGFyYW1ldGVycykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNjaGVtZUlkOiBcImF3cy5hdXRoI3NpZ3Y0XCIsXG4gICAgICAgIHNpZ25pbmdQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBuYW1lOiBcImNsb3VkdHJhaWxcIixcbiAgICAgICAgICAgIHJlZ2lvbjogYXV0aFBhcmFtZXRlcnMucmVnaW9uLFxuICAgICAgICB9LFxuICAgICAgICBwcm9wZXJ0aWVzRXh0cmFjdG9yOiAoY29uZmlnLCBjb250ZXh0KSA9PiAoe1xuICAgICAgICAgICAgc2lnbmluZ1Byb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgIH07XG59XG5leHBvcnQgY29uc3QgZGVmYXVsdENsb3VkVHJhaWxIdHRwQXV0aFNjaGVtZVByb3ZpZGVyID0gKGF1dGhQYXJhbWV0ZXJzKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IFtdO1xuICAgIHN3aXRjaCAoYXV0aFBhcmFtZXRlcnMub3BlcmF0aW9uKSB7XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaChjcmVhdGVBd3NBdXRoU2lndjRIdHRwQXV0aE9wdGlvbihhdXRoUGFyYW1ldGVycykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlSHR0cEF1dGhTY2hlbWVDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgY29uc3QgY29uZmlnXzAgPSByZXNvbHZlQXdzU2RrU2lnVjRDb25maWcoY29uZmlnKTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihjb25maWdfMCwge1xuICAgICAgICBhdXRoU2NoZW1lUHJlZmVyZW5jZTogbm9ybWFsaXplUHJvdmlkZXIoY29uZmlnLmF1dGhTY2hlbWVQcmVmZXJlbmNlID8/IFtdKSxcbiAgICB9KTtcbn07XG4iLCJleHBvcnQgY29uc3QgcmVzb2x2ZUNsaWVudEVuZHBvaW50UGFyYW1ldGVycyA9IChvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob3B0aW9ucywge1xuICAgICAgICB1c2VEdWFsc3RhY2tFbmRwb2ludDogb3B0aW9ucy51c2VEdWFsc3RhY2tFbmRwb2ludCA/PyBmYWxzZSxcbiAgICAgICAgdXNlRmlwc0VuZHBvaW50OiBvcHRpb25zLnVzZUZpcHNFbmRwb2ludCA/PyBmYWxzZSxcbiAgICAgICAgZGVmYXVsdFNpZ25pbmdOYW1lOiBcImNsb3VkdHJhaWxcIixcbiAgICB9KTtcbn07XG5leHBvcnQgY29uc3QgY29tbW9uUGFyYW1zID0ge1xuICAgIFVzZUZJUFM6IHsgdHlwZTogXCJidWlsdEluUGFyYW1zXCIsIG5hbWU6IFwidXNlRmlwc0VuZHBvaW50XCIgfSxcbiAgICBFbmRwb2ludDogeyB0eXBlOiBcImJ1aWx0SW5QYXJhbXNcIiwgbmFtZTogXCJlbmRwb2ludFwiIH0sXG4gICAgUmVnaW9uOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInJlZ2lvblwiIH0sXG4gICAgVXNlRHVhbFN0YWNrOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInVzZUR1YWxzdGFja0VuZHBvaW50XCIgfSxcbn07XG4iLCJpbXBvcnQgeyBjaGFpbiwgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yIH0gZnJvbSBcIkBzbWl0aHkvcHJvcGVydHktcHJvdmlkZXJcIjtcbmV4cG9ydCBjb25zdCBFTlZfSU1EU19ESVNBQkxFRCA9IFwiQVdTX0VDMl9NRVRBREFUQV9ESVNBQkxFRFwiO1xuZXhwb3J0IGNvbnN0IHJlbW90ZVByb3ZpZGVyID0gYXN5bmMgKGluaXQpID0+IHtcbiAgICBjb25zdCB7IEVOVl9DTURTX0ZVTExfVVJJLCBFTlZfQ01EU19SRUxBVElWRV9VUkksIGZyb21Db250YWluZXJNZXRhZGF0YSwgZnJvbUluc3RhbmNlTWV0YWRhdGEgfSA9IGF3YWl0IGltcG9ydChcIkBzbWl0aHkvY3JlZGVudGlhbC1wcm92aWRlci1pbWRzXCIpO1xuICAgIGlmIChwcm9jZXNzLmVudltFTlZfQ01EU19SRUxBVElWRV9VUkldIHx8IHByb2Nlc3MuZW52W0VOVl9DTURTX0ZVTExfVVJJXSkge1xuICAgICAgICBpbml0LmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGUgLSByZW1vdGVQcm92aWRlcjo6ZnJvbUh0dHAvZnJvbUNvbnRhaW5lck1ldGFkYXRhXCIpO1xuICAgICAgICBjb25zdCB7IGZyb21IdHRwIH0gPSBhd2FpdCBpbXBvcnQoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLWh0dHBcIik7XG4gICAgICAgIHJldHVybiBjaGFpbihmcm9tSHR0cChpbml0KSwgZnJvbUNvbnRhaW5lck1ldGFkYXRhKGluaXQpKTtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52W0VOVl9JTURTX0RJU0FCTEVEXSAmJiBwcm9jZXNzLmVudltFTlZfSU1EU19ESVNBQkxFRF0gIT09IFwiZmFsc2VcIikge1xuICAgICAgICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgbmV3IENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvcihcIkVDMiBJbnN0YW5jZSBNZXRhZGF0YSBTZXJ2aWNlIGFjY2VzcyBkaXNhYmxlZFwiLCB7IGxvZ2dlcjogaW5pdC5sb2dnZXIgfSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGluaXQubG9nZ2VyPy5kZWJ1ZyhcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZSAtIHJlbW90ZVByb3ZpZGVyOjpmcm9tSW5zdGFuY2VNZXRhZGF0YVwiKTtcbiAgICByZXR1cm4gZnJvbUluc3RhbmNlTWV0YWRhdGEoaW5pdCk7XG59O1xuIiwiaW1wb3J0IHsgRU5WX0tFWSwgRU5WX1NFQ1JFVCwgZnJvbUVudiB9IGZyb20gXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLWVudlwiO1xuaW1wb3J0IHsgY2hhaW4sIENyZWRlbnRpYWxzUHJvdmlkZXJFcnJvciwgbWVtb2l6ZSB9IGZyb20gXCJAc21pdGh5L3Byb3BlcnR5LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBFTlZfUFJPRklMRSB9IGZyb20gXCJAc21pdGh5L3NoYXJlZC1pbmktZmlsZS1sb2FkZXJcIjtcbmltcG9ydCB7IHJlbW90ZVByb3ZpZGVyIH0gZnJvbSBcIi4vcmVtb3RlUHJvdmlkZXJcIjtcbmxldCBtdWx0aXBsZUNyZWRlbnRpYWxTb3VyY2VXYXJuaW5nRW1pdHRlZCA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRQcm92aWRlciA9IChpbml0ID0ge30pID0+IG1lbW9pemUoY2hhaW4oYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHByb2ZpbGUgPSBpbml0LnByb2ZpbGUgPz8gcHJvY2Vzcy5lbnZbRU5WX1BST0ZJTEVdO1xuICAgIGlmIChwcm9maWxlKSB7XG4gICAgICAgIGNvbnN0IGVudlN0YXRpY0NyZWRlbnRpYWxzQXJlU2V0ID0gcHJvY2Vzcy5lbnZbRU5WX0tFWV0gJiYgcHJvY2Vzcy5lbnZbRU5WX1NFQ1JFVF07XG4gICAgICAgIGlmIChlbnZTdGF0aWNDcmVkZW50aWFsc0FyZVNldCkge1xuICAgICAgICAgICAgaWYgKCFtdWx0aXBsZUNyZWRlbnRpYWxTb3VyY2VXYXJuaW5nRW1pdHRlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdhcm5GbiA9IGluaXQubG9nZ2VyPy53YXJuICYmIGluaXQubG9nZ2VyPy5jb25zdHJ1Y3Rvcj8ubmFtZSAhPT0gXCJOb09wTG9nZ2VyXCJcbiAgICAgICAgICAgICAgICAgICAgPyBpbml0LmxvZ2dlci53YXJuLmJpbmQoaW5pdC5sb2dnZXIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uc29sZS53YXJuO1xuICAgICAgICAgICAgICAgIHdhcm5GbihgQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1ub2RlIC0gZGVmYXVsdFByb3ZpZGVyOjpmcm9tRW52IFdBUk5JTkc6XG4gICAgTXVsdGlwbGUgY3JlZGVudGlhbCBzb3VyY2VzIGRldGVjdGVkOiBcbiAgICBCb3RoIEFXU19QUk9GSUxFIGFuZCB0aGUgcGFpciBBV1NfQUNDRVNTX0tFWV9JRC9BV1NfU0VDUkVUX0FDQ0VTU19LRVkgc3RhdGljIGNyZWRlbnRpYWxzIGFyZSBzZXQuXG4gICAgVGhpcyBTREsgd2lsbCBwcm9jZWVkIHdpdGggdGhlIEFXU19QUk9GSUxFIHZhbHVlLlxuICAgIFxuICAgIEhvd2V2ZXIsIGEgZnV0dXJlIHZlcnNpb24gbWF5IGNoYW5nZSB0aGlzIGJlaGF2aW9yIHRvIHByZWZlciB0aGUgRU5WIHN0YXRpYyBjcmVkZW50aWFscy5cbiAgICBQbGVhc2UgZW5zdXJlIHRoYXQgeW91ciBlbnZpcm9ubWVudCBvbmx5IHNldHMgZWl0aGVyIHRoZSBBV1NfUFJPRklMRSBvciB0aGVcbiAgICBBV1NfQUNDRVNTX0tFWV9JRC9BV1NfU0VDUkVUX0FDQ0VTU19LRVkgcGFpci5cbmApO1xuICAgICAgICAgICAgICAgIG11bHRpcGxlQ3JlZGVudGlhbFNvdXJjZVdhcm5pbmdFbWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFwiQVdTX1BST0ZJTEUgaXMgc2V0LCBza2lwcGluZyBmcm9tRW52IHByb3ZpZGVyLlwiLCB7XG4gICAgICAgICAgICBsb2dnZXI6IGluaXQubG9nZ2VyLFxuICAgICAgICAgICAgdHJ5TmV4dExpbms6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbml0LmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGUgLSBkZWZhdWx0UHJvdmlkZXI6OmZyb21FbnZcIik7XG4gICAgcmV0dXJuIGZyb21FbnYoaW5pdCkoKTtcbn0sIGFzeW5jICgpID0+IHtcbiAgICBpbml0LmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGUgLSBkZWZhdWx0UHJvdmlkZXI6OmZyb21TU09cIik7XG4gICAgY29uc3QgeyBzc29TdGFydFVybCwgc3NvQWNjb3VudElkLCBzc29SZWdpb24sIHNzb1JvbGVOYW1lLCBzc29TZXNzaW9uIH0gPSBpbml0O1xuICAgIGlmICghc3NvU3RhcnRVcmwgJiYgIXNzb0FjY291bnRJZCAmJiAhc3NvUmVnaW9uICYmICFzc29Sb2xlTmFtZSAmJiAhc3NvU2Vzc2lvbikge1xuICAgICAgICB0aHJvdyBuZXcgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFwiU2tpcHBpbmcgU1NPIHByb3ZpZGVyIGluIGRlZmF1bHQgY2hhaW4gKGlucHV0cyBkbyBub3QgaW5jbHVkZSBTU08gZmllbGRzKS5cIiwgeyBsb2dnZXI6IGluaXQubG9nZ2VyIH0pO1xuICAgIH1cbiAgICBjb25zdCB7IGZyb21TU08gfSA9IGF3YWl0IGltcG9ydChcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItc3NvXCIpO1xuICAgIHJldHVybiBmcm9tU1NPKGluaXQpKCk7XG59LCBhc3luYyAoKSA9PiB7XG4gICAgaW5pdC5sb2dnZXI/LmRlYnVnKFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1ub2RlIC0gZGVmYXVsdFByb3ZpZGVyOjpmcm9tSW5pXCIpO1xuICAgIGNvbnN0IHsgZnJvbUluaSB9ID0gYXdhaXQgaW1wb3J0KFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1pbmlcIik7XG4gICAgcmV0dXJuIGZyb21JbmkoaW5pdCkoKTtcbn0sIGFzeW5jICgpID0+IHtcbiAgICBpbml0LmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGUgLSBkZWZhdWx0UHJvdmlkZXI6OmZyb21Qcm9jZXNzXCIpO1xuICAgIGNvbnN0IHsgZnJvbVByb2Nlc3MgfSA9IGF3YWl0IGltcG9ydChcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItcHJvY2Vzc1wiKTtcbiAgICByZXR1cm4gZnJvbVByb2Nlc3MoaW5pdCkoKTtcbn0sIGFzeW5jICgpID0+IHtcbiAgICBpbml0LmxvZ2dlcj8uZGVidWcoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGUgLSBkZWZhdWx0UHJvdmlkZXI6OmZyb21Ub2tlbkZpbGVcIik7XG4gICAgY29uc3QgeyBmcm9tVG9rZW5GaWxlIH0gPSBhd2FpdCBpbXBvcnQoXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLXdlYi1pZGVudGl0eVwiKTtcbiAgICByZXR1cm4gZnJvbVRva2VuRmlsZShpbml0KSgpO1xufSwgYXN5bmMgKCkgPT4ge1xuICAgIGluaXQubG9nZ2VyPy5kZWJ1ZyhcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZSAtIGRlZmF1bHRQcm92aWRlcjo6cmVtb3RlUHJvdmlkZXJcIik7XG4gICAgcmV0dXJuIChhd2FpdCByZW1vdGVQcm92aWRlcihpbml0KSkoKTtcbn0sIGFzeW5jICgpID0+IHtcbiAgICB0aHJvdyBuZXcgQ3JlZGVudGlhbHNQcm92aWRlckVycm9yKFwiQ291bGQgbm90IGxvYWQgY3JlZGVudGlhbHMgZnJvbSBhbnkgcHJvdmlkZXJzXCIsIHtcbiAgICAgICAgdHJ5TmV4dExpbms6IGZhbHNlLFxuICAgICAgICBsb2dnZXI6IGluaXQubG9nZ2VyLFxuICAgIH0pO1xufSksIGNyZWRlbnRpYWxzVHJlYXRlZEFzRXhwaXJlZCwgY3JlZGVudGlhbHNXaWxsTmVlZFJlZnJlc2gpO1xuZXhwb3J0IGNvbnN0IGNyZWRlbnRpYWxzV2lsbE5lZWRSZWZyZXNoID0gKGNyZWRlbnRpYWxzKSA9PiBjcmVkZW50aWFscz8uZXhwaXJhdGlvbiAhPT0gdW5kZWZpbmVkO1xuZXhwb3J0IGNvbnN0IGNyZWRlbnRpYWxzVHJlYXRlZEFzRXhwaXJlZCA9IChjcmVkZW50aWFscykgPT4gY3JlZGVudGlhbHM/LmV4cGlyYXRpb24gIT09IHVuZGVmaW5lZCAmJiBjcmVkZW50aWFscy5leHBpcmF0aW9uLmdldFRpbWUoKSAtIERhdGUubm93KCkgPCAzMDAwMDA7XG4iLCJjb25zdCB1ID0gXCJyZXF1aXJlZFwiLCB2ID0gXCJmblwiLCB3ID0gXCJhcmd2XCIsIHggPSBcInJlZlwiO1xuY29uc3QgYSA9IHRydWUsIGIgPSBcImlzU2V0XCIsIGMgPSBcImJvb2xlYW5FcXVhbHNcIiwgZCA9IFwiZXJyb3JcIiwgZSA9IFwiZW5kcG9pbnRcIiwgZiA9IFwidHJlZVwiLCBnID0gXCJQYXJ0aXRpb25SZXN1bHRcIiwgaCA9IFwic3RyaW5nRXF1YWxzXCIsIGkgPSB7IFt1XTogZmFsc2UsIFwidHlwZVwiOiBcIlN0cmluZ1wiIH0sIGogPSB7IFt1XTogdHJ1ZSwgXCJkZWZhdWx0XCI6IGZhbHNlLCBcInR5cGVcIjogXCJCb29sZWFuXCIgfSwgayA9IHsgW3hdOiBcIkVuZHBvaW50XCIgfSwgbCA9IHsgW3ZdOiBjLCBbd106IFt7IFt4XTogXCJVc2VGSVBTXCIgfSwgdHJ1ZV0gfSwgbSA9IHsgW3ZdOiBjLCBbd106IFt7IFt4XTogXCJVc2VEdWFsU3RhY2tcIiB9LCB0cnVlXSB9LCBuID0ge30sIG8gPSB7IFt4XTogXCJSZWdpb25cIiB9LCBwID0geyBbdl06IFwiZ2V0QXR0clwiLCBbd106IFt7IFt4XTogZyB9LCBcInN1cHBvcnRzRklQU1wiXSB9LCBxID0geyBbdl06IGMsIFt3XTogW3RydWUsIHsgW3ZdOiBcImdldEF0dHJcIiwgW3ddOiBbeyBbeF06IGcgfSwgXCJzdXBwb3J0c0R1YWxTdGFja1wiXSB9XSB9LCByID0gW2xdLCBzID0gW21dLCB0ID0gW29dO1xuY29uc3QgX2RhdGEgPSB7IHZlcnNpb246IFwiMS4wXCIsIHBhcmFtZXRlcnM6IHsgUmVnaW9uOiBpLCBVc2VEdWFsU3RhY2s6IGosIFVzZUZJUFM6IGosIEVuZHBvaW50OiBpIH0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbdl06IGIsIFt3XTogW2tdIH1dLCBydWxlczogW3sgY29uZGl0aW9uczogciwgZXJyb3I6IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBGSVBTIGFuZCBjdXN0b20gZW5kcG9pbnQgYXJlIG5vdCBzdXBwb3J0ZWRcIiwgdHlwZTogZCB9LCB7IGNvbmRpdGlvbnM6IHMsIGVycm9yOiBcIkludmFsaWQgQ29uZmlndXJhdGlvbjogRHVhbHN0YWNrIGFuZCBjdXN0b20gZW5kcG9pbnQgYXJlIG5vdCBzdXBwb3J0ZWRcIiwgdHlwZTogZCB9LCB7IGVuZHBvaW50OiB7IHVybDogaywgcHJvcGVydGllczogbiwgaGVhZGVyczogbiB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH0sIHsgY29uZGl0aW9uczogW3sgW3ZdOiBiLCBbd106IHQgfV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbdl06IFwiYXdzLnBhcnRpdGlvblwiLCBbd106IHQsIGFzc2lnbjogZyB9XSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFtsLCBtXSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt2XTogYywgW3ddOiBbYSwgcF0gfSwgcV0sIHJ1bGVzOiBbeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9jbG91ZHRyYWlsLWZpcHMue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkdWFsU3RhY2tEbnNTdWZmaXh9XCIsIHByb3BlcnRpZXM6IG4sIGhlYWRlcnM6IG4gfSwgdHlwZTogZSB9XSwgdHlwZTogZiB9LCB7IGVycm9yOiBcIkZJUFMgYW5kIER1YWxTdGFjayBhcmUgZW5hYmxlZCwgYnV0IHRoaXMgcGFydGl0aW9uIGRvZXMgbm90IHN1cHBvcnQgb25lIG9yIGJvdGhcIiwgdHlwZTogZCB9XSwgdHlwZTogZiB9LCB7IGNvbmRpdGlvbnM6IHIsIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbdl06IGMsIFt3XTogW3AsIGFdIH1dLCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW3ZdOiBoLCBbd106IFtvLCBcInVzLWdvdi1lYXN0LTFcIl0gfV0sIGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL2Nsb3VkdHJhaWwudXMtZ292LWVhc3QtMS5hbWF6b25hd3MuY29tXCIsIHByb3BlcnRpZXM6IG4sIGhlYWRlcnM6IG4gfSwgdHlwZTogZSB9LCB7IGNvbmRpdGlvbnM6IFt7IFt2XTogaCwgW3ddOiBbbywgXCJ1cy1nb3Ytd2VzdC0xXCJdIH1dLCBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9jbG91ZHRyYWlsLnVzLWdvdi13ZXN0LTEuYW1hem9uYXdzLmNvbVwiLCBwcm9wZXJ0aWVzOiBuLCBoZWFkZXJzOiBuIH0sIHR5cGU6IGUgfSwgeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9jbG91ZHRyYWlsLWZpcHMue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkbnNTdWZmaXh9XCIsIHByb3BlcnRpZXM6IG4sIGhlYWRlcnM6IG4gfSwgdHlwZTogZSB9XSwgdHlwZTogZiB9LCB7IGVycm9yOiBcIkZJUFMgaXMgZW5hYmxlZCBidXQgdGhpcyBwYXJ0aXRpb24gZG9lcyBub3Qgc3VwcG9ydCBGSVBTXCIsIHR5cGU6IGQgfV0sIHR5cGU6IGYgfSwgeyBjb25kaXRpb25zOiBzLCBydWxlczogW3sgY29uZGl0aW9uczogW3FdLCBydWxlczogW3sgZW5kcG9pbnQ6IHsgdXJsOiBcImh0dHBzOi8vY2xvdWR0cmFpbC57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2R1YWxTdGFja0Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogbiwgaGVhZGVyczogbiB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH0sIHsgZXJyb3I6IFwiRHVhbFN0YWNrIGlzIGVuYWJsZWQgYnV0IHRoaXMgcGFydGl0aW9uIGRvZXMgbm90IHN1cHBvcnQgRHVhbFN0YWNrXCIsIHR5cGU6IGQgfV0sIHR5cGU6IGYgfSwgeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9jbG91ZHRyYWlsLntSZWdpb259LntQYXJ0aXRpb25SZXN1bHQjZG5zU3VmZml4fVwiLCBwcm9wZXJ0aWVzOiBuLCBoZWFkZXJzOiBuIH0sIHR5cGU6IGUgfV0sIHR5cGU6IGYgfV0sIHR5cGU6IGYgfSwgeyBlcnJvcjogXCJJbnZhbGlkIENvbmZpZ3VyYXRpb246IE1pc3NpbmcgUmVnaW9uXCIsIHR5cGU6IGQgfV0gfTtcbmV4cG9ydCBjb25zdCBydWxlU2V0ID0gX2RhdGE7XG4iLCJpbXBvcnQgeyBhd3NFbmRwb2ludEZ1bmN0aW9ucyB9IGZyb20gXCJAYXdzLXNkay91dGlsLWVuZHBvaW50c1wiO1xuaW1wb3J0IHsgY3VzdG9tRW5kcG9pbnRGdW5jdGlvbnMsIEVuZHBvaW50Q2FjaGUsIHJlc29sdmVFbmRwb2ludCB9IGZyb20gXCJAc21pdGh5L3V0aWwtZW5kcG9pbnRzXCI7XG5pbXBvcnQgeyBydWxlU2V0IH0gZnJvbSBcIi4vcnVsZXNldFwiO1xuY29uc3QgY2FjaGUgPSBuZXcgRW5kcG9pbnRDYWNoZSh7XG4gICAgc2l6ZTogNTAsXG4gICAgcGFyYW1zOiBbXCJFbmRwb2ludFwiLCBcIlJlZ2lvblwiLCBcIlVzZUR1YWxTdGFja1wiLCBcIlVzZUZJUFNcIl0sXG59KTtcbmV4cG9ydCBjb25zdCBkZWZhdWx0RW5kcG9pbnRSZXNvbHZlciA9IChlbmRwb2ludFBhcmFtcywgY29udGV4dCA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIGNhY2hlLmdldChlbmRwb2ludFBhcmFtcywgKCkgPT4gcmVzb2x2ZUVuZHBvaW50KHJ1bGVTZXQsIHtcbiAgICAgICAgZW5kcG9pbnRQYXJhbXM6IGVuZHBvaW50UGFyYW1zLFxuICAgICAgICBsb2dnZXI6IGNvbnRleHQubG9nZ2VyLFxuICAgIH0pKTtcbn07XG5jdXN0b21FbmRwb2ludEZ1bmN0aW9ucy5hd3MgPSBhd3NFbmRwb2ludEZ1bmN0aW9ucztcbiIsImltcG9ydCB7IGdldEhvc3RIZWFkZXJQbHVnaW4sIHJlc29sdmVIb3N0SGVhZGVyQ29uZmlnLCB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLWhvc3QtaGVhZGVyXCI7XG5pbXBvcnQgeyBnZXRMb2dnZXJQbHVnaW4gfSBmcm9tIFwiQGF3cy1zZGsvbWlkZGxld2FyZS1sb2dnZXJcIjtcbmltcG9ydCB7IGdldFJlY3Vyc2lvbkRldGVjdGlvblBsdWdpbiB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLXJlY3Vyc2lvbi1kZXRlY3Rpb25cIjtcbmltcG9ydCB7IGdldFVzZXJBZ2VudFBsdWdpbiwgcmVzb2x2ZVVzZXJBZ2VudENvbmZpZywgfSBmcm9tIFwiQGF3cy1zZGsvbWlkZGxld2FyZS11c2VyLWFnZW50XCI7XG5pbXBvcnQgeyByZXNvbHZlUmVnaW9uQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvY29uZmlnLXJlc29sdmVyXCI7XG5pbXBvcnQgeyBEZWZhdWx0SWRlbnRpdHlQcm92aWRlckNvbmZpZywgZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4sIGdldEh0dHBTaWduaW5nUGx1Z2luLCB9IGZyb20gXCJAc21pdGh5L2NvcmVcIjtcbmltcG9ydCB7IGdldENvbnRlbnRMZW5ndGhQbHVnaW4gfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLWNvbnRlbnQtbGVuZ3RoXCI7XG5pbXBvcnQgeyByZXNvbHZlRW5kcG9pbnRDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50XCI7XG5pbXBvcnQgeyBnZXRSZXRyeVBsdWdpbiwgcmVzb2x2ZVJldHJ5Q29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1yZXRyeVwiO1xuaW1wb3J0IHsgQ2xpZW50IGFzIF9fQ2xpZW50LCB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IGRlZmF1bHRDbG91ZFRyYWlsSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIsIHJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZywgfSBmcm9tIFwiLi9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXJcIjtcbmltcG9ydCB7IHJlc29sdmVDbGllbnRFbmRwb2ludFBhcmFtZXRlcnMsIH0gZnJvbSBcIi4vZW5kcG9pbnQvRW5kcG9pbnRQYXJhbWV0ZXJzXCI7XG5pbXBvcnQgeyBnZXRSdW50aW1lQ29uZmlnIGFzIF9fZ2V0UnVudGltZUNvbmZpZyB9IGZyb20gXCIuL3J1bnRpbWVDb25maWdcIjtcbmltcG9ydCB7IHJlc29sdmVSdW50aW1lRXh0ZW5zaW9ucyB9IGZyb20gXCIuL3J1bnRpbWVFeHRlbnNpb25zXCI7XG5leHBvcnQgeyBfX0NsaWVudCB9O1xuZXhwb3J0IGNsYXNzIENsb3VkVHJhaWxDbGllbnQgZXh0ZW5kcyBfX0NsaWVudCB7XG4gICAgY29uZmlnO1xuICAgIGNvbnN0cnVjdG9yKC4uLltjb25maWd1cmF0aW9uXSkge1xuICAgICAgICBjb25zdCBfY29uZmlnXzAgPSBfX2dldFJ1bnRpbWVDb25maWcoY29uZmlndXJhdGlvbiB8fCB7fSk7XG4gICAgICAgIHN1cGVyKF9jb25maWdfMCk7XG4gICAgICAgIHRoaXMuaW5pdENvbmZpZyA9IF9jb25maWdfMDtcbiAgICAgICAgY29uc3QgX2NvbmZpZ18xID0gcmVzb2x2ZUNsaWVudEVuZHBvaW50UGFyYW1ldGVycyhfY29uZmlnXzApO1xuICAgICAgICBjb25zdCBfY29uZmlnXzIgPSByZXNvbHZlVXNlckFnZW50Q29uZmlnKF9jb25maWdfMSk7XG4gICAgICAgIGNvbnN0IF9jb25maWdfMyA9IHJlc29sdmVSZXRyeUNvbmZpZyhfY29uZmlnXzIpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzQgPSByZXNvbHZlUmVnaW9uQ29uZmlnKF9jb25maWdfMyk7XG4gICAgICAgIGNvbnN0IF9jb25maWdfNSA9IHJlc29sdmVIb3N0SGVhZGVyQ29uZmlnKF9jb25maWdfNCk7XG4gICAgICAgIGNvbnN0IF9jb25maWdfNiA9IHJlc29sdmVFbmRwb2ludENvbmZpZyhfY29uZmlnXzUpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzcgPSByZXNvbHZlSHR0cEF1dGhTY2hlbWVDb25maWcoX2NvbmZpZ182KTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ184ID0gcmVzb2x2ZVJ1bnRpbWVFeHRlbnNpb25zKF9jb25maWdfNywgY29uZmlndXJhdGlvbj8uZXh0ZW5zaW9ucyB8fCBbXSk7XG4gICAgICAgIHRoaXMuY29uZmlnID0gX2NvbmZpZ184O1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0VXNlckFnZW50UGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRSZXRyeVBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0Q29udGVudExlbmd0aFBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0SG9zdEhlYWRlclBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0TG9nZ2VyUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRSZWN1cnNpb25EZXRlY3Rpb25QbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldEh0dHBBdXRoU2NoZW1lRW5kcG9pbnRSdWxlU2V0UGx1Z2luKHRoaXMuY29uZmlnLCB7XG4gICAgICAgICAgICBodHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcjogZGVmYXVsdENsb3VkVHJhaWxIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlcixcbiAgICAgICAgICAgIGlkZW50aXR5UHJvdmlkZXJDb25maWdQcm92aWRlcjogYXN5bmMgKGNvbmZpZykgPT4gbmV3IERlZmF1bHRJZGVudGl0eVByb3ZpZGVyQ29uZmlnKHtcbiAgICAgICAgICAgICAgICBcImF3cy5hdXRoI3NpZ3Y0XCI6IGNvbmZpZy5jcmVkZW50aWFscyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRIdHRwU2lnbmluZ1BsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHBhY2thZ2VJbmZvIGZyb20gXCIuLi9wYWNrYWdlLmpzb25cIjtcbmltcG9ydCB7IE5PREVfQVVUSF9TQ0hFTUVfUFJFRkVSRU5DRV9PUFRJT05TLCBlbWl0V2FybmluZ0lmVW5zdXBwb3J0ZWRWZXJzaW9uIGFzIGF3c0NoZWNrVmVyc2lvbiB9IGZyb20gXCJAYXdzLXNkay9jb3JlXCI7XG5pbXBvcnQgeyBkZWZhdWx0UHJvdmlkZXIgYXMgY3JlZGVudGlhbERlZmF1bHRQcm92aWRlciB9IGZyb20gXCJAYXdzLXNkay9jcmVkZW50aWFsLXByb3ZpZGVyLW5vZGVcIjtcbmltcG9ydCB7IE5PREVfQVBQX0lEX0NPTkZJR19PUFRJT05TLCBjcmVhdGVEZWZhdWx0VXNlckFnZW50UHJvdmlkZXIgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC11c2VyLWFnZW50LW5vZGVcIjtcbmltcG9ydCB7IE5PREVfUkVHSU9OX0NPTkZJR19GSUxFX09QVElPTlMsIE5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TLCBOT0RFX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlRfQ09ORklHX09QVElPTlMsIE5PREVfVVNFX0ZJUFNfRU5EUE9JTlRfQ09ORklHX09QVElPTlMsIH0gZnJvbSBcIkBzbWl0aHkvY29uZmlnLXJlc29sdmVyXCI7XG5pbXBvcnQgeyBIYXNoIH0gZnJvbSBcIkBzbWl0aHkvaGFzaC1ub2RlXCI7XG5pbXBvcnQgeyBOT0RFX01BWF9BVFRFTVBUX0NPTkZJR19PUFRJT05TLCBOT0RFX1JFVFJZX01PREVfQ09ORklHX09QVElPTlMgfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLXJldHJ5XCI7XG5pbXBvcnQgeyBsb2FkQ29uZmlnIGFzIGxvYWROb2RlQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvbm9kZS1jb25maWctcHJvdmlkZXJcIjtcbmltcG9ydCB7IE5vZGVIdHRwSGFuZGxlciBhcyBSZXF1ZXN0SGFuZGxlciwgc3RyZWFtQ29sbGVjdG9yIH0gZnJvbSBcIkBzbWl0aHkvbm9kZS1odHRwLWhhbmRsZXJcIjtcbmltcG9ydCB7IGNhbGN1bGF0ZUJvZHlMZW5ndGggfSBmcm9tIFwiQHNtaXRoeS91dGlsLWJvZHktbGVuZ3RoLW5vZGVcIjtcbmltcG9ydCB7IERFRkFVTFRfUkVUUllfTU9ERSB9IGZyb20gXCJAc21pdGh5L3V0aWwtcmV0cnlcIjtcbmltcG9ydCB7IGdldFJ1bnRpbWVDb25maWcgYXMgZ2V0U2hhcmVkUnVudGltZUNvbmZpZyB9IGZyb20gXCIuL3J1bnRpbWVDb25maWcuc2hhcmVkXCI7XG5pbXBvcnQgeyBsb2FkQ29uZmlnc0ZvckRlZmF1bHRNb2RlIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgcmVzb2x2ZURlZmF1bHRzTW9kZUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L3V0aWwtZGVmYXVsdHMtbW9kZS1ub2RlXCI7XG5pbXBvcnQgeyBlbWl0V2FybmluZ0lmVW5zdXBwb3J0ZWRWZXJzaW9uIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuZXhwb3J0IGNvbnN0IGdldFJ1bnRpbWVDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbihwcm9jZXNzLnZlcnNpb24pO1xuICAgIGNvbnN0IGRlZmF1bHRzTW9kZSA9IHJlc29sdmVEZWZhdWx0c01vZGVDb25maWcoY29uZmlnKTtcbiAgICBjb25zdCBkZWZhdWx0Q29uZmlnUHJvdmlkZXIgPSAoKSA9PiBkZWZhdWx0c01vZGUoKS50aGVuKGxvYWRDb25maWdzRm9yRGVmYXVsdE1vZGUpO1xuICAgIGNvbnN0IGNsaWVudFNoYXJlZFZhbHVlcyA9IGdldFNoYXJlZFJ1bnRpbWVDb25maWcoY29uZmlnKTtcbiAgICBhd3NDaGVja1ZlcnNpb24ocHJvY2Vzcy52ZXJzaW9uKTtcbiAgICBjb25zdCBsb2FkZXJDb25maWcgPSB7XG4gICAgICAgIHByb2ZpbGU6IGNvbmZpZz8ucHJvZmlsZSxcbiAgICAgICAgbG9nZ2VyOiBjbGllbnRTaGFyZWRWYWx1ZXMubG9nZ2VyLFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uY2xpZW50U2hhcmVkVmFsdWVzLFxuICAgICAgICAuLi5jb25maWcsXG4gICAgICAgIHJ1bnRpbWU6IFwibm9kZVwiLFxuICAgICAgICBkZWZhdWx0c01vZGUsXG4gICAgICAgIGF1dGhTY2hlbWVQcmVmZXJlbmNlOiBjb25maWc/LmF1dGhTY2hlbWVQcmVmZXJlbmNlID8/IGxvYWROb2RlQ29uZmlnKE5PREVfQVVUSF9TQ0hFTUVfUFJFRkVSRU5DRV9PUFRJT05TLCBsb2FkZXJDb25maWcpLFxuICAgICAgICBib2R5TGVuZ3RoQ2hlY2tlcjogY29uZmlnPy5ib2R5TGVuZ3RoQ2hlY2tlciA/PyBjYWxjdWxhdGVCb2R5TGVuZ3RoLFxuICAgICAgICBjcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyOiBjb25maWc/LmNyZWRlbnRpYWxEZWZhdWx0UHJvdmlkZXIgPz8gY3JlZGVudGlhbERlZmF1bHRQcm92aWRlcixcbiAgICAgICAgZGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyOiBjb25maWc/LmRlZmF1bHRVc2VyQWdlbnRQcm92aWRlciA/P1xuICAgICAgICAgICAgY3JlYXRlRGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyKHsgc2VydmljZUlkOiBjbGllbnRTaGFyZWRWYWx1ZXMuc2VydmljZUlkLCBjbGllbnRWZXJzaW9uOiBwYWNrYWdlSW5mby52ZXJzaW9uIH0pLFxuICAgICAgICBtYXhBdHRlbXB0czogY29uZmlnPy5tYXhBdHRlbXB0cyA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX01BWF9BVFRFTVBUX0NPTkZJR19PUFRJT05TLCBjb25maWcpLFxuICAgICAgICByZWdpb246IGNvbmZpZz8ucmVnaW9uID8/XG4gICAgICAgICAgICBsb2FkTm9kZUNvbmZpZyhOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUywgeyAuLi5OT0RFX1JFR0lPTl9DT05GSUdfRklMRV9PUFRJT05TLCAuLi5sb2FkZXJDb25maWcgfSksXG4gICAgICAgIHJlcXVlc3RIYW5kbGVyOiBSZXF1ZXN0SGFuZGxlci5jcmVhdGUoY29uZmlnPy5yZXF1ZXN0SGFuZGxlciA/PyBkZWZhdWx0Q29uZmlnUHJvdmlkZXIpLFxuICAgICAgICByZXRyeU1vZGU6IGNvbmZpZz8ucmV0cnlNb2RlID8/XG4gICAgICAgICAgICBsb2FkTm9kZUNvbmZpZyh7XG4gICAgICAgICAgICAgICAgLi4uTk9ERV9SRVRSWV9NT0RFX0NPTkZJR19PUFRJT05TLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGFzeW5jICgpID0+IChhd2FpdCBkZWZhdWx0Q29uZmlnUHJvdmlkZXIoKSkucmV0cnlNb2RlIHx8IERFRkFVTFRfUkVUUllfTU9ERSxcbiAgICAgICAgICAgIH0sIGNvbmZpZyksXG4gICAgICAgIHNoYTI1NjogY29uZmlnPy5zaGEyNTYgPz8gSGFzaC5iaW5kKG51bGwsIFwic2hhMjU2XCIpLFxuICAgICAgICBzdHJlYW1Db2xsZWN0b3I6IGNvbmZpZz8uc3RyZWFtQ29sbGVjdG9yID8/IHN0cmVhbUNvbGxlY3RvcixcbiAgICAgICAgdXNlRHVhbHN0YWNrRW5kcG9pbnQ6IGNvbmZpZz8udXNlRHVhbHN0YWNrRW5kcG9pbnQgPz8gbG9hZE5vZGVDb25maWcoTk9ERV9VU0VfRFVBTFNUQUNLX0VORFBPSU5UX0NPTkZJR19PUFRJT05TLCBsb2FkZXJDb25maWcpLFxuICAgICAgICB1c2VGaXBzRW5kcG9pbnQ6IGNvbmZpZz8udXNlRmlwc0VuZHBvaW50ID8/IGxvYWROb2RlQ29uZmlnKE5PREVfVVNFX0ZJUFNfRU5EUE9JTlRfQ09ORklHX09QVElPTlMsIGxvYWRlckNvbmZpZyksXG4gICAgICAgIHVzZXJBZ2VudEFwcElkOiBjb25maWc/LnVzZXJBZ2VudEFwcElkID8/IGxvYWROb2RlQ29uZmlnKE5PREVfQVBQX0lEX0NPTkZJR19PUFRJT05TLCBsb2FkZXJDb25maWcpLFxuICAgIH07XG59O1xuIiwiaW1wb3J0IHsgQXdzU2RrU2lnVjRTaWduZXIgfSBmcm9tIFwiQGF3cy1zZGsvY29yZVwiO1xuaW1wb3J0IHsgTm9PcExvZ2dlciB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IHBhcnNlVXJsIH0gZnJvbSBcIkBzbWl0aHkvdXJsLXBhcnNlclwiO1xuaW1wb3J0IHsgZnJvbUJhc2U2NCwgdG9CYXNlNjQgfSBmcm9tIFwiQHNtaXRoeS91dGlsLWJhc2U2NFwiO1xuaW1wb3J0IHsgZnJvbVV0ZjgsIHRvVXRmOCB9IGZyb20gXCJAc21pdGh5L3V0aWwtdXRmOFwiO1xuaW1wb3J0IHsgZGVmYXVsdENsb3VkVHJhaWxIdHRwQXV0aFNjaGVtZVByb3ZpZGVyIH0gZnJvbSBcIi4vYXV0aC9odHRwQXV0aFNjaGVtZVByb3ZpZGVyXCI7XG5pbXBvcnQgeyBkZWZhdWx0RW5kcG9pbnRSZXNvbHZlciB9IGZyb20gXCIuL2VuZHBvaW50L2VuZHBvaW50UmVzb2x2ZXJcIjtcbmV4cG9ydCBjb25zdCBnZXRSdW50aW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFwaVZlcnNpb246IFwiMjAxMy0xMS0wMVwiLFxuICAgICAgICBiYXNlNjREZWNvZGVyOiBjb25maWc/LmJhc2U2NERlY29kZXIgPz8gZnJvbUJhc2U2NCxcbiAgICAgICAgYmFzZTY0RW5jb2RlcjogY29uZmlnPy5iYXNlNjRFbmNvZGVyID8/IHRvQmFzZTY0LFxuICAgICAgICBkaXNhYmxlSG9zdFByZWZpeDogY29uZmlnPy5kaXNhYmxlSG9zdFByZWZpeCA/PyBmYWxzZSxcbiAgICAgICAgZW5kcG9pbnRQcm92aWRlcjogY29uZmlnPy5lbmRwb2ludFByb3ZpZGVyID8/IGRlZmF1bHRFbmRwb2ludFJlc29sdmVyLFxuICAgICAgICBleHRlbnNpb25zOiBjb25maWc/LmV4dGVuc2lvbnMgPz8gW10sXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lUHJvdmlkZXI6IGNvbmZpZz8uaHR0cEF1dGhTY2hlbWVQcm92aWRlciA/PyBkZWZhdWx0Q2xvdWRUcmFpbEh0dHBBdXRoU2NoZW1lUHJvdmlkZXIsXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lczogY29uZmlnPy5odHRwQXV0aFNjaGVtZXMgPz8gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNjaGVtZUlkOiBcImF3cy5hdXRoI3NpZ3Y0XCIsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHlQcm92aWRlcjogKGlwYykgPT4gaXBjLmdldElkZW50aXR5UHJvdmlkZXIoXCJhd3MuYXV0aCNzaWd2NFwiKSxcbiAgICAgICAgICAgICAgICBzaWduZXI6IG5ldyBBd3NTZGtTaWdWNFNpZ25lcigpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbG9nZ2VyOiBjb25maWc/LmxvZ2dlciA/PyBuZXcgTm9PcExvZ2dlcigpLFxuICAgICAgICBzZXJ2aWNlSWQ6IGNvbmZpZz8uc2VydmljZUlkID8/IFwiQ2xvdWRUcmFpbFwiLFxuICAgICAgICB1cmxQYXJzZXI6IGNvbmZpZz8udXJsUGFyc2VyID8/IHBhcnNlVXJsLFxuICAgICAgICB1dGY4RGVjb2RlcjogY29uZmlnPy51dGY4RGVjb2RlciA/PyBmcm9tVXRmOCxcbiAgICAgICAgdXRmOEVuY29kZXI6IGNvbmZpZz8udXRmOEVuY29kZXIgPz8gdG9VdGY4LFxuICAgIH07XG59O1xuIiwiaW1wb3J0IHsgZ2V0QXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgcmVzb2x2ZUF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sIH0gZnJvbSBcIkBhd3Mtc2RrL3JlZ2lvbi1jb25maWctcmVzb2x2ZXJcIjtcbmltcG9ydCB7IGdldEh0dHBIYW5kbGVyRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgcmVzb2x2ZUh0dHBIYW5kbGVyUnVudGltZUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IGdldERlZmF1bHRFeHRlbnNpb25Db25maWd1cmF0aW9uLCByZXNvbHZlRGVmYXVsdFJ1bnRpbWVDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sIHJlc29sdmVIdHRwQXV0aFJ1bnRpbWVDb25maWcgfSBmcm9tIFwiLi9hdXRoL2h0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvblwiO1xuZXhwb3J0IGNvbnN0IHJlc29sdmVSdW50aW1lRXh0ZW5zaW9ucyA9IChydW50aW1lQ29uZmlnLCBleHRlbnNpb25zKSA9PiB7XG4gICAgY29uc3QgZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oZ2V0QXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbihydW50aW1lQ29uZmlnKSwgZ2V0RGVmYXVsdEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZyksIGdldEh0dHBIYW5kbGVyRXh0ZW5zaW9uQ29uZmlndXJhdGlvbihydW50aW1lQ29uZmlnKSwgZ2V0SHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uKHJ1bnRpbWVDb25maWcpKTtcbiAgICBleHRlbnNpb25zLmZvckVhY2goKGV4dGVuc2lvbikgPT4gZXh0ZW5zaW9uLmNvbmZpZ3VyZShleHRlbnNpb25Db25maWd1cmF0aW9uKSk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocnVudGltZUNvbmZpZywgcmVzb2x2ZUF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24oZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiksIHJlc29sdmVEZWZhdWx0UnVudGltZUNvbmZpZyhleHRlbnNpb25Db25maWd1cmF0aW9uKSwgcmVzb2x2ZUh0dHBIYW5kbGVyUnVudGltZUNvbmZpZyhleHRlbnNpb25Db25maWd1cmF0aW9uKSwgcmVzb2x2ZUh0dHBBdXRoUnVudGltZUNvbmZpZyhleHRlbnNpb25Db25maWd1cmF0aW9uKSk7XG59O1xuIiwiZXhwb3J0IGNvbnN0IGdldEh0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiA9IChydW50aW1lQ29uZmlnKSA9PiB7XG4gICAgY29uc3QgX2h0dHBBdXRoU2NoZW1lcyA9IHJ1bnRpbWVDb25maWcuaHR0cEF1dGhTY2hlbWVzO1xuICAgIGxldCBfaHR0cEF1dGhTY2hlbWVQcm92aWRlciA9IHJ1bnRpbWVDb25maWcuaHR0cEF1dGhTY2hlbWVQcm92aWRlcjtcbiAgICBsZXQgX2NyZWRlbnRpYWxzID0gcnVudGltZUNvbmZpZy5jcmVkZW50aWFscztcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXRIdHRwQXV0aFNjaGVtZShodHRwQXV0aFNjaGVtZSkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBfaHR0cEF1dGhTY2hlbWVzLmZpbmRJbmRleCgoc2NoZW1lKSA9PiBzY2hlbWUuc2NoZW1lSWQgPT09IGh0dHBBdXRoU2NoZW1lLnNjaGVtZUlkKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBfaHR0cEF1dGhTY2hlbWVzLnB1c2goaHR0cEF1dGhTY2hlbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgX2h0dHBBdXRoU2NoZW1lcy5zcGxpY2UoaW5kZXgsIDEsIGh0dHBBdXRoU2NoZW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVzKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9odHRwQXV0aFNjaGVtZXM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldEh0dHBBdXRoU2NoZW1lUHJvdmlkZXIoaHR0cEF1dGhTY2hlbWVQcm92aWRlcikge1xuICAgICAgICAgICAgX2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPSBodHRwQXV0aFNjaGVtZVByb3ZpZGVyO1xuICAgICAgICB9LFxuICAgICAgICBodHRwQXV0aFNjaGVtZVByb3ZpZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9odHRwQXV0aFNjaGVtZVByb3ZpZGVyO1xuICAgICAgICB9LFxuICAgICAgICBzZXRDcmVkZW50aWFscyhjcmVkZW50aWFscykge1xuICAgICAgICAgICAgX2NyZWRlbnRpYWxzID0gY3JlZGVudGlhbHM7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWRlbnRpYWxzKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9jcmVkZW50aWFscztcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlSHR0cEF1dGhSdW50aW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGh0dHBBdXRoU2NoZW1lczogY29uZmlnLmh0dHBBdXRoU2NoZW1lcygpLFxuICAgICAgICBodHRwQXV0aFNjaGVtZVByb3ZpZGVyOiBjb25maWcuaHR0cEF1dGhTY2hlbWVQcm92aWRlcigpLFxuICAgICAgICBjcmVkZW50aWFsczogY29uZmlnLmNyZWRlbnRpYWxzKCksXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fU2VydmljZUV4Y2VwdGlvbiwgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5leHBvcnQgeyBfX1NlcnZpY2VFeGNlcHRpb24gfTtcbmV4cG9ydCBjbGFzcyBDbG91ZFRyYWlsU2VydmljZUV4Y2VwdGlvbiBleHRlbmRzIF9fU2VydmljZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENsb3VkVHJhaWxTZXJ2aWNlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ2xvdWRUcmFpbFNlcnZpY2VFeGNlcHRpb24gYXMgX19CYXNlRXhjZXB0aW9uIH0gZnJvbSBcIi4vQ2xvdWRUcmFpbFNlcnZpY2VFeGNlcHRpb25cIjtcbmV4cG9ydCBjbGFzcyBBY2Nlc3NEZW5pZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkFjY2Vzc0RlbmllZEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQWNjZXNzRGVuaWVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEFjY2Vzc0RlbmllZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEFjY291bnRIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJBY2NvdW50SGFzT25nb2luZ0ltcG9ydEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQWNjb3VudEhhc09uZ29pbmdJbXBvcnRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQWNjb3VudEhhc09uZ29pbmdJbXBvcnRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBY2NvdW50Tm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkFjY291bnROb3RGb3VuZEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQWNjb3VudE5vdEZvdW5kRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEFjY291bnROb3RGb3VuZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEFjY291bnROb3RSZWdpc3RlcmVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJBY2NvdW50Tm90UmVnaXN0ZXJlZEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQWNjb3VudE5vdFJlZ2lzdGVyZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQWNjb3VudE5vdFJlZ2lzdGVyZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBY2NvdW50UmVnaXN0ZXJlZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiQWNjb3VudFJlZ2lzdGVyZWRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkFjY291bnRSZWdpc3RlcmVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEFjY291bnRSZWdpc3RlcmVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ2hhbm5lbEFSTkludmFsaWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkNoYW5uZWxBUk5JbnZhbGlkRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJDaGFubmVsQVJOSW52YWxpZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDaGFubmVsQVJOSW52YWxpZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENoYW5uZWxOb3RGb3VuZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiQ2hhbm5lbE5vdEZvdW5kRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJDaGFubmVsTm90Rm91bmRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ2hhbm5lbE5vdEZvdW5kRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ2xvdWRUcmFpbEFSTkludmFsaWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkNsb3VkVHJhaWxBUk5JbnZhbGlkRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJDbG91ZFRyYWlsQVJOSW52YWxpZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDbG91ZFRyYWlsQVJOSW52YWxpZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENvbmZsaWN0RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJDb25mbGljdEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ29uZmxpY3RFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ29uZmxpY3RFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBFdmVudERhdGFTdG9yZUFSTkludmFsaWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkV2ZW50RGF0YVN0b3JlQVJOSW52YWxpZEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiRXZlbnREYXRhU3RvcmVBUk5JbnZhbGlkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEV2ZW50RGF0YVN0b3JlQVJOSW52YWxpZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEV2ZW50RGF0YVN0b3JlTm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkV2ZW50RGF0YVN0b3JlTm90Rm91bmRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkV2ZW50RGF0YVN0b3JlTm90Rm91bmRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgRXZlbnREYXRhU3RvcmVOb3RGb3VuZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEluYWN0aXZlRXZlbnREYXRhU3RvcmVFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkluYWN0aXZlRXZlbnREYXRhU3RvcmVFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkluYWN0aXZlRXZlbnREYXRhU3RvcmVFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW5hY3RpdmVFdmVudERhdGFTdG9yZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRUYWdQYXJhbWV0ZXJFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludmFsaWRUYWdQYXJhbWV0ZXJFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRUYWdQYXJhbWV0ZXJFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFRhZ1BhcmFtZXRlckV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRUcmFpbE5hbWVFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludmFsaWRUcmFpbE5hbWVFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRUcmFpbE5hbWVFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFRyYWlsTmFtZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE5vTWFuYWdlbWVudEFjY291bnRTTFJFeGlzdHNFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIk5vTWFuYWdlbWVudEFjY291bnRTTFJFeGlzdHNFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIk5vTWFuYWdlbWVudEFjY291bnRTTFJFeGlzdHNFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTm9NYW5hZ2VtZW50QWNjb3VudFNMUkV4aXN0c0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE5vdE9yZ2FuaXphdGlvbk1hc3RlckFjY291bnRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIk5vdE9yZ2FuaXphdGlvbk1hc3RlckFjY291bnRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIk5vdE9yZ2FuaXphdGlvbk1hc3RlckFjY291bnRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTm90T3JnYW5pemF0aW9uTWFzdGVyQWNjb3VudEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE9wZXJhdGlvbk5vdFBlcm1pdHRlZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiT3BlcmF0aW9uTm90UGVybWl0dGVkRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJPcGVyYXRpb25Ob3RQZXJtaXR0ZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgT3BlcmF0aW9uTm90UGVybWl0dGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUmVzb3VyY2VUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJSZXNvdXJjZVR5cGVOb3RTdXBwb3J0ZWRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlJlc291cmNlVHlwZU5vdFN1cHBvcnRlZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBSZXNvdXJjZVR5cGVOb3RTdXBwb3J0ZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBUYWdzTGltaXRFeGNlZWRlZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiVGFnc0xpbWl0RXhjZWVkZWRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlRhZ3NMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFRhZ3NMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIlVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJVbnN1cHBvcnRlZE9wZXJhdGlvbkV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBVbnN1cHBvcnRlZE9wZXJhdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEJpbGxpbmdNb2RlID0ge1xuICAgIEVYVEVOREFCTEVfUkVURU5USU9OX1BSSUNJTkc6IFwiRVhURU5EQUJMRV9SRVRFTlRJT05fUFJJQ0lOR1wiLFxuICAgIEZJWEVEX1JFVEVOVElPTl9QUklDSU5HOiBcIkZJWEVEX1JFVEVOVElPTl9QUklDSU5HXCIsXG59O1xuZXhwb3J0IGNvbnN0IFF1ZXJ5U3RhdHVzID0ge1xuICAgIENBTkNFTExFRDogXCJDQU5DRUxMRURcIixcbiAgICBGQUlMRUQ6IFwiRkFJTEVEXCIsXG4gICAgRklOSVNIRUQ6IFwiRklOSVNIRURcIixcbiAgICBRVUVVRUQ6IFwiUVVFVUVEXCIsXG4gICAgUlVOTklORzogXCJSVU5OSU5HXCIsXG4gICAgVElNRURfT1VUOiBcIlRJTUVEX09VVFwiLFxufTtcbmV4cG9ydCBjbGFzcyBJbmFjdGl2ZVF1ZXJ5RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbmFjdGl2ZVF1ZXJ5RXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbmFjdGl2ZVF1ZXJ5RXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEluYWN0aXZlUXVlcnlFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkUGFyYW1ldGVyRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkUGFyYW1ldGVyRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkUGFyYW1ldGVyRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRQYXJhbWV0ZXJFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBRdWVyeUlkTm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIlF1ZXJ5SWROb3RGb3VuZEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiUXVlcnlJZE5vdEZvdW5kRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFF1ZXJ5SWROb3RGb3VuZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENhbm5vdERlbGVnYXRlTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkNhbm5vdERlbGVnYXRlTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkNhbm5vdERlbGVnYXRlTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ2Fubm90RGVsZWdhdGVNYW5hZ2VtZW50QWNjb3VudEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENoYW5uZWxBbHJlYWR5RXhpc3RzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJDaGFubmVsQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ2hhbm5lbEFscmVhZHlFeGlzdHNFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ2hhbm5lbEFscmVhZHlFeGlzdHNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDaGFubmVsRXhpc3RzRm9yRURTRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJDaGFubmVsRXhpc3RzRm9yRURTRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJDaGFubmVsRXhpc3RzRm9yRURTRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENoYW5uZWxFeGlzdHNGb3JFRFNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDaGFubmVsTWF4TGltaXRFeGNlZWRlZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiQ2hhbm5lbE1heExpbWl0RXhjZWVkZWRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkNoYW5uZWxNYXhMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENoYW5uZWxNYXhMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgRGVzdGluYXRpb25UeXBlID0ge1xuICAgIEFXU19TRVJWSUNFOiBcIkFXU19TRVJWSUNFXCIsXG4gICAgRVZFTlRfREFUQV9TVE9SRTogXCJFVkVOVF9EQVRBX1NUT1JFXCIsXG59O1xuZXhwb3J0IGNsYXNzIEludmFsaWRFdmVudERhdGFTdG9yZUNhdGVnb3J5RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkRXZlbnREYXRhU3RvcmVDYXRlZ29yeUV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZEV2ZW50RGF0YVN0b3JlQ2F0ZWdvcnlFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZEV2ZW50RGF0YVN0b3JlQ2F0ZWdvcnlFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkU291cmNlRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkU291cmNlRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkU291cmNlRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRTb3VyY2VFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBSZWZyZXNoU2NoZWR1bGVGcmVxdWVuY3lVbml0ID0ge1xuICAgIERBWVM6IFwiREFZU1wiLFxuICAgIEhPVVJTOiBcIkhPVVJTXCIsXG59O1xuZXhwb3J0IGNvbnN0IFJlZnJlc2hTY2hlZHVsZVN0YXR1cyA9IHtcbiAgICBESVNBQkxFRDogXCJESVNBQkxFRFwiLFxuICAgIEVOQUJMRUQ6IFwiRU5BQkxFRFwiLFxufTtcbmV4cG9ydCBjb25zdCBEYXNoYm9hcmRUeXBlID0ge1xuICAgIENVU1RPTTogXCJDVVNUT01cIixcbiAgICBNQU5BR0VEOiBcIk1BTkFHRURcIixcbn07XG5leHBvcnQgY2xhc3MgSW5zdWZmaWNpZW50RW5jcnlwdGlvblBvbGljeUV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW5zdWZmaWNpZW50RW5jcnlwdGlvblBvbGljeUV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW5zdWZmaWNpZW50RW5jcnlwdGlvblBvbGljeUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnN1ZmZpY2llbnRFbmNyeXB0aW9uUG9saWN5RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZFF1ZXJ5U3RhdGVtZW50RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkUXVlcnlTdGF0ZW1lbnRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRRdWVyeVN0YXRlbWVudEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkUXVlcnlTdGF0ZW1lbnRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBTZXJ2aWNlUXVvdGFFeGNlZWRlZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiU2VydmljZVF1b3RhRXhjZWVkZWRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlNlcnZpY2VRdW90YUV4Y2VlZGVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFNlcnZpY2VRdW90YUV4Y2VlZGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ2xvdWRUcmFpbEFjY2Vzc05vdEVuYWJsZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkNsb3VkVHJhaWxBY2Nlc3NOb3RFbmFibGVkRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJDbG91ZFRyYWlsQWNjZXNzTm90RW5hYmxlZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDbG91ZFRyYWlsQWNjZXNzTm90RW5hYmxlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEV2ZW50RGF0YVN0b3JlU3RhdHVzID0ge1xuICAgIENSRUFURUQ6IFwiQ1JFQVRFRFwiLFxuICAgIEVOQUJMRUQ6IFwiRU5BQkxFRFwiLFxuICAgIFBFTkRJTkdfREVMRVRJT046IFwiUEVORElOR19ERUxFVElPTlwiLFxuICAgIFNUQVJUSU5HX0lOR0VTVElPTjogXCJTVEFSVElOR19JTkdFU1RJT05cIixcbiAgICBTVE9QUEVEX0lOR0VTVElPTjogXCJTVE9QUEVEX0lOR0VTVElPTlwiLFxuICAgIFNUT1BQSU5HX0lOR0VTVElPTjogXCJTVE9QUElOR19JTkdFU1RJT05cIixcbn07XG5leHBvcnQgY2xhc3MgRXZlbnREYXRhU3RvcmVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJFdmVudERhdGFTdG9yZUFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkV2ZW50RGF0YVN0b3JlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBFdmVudERhdGFTdG9yZUFscmVhZHlFeGlzdHNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBFdmVudERhdGFTdG9yZU1heExpbWl0RXhjZWVkZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkV2ZW50RGF0YVN0b3JlTWF4TGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiRXZlbnREYXRhU3RvcmVNYXhMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEV2ZW50RGF0YVN0b3JlTWF4TGltaXRFeGNlZWRlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEluc3VmZmljaWVudERlcGVuZGVuY3lTZXJ2aWNlQWNjZXNzUGVybWlzc2lvbkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW5zdWZmaWNpZW50RGVwZW5kZW5jeVNlcnZpY2VBY2Nlc3NQZXJtaXNzaW9uRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnN1ZmZpY2llbnREZXBlbmRlbmN5U2VydmljZUFjY2Vzc1Blcm1pc3Npb25FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW5zdWZmaWNpZW50RGVwZW5kZW5jeVNlcnZpY2VBY2Nlc3NQZXJtaXNzaW9uRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZEV2ZW50U2VsZWN0b3JzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkRXZlbnRTZWxlY3RvcnNFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRFdmVudFNlbGVjdG9yc0V4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkRXZlbnRTZWxlY3RvcnNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkS21zS2V5SWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludmFsaWRLbXNLZXlJZEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZEttc0tleUlkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRLbXNLZXlJZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEttc0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiS21zRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJLbXNFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgS21zRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgS21zS2V5Tm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkttc0tleU5vdEZvdW5kRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJLbXNLZXlOb3RGb3VuZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBLbXNLZXlOb3RGb3VuZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE9yZ2FuaXphdGlvbk5vdEluQWxsRmVhdHVyZXNNb2RlRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJPcmdhbml6YXRpb25Ob3RJbkFsbEZlYXR1cmVzTW9kZUV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiT3JnYW5pemF0aW9uTm90SW5BbGxGZWF0dXJlc01vZGVFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgT3JnYW5pemF0aW9uTm90SW5BbGxGZWF0dXJlc01vZGVFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBPcmdhbml6YXRpb25zTm90SW5Vc2VFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIk9yZ2FuaXphdGlvbnNOb3RJblVzZUV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiT3JnYW5pemF0aW9uc05vdEluVXNlRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE9yZ2FuaXphdGlvbnNOb3RJblVzZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENsb3VkVHJhaWxJbnZhbGlkQ2xpZW50VG9rZW5JZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiQ2xvdWRUcmFpbEludmFsaWRDbGllbnRUb2tlbklkRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJDbG91ZFRyYWlsSW52YWxpZENsaWVudFRva2VuSWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ2xvdWRUcmFpbEludmFsaWRDbGllbnRUb2tlbklkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ2xvdWRXYXRjaExvZ3NEZWxpdmVyeVVuYXZhaWxhYmxlRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJDbG91ZFdhdGNoTG9nc0RlbGl2ZXJ5VW5hdmFpbGFibGVFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkNsb3VkV2F0Y2hMb2dzRGVsaXZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDbG91ZFdhdGNoTG9nc0RlbGl2ZXJ5VW5hdmFpbGFibGVFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnN1ZmZpY2llbnRTM0J1Y2tldFBvbGljeUV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW5zdWZmaWNpZW50UzNCdWNrZXRQb2xpY3lFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkluc3VmZmljaWVudFMzQnVja2V0UG9saWN5RXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEluc3VmZmljaWVudFMzQnVja2V0UG9saWN5RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW5zdWZmaWNpZW50U25zVG9waWNQb2xpY3lFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkluc3VmZmljaWVudFNuc1RvcGljUG9saWN5RXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnN1ZmZpY2llbnRTbnNUb3BpY1BvbGljeUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnN1ZmZpY2llbnRTbnNUb3BpY1BvbGljeUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRDbG91ZFdhdGNoTG9nc0xvZ0dyb3VwQXJuRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkQ2xvdWRXYXRjaExvZ3NMb2dHcm91cEFybkV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZENsb3VkV2F0Y2hMb2dzTG9nR3JvdXBBcm5FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZENsb3VkV2F0Y2hMb2dzTG9nR3JvdXBBcm5FeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkQ2xvdWRXYXRjaExvZ3NSb2xlQXJuRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkQ2xvdWRXYXRjaExvZ3NSb2xlQXJuRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkQ2xvdWRXYXRjaExvZ3NSb2xlQXJuRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRDbG91ZFdhdGNoTG9nc1JvbGVBcm5FeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvbkV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFBhcmFtZXRlckNvbWJpbmF0aW9uRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRTM0J1Y2tldE5hbWVFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludmFsaWRTM0J1Y2tldE5hbWVFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRTM0J1Y2tldE5hbWVFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFMzQnVja2V0TmFtZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRTM1ByZWZpeEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW52YWxpZFMzUHJlZml4RXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkUzNQcmVmaXhFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFMzUHJlZml4RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZFNuc1RvcGljTmFtZUV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW52YWxpZFNuc1RvcGljTmFtZUV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFNuc1RvcGljTmFtZUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkU25zVG9waWNOYW1lRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgS21zS2V5RGlzYWJsZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkttc0tleURpc2FibGVkRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJLbXNLZXlEaXNhYmxlZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBLbXNLZXlEaXNhYmxlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE1heGltdW1OdW1iZXJPZlRyYWlsc0V4Y2VlZGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJNYXhpbXVtTnVtYmVyT2ZUcmFpbHNFeGNlZWRlZEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiTWF4aW11bU51bWJlck9mVHJhaWxzRXhjZWVkZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTWF4aW11bU51bWJlck9mVHJhaWxzRXhjZWVkZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBTM0J1Y2tldERvZXNOb3RFeGlzdEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiUzNCdWNrZXREb2VzTm90RXhpc3RFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlMzQnVja2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFMzQnVja2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVGhyb3R0bGluZ0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiVGhyb3R0bGluZ0V4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiVGhyb3R0bGluZ0V4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUaHJvdHRsaW5nRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVHJhaWxBbHJlYWR5RXhpc3RzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJUcmFpbEFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlRyYWlsQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUcmFpbEFscmVhZHlFeGlzdHNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBUcmFpbE5vdFByb3ZpZGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJUcmFpbE5vdFByb3ZpZGVkRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJUcmFpbE5vdFByb3ZpZGVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFRyYWlsTm90UHJvdmlkZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBFdmVudERhdGFTdG9yZUZlZGVyYXRpb25FbmFibGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJFdmVudERhdGFTdG9yZUZlZGVyYXRpb25FbmFibGVkRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJFdmVudERhdGFTdG9yZUZlZGVyYXRpb25FbmFibGVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEV2ZW50RGF0YVN0b3JlRmVkZXJhdGlvbkVuYWJsZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBFdmVudERhdGFTdG9yZUhhc09uZ29pbmdJbXBvcnRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkV2ZW50RGF0YVN0b3JlSGFzT25nb2luZ0ltcG9ydEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiRXZlbnREYXRhU3RvcmVIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEV2ZW50RGF0YVN0b3JlSGFzT25nb2luZ0ltcG9ydEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEV2ZW50RGF0YVN0b3JlVGVybWluYXRpb25Qcm90ZWN0ZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkV2ZW50RGF0YVN0b3JlVGVybWluYXRpb25Qcm90ZWN0ZWRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkV2ZW50RGF0YVN0b3JlVGVybWluYXRpb25Qcm90ZWN0ZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgRXZlbnREYXRhU3RvcmVUZXJtaW5hdGlvblByb3RlY3RlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJlc291cmNlQVJOTm90VmFsaWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIlJlc291cmNlQVJOTm90VmFsaWRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlJlc291cmNlQVJOTm90VmFsaWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgUmVzb3VyY2VBUk5Ob3RWYWxpZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJlc291cmNlUG9saWN5Tm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIlJlc291cmNlUG9saWN5Tm90Rm91bmRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlJlc291cmNlUG9saWN5Tm90Rm91bmRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgUmVzb3VyY2VQb2xpY3lOb3RGb3VuZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRIb21lUmVnaW9uRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkSG9tZVJlZ2lvbkV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZEhvbWVSZWdpb25FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZEhvbWVSZWdpb25FeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBUcmFpbE5vdEZvdW5kRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJUcmFpbE5vdEZvdW5kRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJUcmFpbE5vdEZvdW5kRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFRyYWlsTm90Rm91bmRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBOb3RPcmdhbml6YXRpb25NYW5hZ2VtZW50QWNjb3VudEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiTm90T3JnYW5pemF0aW9uTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIk5vdE9yZ2FuaXphdGlvbk1hbmFnZW1lbnRBY2NvdW50RXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE5vdE9yZ2FuaXphdGlvbk1hbmFnZW1lbnRBY2NvdW50RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgRGVsaXZlcnlTdGF0dXMgPSB7XG4gICAgQUNDRVNTX0RFTklFRDogXCJBQ0NFU1NfREVOSUVEXCIsXG4gICAgQUNDRVNTX0RFTklFRF9TSUdOSU5HX0ZJTEU6IFwiQUNDRVNTX0RFTklFRF9TSUdOSU5HX0ZJTEVcIixcbiAgICBDQU5DRUxMRUQ6IFwiQ0FOQ0VMTEVEXCIsXG4gICAgRkFJTEVEOiBcIkZBSUxFRFwiLFxuICAgIEZBSUxFRF9TSUdOSU5HX0ZJTEU6IFwiRkFJTEVEX1NJR05JTkdfRklMRVwiLFxuICAgIFBFTkRJTkc6IFwiUEVORElOR1wiLFxuICAgIFJFU09VUkNFX05PVF9GT1VORDogXCJSRVNPVVJDRV9OT1RfRk9VTkRcIixcbiAgICBTVUNDRVNTOiBcIlNVQ0NFU1NcIixcbiAgICBVTktOT1dOOiBcIlVOS05PV05cIixcbn07XG5leHBvcnQgY2xhc3MgQ29uY3VycmVudE1vZGlmaWNhdGlvbkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiQ29uY3VycmVudE1vZGlmaWNhdGlvbkV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ29uY3VycmVudE1vZGlmaWNhdGlvbkV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDb25jdXJyZW50TW9kaWZpY2F0aW9uRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgRmVkZXJhdGlvblN0YXR1cyA9IHtcbiAgICBESVNBQkxFRDogXCJESVNBQkxFRFwiLFxuICAgIERJU0FCTElORzogXCJESVNBQkxJTkdcIixcbiAgICBFTkFCTEVEOiBcIkVOQUJMRURcIixcbiAgICBFTkFCTElORzogXCJFTkFCTElOR1wiLFxufTtcbmV4cG9ydCBjbGFzcyBHZW5lcmF0ZVJlc3BvbnNlRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJHZW5lcmF0ZVJlc3BvbnNlRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJHZW5lcmF0ZVJlc3BvbnNlRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEdlbmVyYXRlUmVzcG9uc2VFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBEYXNoYm9hcmRTdGF0dXMgPSB7XG4gICAgQ1JFQVRFRDogXCJDUkVBVEVEXCIsXG4gICAgQ1JFQVRJTkc6IFwiQ1JFQVRJTkdcIixcbiAgICBERUxFVElORzogXCJERUxFVElOR1wiLFxuICAgIFVQREFURUQ6IFwiVVBEQVRFRFwiLFxuICAgIFVQREFUSU5HOiBcIlVQREFUSU5HXCIsXG59O1xuZXhwb3J0IGNvbnN0IFR5cGUgPSB7XG4gICAgUmVxdWVzdENvbnRleHQ6IFwiUmVxdWVzdENvbnRleHRcIixcbiAgICBUYWdDb250ZXh0OiBcIlRhZ0NvbnRleHRcIixcbn07XG5leHBvcnQgY29uc3QgTWF4RXZlbnRTaXplID0ge1xuICAgIExhcmdlOiBcIkxhcmdlXCIsXG4gICAgU3RhbmRhcmQ6IFwiU3RhbmRhcmRcIixcbn07XG5leHBvcnQgY2xhc3MgSW52YWxpZEV2ZW50RGF0YVN0b3JlU3RhdHVzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkRXZlbnREYXRhU3RvcmVTdGF0dXNFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRFdmVudERhdGFTdG9yZVN0YXR1c0V4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkRXZlbnREYXRhU3RvcmVTdGF0dXNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBSZWFkV3JpdGVUeXBlID0ge1xuICAgIEFsbDogXCJBbGxcIixcbiAgICBSZWFkT25seTogXCJSZWFkT25seVwiLFxuICAgIFdyaXRlT25seTogXCJXcml0ZU9ubHlcIixcbn07XG5leHBvcnQgY29uc3QgSW1wb3J0U3RhdHVzID0ge1xuICAgIENPTVBMRVRFRDogXCJDT01QTEVURURcIixcbiAgICBGQUlMRUQ6IFwiRkFJTEVEXCIsXG4gICAgSU5JVElBTElaSU5HOiBcIklOSVRJQUxJWklOR1wiLFxuICAgIElOX1BST0dSRVNTOiBcIklOX1BST0dSRVNTXCIsXG4gICAgU1RPUFBFRDogXCJTVE9QUEVEXCIsXG59O1xuZXhwb3J0IGNsYXNzIEltcG9ydE5vdEZvdW5kRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbXBvcnROb3RGb3VuZEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW1wb3J0Tm90Rm91bmRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW1wb3J0Tm90Rm91bmRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBJbnNpZ2h0VHlwZSA9IHtcbiAgICBBcGlDYWxsUmF0ZUluc2lnaHQ6IFwiQXBpQ2FsbFJhdGVJbnNpZ2h0XCIsXG4gICAgQXBpRXJyb3JSYXRlSW5zaWdodDogXCJBcGlFcnJvclJhdGVJbnNpZ2h0XCIsXG59O1xuZXhwb3J0IGNsYXNzIEluc2lnaHROb3RFbmFibGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnNpZ2h0Tm90RW5hYmxlZEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW5zaWdodE5vdEVuYWJsZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW5zaWdodE5vdEVuYWJsZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkTWF4UmVzdWx0c0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW52YWxpZE1heFJlc3VsdHNFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRNYXhSZXN1bHRzRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRNYXhSZXN1bHRzRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgSW1wb3J0RmFpbHVyZVN0YXR1cyA9IHtcbiAgICBGQUlMRUQ6IFwiRkFJTEVEXCIsXG4gICAgUkVUUlk6IFwiUkVUUllcIixcbiAgICBTVUNDRUVERUQ6IFwiU1VDQ0VFREVEXCIsXG59O1xuZXhwb3J0IGNvbnN0IEluc2lnaHRzTWV0cmljRGF0YVR5cGUgPSB7XG4gICAgRklMTF9XSVRIX1pFUk9TOiBcIkZpbGxXaXRoWmVyb3NcIixcbiAgICBOT05fWkVST19EQVRBOiBcIk5vblplcm9EYXRhXCIsXG59O1xuZXhwb3J0IGNsYXNzIEludmFsaWRUaW1lUmFuZ2VFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludmFsaWRUaW1lUmFuZ2VFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRUaW1lUmFuZ2VFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFRpbWVSYW5nZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRUb2tlbkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW52YWxpZFRva2VuRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkVG9rZW5FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFRva2VuRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZERhdGVSYW5nZUV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW52YWxpZERhdGVSYW5nZUV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZERhdGVSYW5nZUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkRGF0ZVJhbmdlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZFF1ZXJ5U3RhdHVzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkUXVlcnlTdGF0dXNFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRRdWVyeVN0YXR1c0V4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkUXVlcnlTdGF0dXNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkRXZlbnRDYXRlZ29yeUV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW52YWxpZEV2ZW50Q2F0ZWdvcnlFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRFdmVudENhdGVnb3J5RXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRFdmVudENhdGVnb3J5RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZExvb2t1cEF0dHJpYnV0ZXNFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludmFsaWRMb29rdXBBdHRyaWJ1dGVzRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkTG9va3VwQXR0cmlidXRlc0V4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkTG9va3VwQXR0cmlidXRlc0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEV2ZW50Q2F0ZWdvcnkgPSB7XG4gICAgSW5zaWdodDogXCJpbnNpZ2h0XCIsXG59O1xuZXhwb3J0IGNvbnN0IExvb2t1cEF0dHJpYnV0ZUtleSA9IHtcbiAgICBBQ0NFU1NfS0VZX0lEOiBcIkFjY2Vzc0tleUlkXCIsXG4gICAgRVZFTlRfSUQ6IFwiRXZlbnRJZFwiLFxuICAgIEVWRU5UX05BTUU6IFwiRXZlbnROYW1lXCIsXG4gICAgRVZFTlRfU09VUkNFOiBcIkV2ZW50U291cmNlXCIsXG4gICAgUkVBRF9PTkxZOiBcIlJlYWRPbmx5XCIsXG4gICAgUkVTT1VSQ0VfTkFNRTogXCJSZXNvdXJjZU5hbWVcIixcbiAgICBSRVNPVVJDRV9UWVBFOiBcIlJlc291cmNlVHlwZVwiLFxuICAgIFVTRVJOQU1FOiBcIlVzZXJuYW1lXCIsXG59O1xuZXhwb3J0IGNsYXNzIEluc3VmZmljaWVudElBTUFjY2Vzc1Blcm1pc3Npb25FeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkluc3VmZmljaWVudElBTUFjY2Vzc1Blcm1pc3Npb25FeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkluc3VmZmljaWVudElBTUFjY2Vzc1Blcm1pc3Npb25FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW5zdWZmaWNpZW50SUFNQWNjZXNzUGVybWlzc2lvbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRJbnNpZ2h0U2VsZWN0b3JzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkSW5zaWdodFNlbGVjdG9yc0V4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZEluc2lnaHRTZWxlY3RvcnNFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZEluc2lnaHRTZWxlY3RvcnNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZVBvbGljeU5vdFZhbGlkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJSZXNvdXJjZVBvbGljeU5vdFZhbGlkRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJSZXNvdXJjZVBvbGljeU5vdFZhbGlkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFJlc291cmNlUG9saWN5Tm90VmFsaWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBEZWxlZ2F0ZWRBZG1pbkFjY291bnRMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJEZWxlZ2F0ZWRBZG1pbkFjY291bnRMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJEZWxlZ2F0ZWRBZG1pbkFjY291bnRMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIERlbGVnYXRlZEFkbWluQWNjb3VudExpbWl0RXhjZWVkZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkSW1wb3J0U291cmNlRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkSW1wb3J0U291cmNlRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkSW1wb3J0U291cmNlRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRJbXBvcnRTb3VyY2VFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBNYXhDb25jdXJyZW50UXVlcmllc0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiTWF4Q29uY3VycmVudFF1ZXJpZXNFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIk1heENvbmN1cnJlbnRRdWVyaWVzRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE1heENvbmN1cnJlbnRRdWVyaWVzRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBsb2FkUmVzdEpzb25FcnJvckNvZGUsIHBhcnNlSnNvbkJvZHkgYXMgcGFyc2VCb2R5LCBwYXJzZUpzb25FcnJvckJvZHkgYXMgcGFyc2VFcnJvckJvZHkgfSBmcm9tIFwiQGF3cy1zZGsvY29yZVwiO1xuaW1wb3J0IHsgSHR0cFJlcXVlc3QgYXMgX19IdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IF9qc29uLCBjb2xsZWN0Qm9keSwgZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uLCBleHBlY3RCb29sZWFuIGFzIF9fZXhwZWN0Qm9vbGVhbiwgZXhwZWN0SW50MzIgYXMgX19leHBlY3RJbnQzMiwgZXhwZWN0TG9uZyBhcyBfX2V4cGVjdExvbmcsIGV4cGVjdE5vbk51bGwgYXMgX19leHBlY3ROb25OdWxsLCBleHBlY3ROdW1iZXIgYXMgX19leHBlY3ROdW1iZXIsIGV4cGVjdFN0cmluZyBhcyBfX2V4cGVjdFN0cmluZywgbGltaXRlZFBhcnNlRG91YmxlIGFzIF9fbGltaXRlZFBhcnNlRG91YmxlLCBsaW1pdGVkUGFyc2VGbG9hdDMyIGFzIF9fbGltaXRlZFBhcnNlRmxvYXQzMiwgcGFyc2VFcG9jaFRpbWVzdGFtcCBhcyBfX3BhcnNlRXBvY2hUaW1lc3RhbXAsIHRha2UsIHdpdGhCYXNlRXhjZXB0aW9uLCB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IENsb3VkVHJhaWxTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fQmFzZUV4Y2VwdGlvbiB9IGZyb20gXCIuLi9tb2RlbHMvQ2xvdWRUcmFpbFNlcnZpY2VFeGNlcHRpb25cIjtcbmltcG9ydCB7IEFjY2Vzc0RlbmllZEV4Y2VwdGlvbiwgQWNjb3VudEhhc09uZ29pbmdJbXBvcnRFeGNlcHRpb24sIEFjY291bnROb3RGb3VuZEV4Y2VwdGlvbiwgQWNjb3VudE5vdFJlZ2lzdGVyZWRFeGNlcHRpb24sIEFjY291bnRSZWdpc3RlcmVkRXhjZXB0aW9uLCBDYW5ub3REZWxlZ2F0ZU1hbmFnZW1lbnRBY2NvdW50RXhjZXB0aW9uLCBDaGFubmVsQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiwgQ2hhbm5lbEFSTkludmFsaWRFeGNlcHRpb24sIENoYW5uZWxFeGlzdHNGb3JFRFNFeGNlcHRpb24sIENoYW5uZWxNYXhMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uLCBDaGFubmVsTm90Rm91bmRFeGNlcHRpb24sIENsb3VkVHJhaWxBY2Nlc3NOb3RFbmFibGVkRXhjZXB0aW9uLCBDbG91ZFRyYWlsQVJOSW52YWxpZEV4Y2VwdGlvbiwgQ2xvdWRUcmFpbEludmFsaWRDbGllbnRUb2tlbklkRXhjZXB0aW9uLCBDbG91ZFdhdGNoTG9nc0RlbGl2ZXJ5VW5hdmFpbGFibGVFeGNlcHRpb24sIENvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb24sIENvbmZsaWN0RXhjZXB0aW9uLCBEZWxlZ2F0ZWRBZG1pbkFjY291bnRMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uLCBFdmVudERhdGFTdG9yZUFscmVhZHlFeGlzdHNFeGNlcHRpb24sIEV2ZW50RGF0YVN0b3JlQVJOSW52YWxpZEV4Y2VwdGlvbiwgRXZlbnREYXRhU3RvcmVGZWRlcmF0aW9uRW5hYmxlZEV4Y2VwdGlvbiwgRXZlbnREYXRhU3RvcmVIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uLCBFdmVudERhdGFTdG9yZU1heExpbWl0RXhjZWVkZWRFeGNlcHRpb24sIEV2ZW50RGF0YVN0b3JlTm90Rm91bmRFeGNlcHRpb24sIEV2ZW50RGF0YVN0b3JlVGVybWluYXRpb25Qcm90ZWN0ZWRFeGNlcHRpb24sIEdlbmVyYXRlUmVzcG9uc2VFeGNlcHRpb24sIEltcG9ydE5vdEZvdW5kRXhjZXB0aW9uLCBJbmFjdGl2ZUV2ZW50RGF0YVN0b3JlRXhjZXB0aW9uLCBJbmFjdGl2ZVF1ZXJ5RXhjZXB0aW9uLCBJbnNpZ2h0Tm90RW5hYmxlZEV4Y2VwdGlvbiwgSW5zdWZmaWNpZW50RGVwZW5kZW5jeVNlcnZpY2VBY2Nlc3NQZXJtaXNzaW9uRXhjZXB0aW9uLCBJbnN1ZmZpY2llbnRFbmNyeXB0aW9uUG9saWN5RXhjZXB0aW9uLCBJbnN1ZmZpY2llbnRJQU1BY2Nlc3NQZXJtaXNzaW9uRXhjZXB0aW9uLCBJbnN1ZmZpY2llbnRTM0J1Y2tldFBvbGljeUV4Y2VwdGlvbiwgSW5zdWZmaWNpZW50U25zVG9waWNQb2xpY3lFeGNlcHRpb24sIEludmFsaWRDbG91ZFdhdGNoTG9nc0xvZ0dyb3VwQXJuRXhjZXB0aW9uLCBJbnZhbGlkQ2xvdWRXYXRjaExvZ3NSb2xlQXJuRXhjZXB0aW9uLCBJbnZhbGlkRGF0ZVJhbmdlRXhjZXB0aW9uLCBJbnZhbGlkRXZlbnRDYXRlZ29yeUV4Y2VwdGlvbiwgSW52YWxpZEV2ZW50RGF0YVN0b3JlQ2F0ZWdvcnlFeGNlcHRpb24sIEludmFsaWRFdmVudERhdGFTdG9yZVN0YXR1c0V4Y2VwdGlvbiwgSW52YWxpZEV2ZW50U2VsZWN0b3JzRXhjZXB0aW9uLCBJbnZhbGlkSG9tZVJlZ2lvbkV4Y2VwdGlvbiwgSW52YWxpZEltcG9ydFNvdXJjZUV4Y2VwdGlvbiwgSW52YWxpZEluc2lnaHRTZWxlY3RvcnNFeGNlcHRpb24sIEludmFsaWRLbXNLZXlJZEV4Y2VwdGlvbiwgSW52YWxpZExvb2t1cEF0dHJpYnV0ZXNFeGNlcHRpb24sIEludmFsaWRNYXhSZXN1bHRzRXhjZXB0aW9uLCBJbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uLCBJbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb24sIEludmFsaWRQYXJhbWV0ZXJFeGNlcHRpb24sIEludmFsaWRRdWVyeVN0YXRlbWVudEV4Y2VwdGlvbiwgSW52YWxpZFF1ZXJ5U3RhdHVzRXhjZXB0aW9uLCBJbnZhbGlkUzNCdWNrZXROYW1lRXhjZXB0aW9uLCBJbnZhbGlkUzNQcmVmaXhFeGNlcHRpb24sIEludmFsaWRTbnNUb3BpY05hbWVFeGNlcHRpb24sIEludmFsaWRTb3VyY2VFeGNlcHRpb24sIEludmFsaWRUYWdQYXJhbWV0ZXJFeGNlcHRpb24sIEludmFsaWRUaW1lUmFuZ2VFeGNlcHRpb24sIEludmFsaWRUb2tlbkV4Y2VwdGlvbiwgSW52YWxpZFRyYWlsTmFtZUV4Y2VwdGlvbiwgS21zRXhjZXB0aW9uLCBLbXNLZXlEaXNhYmxlZEV4Y2VwdGlvbiwgS21zS2V5Tm90Rm91bmRFeGNlcHRpb24sIE1heENvbmN1cnJlbnRRdWVyaWVzRXhjZXB0aW9uLCBNYXhpbXVtTnVtYmVyT2ZUcmFpbHNFeGNlZWRlZEV4Y2VwdGlvbiwgTm9NYW5hZ2VtZW50QWNjb3VudFNMUkV4aXN0c0V4Y2VwdGlvbiwgTm90T3JnYW5pemF0aW9uTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb24sIE5vdE9yZ2FuaXphdGlvbk1hc3RlckFjY291bnRFeGNlcHRpb24sIE9wZXJhdGlvbk5vdFBlcm1pdHRlZEV4Y2VwdGlvbiwgT3JnYW5pemF0aW9uTm90SW5BbGxGZWF0dXJlc01vZGVFeGNlcHRpb24sIE9yZ2FuaXphdGlvbnNOb3RJblVzZUV4Y2VwdGlvbiwgUXVlcnlJZE5vdEZvdW5kRXhjZXB0aW9uLCBSZXNvdXJjZUFSTk5vdFZhbGlkRXhjZXB0aW9uLCBSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uLCBSZXNvdXJjZVBvbGljeU5vdEZvdW5kRXhjZXB0aW9uLCBSZXNvdXJjZVBvbGljeU5vdFZhbGlkRXhjZXB0aW9uLCBSZXNvdXJjZVR5cGVOb3RTdXBwb3J0ZWRFeGNlcHRpb24sIFMzQnVja2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uLCBTZXJ2aWNlUXVvdGFFeGNlZWRlZEV4Y2VwdGlvbiwgVGFnc0xpbWl0RXhjZWVkZWRFeGNlcHRpb24sIFRocm90dGxpbmdFeGNlcHRpb24sIFRyYWlsQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiwgVHJhaWxOb3RGb3VuZEV4Y2VwdGlvbiwgVHJhaWxOb3RQcm92aWRlZEV4Y2VwdGlvbiwgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24sIH0gZnJvbSBcIi4uL21vZGVscy9tb2RlbHNfMFwiO1xuZXhwb3J0IGNvbnN0IHNlX0FkZFRhZ3NDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJBZGRUYWdzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DYW5jZWxRdWVyeUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkNhbmNlbFF1ZXJ5XCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVDaGFubmVsQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiQ3JlYXRlQ2hhbm5lbFwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlRGFzaGJvYXJkQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiQ3JlYXRlRGFzaGJvYXJkXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVFdmVudERhdGFTdG9yZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkNyZWF0ZUV2ZW50RGF0YVN0b3JlXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVUcmFpbENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkNyZWF0ZVRyYWlsXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVDaGFubmVsQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiRGVsZXRlQ2hhbm5lbFwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlRGFzaGJvYXJkQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiRGVsZXRlRGFzaGJvYXJkXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVFdmVudERhdGFTdG9yZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkRlbGV0ZUV2ZW50RGF0YVN0b3JlXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVSZXNvdXJjZVBvbGljeUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkRlbGV0ZVJlc291cmNlUG9saWN5XCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVUcmFpbENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkRlbGV0ZVRyYWlsXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXJlZ2lzdGVyT3JnYW5pemF0aW9uRGVsZWdhdGVkQWRtaW5Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJEZXJlZ2lzdGVyT3JnYW5pemF0aW9uRGVsZWdhdGVkQWRtaW5cIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlUXVlcnlDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJEZXNjcmliZVF1ZXJ5XCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVRyYWlsc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkRlc2NyaWJlVHJhaWxzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EaXNhYmxlRmVkZXJhdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkRpc2FibGVGZWRlcmF0aW9uXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9FbmFibGVGZWRlcmF0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiRW5hYmxlRmVkZXJhdGlvblwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2VuZXJhdGVRdWVyeUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkdlbmVyYXRlUXVlcnlcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0dldENoYW5uZWxDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJHZXRDaGFubmVsXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXREYXNoYm9hcmRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJHZXREYXNoYm9hcmRcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0dldEV2ZW50Q29uZmlndXJhdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkdldEV2ZW50Q29uZmlndXJhdGlvblwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0RXZlbnREYXRhU3RvcmVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJHZXRFdmVudERhdGFTdG9yZVwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0RXZlbnRTZWxlY3RvcnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJHZXRFdmVudFNlbGVjdG9yc1wiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0SW1wb3J0Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiR2V0SW1wb3J0XCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXRJbnNpZ2h0U2VsZWN0b3JzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiR2V0SW5zaWdodFNlbGVjdG9yc1wiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0UXVlcnlSZXN1bHRzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiR2V0UXVlcnlSZXN1bHRzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXRSZXNvdXJjZVBvbGljeUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkdldFJlc291cmNlUG9saWN5XCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXRUcmFpbENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkdldFRyYWlsXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXRUcmFpbFN0YXR1c0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkdldFRyYWlsU3RhdHVzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0Q2hhbm5lbHNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJMaXN0Q2hhbm5lbHNcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3REYXNoYm9hcmRzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiTGlzdERhc2hib2FyZHNcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RFdmVudERhdGFTdG9yZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJMaXN0RXZlbnREYXRhU3RvcmVzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0SW1wb3J0RmFpbHVyZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJMaXN0SW1wb3J0RmFpbHVyZXNcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RJbXBvcnRzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiTGlzdEltcG9ydHNcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RJbnNpZ2h0c01ldHJpY0RhdGFDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJMaXN0SW5zaWdodHNNZXRyaWNEYXRhXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShzZV9MaXN0SW5zaWdodHNNZXRyaWNEYXRhUmVxdWVzdChpbnB1dCwgY29udGV4dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0UHVibGljS2V5c0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIkxpc3RQdWJsaWNLZXlzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShzZV9MaXN0UHVibGljS2V5c1JlcXVlc3QoaW5wdXQsIGNvbnRleHQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdFF1ZXJpZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJMaXN0UXVlcmllc1wiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoc2VfTGlzdFF1ZXJpZXNSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RUYWdzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiTGlzdFRhZ3NcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RUcmFpbHNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJMaXN0VHJhaWxzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9Mb29rdXBFdmVudHNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJMb29rdXBFdmVudHNcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHNlX0xvb2t1cEV2ZW50c1JlcXVlc3QoaW5wdXQsIGNvbnRleHQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfUHV0RXZlbnRDb25maWd1cmF0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiUHV0RXZlbnRDb25maWd1cmF0aW9uXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9QdXRFdmVudFNlbGVjdG9yc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlB1dEV2ZW50U2VsZWN0b3JzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9QdXRJbnNpZ2h0U2VsZWN0b3JzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiUHV0SW5zaWdodFNlbGVjdG9yc1wiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfUHV0UmVzb3VyY2VQb2xpY3lDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJQdXRSZXNvdXJjZVBvbGljeVwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfUmVnaXN0ZXJPcmdhbml6YXRpb25EZWxlZ2F0ZWRBZG1pbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlJlZ2lzdGVyT3JnYW5pemF0aW9uRGVsZWdhdGVkQWRtaW5cIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1JlbW92ZVRhZ3NDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJSZW1vdmVUYWdzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9SZXN0b3JlRXZlbnREYXRhU3RvcmVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJSZXN0b3JlRXZlbnREYXRhU3RvcmVcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1NlYXJjaFNhbXBsZVF1ZXJpZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJTZWFyY2hTYW1wbGVRdWVyaWVzXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TdGFydERhc2hib2FyZFJlZnJlc2hDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJTdGFydERhc2hib2FyZFJlZnJlc2hcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1N0YXJ0RXZlbnREYXRhU3RvcmVJbmdlc3Rpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJTdGFydEV2ZW50RGF0YVN0b3JlSW5nZXN0aW9uXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TdGFydEltcG9ydENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlN0YXJ0SW1wb3J0XCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShzZV9TdGFydEltcG9ydFJlcXVlc3QoaW5wdXQsIGNvbnRleHQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU3RhcnRMb2dnaW5nQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiU3RhcnRMb2dnaW5nXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TdGFydFF1ZXJ5Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiU3RhcnRRdWVyeVwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU3RvcEV2ZW50RGF0YVN0b3JlSW5nZXN0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiU3RvcEV2ZW50RGF0YVN0b3JlSW5nZXN0aW9uXCIpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShfanNvbihpbnB1dCkpO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TdG9wSW1wb3J0Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBzaGFyZWRIZWFkZXJzKFwiU3RvcEltcG9ydFwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU3RvcExvZ2dpbmdDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJTdG9wTG9nZ2luZ1wiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlQ2hhbm5lbENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlVwZGF0ZUNoYW5uZWxcIik7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KF9qc29uKGlucHV0KSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZURhc2hib2FyZENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gc2hhcmVkSGVhZGVycyhcIlVwZGF0ZURhc2hib2FyZFwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlRXZlbnREYXRhU3RvcmVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJVcGRhdGVFdmVudERhdGFTdG9yZVwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlVHJhaWxDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHNoYXJlZEhlYWRlcnMoXCJVcGRhdGVUcmFpbFwiKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoX2pzb24oaW5wdXQpKTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3QgZGVfQWRkVGFnc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfQ2FuY2VsUXVlcnlDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZUNoYW5uZWxDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZURhc2hib2FyZENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlRXZlbnREYXRhU3RvcmVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0NyZWF0ZUV2ZW50RGF0YVN0b3JlUmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlVHJhaWxDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUNoYW5uZWxDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZURhc2hib2FyZENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlRXZlbnREYXRhU3RvcmVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZVJlc291cmNlUG9saWN5Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVUcmFpbENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVyZWdpc3Rlck9yZ2FuaXphdGlvbkRlbGVnYXRlZEFkbWluQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZVF1ZXJ5Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EZXNjcmliZVF1ZXJ5UmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVUcmFpbHNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rpc2FibGVGZWRlcmF0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9FbmFibGVGZWRlcmF0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZW5lcmF0ZVF1ZXJ5Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRDaGFubmVsQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9HZXRDaGFubmVsUmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0RGFzaGJvYXJkQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9HZXREYXNoYm9hcmRSZXNwb25zZShkYXRhLCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRFdmVudENvbmZpZ3VyYXRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0dldEV2ZW50RGF0YVN0b3JlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9HZXRFdmVudERhdGFTdG9yZVJlc3BvbnNlKGRhdGEsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0dldEV2ZW50U2VsZWN0b3JzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRJbXBvcnRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0dldEltcG9ydFJlc3BvbnNlKGRhdGEsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0dldEluc2lnaHRTZWxlY3RvcnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0dldFF1ZXJ5UmVzdWx0c0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0UmVzb3VyY2VQb2xpY3lDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0dldFRyYWlsQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRUcmFpbFN0YXR1c0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfR2V0VHJhaWxTdGF0dXNSZXNwb25zZShkYXRhLCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0Q2hhbm5lbHNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3REYXNoYm9hcmRzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0RXZlbnREYXRhU3RvcmVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9MaXN0RXZlbnREYXRhU3RvcmVzUmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdEltcG9ydEZhaWx1cmVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9MaXN0SW1wb3J0RmFpbHVyZXNSZXNwb25zZShkYXRhLCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0SW1wb3J0c0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfTGlzdEltcG9ydHNSZXNwb25zZShkYXRhLCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0SW5zaWdodHNNZXRyaWNEYXRhQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9MaXN0SW5zaWdodHNNZXRyaWNEYXRhUmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFB1YmxpY0tleXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0xpc3RQdWJsaWNLZXlzUmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFF1ZXJpZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0xpc3RRdWVyaWVzUmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFRhZ3NDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RUcmFpbHNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xvb2t1cEV2ZW50c0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfTG9va3VwRXZlbnRzUmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfUHV0RXZlbnRDb25maWd1cmF0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9QdXRFdmVudFNlbGVjdG9yc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfUHV0SW5zaWdodFNlbGVjdG9yc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfUHV0UmVzb3VyY2VQb2xpY3lDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1JlZ2lzdGVyT3JnYW5pemF0aW9uRGVsZWdhdGVkQWRtaW5Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1JlbW92ZVRhZ3NDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1Jlc3RvcmVFdmVudERhdGFTdG9yZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfUmVzdG9yZUV2ZW50RGF0YVN0b3JlUmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU2VhcmNoU2FtcGxlUXVlcmllc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfU2VhcmNoU2FtcGxlUXVlcmllc1Jlc3BvbnNlKGRhdGEsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1N0YXJ0RGFzaGJvYXJkUmVmcmVzaENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU3RhcnRFdmVudERhdGFTdG9yZUluZ2VzdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU3RhcnRJbXBvcnRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1N0YXJ0SW1wb3J0UmVzcG9uc2UoZGF0YSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU3RhcnRMb2dnaW5nQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TdGFydFF1ZXJ5Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBfanNvbihkYXRhKTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TdG9wRXZlbnREYXRhU3RvcmVJbmdlc3Rpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IF9qc29uKGRhdGEpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1N0b3BJbXBvcnRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1N0b3BJbXBvcnRSZXNwb25zZShkYXRhLCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TdG9wTG9nZ2luZ0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlQ2hhbm5lbENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlRGFzaGJvYXJkQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9VcGRhdGVEYXNoYm9hcmRSZXNwb25zZShkYXRhLCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVFdmVudERhdGFTdG9yZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfVXBkYXRlRXZlbnREYXRhU3RvcmVSZXNwb25zZShkYXRhLCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVUcmFpbENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gX2pzb24oZGF0YSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5jb25zdCBkZV9Db21tYW5kRXJyb3IgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcGFyc2VkT3V0cHV0ID0ge1xuICAgICAgICAuLi5vdXRwdXQsXG4gICAgICAgIGJvZHk6IGF3YWl0IHBhcnNlRXJyb3JCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSxcbiAgICB9O1xuICAgIGNvbnN0IGVycm9yQ29kZSA9IGxvYWRSZXN0SnNvbkVycm9yQ29kZShvdXRwdXQsIHBhcnNlZE91dHB1dC5ib2R5KTtcbiAgICBzd2l0Y2ggKGVycm9yQ29kZSkge1xuICAgICAgICBjYXNlIFwiQ2hhbm5lbEFSTkludmFsaWRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNDaGFubmVsQVJOSW52YWxpZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfQ2hhbm5lbEFSTkludmFsaWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNoYW5uZWxOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0NoYW5uZWxOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfQ2hhbm5lbE5vdEZvdW5kRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJDbG91ZFRyYWlsQVJOSW52YWxpZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0Nsb3VkVHJhaWxBUk5JbnZhbGlkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9DbG91ZFRyYWlsQVJOSW52YWxpZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiQ29uZmxpY3RFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNDb25mbGljdEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfQ29uZmxpY3RFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkV2ZW50RGF0YVN0b3JlQVJOSW52YWxpZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0V2ZW50RGF0YVN0b3JlQVJOSW52YWxpZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfRXZlbnREYXRhU3RvcmVBUk5JbnZhbGlkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJFdmVudERhdGFTdG9yZU5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjRXZlbnREYXRhU3RvcmVOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfRXZlbnREYXRhU3RvcmVOb3RGb3VuZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW5hY3RpdmVFdmVudERhdGFTdG9yZUV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0luYWN0aXZlRXZlbnREYXRhU3RvcmVFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0luYWN0aXZlRXZlbnREYXRhU3RvcmVFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRUYWdQYXJhbWV0ZXJFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkVGFnUGFyYW1ldGVyRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkVGFnUGFyYW1ldGVyRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkVHJhaWxOYW1lRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZFRyYWlsTmFtZUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZFRyYWlsTmFtZUV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiTm9NYW5hZ2VtZW50QWNjb3VudFNMUkV4aXN0c0V4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI05vTWFuYWdlbWVudEFjY291bnRTTFJFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX05vTWFuYWdlbWVudEFjY291bnRTTFJFeGlzdHNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIk5vdE9yZ2FuaXphdGlvbk1hc3RlckFjY291bnRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNOb3RPcmdhbml6YXRpb25NYXN0ZXJBY2NvdW50RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9Ob3RPcmdhbml6YXRpb25NYXN0ZXJBY2NvdW50RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJPcGVyYXRpb25Ob3RQZXJtaXR0ZWRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNPcGVyYXRpb25Ob3RQZXJtaXR0ZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX09wZXJhdGlvbk5vdFBlcm1pdHRlZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI1Jlc291cmNlTm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1Jlc291cmNlTm90Rm91bmRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlJlc291cmNlVHlwZU5vdFN1cHBvcnRlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI1Jlc291cmNlVHlwZU5vdFN1cHBvcnRlZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfUmVzb3VyY2VUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJUYWdzTGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI1RhZ3NMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9UYWdzTGltaXRFeGNlZWRlZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNVbnN1cHBvcnRlZE9wZXJhdGlvbkV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkluYWN0aXZlUXVlcnlFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbmFjdGl2ZVF1ZXJ5RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbmFjdGl2ZVF1ZXJ5RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkUGFyYW1ldGVyRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZFBhcmFtZXRlckV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZFBhcmFtZXRlckV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiUXVlcnlJZE5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjUXVlcnlJZE5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9RdWVyeUlkTm90Rm91bmRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNoYW5uZWxBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjQ2hhbm5lbEFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0NoYW5uZWxBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJDaGFubmVsTWF4TGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0NoYW5uZWxNYXhMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9DaGFubmVsTWF4TGltaXRFeGNlZWRlZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZEV2ZW50RGF0YVN0b3JlQ2F0ZWdvcnlFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkRXZlbnREYXRhU3RvcmVDYXRlZ29yeUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZEV2ZW50RGF0YVN0b3JlQ2F0ZWdvcnlFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRTb3VyY2VFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkU291cmNlRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkU291cmNlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnN1ZmZpY2llbnRFbmNyeXB0aW9uUG9saWN5RXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW5zdWZmaWNpZW50RW5jcnlwdGlvblBvbGljeUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW5zdWZmaWNpZW50RW5jcnlwdGlvblBvbGljeUV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZFF1ZXJ5U3RhdGVtZW50RXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZFF1ZXJ5U3RhdGVtZW50RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkUXVlcnlTdGF0ZW1lbnRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlNlcnZpY2VRdW90YUV4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjU2VydmljZVF1b3RhRXhjZWVkZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1NlcnZpY2VRdW90YUV4Y2VlZGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJDbG91ZFRyYWlsQWNjZXNzTm90RW5hYmxlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0Nsb3VkVHJhaWxBY2Nlc3NOb3RFbmFibGVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9DbG91ZFRyYWlsQWNjZXNzTm90RW5hYmxlZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiRXZlbnREYXRhU3RvcmVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjRXZlbnREYXRhU3RvcmVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9FdmVudERhdGFTdG9yZUFscmVhZHlFeGlzdHNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkV2ZW50RGF0YVN0b3JlTWF4TGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0V2ZW50RGF0YVN0b3JlTWF4TGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfRXZlbnREYXRhU3RvcmVNYXhMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnN1ZmZpY2llbnREZXBlbmRlbmN5U2VydmljZUFjY2Vzc1Blcm1pc3Npb25FeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnN1ZmZpY2llbnREZXBlbmRlbmN5U2VydmljZUFjY2Vzc1Blcm1pc3Npb25FeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0luc3VmZmljaWVudERlcGVuZGVuY3lTZXJ2aWNlQWNjZXNzUGVybWlzc2lvbkV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZEV2ZW50U2VsZWN0b3JzRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZEV2ZW50U2VsZWN0b3JzRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkRXZlbnRTZWxlY3RvcnNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRLbXNLZXlJZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0ludmFsaWRLbXNLZXlJZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZEttc0tleUlkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJLbXNFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNLbXNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ttc0V4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiS21zS2V5Tm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNLbXNLZXlOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfS21zS2V5Tm90Rm91bmRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIk9yZ2FuaXphdGlvbk5vdEluQWxsRmVhdHVyZXNNb2RlRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjT3JnYW5pemF0aW9uTm90SW5BbGxGZWF0dXJlc01vZGVFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX09yZ2FuaXphdGlvbk5vdEluQWxsRmVhdHVyZXNNb2RlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJPcmdhbml6YXRpb25zTm90SW5Vc2VFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNPcmdhbml6YXRpb25zTm90SW5Vc2VFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX09yZ2FuaXphdGlvbnNOb3RJblVzZUV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiQ2xvdWRUcmFpbEludmFsaWRDbGllbnRUb2tlbklkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjQ2xvdWRUcmFpbEludmFsaWRDbGllbnRUb2tlbklkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9DbG91ZFRyYWlsSW52YWxpZENsaWVudFRva2VuSWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNsb3VkV2F0Y2hMb2dzRGVsaXZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0Nsb3VkV2F0Y2hMb2dzRGVsaXZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfQ2xvdWRXYXRjaExvZ3NEZWxpdmVyeVVuYXZhaWxhYmxlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnN1ZmZpY2llbnRTM0J1Y2tldFBvbGljeUV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0luc3VmZmljaWVudFMzQnVja2V0UG9saWN5RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnN1ZmZpY2llbnRTM0J1Y2tldFBvbGljeUV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW5zdWZmaWNpZW50U25zVG9waWNQb2xpY3lFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnN1ZmZpY2llbnRTbnNUb3BpY1BvbGljeUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW5zdWZmaWNpZW50U25zVG9waWNQb2xpY3lFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRDbG91ZFdhdGNoTG9nc0xvZ0dyb3VwQXJuRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZENsb3VkV2F0Y2hMb2dzTG9nR3JvdXBBcm5FeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRDbG91ZFdhdGNoTG9nc0xvZ0dyb3VwQXJuRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkQ2xvdWRXYXRjaExvZ3NSb2xlQXJuRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZENsb3VkV2F0Y2hMb2dzUm9sZUFybkV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZENsb3VkV2F0Y2hMb2dzUm9sZUFybkV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZFBhcmFtZXRlckNvbWJpbmF0aW9uRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZFBhcmFtZXRlckNvbWJpbmF0aW9uRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRTM0J1Y2tldE5hbWVFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkUzNCdWNrZXROYW1lRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkUzNCdWNrZXROYW1lRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkUzNQcmVmaXhFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkUzNQcmVmaXhFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRTM1ByZWZpeEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZFNuc1RvcGljTmFtZUV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0ludmFsaWRTbnNUb3BpY05hbWVFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRTbnNUb3BpY05hbWVFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkttc0tleURpc2FibGVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjS21zS2V5RGlzYWJsZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ttc0tleURpc2FibGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJNYXhpbXVtTnVtYmVyT2ZUcmFpbHNFeGNlZWRlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI01heGltdW1OdW1iZXJPZlRyYWlsc0V4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9NYXhpbXVtTnVtYmVyT2ZUcmFpbHNFeGNlZWRlZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiUzNCdWNrZXREb2VzTm90RXhpc3RFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNTM0J1Y2tldERvZXNOb3RFeGlzdEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfUzNCdWNrZXREb2VzTm90RXhpc3RFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlRocm90dGxpbmdFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNUaHJvdHRsaW5nRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9UaHJvdHRsaW5nRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJUcmFpbEFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNUcmFpbEFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1RyYWlsQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiVHJhaWxOb3RQcm92aWRlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI1RyYWlsTm90UHJvdmlkZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1RyYWlsTm90UHJvdmlkZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNoYW5uZWxFeGlzdHNGb3JFRFNFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNDaGFubmVsRXhpc3RzRm9yRURTRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9DaGFubmVsRXhpc3RzRm9yRURTRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJFdmVudERhdGFTdG9yZUZlZGVyYXRpb25FbmFibGVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjRXZlbnREYXRhU3RvcmVGZWRlcmF0aW9uRW5hYmxlZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfRXZlbnREYXRhU3RvcmVGZWRlcmF0aW9uRW5hYmxlZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiRXZlbnREYXRhU3RvcmVIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjRXZlbnREYXRhU3RvcmVIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9FdmVudERhdGFTdG9yZUhhc09uZ29pbmdJbXBvcnRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkV2ZW50RGF0YVN0b3JlVGVybWluYXRpb25Qcm90ZWN0ZWRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNFdmVudERhdGFTdG9yZVRlcm1pbmF0aW9uUHJvdGVjdGVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9FdmVudERhdGFTdG9yZVRlcm1pbmF0aW9uUHJvdGVjdGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJSZXNvdXJjZUFSTk5vdFZhbGlkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjUmVzb3VyY2VBUk5Ob3RWYWxpZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfUmVzb3VyY2VBUk5Ob3RWYWxpZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiUmVzb3VyY2VQb2xpY3lOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI1Jlc291cmNlUG9saWN5Tm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1Jlc291cmNlUG9saWN5Tm90Rm91bmRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRIb21lUmVnaW9uRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZEhvbWVSZWdpb25FeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRIb21lUmVnaW9uRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJUcmFpbE5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjVHJhaWxOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfVHJhaWxOb3RGb3VuZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiQWNjb3VudE5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjQWNjb3VudE5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9BY2NvdW50Tm90Rm91bmRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkFjY291bnROb3RSZWdpc3RlcmVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjQWNjb3VudE5vdFJlZ2lzdGVyZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0FjY291bnROb3RSZWdpc3RlcmVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJOb3RPcmdhbml6YXRpb25NYW5hZ2VtZW50QWNjb3VudEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI05vdE9yZ2FuaXphdGlvbk1hbmFnZW1lbnRBY2NvdW50RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9Ob3RPcmdhbml6YXRpb25NYW5hZ2VtZW50QWNjb3VudEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiQWNjZXNzRGVuaWVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjQWNjZXNzRGVuaWVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9BY2Nlc3NEZW5pZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNDb25jdXJyZW50TW9kaWZpY2F0aW9uRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9Db25jdXJyZW50TW9kaWZpY2F0aW9uRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJHZW5lcmF0ZVJlc3BvbnNlRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjR2VuZXJhdGVSZXNwb25zZUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfR2VuZXJhdGVSZXNwb25zZUV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZEV2ZW50RGF0YVN0b3JlU3RhdHVzRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZEV2ZW50RGF0YVN0b3JlU3RhdHVzRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkRXZlbnREYXRhU3RvcmVTdGF0dXNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkltcG9ydE5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW1wb3J0Tm90Rm91bmRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ltcG9ydE5vdEZvdW5kRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnNpZ2h0Tm90RW5hYmxlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0luc2lnaHROb3RFbmFibGVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnNpZ2h0Tm90RW5hYmxlZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZE1heFJlc3VsdHNFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkTWF4UmVzdWx0c0V4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZE1heFJlc3VsdHNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWROZXh0VG9rZW5FeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkVGltZVJhbmdlRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZFRpbWVSYW5nZUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZFRpbWVSYW5nZUV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZFRva2VuRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZFRva2VuRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkVG9rZW5FeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWREYXRlUmFuZ2VFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkRGF0ZVJhbmdlRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkRGF0ZVJhbmdlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkUXVlcnlTdGF0dXNFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkUXVlcnlTdGF0dXNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRRdWVyeVN0YXR1c0V4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZEV2ZW50Q2F0ZWdvcnlFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkRXZlbnRDYXRlZ29yeUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZEV2ZW50Q2F0ZWdvcnlFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRMb29rdXBBdHRyaWJ1dGVzRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW52YWxpZExvb2t1cEF0dHJpYnV0ZXNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRMb29rdXBBdHRyaWJ1dGVzRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnN1ZmZpY2llbnRJQU1BY2Nlc3NQZXJtaXNzaW9uRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjSW5zdWZmaWNpZW50SUFNQWNjZXNzUGVybWlzc2lvbkV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW5zdWZmaWNpZW50SUFNQWNjZXNzUGVybWlzc2lvbkV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZEluc2lnaHRTZWxlY3RvcnNFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNJbnZhbGlkSW5zaWdodFNlbGVjdG9yc0V4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZEluc2lnaHRTZWxlY3RvcnNFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlJlc291cmNlUG9saWN5Tm90VmFsaWRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNSZXNvdXJjZVBvbGljeU5vdFZhbGlkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9SZXNvdXJjZVBvbGljeU5vdFZhbGlkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJBY2NvdW50UmVnaXN0ZXJlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0FjY291bnRSZWdpc3RlcmVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9BY2NvdW50UmVnaXN0ZXJlZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiQ2Fubm90RGVsZWdhdGVNYW5hZ2VtZW50QWNjb3VudEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0Nhbm5vdERlbGVnYXRlTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0Nhbm5vdERlbGVnYXRlTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkRlbGVnYXRlZEFkbWluQWNjb3VudExpbWl0RXhjZWVkZWRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR0cmFpbCNEZWxlZ2F0ZWRBZG1pbkFjY291bnRMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9EZWxlZ2F0ZWRBZG1pbkFjY291bnRMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJBY2NvdW50SGFzT25nb2luZ0ltcG9ydEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0FjY291bnRIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9BY2NvdW50SGFzT25nb2luZ0ltcG9ydEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW52YWxpZEltcG9ydFNvdXJjZUV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHRyYWlsI0ludmFsaWRJbXBvcnRTb3VyY2VFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRJbXBvcnRTb3VyY2VFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIk1heENvbmN1cnJlbnRRdWVyaWVzRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3VkdHJhaWwjTWF4Q29uY3VycmVudFF1ZXJpZXNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX01heENvbmN1cnJlbnRRdWVyaWVzRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRCb2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dEZWZhdWx0RXJyb3Ioe1xuICAgICAgICAgICAgICAgIG91dHB1dCxcbiAgICAgICAgICAgICAgICBwYXJzZWRCb2R5LFxuICAgICAgICAgICAgICAgIGVycm9yQ29kZSxcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn07XG5jb25zdCBkZV9BY2Nlc3NEZW5pZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBBY2Nlc3NEZW5pZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0FjY291bnRIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQWNjb3VudEhhc09uZ29pbmdJbXBvcnRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0FjY291bnROb3RGb3VuZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEFjY291bnROb3RGb3VuZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfQWNjb3VudE5vdFJlZ2lzdGVyZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBBY2NvdW50Tm90UmVnaXN0ZXJlZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfQWNjb3VudFJlZ2lzdGVyZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBBY2NvdW50UmVnaXN0ZXJlZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfQ2Fubm90RGVsZWdhdGVNYW5hZ2VtZW50QWNjb3VudEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IENhbm5vdERlbGVnYXRlTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0NoYW5uZWxBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQ2hhbm5lbEFscmVhZHlFeGlzdHNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0NoYW5uZWxBUk5JbnZhbGlkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQ2hhbm5lbEFSTkludmFsaWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0NoYW5uZWxFeGlzdHNGb3JFRFNFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBDaGFubmVsRXhpc3RzRm9yRURTRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9DaGFubmVsTWF4TGltaXRFeGNlZWRlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IENoYW5uZWxNYXhMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9DaGFubmVsTm90Rm91bmRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBDaGFubmVsTm90Rm91bmRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0Nsb3VkVHJhaWxBY2Nlc3NOb3RFbmFibGVkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQ2xvdWRUcmFpbEFjY2Vzc05vdEVuYWJsZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0Nsb3VkVHJhaWxBUk5JbnZhbGlkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQ2xvdWRUcmFpbEFSTkludmFsaWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0Nsb3VkVHJhaWxJbnZhbGlkQ2xpZW50VG9rZW5JZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IENsb3VkVHJhaWxJbnZhbGlkQ2xpZW50VG9rZW5JZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfQ2xvdWRXYXRjaExvZ3NEZWxpdmVyeVVuYXZhaWxhYmxlRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQ2xvdWRXYXRjaExvZ3NEZWxpdmVyeVVuYXZhaWxhYmxlRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9Db25jdXJyZW50TW9kaWZpY2F0aW9uRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQ29uY3VycmVudE1vZGlmaWNhdGlvbkV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfQ29uZmxpY3RFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBDb25mbGljdEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfRGVsZWdhdGVkQWRtaW5BY2NvdW50TGltaXRFeGNlZWRlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IERlbGVnYXRlZEFkbWluQWNjb3VudExpbWl0RXhjZWVkZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0V2ZW50RGF0YVN0b3JlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEV2ZW50RGF0YVN0b3JlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfRXZlbnREYXRhU3RvcmVBUk5JbnZhbGlkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgRXZlbnREYXRhU3RvcmVBUk5JbnZhbGlkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9FdmVudERhdGFTdG9yZUZlZGVyYXRpb25FbmFibGVkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgRXZlbnREYXRhU3RvcmVGZWRlcmF0aW9uRW5hYmxlZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfRXZlbnREYXRhU3RvcmVIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgRXZlbnREYXRhU3RvcmVIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9FdmVudERhdGFTdG9yZU1heExpbWl0RXhjZWVkZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBFdmVudERhdGFTdG9yZU1heExpbWl0RXhjZWVkZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0V2ZW50RGF0YVN0b3JlTm90Rm91bmRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBFdmVudERhdGFTdG9yZU5vdEZvdW5kRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9FdmVudERhdGFTdG9yZVRlcm1pbmF0aW9uUHJvdGVjdGVkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgRXZlbnREYXRhU3RvcmVUZXJtaW5hdGlvblByb3RlY3RlZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfR2VuZXJhdGVSZXNwb25zZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEdlbmVyYXRlUmVzcG9uc2VFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ltcG9ydE5vdEZvdW5kRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW1wb3J0Tm90Rm91bmRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0luYWN0aXZlRXZlbnREYXRhU3RvcmVFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbmFjdGl2ZUV2ZW50RGF0YVN0b3JlRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbmFjdGl2ZVF1ZXJ5RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW5hY3RpdmVRdWVyeUV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW5zaWdodE5vdEVuYWJsZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnNpZ2h0Tm90RW5hYmxlZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW5zdWZmaWNpZW50RGVwZW5kZW5jeVNlcnZpY2VBY2Nlc3NQZXJtaXNzaW9uRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW5zdWZmaWNpZW50RGVwZW5kZW5jeVNlcnZpY2VBY2Nlc3NQZXJtaXNzaW9uRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnN1ZmZpY2llbnRFbmNyeXB0aW9uUG9saWN5RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW5zdWZmaWNpZW50RW5jcnlwdGlvblBvbGljeUV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW5zdWZmaWNpZW50SUFNQWNjZXNzUGVybWlzc2lvbkV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEluc3VmZmljaWVudElBTUFjY2Vzc1Blcm1pc3Npb25FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0luc3VmZmljaWVudFMzQnVja2V0UG9saWN5RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW5zdWZmaWNpZW50UzNCdWNrZXRQb2xpY3lFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0luc3VmZmljaWVudFNuc1RvcGljUG9saWN5RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW5zdWZmaWNpZW50U25zVG9waWNQb2xpY3lFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRDbG91ZFdhdGNoTG9nc0xvZ0dyb3VwQXJuRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZENsb3VkV2F0Y2hMb2dzTG9nR3JvdXBBcm5FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRDbG91ZFdhdGNoTG9nc1JvbGVBcm5FeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkQ2xvdWRXYXRjaExvZ3NSb2xlQXJuRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkRGF0ZVJhbmdlRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZERhdGVSYW5nZUV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZEV2ZW50Q2F0ZWdvcnlFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkRXZlbnRDYXRlZ29yeUV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZEV2ZW50RGF0YVN0b3JlQ2F0ZWdvcnlFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkRXZlbnREYXRhU3RvcmVDYXRlZ29yeUV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZEV2ZW50RGF0YVN0b3JlU3RhdHVzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZEV2ZW50RGF0YVN0b3JlU3RhdHVzRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkRXZlbnRTZWxlY3RvcnNFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkRXZlbnRTZWxlY3RvcnNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRIb21lUmVnaW9uRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZEhvbWVSZWdpb25FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRJbXBvcnRTb3VyY2VFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkSW1wb3J0U291cmNlRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkSW5zaWdodFNlbGVjdG9yc0V4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRJbnNpZ2h0U2VsZWN0b3JzRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkS21zS2V5SWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkS21zS2V5SWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRMb29rdXBBdHRyaWJ1dGVzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZExvb2t1cEF0dHJpYnV0ZXNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRNYXhSZXN1bHRzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZE1heFJlc3VsdHNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWROZXh0VG9rZW5FeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRQYXJhbWV0ZXJFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkUGFyYW1ldGVyRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkUXVlcnlTdGF0ZW1lbnRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkUXVlcnlTdGF0ZW1lbnRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRRdWVyeVN0YXR1c0V4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRRdWVyeVN0YXR1c0V4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZFMzQnVja2V0TmFtZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRTM0J1Y2tldE5hbWVFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRTM1ByZWZpeEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRTM1ByZWZpeEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZFNuc1RvcGljTmFtZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRTbnNUb3BpY05hbWVFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRTb3VyY2VFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkU291cmNlRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkVGFnUGFyYW1ldGVyRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZFRhZ1BhcmFtZXRlckV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZFRpbWVSYW5nZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRUaW1lUmFuZ2VFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRUb2tlbkV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRUb2tlbkV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZFRyYWlsTmFtZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRUcmFpbE5hbWVFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ttc0V4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEttc0V4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfS21zS2V5RGlzYWJsZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBLbXNLZXlEaXNhYmxlZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfS21zS2V5Tm90Rm91bmRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBLbXNLZXlOb3RGb3VuZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfTWF4Q29uY3VycmVudFF1ZXJpZXNFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBNYXhDb25jdXJyZW50UXVlcmllc0V4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfTWF4aW11bU51bWJlck9mVHJhaWxzRXhjZWVkZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBNYXhpbXVtTnVtYmVyT2ZUcmFpbHNFeGNlZWRlZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfTm9NYW5hZ2VtZW50QWNjb3VudFNMUkV4aXN0c0V4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IE5vTWFuYWdlbWVudEFjY291bnRTTFJFeGlzdHNFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX05vdE9yZ2FuaXphdGlvbk1hbmFnZW1lbnRBY2NvdW50RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgTm90T3JnYW5pemF0aW9uTWFuYWdlbWVudEFjY291bnRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX05vdE9yZ2FuaXphdGlvbk1hc3RlckFjY291bnRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBOb3RPcmdhbml6YXRpb25NYXN0ZXJBY2NvdW50RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9PcGVyYXRpb25Ob3RQZXJtaXR0ZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBPcGVyYXRpb25Ob3RQZXJtaXR0ZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX09yZ2FuaXphdGlvbk5vdEluQWxsRmVhdHVyZXNNb2RlRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgT3JnYW5pemF0aW9uTm90SW5BbGxGZWF0dXJlc01vZGVFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX09yZ2FuaXphdGlvbnNOb3RJblVzZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IE9yZ2FuaXphdGlvbnNOb3RJblVzZUV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfUXVlcnlJZE5vdEZvdW5kRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgUXVlcnlJZE5vdEZvdW5kRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9SZXNvdXJjZUFSTk5vdFZhbGlkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgUmVzb3VyY2VBUk5Ob3RWYWxpZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX1Jlc291cmNlUG9saWN5Tm90Rm91bmRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IF9qc29uKGJvZHkpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBSZXNvdXJjZVBvbGljeU5vdEZvdW5kRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9SZXNvdXJjZVBvbGljeU5vdFZhbGlkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgUmVzb3VyY2VQb2xpY3lOb3RWYWxpZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfUmVzb3VyY2VUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgUmVzb3VyY2VUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9TM0J1Y2tldERvZXNOb3RFeGlzdEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFMzQnVja2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9TZXJ2aWNlUXVvdGFFeGNlZWRlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFNlcnZpY2VRdW90YUV4Y2VlZGVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9UYWdzTGltaXRFeGNlZWRlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFRhZ3NMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9UaHJvdHRsaW5nRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgVGhyb3R0bGluZ0V4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfVHJhaWxBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgVHJhaWxBbHJlYWR5RXhpc3RzRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9UcmFpbE5vdEZvdW5kRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgVHJhaWxOb3RGb3VuZEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5kZXNlcmlhbGl6ZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgYm9keSk7XG59O1xuY29uc3QgZGVfVHJhaWxOb3RQcm92aWRlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gX2pzb24oYm9keSk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFRyYWlsTm90UHJvdmlkZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX1Vuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBfanNvbihib2R5KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IHNlX0xpc3RJbnNpZ2h0c01ldHJpY0RhdGFSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGF0YVR5cGU6IFtdLFxuICAgICAgICBFbmRUaW1lOiAoXykgPT4gXy5nZXRUaW1lKCkgLyAxXzAwMCxcbiAgICAgICAgRXJyb3JDb2RlOiBbXSxcbiAgICAgICAgRXZlbnROYW1lOiBbXSxcbiAgICAgICAgRXZlbnRTb3VyY2U6IFtdLFxuICAgICAgICBJbnNpZ2h0VHlwZTogW10sXG4gICAgICAgIE1heFJlc3VsdHM6IFtdLFxuICAgICAgICBOZXh0VG9rZW46IFtdLFxuICAgICAgICBQZXJpb2Q6IFtdLFxuICAgICAgICBTdGFydFRpbWU6IChfKSA9PiBfLmdldFRpbWUoKSAvIDFfMDAwLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0xpc3RQdWJsaWNLZXlzUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEVuZFRpbWU6IChfKSA9PiBfLmdldFRpbWUoKSAvIDFfMDAwLFxuICAgICAgICBOZXh0VG9rZW46IFtdLFxuICAgICAgICBTdGFydFRpbWU6IChfKSA9PiBfLmdldFRpbWUoKSAvIDFfMDAwLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0xpc3RRdWVyaWVzUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEVuZFRpbWU6IChfKSA9PiBfLmdldFRpbWUoKSAvIDFfMDAwLFxuICAgICAgICBFdmVudERhdGFTdG9yZTogW10sXG4gICAgICAgIE1heFJlc3VsdHM6IFtdLFxuICAgICAgICBOZXh0VG9rZW46IFtdLFxuICAgICAgICBRdWVyeVN0YXR1czogW10sXG4gICAgICAgIFN0YXJ0VGltZTogKF8pID0+IF8uZ2V0VGltZSgpIC8gMV8wMDAsXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTG9va3VwRXZlbnRzUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEVuZFRpbWU6IChfKSA9PiBfLmdldFRpbWUoKSAvIDFfMDAwLFxuICAgICAgICBFdmVudENhdGVnb3J5OiBbXSxcbiAgICAgICAgTG9va3VwQXR0cmlidXRlczogX2pzb24sXG4gICAgICAgIE1heFJlc3VsdHM6IFtdLFxuICAgICAgICBOZXh0VG9rZW46IFtdLFxuICAgICAgICBTdGFydFRpbWU6IChfKSA9PiBfLmdldFRpbWUoKSAvIDFfMDAwLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1N0YXJ0SW1wb3J0UmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERlc3RpbmF0aW9uczogX2pzb24sXG4gICAgICAgIEVuZEV2ZW50VGltZTogKF8pID0+IF8uZ2V0VGltZSgpIC8gMV8wMDAsXG4gICAgICAgIEltcG9ydElkOiBbXSxcbiAgICAgICAgSW1wb3J0U291cmNlOiBfanNvbixcbiAgICAgICAgU3RhcnRFdmVudFRpbWU6IChfKSA9PiBfLmdldFRpbWUoKSAvIDFfMDAwLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0NyZWF0ZUV2ZW50RGF0YVN0b3JlUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFkdmFuY2VkRXZlbnRTZWxlY3RvcnM6IF9qc29uLFxuICAgICAgICBCaWxsaW5nTW9kZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lc3RhbXA6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIEV2ZW50RGF0YVN0b3JlQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgS21zS2V5SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBNdWx0aVJlZ2lvbkVuYWJsZWQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE9yZ2FuaXphdGlvbkVuYWJsZWQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgUmV0ZW50aW9uUGVyaW9kOiBfX2V4cGVjdEludDMyLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUYWdzTGlzdDogX2pzb24sXG4gICAgICAgIFRlcm1pbmF0aW9uUHJvdGVjdGlvbkVuYWJsZWQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgVXBkYXRlZFRpbWVzdGFtcDogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EZXNjcmliZVF1ZXJ5UmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERlbGl2ZXJ5UzNVcmk6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEZWxpdmVyeVN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEVycm9yTWVzc2FnZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEV2ZW50RGF0YVN0b3JlT3duZXJBY2NvdW50SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBQcm9tcHQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBRdWVyeUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUXVlcnlTdGF0aXN0aWNzOiAoXykgPT4gZGVfUXVlcnlTdGF0aXN0aWNzRm9yRGVzY3JpYmVRdWVyeShfLCBjb250ZXh0KSxcbiAgICAgICAgUXVlcnlTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBRdWVyeVN0cmluZzogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRXZlbnQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjY2Vzc0tleUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ2xvdWRUcmFpbEV2ZW50OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRXZlbnRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEV2ZW50TmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEV2ZW50U291cmNlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRXZlbnRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBSZWFkT25seTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlc291cmNlczogX2pzb24sXG4gICAgICAgIFVzZXJuYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9FdmVudERhdGFTdG9yZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWR2YW5jZWRFdmVudFNlbGVjdG9yczogX2pzb24sXG4gICAgICAgIENyZWF0ZWRUaW1lc3RhbXA6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIEV2ZW50RGF0YVN0b3JlQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTXVsdGlSZWdpb25FbmFibGVkOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBPcmdhbml6YXRpb25FbmFibGVkOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIFJldGVudGlvblBlcmlvZDogX19leHBlY3RJbnQzMixcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGVybWluYXRpb25Qcm90ZWN0aW9uRW5hYmxlZDogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBVcGRhdGVkVGltZXN0YW1wOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0V2ZW50RGF0YVN0b3JlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9FdmVudERhdGFTdG9yZShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9FdmVudHNMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0V2ZW50KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0dldENoYW5uZWxSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2hhbm5lbEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERlc3RpbmF0aW9uczogX2pzb24sXG4gICAgICAgIEluZ2VzdGlvblN0YXR1czogKF8pID0+IGRlX0luZ2VzdGlvblN0YXR1cyhfLCBjb250ZXh0KSxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNvdXJjZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNvdXJjZUNvbmZpZzogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2V0RGFzaGJvYXJkUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENyZWF0ZWRUaW1lc3RhbXA6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIERhc2hib2FyZEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExhc3RSZWZyZXNoRmFpbHVyZVJlYXNvbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExhc3RSZWZyZXNoSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZWZyZXNoU2NoZWR1bGU6IF9qc29uLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZXJtaW5hdGlvblByb3RlY3Rpb25FbmFibGVkOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIFR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBVcGRhdGVkVGltZXN0YW1wOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBXaWRnZXRzOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HZXRFdmVudERhdGFTdG9yZVJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBZHZhbmNlZEV2ZW50U2VsZWN0b3JzOiBfanNvbixcbiAgICAgICAgQmlsbGluZ01vZGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZXN0YW1wOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBFdmVudERhdGFTdG9yZUFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEZlZGVyYXRpb25Sb2xlQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRmVkZXJhdGlvblN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEttc0tleUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTXVsdGlSZWdpb25FbmFibGVkOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBPcmdhbml6YXRpb25FbmFibGVkOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIFBhcnRpdGlvbktleXM6IF9qc29uLFxuICAgICAgICBSZXRlbnRpb25QZXJpb2Q6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRlcm1pbmF0aW9uUHJvdGVjdGlvbkVuYWJsZWQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgVXBkYXRlZFRpbWVzdGFtcDogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HZXRJbXBvcnRSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ3JlYXRlZFRpbWVzdGFtcDogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRGVzdGluYXRpb25zOiBfanNvbixcbiAgICAgICAgRW5kRXZlbnRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBJbXBvcnRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEltcG9ydFNvdXJjZTogX2pzb24sXG4gICAgICAgIEltcG9ydFN0YXRpc3RpY3M6IF9qc29uLFxuICAgICAgICBJbXBvcnRTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGFydEV2ZW50VGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgVXBkYXRlZFRpbWVzdGFtcDogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HZXRUcmFpbFN0YXR1c1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBJc0xvZ2dpbmc6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgTGF0ZXN0Q2xvdWRXYXRjaExvZ3NEZWxpdmVyeUVycm9yOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGF0ZXN0Q2xvdWRXYXRjaExvZ3NEZWxpdmVyeVRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIExhdGVzdERlbGl2ZXJ5QXR0ZW1wdFN1Y2NlZWRlZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExhdGVzdERlbGl2ZXJ5QXR0ZW1wdFRpbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXRlc3REZWxpdmVyeUVycm9yOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGF0ZXN0RGVsaXZlcnlUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBMYXRlc3REaWdlc3REZWxpdmVyeUVycm9yOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGF0ZXN0RGlnZXN0RGVsaXZlcnlUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBMYXRlc3ROb3RpZmljYXRpb25BdHRlbXB0U3VjY2VlZGVkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGF0ZXN0Tm90aWZpY2F0aW9uQXR0ZW1wdFRpbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXRlc3ROb3RpZmljYXRpb25FcnJvcjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExhdGVzdE5vdGlmaWNhdGlvblRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIFN0YXJ0TG9nZ2luZ1RpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIFN0b3BMb2dnaW5nVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgVGltZUxvZ2dpbmdTdGFydGVkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGltZUxvZ2dpbmdTdG9wcGVkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9JbXBvcnRGYWlsdXJlTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9JbXBvcnRGYWlsdXJlTGlzdEl0ZW0oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfSW1wb3J0RmFpbHVyZUxpc3RJdGVtID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBFcnJvck1lc3NhZ2U6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBFcnJvclR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIExvY2F0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9JbXBvcnRzTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9JbXBvcnRzTGlzdEl0ZW0oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfSW1wb3J0c0xpc3RJdGVtID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDcmVhdGVkVGltZXN0YW1wOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEZXN0aW5hdGlvbnM6IF9qc29uLFxuICAgICAgICBJbXBvcnRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEltcG9ydFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFVwZGF0ZWRUaW1lc3RhbXA6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfSW5nZXN0aW9uU3RhdHVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBMYXRlc3RJbmdlc3Rpb25BdHRlbXB0RXZlbnRJRDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExhdGVzdEluZ2VzdGlvbkF0dGVtcHRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBMYXRlc3RJbmdlc3Rpb25FcnJvckNvZGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXRlc3RJbmdlc3Rpb25TdWNjZXNzRXZlbnRJRDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExhdGVzdEluZ2VzdGlvblN1Y2Nlc3NUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0luc2lnaHRzTWV0cmljVmFsdWVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fbGltaXRlZFBhcnNlRG91YmxlKGVudHJ5KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0xpc3RFdmVudERhdGFTdG9yZXNSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRXZlbnREYXRhU3RvcmVzOiAoXykgPT4gZGVfRXZlbnREYXRhU3RvcmVzKF8sIGNvbnRleHQpLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0xpc3RJbXBvcnRGYWlsdXJlc1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGYWlsdXJlczogKF8pID0+IGRlX0ltcG9ydEZhaWx1cmVMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0xpc3RJbXBvcnRzUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEltcG9ydHM6IChfKSA9PiBkZV9JbXBvcnRzTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9MaXN0SW5zaWdodHNNZXRyaWNEYXRhUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEVycm9yQ29kZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEV2ZW50TmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEV2ZW50U291cmNlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgSW5zaWdodFR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaW1lc3RhbXBzOiAoXykgPT4gZGVfVGltZXN0YW1wcyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gZGVfSW5zaWdodHNNZXRyaWNWYWx1ZXMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTGlzdFB1YmxpY0tleXNSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUHVibGljS2V5TGlzdDogKF8pID0+IGRlX1B1YmxpY0tleUxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTGlzdFF1ZXJpZXNSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUXVlcmllczogKF8pID0+IGRlX1F1ZXJpZXMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTG9va3VwRXZlbnRzUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEV2ZW50czogKF8pID0+IGRlX0V2ZW50c0xpc3QoXywgY29udGV4dCksXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUHVibGljS2V5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGaW5nZXJwcmludDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZhbGlkaXR5RW5kVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgVmFsaWRpdHlTdGFydFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIFZhbHVlOiBjb250ZXh0LmJhc2U2NERlY29kZXIsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUHVibGljS2V5TGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9QdWJsaWNLZXkoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfUXVlcmllcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9RdWVyeShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9RdWVyeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ3JlYXRpb25UaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBRdWVyeUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUXVlcnlTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1F1ZXJ5U3RhdGlzdGljc0ZvckRlc2NyaWJlUXVlcnkgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEJ5dGVzU2Nhbm5lZDogX19leHBlY3RMb25nLFxuICAgICAgICBDcmVhdGlvblRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIEV2ZW50c01hdGNoZWQ6IF9fZXhwZWN0TG9uZyxcbiAgICAgICAgRXZlbnRzU2Nhbm5lZDogX19leHBlY3RMb25nLFxuICAgICAgICBFeGVjdXRpb25UaW1lSW5NaWxsaXM6IF9fZXhwZWN0SW50MzIsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUmVzdG9yZUV2ZW50RGF0YVN0b3JlUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFkdmFuY2VkRXZlbnRTZWxlY3RvcnM6IF9qc29uLFxuICAgICAgICBCaWxsaW5nTW9kZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lc3RhbXA6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIEV2ZW50RGF0YVN0b3JlQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgS21zS2V5SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBNdWx0aVJlZ2lvbkVuYWJsZWQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE9yZ2FuaXphdGlvbkVuYWJsZWQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgUmV0ZW50aW9uUGVyaW9kOiBfX2V4cGVjdEludDMyLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZXJtaW5hdGlvblByb3RlY3Rpb25FbmFibGVkOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIFVwZGF0ZWRUaW1lc3RhbXA6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2VhcmNoU2FtcGxlUXVlcmllc1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTZWFyY2hSZXN1bHRzOiAoXykgPT4gZGVfU2VhcmNoU2FtcGxlUXVlcmllc1NlYXJjaFJlc3VsdHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2VhcmNoU2FtcGxlUXVlcmllc1NlYXJjaFJlc3VsdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRGVzY3JpcHRpb246IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVsZXZhbmNlOiBfX2xpbWl0ZWRQYXJzZUZsb2F0MzIsXG4gICAgICAgIFNRTDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2VhcmNoU2FtcGxlUXVlcmllc1NlYXJjaFJlc3VsdHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfU2VhcmNoU2FtcGxlUXVlcmllc1NlYXJjaFJlc3VsdChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9TdGFydEltcG9ydFJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDcmVhdGVkVGltZXN0YW1wOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEZXN0aW5hdGlvbnM6IF9qc29uLFxuICAgICAgICBFbmRFdmVudFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIEltcG9ydElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgSW1wb3J0U291cmNlOiBfanNvbixcbiAgICAgICAgSW1wb3J0U3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhcnRFdmVudFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIFVwZGF0ZWRUaW1lc3RhbXA6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU3RvcEltcG9ydFJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDcmVhdGVkVGltZXN0YW1wOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEZXN0aW5hdGlvbnM6IF9qc29uLFxuICAgICAgICBFbmRFdmVudFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIEltcG9ydElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgSW1wb3J0U291cmNlOiBfanNvbixcbiAgICAgICAgSW1wb3J0U3RhdGlzdGljczogX2pzb24sXG4gICAgICAgIEltcG9ydFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN0YXJ0RXZlbnRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBVcGRhdGVkVGltZXN0YW1wOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RpbWVzdGFtcHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihlbnRyeSkpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1VwZGF0ZURhc2hib2FyZFJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDcmVhdGVkVGltZXN0YW1wOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEYXNoYm9hcmRBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVmcmVzaFNjaGVkdWxlOiBfanNvbixcbiAgICAgICAgVGVybWluYXRpb25Qcm90ZWN0aW9uRW5hYmxlZDogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVXBkYXRlZFRpbWVzdGFtcDogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgV2lkZ2V0czogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVXBkYXRlRXZlbnREYXRhU3RvcmVSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWR2YW5jZWRFdmVudFNlbGVjdG9yczogX2pzb24sXG4gICAgICAgIEJpbGxpbmdNb2RlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWVzdGFtcDogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRXZlbnREYXRhU3RvcmVBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBGZWRlcmF0aW9uUm9sZUFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEZlZGVyYXRpb25TdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBLbXNLZXlJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE11bHRpUmVnaW9uRW5hYmxlZDogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgT3JnYW5pemF0aW9uRW5hYmxlZDogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBSZXRlbnRpb25QZXJpb2Q6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRlcm1pbmF0aW9uUHJvdGVjdGlvbkVuYWJsZWQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgVXBkYXRlZFRpbWVzdGFtcDogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICB9KTtcbn07XG5jb25zdCBkZXNlcmlhbGl6ZU1ldGFkYXRhID0gKG91dHB1dCkgPT4gKHtcbiAgICBodHRwU3RhdHVzQ29kZTogb3V0cHV0LnN0YXR1c0NvZGUsXG4gICAgcmVxdWVzdElkOiBvdXRwdXQuaGVhZGVyc1tcIngtYW16bi1yZXF1ZXN0aWRcIl0gPz8gb3V0cHV0LmhlYWRlcnNbXCJ4LWFtem4tcmVxdWVzdC1pZFwiXSA/PyBvdXRwdXQuaGVhZGVyc1tcIngtYW16LXJlcXVlc3QtaWRcIl0sXG4gICAgZXh0ZW5kZWRSZXF1ZXN0SWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXotaWQtMlwiXSxcbiAgICBjZklkOiBvdXRwdXQuaGVhZGVyc1tcIngtYW16LWNmLWlkXCJdLFxufSk7XG5jb25zdCBjb2xsZWN0Qm9keVN0cmluZyA9IChzdHJlYW1Cb2R5LCBjb250ZXh0KSA9PiBjb2xsZWN0Qm9keShzdHJlYW1Cb2R5LCBjb250ZXh0KS50aGVuKChib2R5KSA9PiBjb250ZXh0LnV0ZjhFbmNvZGVyKGJvZHkpKTtcbmNvbnN0IHRocm93RGVmYXVsdEVycm9yID0gd2l0aEJhc2VFeGNlcHRpb24oX19CYXNlRXhjZXB0aW9uKTtcbmNvbnN0IGJ1aWxkSHR0cFJwY1JlcXVlc3QgPSBhc3luYyAoY29udGV4dCwgaGVhZGVycywgcGF0aCwgcmVzb2x2ZWRIb3N0bmFtZSwgYm9keSkgPT4ge1xuICAgIGNvbnN0IHsgaG9zdG5hbWUsIHByb3RvY29sID0gXCJodHRwc1wiLCBwb3J0LCBwYXRoOiBiYXNlUGF0aCB9ID0gYXdhaXQgY29udGV4dC5lbmRwb2ludCgpO1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge1xuICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgaG9zdG5hbWUsXG4gICAgICAgIHBvcnQsXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIHBhdGg6IGJhc2VQYXRoLmVuZHNXaXRoKFwiL1wiKSA/IGJhc2VQYXRoLnNsaWNlKDAsIC0xKSArIHBhdGggOiBiYXNlUGF0aCArIHBhdGgsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgfTtcbiAgICBpZiAocmVzb2x2ZWRIb3N0bmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRlbnRzLmhvc3RuYW1lID0gcmVzb2x2ZWRIb3N0bmFtZTtcbiAgICB9XG4gICAgaWYgKGJvZHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250ZW50cy5ib2R5ID0gYm9keTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBfX0h0dHBSZXF1ZXN0KGNvbnRlbnRzKTtcbn07XG5mdW5jdGlvbiBzaGFyZWRIZWFkZXJzKG9wZXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24veC1hbXotanNvbi0xLjFcIixcbiAgICAgICAgXCJ4LWFtei10YXJnZXRcIjogYENsb3VkVHJhaWxfMjAxMzExMDEuJHtvcGVyYXRpb259YCxcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgZ2V0RW5kcG9pbnRQbHVnaW4gfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50XCI7XG5pbXBvcnQgeyBnZXRTZXJkZVBsdWdpbiB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtc2VyZGVcIjtcbmltcG9ydCB7IENvbW1hbmQgYXMgJENvbW1hbmQgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBjb21tb25QYXJhbXMgfSBmcm9tIFwiLi4vZW5kcG9pbnQvRW5kcG9pbnRQYXJhbWV0ZXJzXCI7XG5pbXBvcnQgeyBkZV9Mb29rdXBFdmVudHNDb21tYW5kLCBzZV9Mb29rdXBFdmVudHNDb21tYW5kIH0gZnJvbSBcIi4uL3Byb3RvY29scy9Bd3NfanNvbjFfMVwiO1xuZXhwb3J0IHsgJENvbW1hbmQgfTtcbmV4cG9ydCBjbGFzcyBMb29rdXBFdmVudHNDb21tYW5kIGV4dGVuZHMgJENvbW1hbmRcbiAgICAuY2xhc3NCdWlsZGVyKClcbiAgICAuZXAoY29tbW9uUGFyYW1zKVxuICAgIC5tKGZ1bmN0aW9uIChDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgZ2V0U2VyZGVQbHVnaW4oY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgICAgIGdldEVuZHBvaW50UGx1Z2luKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKSxcbiAgICBdO1xufSlcbiAgICAucyhcIkNsb3VkVHJhaWxfMjAxMzExMDFcIiwgXCJMb29rdXBFdmVudHNcIiwge30pXG4gICAgLm4oXCJDbG91ZFRyYWlsQ2xpZW50XCIsIFwiTG9va3VwRXZlbnRzQ29tbWFuZFwiKVxuICAgIC5mKHZvaWQgMCwgdm9pZCAwKVxuICAgIC5zZXIoc2VfTG9va3VwRXZlbnRzQ29tbWFuZClcbiAgICAuZGUoZGVfTG9va3VwRXZlbnRzQ29tbWFuZClcbiAgICAuYnVpbGQoKSB7XG59XG4iLCJpbXBvcnQgeyBFdmVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHRyYWlsJ1xuXG5leHBvcnQgY2xhc3MgQ2xvdWRUcmFpbFVzZXJFdmVudCB7XG5cdGlhbVJvbGU6IHN0cmluZyBcblx0c3RzU2Vzc2lvbjogc3RyaW5nIFxuXHRldmVudFRpbWU6IERhdGVcblxuXHRjb25zdHJ1Y3RvcihldmVudDogRXZlbnQpIHtcblx0XHRjb25zdCBjbG91ZFRyYWlsRXZlbnQgPSBKU09OLnBhcnNlKGV2ZW50LkNsb3VkVHJhaWxFdmVudClcblx0XHRjb25zdCBbcm9sZSwgc2Vzc2lvbl0gPSAgY2xvdWRUcmFpbEV2ZW50LnVzZXJJZGVudGl0eS5hcm4uc3BsaXQoJy8nKS5zbGljZSgxKSAvLyBhcm46YXdzOnN0czo6YWNjb3VudDphc3N1bWVkLXJvbGUvUk9MRV9OQU1FL1NFU1NJT05fTkFNRSAtIG1heSBoYXZlIHVuZGVmaW5lZCBzZXNzaW9uIGlmIElBTSB1c2VyIGlzIHVzZWQgdG8gbG9naW5cblx0XHRcblx0XHR0aGlzLmlhbVJvbGUgPSByb2xlXG5cdFx0dGhpcy5zdHNTZXNzaW9uID0gc2Vzc2lvblxuXHRcdHRoaXMuZXZlbnRUaW1lID0gZXZlbnQuRXZlbnRUaW1lXG5cdH1cbn0iLCJpbXBvcnQgeyBDbG91ZFRyYWlsQ2xpZW50LCBMb29rdXBFdmVudHNDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWwnXG5pbXBvcnQgeyBDbG91ZFRyYWlsVXNlckV2ZW50IH0gZnJvbSAnLi9DbG91ZFRyYWlsVXNlckV2ZW50J1xuaW1wb3J0IHsgUXVpY2tTaWdodFVzZXIgfSBmcm9tICcuL1F1aWNrU2lnaHRVc2VyJ1xuXG5leHBvcnQgY2xhc3MgQ2xvdWRUcmFpbFVzZXJFdmVudE1hbmFnZXIge1xuXHRwcml2YXRlIGNsb3VkVHJhaWxDbGllbnQgPSBuZXcgQ2xvdWRUcmFpbENsaWVudCh7fSlcblxuXHQvLyBGaWx0ZXJzIG91dCBldmVudHMgdGhhdCBkbyBub3Qgb3JpZ2luYXRlIHdpdGggc29tZW9uZSdzIGUtbWFpbCBhZGRyZXNzXG5cdC8vIHN1Y2ggYXMgYW55IGF1dG9tYXRlZCBwcm9jZXNzIHdoaWNoIHRvdWNoZXMgUXVpY2tTaWdodCwgaW5jbHVkaW5nIHRoaXMgb25lXG5cdHB1YmxpYyBhc3luYyByZXRyaWV2ZVF1aWNrU2lnaHRVc2VyRXZlbnRzKHN0YXJ0RGF0ZTogRGF0ZSk6IFByb21pc2U8Q2xvdWRUcmFpbFVzZXJFdmVudFtdPiB7XG5cdFx0Y29uc3QgZXZlbnRzOiBDbG91ZFRyYWlsVXNlckV2ZW50W10gPSBbXVxuXG5cdFx0bGV0IG5leHRUb2tlbjogc3RyaW5nID0gbnVsbCAvLyBUaGlzIGlzIGFubm95aW5nOyBudWxsIGRvZXNuJ3Qgd29yayBpbiB0aGUgUXVpY2tTaWdodCBBUEkgYnV0IGVtcHR5IHN0cmluZyBkb2Vzbid0IHdvcmsgaW4gdGhlIENsb3VkVHJhaWwgQVBJXG5cdFx0ZG8ge1xuXHRcdFx0Y29uc3QgbG9va3VwRXZlbnRzQ29tbWFuZCA9IG5ldyBMb29rdXBFdmVudHNDb21tYW5kKHtcblx0XHRcdFx0TG9va3VwQXR0cmlidXRlczogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdEF0dHJpYnV0ZUtleTogJ0V2ZW50U291cmNlJyxcblx0XHRcdFx0XHRcdEF0dHJpYnV0ZVZhbHVlOiAncXVpY2tzaWdodC5hbWF6b25hd3MuY29tJyxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRdLFxuXHRcdFx0XHRTdGFydFRpbWU6IHN0YXJ0RGF0ZSxcblx0XHRcdFx0TmV4dFRva2VuOiBuZXh0VG9rZW4sXG5cdFx0XHR9KVxuXG5cdFx0XHRjb25zdCBsb29rdXBFdmVudHNSZXN1bHQgPSBhd2FpdCB0aGlzLmNsb3VkVHJhaWxDbGllbnQuc2VuZChsb29rdXBFdmVudHNDb21tYW5kKVxuXG5cdFx0XHRuZXh0VG9rZW4gPSBsb29rdXBFdmVudHNSZXN1bHQuTmV4dFRva2VuXG5cblx0XHRcdGxvb2t1cEV2ZW50c1Jlc3VsdC5FdmVudHMuZm9yRWFjaCgoZXZlbnQpID0+IGV2ZW50cy5wdXNoKG5ldyBDbG91ZFRyYWlsVXNlckV2ZW50KGV2ZW50KSkpXG5cdFx0fSB3aGlsZSAobmV4dFRva2VuKVxuXG5cdFx0cmV0dXJuIGV2ZW50c1xuXHR9XG5cblx0cHVibGljIGdldExhc3RBY2Nlc3NEYXRlKHVzZXI6IFF1aWNrU2lnaHRVc2VyLCBldmVudHM6IENsb3VkVHJhaWxVc2VyRXZlbnRbXSk6IERhdGUge1xuXHRcdGNvbnN0IHRoaXNQYXJ0aWN1bGFyVXNlckV2ZW50cyA9IGV2ZW50cy5maWx0ZXIoKGV2ZW50KSA9PiB1c2VyLmlhbVJvbGUgPT09IGV2ZW50LmlhbVJvbGUgJiYgdXNlci5zdHNTZXNzaW9uID09PSBldmVudC5zdHNTZXNzaW9uKVxuXG5cdFx0aWYgKHRoaXNQYXJ0aWN1bGFyVXNlckV2ZW50cy5sZW5ndGggPT09IDApIHtcblx0XHRcdC8vIFN0cnlrZXIgZGlzYWJsZSBuZXh0LWxpbmUgYWxsIFwiSSBkbyBub3QgY2FyZSBhYm91dCBtdXRhdGluZyBjb25zb2xlIHN0YXRlbWVudHNcIlxuXHRcdFx0Y29uc29sZS5kZWJ1ZyhgJHt1c2VyLmlhbVJvbGV9LyR7dXNlci5zdHNTZXNzaW9ufSBubyBDbG91ZFRyYWlsIGV2ZW50cyBmb3VuZGApXG5cdFx0XHRyZXR1cm4gbmV3IERhdGUoMCkgLy8gUmV0dXJuIDE5NzAgYXMgbGFzdCBhY2Nlc3MgZGF0ZSB0byBtYWtlIGxvZ2ljIGVhc2llciBkb3duIHRoZSByb2FkXG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBuZXdlc3QgdG8gb2xkZXN0XG5cdFx0Y29uc3QgbmV3ZXN0RXZlbnQgPSB0aGlzUGFydGljdWxhclVzZXJFdmVudHMuc29ydCgoYSwgYikgPT4gYS5ldmVudFRpbWUgPD0gYi5ldmVudFRpbWUgPyAxIDogLTEpWzBdXG5cdFx0Ly8gU3RyeWtlciBkaXNhYmxlIG5leHQtbGluZSBhbGwgXCJJIGRvIG5vdCBjYXJlIGFib3V0IG11dGF0aW5nIGNvbnNvbGUgc3RhdGVtZW50c1wiXG5cdFx0Y29uc29sZS5kZWJ1ZyhgJHt1c2VyLmlhbVJvbGV9LyR7dXNlci5zdHNTZXNzaW9ufSBsYXRlc3QgZXZlbnQ6ICR7SlNPTi5zdHJpbmdpZnkobmV3ZXN0RXZlbnQsIG51bGwsIDEpfWApXG5cblx0XHRyZXR1cm4gbmV3ZXN0RXZlbnQuZXZlbnRUaW1lXG5cdH1cbn0iLCJpbXBvcnQgeyBub3JtYWxpemVQcm92aWRlciB9IGZyb20gXCJAc21pdGh5L3V0aWwtbWlkZGxld2FyZVwiO1xuZXhwb3J0IGNvbnN0IHJlc29sdmVDb21wcmVzc2lvbkNvbmZpZyA9IChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IHsgZGlzYWJsZVJlcXVlc3RDb21wcmVzc2lvbiwgcmVxdWVzdE1pbkNvbXByZXNzaW9uU2l6ZUJ5dGVzOiBfcmVxdWVzdE1pbkNvbXByZXNzaW9uU2l6ZUJ5dGVzIH0gPSBpbnB1dDtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihpbnB1dCwge1xuICAgICAgICBkaXNhYmxlUmVxdWVzdENvbXByZXNzaW9uOiBub3JtYWxpemVQcm92aWRlcihkaXNhYmxlUmVxdWVzdENvbXByZXNzaW9uKSxcbiAgICAgICAgcmVxdWVzdE1pbkNvbXByZXNzaW9uU2l6ZUJ5dGVzOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0TWluQ29tcHJlc3Npb25TaXplQnl0ZXMgPSBhd2FpdCBub3JtYWxpemVQcm92aWRlcihfcmVxdWVzdE1pbkNvbXByZXNzaW9uU2l6ZUJ5dGVzKSgpO1xuICAgICAgICAgICAgaWYgKHJlcXVlc3RNaW5Db21wcmVzc2lvblNpemVCeXRlcyA8IDAgfHwgcmVxdWVzdE1pbkNvbXByZXNzaW9uU2l6ZUJ5dGVzID4gMTA0ODU3NjApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRoZSB2YWx1ZSBmb3IgcmVxdWVzdE1pbkNvbXByZXNzaW9uU2l6ZUJ5dGVzIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxMDQ4NTc2MCBpbmNsdXNpdmUuIFwiICtcbiAgICAgICAgICAgICAgICAgICAgYFRoZSBwcm92aWRlZCB2YWx1ZSAke3JlcXVlc3RNaW5Db21wcmVzc2lvblNpemVCeXRlc30gaXMgb3V0c2lkZSB0aGlzIHJhbmdlLlwiYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdE1pbkNvbXByZXNzaW9uU2l6ZUJ5dGVzO1xuICAgICAgICB9LFxuICAgIH0pO1xufTtcbiIsImltcG9ydCB7IHJlc29sdmVBd3NTZGtTaWdWNENvbmZpZywgfSBmcm9tIFwiQGF3cy1zZGsvY29yZVwiO1xuaW1wb3J0IHsgZ2V0U21pdGh5Q29udGV4dCwgbm9ybWFsaXplUHJvdmlkZXIgfSBmcm9tIFwiQHNtaXRoeS91dGlsLW1pZGRsZXdhcmVcIjtcbmV4cG9ydCBjb25zdCBkZWZhdWx0Q2xvdWRXYXRjaEh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyID0gYXN5bmMgKGNvbmZpZywgY29udGV4dCwgaW5wdXQpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBvcGVyYXRpb246IGdldFNtaXRoeUNvbnRleHQoY29udGV4dCkub3BlcmF0aW9uLFxuICAgICAgICByZWdpb246IChhd2FpdCBub3JtYWxpemVQcm92aWRlcihjb25maWcucmVnaW9uKSgpKSB8fFxuICAgICAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJleHBlY3RlZCBgcmVnaW9uYCB0byBiZSBjb25maWd1cmVkIGZvciBgYXdzLmF1dGgjc2lndjRgXCIpO1xuICAgICAgICAgICAgfSkoKSxcbiAgICB9O1xufTtcbmZ1bmN0aW9uIGNyZWF0ZUF3c0F1dGhTaWd2NEh0dHBBdXRoT3B0aW9uKGF1dGhQYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2NoZW1lSWQ6IFwiYXdzLmF1dGgjc2lndjRcIixcbiAgICAgICAgc2lnbmluZ1Byb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIG5hbWU6IFwibW9uaXRvcmluZ1wiLFxuICAgICAgICAgICAgcmVnaW9uOiBhdXRoUGFyYW1ldGVycy5yZWdpb24sXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BlcnRpZXNFeHRyYWN0b3I6IChjb25maWcsIGNvbnRleHQpID0+ICh7XG4gICAgICAgICAgICBzaWduaW5nUHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBkZWZhdWx0Q2xvdWRXYXRjaEh0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPSAoYXV0aFBhcmFtZXRlcnMpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0gW107XG4gICAgc3dpdGNoIChhdXRoUGFyYW1ldGVycy5vcGVyYXRpb24pIHtcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGNyZWF0ZUF3c0F1dGhTaWd2NEh0dHBBdXRoT3B0aW9uKGF1dGhQYXJhbWV0ZXJzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICBjb25zdCBjb25maWdfMCA9IHJlc29sdmVBd3NTZGtTaWdWNENvbmZpZyhjb25maWcpO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGNvbmZpZ18wLCB7XG4gICAgICAgIGF1dGhTY2hlbWVQcmVmZXJlbmNlOiBub3JtYWxpemVQcm92aWRlcihjb25maWcuYXV0aFNjaGVtZVByZWZlcmVuY2UgPz8gW10pLFxuICAgIH0pO1xufTtcbiIsImV4cG9ydCBjb25zdCByZXNvbHZlQ2xpZW50RW5kcG9pbnRQYXJhbWV0ZXJzID0gKG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvcHRpb25zLCB7XG4gICAgICAgIHVzZUR1YWxzdGFja0VuZHBvaW50OiBvcHRpb25zLnVzZUR1YWxzdGFja0VuZHBvaW50ID8/IGZhbHNlLFxuICAgICAgICB1c2VGaXBzRW5kcG9pbnQ6IG9wdGlvbnMudXNlRmlwc0VuZHBvaW50ID8/IGZhbHNlLFxuICAgICAgICBkZWZhdWx0U2lnbmluZ05hbWU6IFwibW9uaXRvcmluZ1wiLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjb25zdCBjb21tb25QYXJhbXMgPSB7XG4gICAgVXNlRklQUzogeyB0eXBlOiBcImJ1aWx0SW5QYXJhbXNcIiwgbmFtZTogXCJ1c2VGaXBzRW5kcG9pbnRcIiB9LFxuICAgIEVuZHBvaW50OiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcImVuZHBvaW50XCIgfSxcbiAgICBSZWdpb246IHsgdHlwZTogXCJidWlsdEluUGFyYW1zXCIsIG5hbWU6IFwicmVnaW9uXCIgfSxcbiAgICBVc2VEdWFsU3RhY2s6IHsgdHlwZTogXCJidWlsdEluUGFyYW1zXCIsIG5hbWU6IFwidXNlRHVhbHN0YWNrRW5kcG9pbnRcIiB9LFxufTtcbiIsImltcG9ydCB7IGJvb2xlYW5TZWxlY3RvciwgU2VsZWN0b3JUeXBlIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1jb25maWctcHJvdmlkZXJcIjtcbmV4cG9ydCBjb25zdCBOT0RFX0RJU0FCTEVfUkVRVUVTVF9DT01QUkVTU0lPTl9FTlZfTkFNRSA9IFwiQVdTX0RJU0FCTEVfUkVRVUVTVF9DT01QUkVTU0lPTlwiO1xuZXhwb3J0IGNvbnN0IE5PREVfRElTQUJMRV9SRVFVRVNUX0NPTVBSRVNTSU9OX0lOSV9OQU1FID0gXCJkaXNhYmxlX3JlcXVlc3RfY29tcHJlc3Npb25cIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX0RJU0FCTEVfUkVRVUVTVF9DT01QUkVTU0lPTiA9IGZhbHNlO1xuZXhwb3J0IGNvbnN0IE5PREVfRElTQUJMRV9SRVFVRVNUX0NPTVBSRVNTSU9OX0NPTkZJR19PUFRJT05TID0ge1xuICAgIGVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvcjogKGVudikgPT4gYm9vbGVhblNlbGVjdG9yKGVudiwgTk9ERV9ESVNBQkxFX1JFUVVFU1RfQ09NUFJFU1NJT05fRU5WX05BTUUsIFNlbGVjdG9yVHlwZS5FTlYpLFxuICAgIGNvbmZpZ0ZpbGVTZWxlY3RvcjogKHByb2ZpbGUpID0+IGJvb2xlYW5TZWxlY3Rvcihwcm9maWxlLCBOT0RFX0RJU0FCTEVfUkVRVUVTVF9DT01QUkVTU0lPTl9JTklfTkFNRSwgU2VsZWN0b3JUeXBlLkNPTkZJRyksXG4gICAgZGVmYXVsdDogREVGQVVMVF9ESVNBQkxFX1JFUVVFU1RfQ09NUFJFU1NJT04sXG59O1xuIiwiZXhwb3J0IGNvbnN0IG51bWJlclNlbGVjdG9yID0gKG9iaiwga2V5LCB0eXBlKSA9PiB7XG4gICAgaWYgKCEoa2V5IGluIG9iaikpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgY29uc3QgbnVtYmVyVmFsdWUgPSBwYXJzZUludChvYmpba2V5XSwgMTApO1xuICAgIGlmIChOdW1iZXIuaXNOYU4obnVtYmVyVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYENhbm5vdCBsb2FkICR7dHlwZX0gJyR7a2V5fScuIEV4cGVjdGVkIG51bWJlciwgZ290ICcke29ialtrZXldfScuYCk7XG4gICAgfVxuICAgIHJldHVybiBudW1iZXJWYWx1ZTtcbn07XG4iLCJpbXBvcnQgeyBudW1iZXJTZWxlY3RvciwgU2VsZWN0b3JUeXBlIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1jb25maWctcHJvdmlkZXJcIjtcbmV4cG9ydCBjb25zdCBOT0RFX1JFUVVFU1RfTUlOX0NPTVBSRVNTSU9OX1NJWkVfQllURVNfRU5WX05BTUUgPSBcIkFXU19SRVFVRVNUX01JTl9DT01QUkVTU0lPTl9TSVpFX0JZVEVTXCI7XG5leHBvcnQgY29uc3QgTk9ERV9SRVFVRVNUX01JTl9DT01QUkVTU0lPTl9TSVpFX0JZVEVTX0lOSV9OQU1FID0gXCJyZXF1ZXN0X21pbl9jb21wcmVzc2lvbl9zaXplX2J5dGVzXCI7XG5leHBvcnQgY29uc3QgREVGQVVMVF9OT0RFX1JFUVVFU1RfTUlOX0NPTVBSRVNTSU9OX1NJWkVfQllURVMgPSAxMDI0MDtcbmV4cG9ydCBjb25zdCBOT0RFX1JFUVVFU1RfTUlOX0NPTVBSRVNTSU9OX1NJWkVfQllURVNfQ09ORklHX09QVElPTlMgPSB7XG4gICAgZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yOiAoZW52KSA9PiBudW1iZXJTZWxlY3RvcihlbnYsIE5PREVfUkVRVUVTVF9NSU5fQ09NUFJFU1NJT05fU0laRV9CWVRFU19FTlZfTkFNRSwgU2VsZWN0b3JUeXBlLkVOViksXG4gICAgY29uZmlnRmlsZVNlbGVjdG9yOiAocHJvZmlsZSkgPT4gbnVtYmVyU2VsZWN0b3IocHJvZmlsZSwgTk9ERV9SRVFVRVNUX01JTl9DT01QUkVTU0lPTl9TSVpFX0JZVEVTX0lOSV9OQU1FLCBTZWxlY3RvclR5cGUuQ09ORklHKSxcbiAgICBkZWZhdWx0OiBERUZBVUxUX05PREVfUkVRVUVTVF9NSU5fQ09NUFJFU1NJT05fU0laRV9CWVRFUyxcbn07XG4iLCJjb25zdCB3ID0gXCJyZXF1aXJlZFwiLCB4ID0gXCJmblwiLCB5ID0gXCJhcmd2XCIsIHogPSBcInJlZlwiLCBBID0gXCJwcm9wZXJ0aWVzXCIsIEIgPSBcImhlYWRlcnNcIjtcbmNvbnN0IGEgPSB0cnVlLCBiID0gZmFsc2UsIGMgPSBcImlzU2V0XCIsIGQgPSBcImJvb2xlYW5FcXVhbHNcIiwgZSA9IFwiZXJyb3JcIiwgZiA9IFwiZW5kcG9pbnRcIiwgZyA9IFwidHJlZVwiLCBoID0gXCJQYXJ0aXRpb25SZXN1bHRcIiwgaSA9IHsgW3ddOiB0cnVlLCBcImRlZmF1bHRcIjogZmFsc2UsIFwidHlwZVwiOiBcIkJvb2xlYW5cIiB9LCBqID0geyBbd106IGZhbHNlLCBcInR5cGVcIjogXCJTdHJpbmdcIiB9LCBrID0geyBbel06IFwiRW5kcG9pbnRcIiB9LCBsID0geyBbeF06IGQsIFt5XTogW3sgW3pdOiBcIlVzZUZJUFNcIiB9LCB0cnVlXSB9LCBtID0geyBbel06IFwiVXNlRklQU1wiIH0sIG4gPSB7IFt4XTogZCwgW3ldOiBbeyBbel06IFwiVXNlRHVhbFN0YWNrXCIgfSwgdHJ1ZV0gfSwgbyA9IHt9LCBwID0geyBbeF06IFwic3RyaW5nRXF1YWxzXCIsIFt5XTogW3sgW3hdOiBcImdldEF0dHJcIiwgW3ldOiBbeyBbel06IGggfSwgXCJuYW1lXCJdIH0sIFwiYXdzLXVzLWdvdlwiXSB9LCBxID0geyBbeF06IGQsIFt5XTogW3sgW3pdOiBcIlVzZUR1YWxTdGFja1wiIH0sIGZhbHNlXSB9LCByID0geyBcInVybFwiOiBcImh0dHBzOi8vbW9uaXRvcmluZy57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2Ruc1N1ZmZpeH1cIiwgW0FdOiB7fSwgW0JdOiB7fSB9LCBzID0geyBcInVybFwiOiBcImh0dHBzOi8vbW9uaXRvcmluZy57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2R1YWxTdGFja0Ruc1N1ZmZpeH1cIiwgW0FdOiB7fSwgW0JdOiB7fSB9LCB0ID0geyBbeF06IFwiZ2V0QXR0clwiLCBbeV06IFt7IFt6XTogaCB9LCBcInN1cHBvcnRzRklQU1wiXSB9LCB1ID0geyBbeF06IGQsIFt5XTogW3RydWUsIHsgW3hdOiBcImdldEF0dHJcIiwgW3ldOiBbeyBbel06IGggfSwgXCJzdXBwb3J0c0R1YWxTdGFja1wiXSB9XSB9LCB2ID0gW3sgW3pdOiBcIlJlZ2lvblwiIH1dO1xuY29uc3QgX2RhdGEgPSB7IHZlcnNpb246IFwiMS4wXCIsIHBhcmFtZXRlcnM6IHsgVXNlRHVhbFN0YWNrOiBpLCBVc2VGSVBTOiBpLCBFbmRwb2ludDogaiwgUmVnaW9uOiBqIH0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbeF06IGMsIFt5XTogW2tdIH1dLCBydWxlczogW3sgY29uZGl0aW9uczogW2xdLCBlcnJvcjogXCJJbnZhbGlkIENvbmZpZ3VyYXRpb246IEZJUFMgYW5kIGN1c3RvbSBlbmRwb2ludCBhcmUgbm90IHN1cHBvcnRlZFwiLCB0eXBlOiBlIH0sIHsgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFtuXSwgZXJyb3I6IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBEdWFsc3RhY2sgYW5kIGN1c3RvbSBlbmRwb2ludCBhcmUgbm90IHN1cHBvcnRlZFwiLCB0eXBlOiBlIH0sIHsgZW5kcG9pbnQ6IHsgdXJsOiBrLCBbQV06IG8sIFtCXTogbyB9LCB0eXBlOiBmIH1dLCB0eXBlOiBnIH1dLCB0eXBlOiBnIH0sIHsgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt4XTogYywgW3ldOiB2IH1dLCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW3hdOiBcImF3cy5wYXJ0aXRpb25cIiwgW3ldOiB2LCBhc3NpZ246IGggfV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbcCwgbCwgcV0sIGVuZHBvaW50OiByLCB0eXBlOiBmIH0sIHsgY29uZGl0aW9uczogW3AsIGwsIG5dLCBlbmRwb2ludDogcywgdHlwZTogZiB9LCB7IGNvbmRpdGlvbnM6IFtsLCBuXSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt4XTogZCwgW3ldOiBbYSwgdF0gfSwgdV0sIHJ1bGVzOiBbeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9tb25pdG9yaW5nLWZpcHMue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkdWFsU3RhY2tEbnNTdWZmaXh9XCIsIFtBXTogbywgW0JdOiBvIH0sIHR5cGU6IGYgfV0sIHR5cGU6IGcgfSwgeyBlcnJvcjogXCJGSVBTIGFuZCBEdWFsU3RhY2sgYXJlIGVuYWJsZWQsIGJ1dCB0aGlzIHBhcnRpdGlvbiBkb2VzIG5vdCBzdXBwb3J0IG9uZSBvciBib3RoXCIsIHR5cGU6IGUgfV0sIHR5cGU6IGcgfSwgeyBjb25kaXRpb25zOiBbbCwgcV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbeF06IGQsIFt5XTogW3QsIGFdIH1dLCBydWxlczogW3sgZW5kcG9pbnQ6IHsgdXJsOiBcImh0dHBzOi8vbW9uaXRvcmluZy1maXBzLntSZWdpb259LntQYXJ0aXRpb25SZXN1bHQjZG5zU3VmZml4fVwiLCBbQV06IG8sIFtCXTogbyB9LCB0eXBlOiBmIH1dLCB0eXBlOiBnIH0sIHsgZXJyb3I6IFwiRklQUyBpcyBlbmFibGVkIGJ1dCB0aGlzIHBhcnRpdGlvbiBkb2VzIG5vdCBzdXBwb3J0IEZJUFNcIiwgdHlwZTogZSB9XSwgdHlwZTogZyB9LCB7IGNvbmRpdGlvbnM6IFt7IFt4XTogZCwgW3ldOiBbbSwgYl0gfSwgbl0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbdV0sIHJ1bGVzOiBbeyBlbmRwb2ludDogcywgdHlwZTogZiB9XSwgdHlwZTogZyB9LCB7IGVycm9yOiBcIkR1YWxTdGFjayBpcyBlbmFibGVkIGJ1dCB0aGlzIHBhcnRpdGlvbiBkb2VzIG5vdCBzdXBwb3J0IER1YWxTdGFja1wiLCB0eXBlOiBlIH1dLCB0eXBlOiBnIH0sIHsgZW5kcG9pbnQ6IHIsIHR5cGU6IGYgfV0sIHR5cGU6IGcgfV0sIHR5cGU6IGcgfSwgeyBlcnJvcjogXCJJbnZhbGlkIENvbmZpZ3VyYXRpb246IE1pc3NpbmcgUmVnaW9uXCIsIHR5cGU6IGUgfV0sIHR5cGU6IGcgfV0gfTtcbmV4cG9ydCBjb25zdCBydWxlU2V0ID0gX2RhdGE7XG4iLCJpbXBvcnQgeyBhd3NFbmRwb2ludEZ1bmN0aW9ucyB9IGZyb20gXCJAYXdzLXNkay91dGlsLWVuZHBvaW50c1wiO1xuaW1wb3J0IHsgY3VzdG9tRW5kcG9pbnRGdW5jdGlvbnMsIEVuZHBvaW50Q2FjaGUsIHJlc29sdmVFbmRwb2ludCB9IGZyb20gXCJAc21pdGh5L3V0aWwtZW5kcG9pbnRzXCI7XG5pbXBvcnQgeyBydWxlU2V0IH0gZnJvbSBcIi4vcnVsZXNldFwiO1xuY29uc3QgY2FjaGUgPSBuZXcgRW5kcG9pbnRDYWNoZSh7XG4gICAgc2l6ZTogNTAsXG4gICAgcGFyYW1zOiBbXCJFbmRwb2ludFwiLCBcIlJlZ2lvblwiLCBcIlVzZUR1YWxTdGFja1wiLCBcIlVzZUZJUFNcIl0sXG59KTtcbmV4cG9ydCBjb25zdCBkZWZhdWx0RW5kcG9pbnRSZXNvbHZlciA9IChlbmRwb2ludFBhcmFtcywgY29udGV4dCA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIGNhY2hlLmdldChlbmRwb2ludFBhcmFtcywgKCkgPT4gcmVzb2x2ZUVuZHBvaW50KHJ1bGVTZXQsIHtcbiAgICAgICAgZW5kcG9pbnRQYXJhbXM6IGVuZHBvaW50UGFyYW1zLFxuICAgICAgICBsb2dnZXI6IGNvbnRleHQubG9nZ2VyLFxuICAgIH0pKTtcbn07XG5jdXN0b21FbmRwb2ludEZ1bmN0aW9ucy5hd3MgPSBhd3NFbmRwb2ludEZ1bmN0aW9ucztcbiIsImltcG9ydCB7IGdldEhvc3RIZWFkZXJQbHVnaW4sIHJlc29sdmVIb3N0SGVhZGVyQ29uZmlnLCB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLWhvc3QtaGVhZGVyXCI7XG5pbXBvcnQgeyBnZXRMb2dnZXJQbHVnaW4gfSBmcm9tIFwiQGF3cy1zZGsvbWlkZGxld2FyZS1sb2dnZXJcIjtcbmltcG9ydCB7IGdldFJlY3Vyc2lvbkRldGVjdGlvblBsdWdpbiB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLXJlY3Vyc2lvbi1kZXRlY3Rpb25cIjtcbmltcG9ydCB7IGdldFVzZXJBZ2VudFBsdWdpbiwgcmVzb2x2ZVVzZXJBZ2VudENvbmZpZywgfSBmcm9tIFwiQGF3cy1zZGsvbWlkZGxld2FyZS11c2VyLWFnZW50XCI7XG5pbXBvcnQgeyByZXNvbHZlUmVnaW9uQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvY29uZmlnLXJlc29sdmVyXCI7XG5pbXBvcnQgeyBEZWZhdWx0SWRlbnRpdHlQcm92aWRlckNvbmZpZywgZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4sIGdldEh0dHBTaWduaW5nUGx1Z2luLCB9IGZyb20gXCJAc21pdGh5L2NvcmVcIjtcbmltcG9ydCB7IHJlc29sdmVDb21wcmVzc2lvbkNvbmZpZywgfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLWNvbXByZXNzaW9uXCI7XG5pbXBvcnQgeyBnZXRDb250ZW50TGVuZ3RoUGx1Z2luIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1jb250ZW50LWxlbmd0aFwiO1xuaW1wb3J0IHsgcmVzb2x2ZUVuZHBvaW50Q29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludFwiO1xuaW1wb3J0IHsgZ2V0UmV0cnlQbHVnaW4sIHJlc29sdmVSZXRyeUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtcmV0cnlcIjtcbmltcG9ydCB7IENsaWVudCBhcyBfX0NsaWVudCwgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBkZWZhdWx0Q2xvdWRXYXRjaEh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyLCByZXNvbHZlSHR0cEF1dGhTY2hlbWVDb25maWcsIH0gZnJvbSBcIi4vYXV0aC9odHRwQXV0aFNjaGVtZVByb3ZpZGVyXCI7XG5pbXBvcnQgeyByZXNvbHZlQ2xpZW50RW5kcG9pbnRQYXJhbWV0ZXJzLCB9IGZyb20gXCIuL2VuZHBvaW50L0VuZHBvaW50UGFyYW1ldGVyc1wiO1xuaW1wb3J0IHsgZ2V0UnVudGltZUNvbmZpZyBhcyBfX2dldFJ1bnRpbWVDb25maWcgfSBmcm9tIFwiLi9ydW50aW1lQ29uZmlnXCI7XG5pbXBvcnQgeyByZXNvbHZlUnVudGltZUV4dGVuc2lvbnMgfSBmcm9tIFwiLi9ydW50aW1lRXh0ZW5zaW9uc1wiO1xuZXhwb3J0IHsgX19DbGllbnQgfTtcbmV4cG9ydCBjbGFzcyBDbG91ZFdhdGNoQ2xpZW50IGV4dGVuZHMgX19DbGllbnQge1xuICAgIGNvbmZpZztcbiAgICBjb25zdHJ1Y3RvciguLi5bY29uZmlndXJhdGlvbl0pIHtcbiAgICAgICAgY29uc3QgX2NvbmZpZ18wID0gX19nZXRSdW50aW1lQ29uZmlnKGNvbmZpZ3VyYXRpb24gfHwge30pO1xuICAgICAgICBzdXBlcihfY29uZmlnXzApO1xuICAgICAgICB0aGlzLmluaXRDb25maWcgPSBfY29uZmlnXzA7XG4gICAgICAgIGNvbnN0IF9jb25maWdfMSA9IHJlc29sdmVDbGllbnRFbmRwb2ludFBhcmFtZXRlcnMoX2NvbmZpZ18wKTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ18yID0gcmVzb2x2ZVVzZXJBZ2VudENvbmZpZyhfY29uZmlnXzEpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzMgPSByZXNvbHZlUmV0cnlDb25maWcoX2NvbmZpZ18yKTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ180ID0gcmVzb2x2ZVJlZ2lvbkNvbmZpZyhfY29uZmlnXzMpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzUgPSByZXNvbHZlSG9zdEhlYWRlckNvbmZpZyhfY29uZmlnXzQpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzYgPSByZXNvbHZlRW5kcG9pbnRDb25maWcoX2NvbmZpZ181KTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ183ID0gcmVzb2x2ZUh0dHBBdXRoU2NoZW1lQ29uZmlnKF9jb25maWdfNik7XG4gICAgICAgIGNvbnN0IF9jb25maWdfOCA9IHJlc29sdmVDb21wcmVzc2lvbkNvbmZpZyhfY29uZmlnXzcpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzkgPSByZXNvbHZlUnVudGltZUV4dGVuc2lvbnMoX2NvbmZpZ184LCBjb25maWd1cmF0aW9uPy5leHRlbnNpb25zIHx8IFtdKTtcbiAgICAgICAgdGhpcy5jb25maWcgPSBfY29uZmlnXzk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRVc2VyQWdlbnRQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldFJldHJ5UGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRDb250ZW50TGVuZ3RoUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRIb3N0SGVhZGVyUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRMb2dnZXJQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldFJlY3Vyc2lvbkRldGVjdGlvblBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4odGhpcy5jb25maWcsIHtcbiAgICAgICAgICAgIGh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyOiBkZWZhdWx0Q2xvdWRXYXRjaEh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyLFxuICAgICAgICAgICAgaWRlbnRpdHlQcm92aWRlckNvbmZpZ1Byb3ZpZGVyOiBhc3luYyAoY29uZmlnKSA9PiBuZXcgRGVmYXVsdElkZW50aXR5UHJvdmlkZXJDb25maWcoe1xuICAgICAgICAgICAgICAgIFwiYXdzLmF1dGgjc2lndjRcIjogY29uZmlnLmNyZWRlbnRpYWxzLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldEh0dHBTaWduaW5nUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgcGFja2FnZUluZm8gZnJvbSBcIi4uL3BhY2thZ2UuanNvblwiO1xuaW1wb3J0IHsgTk9ERV9BVVRIX1NDSEVNRV9QUkVGRVJFTkNFX09QVElPTlMsIGVtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24gYXMgYXdzQ2hlY2tWZXJzaW9uIH0gZnJvbSBcIkBhd3Mtc2RrL2NvcmVcIjtcbmltcG9ydCB7IGRlZmF1bHRQcm92aWRlciBhcyBjcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyIH0gZnJvbSBcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZVwiO1xuaW1wb3J0IHsgTk9ERV9BUFBfSURfQ09ORklHX09QVElPTlMsIGNyZWF0ZURlZmF1bHRVc2VyQWdlbnRQcm92aWRlciB9IGZyb20gXCJAYXdzLXNkay91dGlsLXVzZXItYWdlbnQtbm9kZVwiO1xuaW1wb3J0IHsgTk9ERV9SRUdJT05fQ09ORklHX0ZJTEVfT1BUSU9OUywgTk9ERV9SRUdJT05fQ09ORklHX09QVElPTlMsIE5PREVfVVNFX0RVQUxTVEFDS19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUywgTk9ERV9VU0VfRklQU19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUywgfSBmcm9tIFwiQHNtaXRoeS9jb25maWctcmVzb2x2ZXJcIjtcbmltcG9ydCB7IEhhc2ggfSBmcm9tIFwiQHNtaXRoeS9oYXNoLW5vZGVcIjtcbmltcG9ydCB7IE5PREVfRElTQUJMRV9SRVFVRVNUX0NPTVBSRVNTSU9OX0NPTkZJR19PUFRJT05TLCBOT0RFX1JFUVVFU1RfTUlOX0NPTVBSRVNTSU9OX1NJWkVfQllURVNfQ09ORklHX09QVElPTlMsIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1jb21wcmVzc2lvblwiO1xuaW1wb3J0IHsgTk9ERV9NQVhfQVRURU1QVF9DT05GSUdfT1BUSU9OUywgTk9ERV9SRVRSWV9NT0RFX0NPTkZJR19PUFRJT05TIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1yZXRyeVwiO1xuaW1wb3J0IHsgbG9hZENvbmZpZyBhcyBsb2FkTm9kZUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBOb2RlSHR0cEhhbmRsZXIgYXMgUmVxdWVzdEhhbmRsZXIsIHN0cmVhbUNvbGxlY3RvciB9IGZyb20gXCJAc21pdGh5L25vZGUtaHR0cC1oYW5kbGVyXCI7XG5pbXBvcnQgeyBjYWxjdWxhdGVCb2R5TGVuZ3RoIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1ib2R5LWxlbmd0aC1ub2RlXCI7XG5pbXBvcnQgeyBERUZBVUxUX1JFVFJZX01PREUgfSBmcm9tIFwiQHNtaXRoeS91dGlsLXJldHJ5XCI7XG5pbXBvcnQgeyBnZXRSdW50aW1lQ29uZmlnIGFzIGdldFNoYXJlZFJ1bnRpbWVDb25maWcgfSBmcm9tIFwiLi9ydW50aW1lQ29uZmlnLnNoYXJlZFwiO1xuaW1wb3J0IHsgbG9hZENvbmZpZ3NGb3JEZWZhdWx0TW9kZSB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IHJlc29sdmVEZWZhdWx0c01vZGVDb25maWcgfSBmcm9tIFwiQHNtaXRoeS91dGlsLWRlZmF1bHRzLW1vZGUtbm9kZVwiO1xuaW1wb3J0IHsgZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbiB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmV4cG9ydCBjb25zdCBnZXRSdW50aW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIGVtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24ocHJvY2Vzcy52ZXJzaW9uKTtcbiAgICBjb25zdCBkZWZhdWx0c01vZGUgPSByZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnKGNvbmZpZyk7XG4gICAgY29uc3QgZGVmYXVsdENvbmZpZ1Byb3ZpZGVyID0gKCkgPT4gZGVmYXVsdHNNb2RlKCkudGhlbihsb2FkQ29uZmlnc0ZvckRlZmF1bHRNb2RlKTtcbiAgICBjb25zdCBjbGllbnRTaGFyZWRWYWx1ZXMgPSBnZXRTaGFyZWRSdW50aW1lQ29uZmlnKGNvbmZpZyk7XG4gICAgYXdzQ2hlY2tWZXJzaW9uKHByb2Nlc3MudmVyc2lvbik7XG4gICAgY29uc3QgbG9hZGVyQ29uZmlnID0ge1xuICAgICAgICBwcm9maWxlOiBjb25maWc/LnByb2ZpbGUsXG4gICAgICAgIGxvZ2dlcjogY2xpZW50U2hhcmVkVmFsdWVzLmxvZ2dlcixcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmNsaWVudFNoYXJlZFZhbHVlcyxcbiAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICBydW50aW1lOiBcIm5vZGVcIixcbiAgICAgICAgZGVmYXVsdHNNb2RlLFxuICAgICAgICBhdXRoU2NoZW1lUHJlZmVyZW5jZTogY29uZmlnPy5hdXRoU2NoZW1lUHJlZmVyZW5jZSA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX0FVVEhfU0NIRU1FX1BSRUZFUkVOQ0VfT1BUSU9OUywgbG9hZGVyQ29uZmlnKSxcbiAgICAgICAgYm9keUxlbmd0aENoZWNrZXI6IGNvbmZpZz8uYm9keUxlbmd0aENoZWNrZXIgPz8gY2FsY3VsYXRlQm9keUxlbmd0aCxcbiAgICAgICAgY3JlZGVudGlhbERlZmF1bHRQcm92aWRlcjogY29uZmlnPy5jcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyID8/IGNyZWRlbnRpYWxEZWZhdWx0UHJvdmlkZXIsXG4gICAgICAgIGRlZmF1bHRVc2VyQWdlbnRQcm92aWRlcjogY29uZmlnPy5kZWZhdWx0VXNlckFnZW50UHJvdmlkZXIgPz9cbiAgICAgICAgICAgIGNyZWF0ZURlZmF1bHRVc2VyQWdlbnRQcm92aWRlcih7IHNlcnZpY2VJZDogY2xpZW50U2hhcmVkVmFsdWVzLnNlcnZpY2VJZCwgY2xpZW50VmVyc2lvbjogcGFja2FnZUluZm8udmVyc2lvbiB9KSxcbiAgICAgICAgZGlzYWJsZVJlcXVlc3RDb21wcmVzc2lvbjogY29uZmlnPy5kaXNhYmxlUmVxdWVzdENvbXByZXNzaW9uID8/IGxvYWROb2RlQ29uZmlnKE5PREVfRElTQUJMRV9SRVFVRVNUX0NPTVBSRVNTSU9OX0NPTkZJR19PUFRJT05TLCBjb25maWcpLFxuICAgICAgICBtYXhBdHRlbXB0czogY29uZmlnPy5tYXhBdHRlbXB0cyA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX01BWF9BVFRFTVBUX0NPTkZJR19PUFRJT05TLCBjb25maWcpLFxuICAgICAgICByZWdpb246IGNvbmZpZz8ucmVnaW9uID8/XG4gICAgICAgICAgICBsb2FkTm9kZUNvbmZpZyhOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUywgeyAuLi5OT0RFX1JFR0lPTl9DT05GSUdfRklMRV9PUFRJT05TLCAuLi5sb2FkZXJDb25maWcgfSksXG4gICAgICAgIHJlcXVlc3RIYW5kbGVyOiBSZXF1ZXN0SGFuZGxlci5jcmVhdGUoY29uZmlnPy5yZXF1ZXN0SGFuZGxlciA/PyBkZWZhdWx0Q29uZmlnUHJvdmlkZXIpLFxuICAgICAgICByZXF1ZXN0TWluQ29tcHJlc3Npb25TaXplQnl0ZXM6IGNvbmZpZz8ucmVxdWVzdE1pbkNvbXByZXNzaW9uU2l6ZUJ5dGVzID8/XG4gICAgICAgICAgICBsb2FkTm9kZUNvbmZpZyhOT0RFX1JFUVVFU1RfTUlOX0NPTVBSRVNTSU9OX1NJWkVfQllURVNfQ09ORklHX09QVElPTlMsIGNvbmZpZyksXG4gICAgICAgIHJldHJ5TW9kZTogY29uZmlnPy5yZXRyeU1vZGUgPz9cbiAgICAgICAgICAgIGxvYWROb2RlQ29uZmlnKHtcbiAgICAgICAgICAgICAgICAuLi5OT0RFX1JFVFJZX01PREVfQ09ORklHX09QVElPTlMsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogYXN5bmMgKCkgPT4gKGF3YWl0IGRlZmF1bHRDb25maWdQcm92aWRlcigpKS5yZXRyeU1vZGUgfHwgREVGQVVMVF9SRVRSWV9NT0RFLFxuICAgICAgICAgICAgfSwgY29uZmlnKSxcbiAgICAgICAgc2hhMjU2OiBjb25maWc/LnNoYTI1NiA/PyBIYXNoLmJpbmQobnVsbCwgXCJzaGEyNTZcIiksXG4gICAgICAgIHN0cmVhbUNvbGxlY3RvcjogY29uZmlnPy5zdHJlYW1Db2xsZWN0b3IgPz8gc3RyZWFtQ29sbGVjdG9yLFxuICAgICAgICB1c2VEdWFsc3RhY2tFbmRwb2ludDogY29uZmlnPy51c2VEdWFsc3RhY2tFbmRwb2ludCA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlRfQ09ORklHX09QVElPTlMsIGxvYWRlckNvbmZpZyksXG4gICAgICAgIHVzZUZpcHNFbmRwb2ludDogY29uZmlnPy51c2VGaXBzRW5kcG9pbnQgPz8gbG9hZE5vZGVDb25maWcoTk9ERV9VU0VfRklQU19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUywgbG9hZGVyQ29uZmlnKSxcbiAgICAgICAgdXNlckFnZW50QXBwSWQ6IGNvbmZpZz8udXNlckFnZW50QXBwSWQgPz8gbG9hZE5vZGVDb25maWcoTk9ERV9BUFBfSURfQ09ORklHX09QVElPTlMsIGxvYWRlckNvbmZpZyksXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBBd3NTZGtTaWdWNFNpZ25lciB9IGZyb20gXCJAYXdzLXNkay9jb3JlXCI7XG5pbXBvcnQgeyBOb09wTG9nZ2VyIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgcGFyc2VVcmwgfSBmcm9tIFwiQHNtaXRoeS91cmwtcGFyc2VyXCI7XG5pbXBvcnQgeyBmcm9tQmFzZTY0LCB0b0Jhc2U2NCB9IGZyb20gXCJAc21pdGh5L3V0aWwtYmFzZTY0XCI7XG5pbXBvcnQgeyBmcm9tVXRmOCwgdG9VdGY4IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC11dGY4XCI7XG5pbXBvcnQgeyBkZWZhdWx0Q2xvdWRXYXRjaEh0dHBBdXRoU2NoZW1lUHJvdmlkZXIgfSBmcm9tIFwiLi9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXJcIjtcbmltcG9ydCB7IGRlZmF1bHRFbmRwb2ludFJlc29sdmVyIH0gZnJvbSBcIi4vZW5kcG9pbnQvZW5kcG9pbnRSZXNvbHZlclwiO1xuZXhwb3J0IGNvbnN0IGdldFJ1bnRpbWVDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXBpVmVyc2lvbjogXCIyMDEwLTA4LTAxXCIsXG4gICAgICAgIGJhc2U2NERlY29kZXI6IGNvbmZpZz8uYmFzZTY0RGVjb2RlciA/PyBmcm9tQmFzZTY0LFxuICAgICAgICBiYXNlNjRFbmNvZGVyOiBjb25maWc/LmJhc2U2NEVuY29kZXIgPz8gdG9CYXNlNjQsXG4gICAgICAgIGRpc2FibGVIb3N0UHJlZml4OiBjb25maWc/LmRpc2FibGVIb3N0UHJlZml4ID8/IGZhbHNlLFxuICAgICAgICBlbmRwb2ludFByb3ZpZGVyOiBjb25maWc/LmVuZHBvaW50UHJvdmlkZXIgPz8gZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIsXG4gICAgICAgIGV4dGVuc2lvbnM6IGNvbmZpZz8uZXh0ZW5zaW9ucyA/PyBbXSxcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVQcm92aWRlcjogY29uZmlnPy5odHRwQXV0aFNjaGVtZVByb3ZpZGVyID8/IGRlZmF1bHRDbG91ZFdhdGNoSHR0cEF1dGhTY2hlbWVQcm92aWRlcixcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVzOiBjb25maWc/Lmh0dHBBdXRoU2NoZW1lcyA/PyBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2NoZW1lSWQ6IFwiYXdzLmF1dGgjc2lndjRcIixcbiAgICAgICAgICAgICAgICBpZGVudGl0eVByb3ZpZGVyOiAoaXBjKSA9PiBpcGMuZ2V0SWRlbnRpdHlQcm92aWRlcihcImF3cy5hdXRoI3NpZ3Y0XCIpLFxuICAgICAgICAgICAgICAgIHNpZ25lcjogbmV3IEF3c1Nka1NpZ1Y0U2lnbmVyKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBsb2dnZXI6IGNvbmZpZz8ubG9nZ2VyID8/IG5ldyBOb09wTG9nZ2VyKCksXG4gICAgICAgIHNlcnZpY2VJZDogY29uZmlnPy5zZXJ2aWNlSWQgPz8gXCJDbG91ZFdhdGNoXCIsXG4gICAgICAgIHVybFBhcnNlcjogY29uZmlnPy51cmxQYXJzZXIgPz8gcGFyc2VVcmwsXG4gICAgICAgIHV0ZjhEZWNvZGVyOiBjb25maWc/LnV0ZjhEZWNvZGVyID8/IGZyb21VdGY4LFxuICAgICAgICB1dGY4RW5jb2RlcjogY29uZmlnPy51dGY4RW5jb2RlciA/PyB0b1V0ZjgsXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBnZXRBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uLCByZXNvbHZlQXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgfSBmcm9tIFwiQGF3cy1zZGsvcmVnaW9uLWNvbmZpZy1yZXNvbHZlclwiO1xuaW1wb3J0IHsgZ2V0SHR0cEhhbmRsZXJFeHRlbnNpb25Db25maWd1cmF0aW9uLCByZXNvbHZlSHR0cEhhbmRsZXJSdW50aW1lQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sIHJlc29sdmVEZWZhdWx0UnVudGltZUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IGdldEh0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgcmVzb2x2ZUh0dHBBdXRoUnVudGltZUNvbmZpZyB9IGZyb20gXCIuL2F1dGgvaHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uXCI7XG5leHBvcnQgY29uc3QgcmVzb2x2ZVJ1bnRpbWVFeHRlbnNpb25zID0gKHJ1bnRpbWVDb25maWcsIGV4dGVuc2lvbnMpID0+IHtcbiAgICBjb25zdCBleHRlbnNpb25Db25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbihnZXRBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uKHJ1bnRpbWVDb25maWcpLCBnZXREZWZhdWx0RXh0ZW5zaW9uQ29uZmlndXJhdGlvbihydW50aW1lQ29uZmlnKSwgZ2V0SHR0cEhhbmRsZXJFeHRlbnNpb25Db25maWd1cmF0aW9uKHJ1bnRpbWVDb25maWcpLCBnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZykpO1xuICAgIGV4dGVuc2lvbnMuZm9yRWFjaCgoZXh0ZW5zaW9uKSA9PiBleHRlbnNpb24uY29uZmlndXJlKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pKTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihydW50aW1lQ29uZmlnLCByZXNvbHZlQXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbihleHRlbnNpb25Db25maWd1cmF0aW9uKSwgcmVzb2x2ZURlZmF1bHRSdW50aW1lQ29uZmlnKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pLCByZXNvbHZlSHR0cEhhbmRsZXJSdW50aW1lQ29uZmlnKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pLCByZXNvbHZlSHR0cEF1dGhSdW50aW1lQ29uZmlnKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pKTtcbn07XG4iLCJleHBvcnQgY29uc3QgZ2V0SHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uID0gKHJ1bnRpbWVDb25maWcpID0+IHtcbiAgICBjb25zdCBfaHR0cEF1dGhTY2hlbWVzID0gcnVudGltZUNvbmZpZy5odHRwQXV0aFNjaGVtZXM7XG4gICAgbGV0IF9odHRwQXV0aFNjaGVtZVByb3ZpZGVyID0gcnVudGltZUNvbmZpZy5odHRwQXV0aFNjaGVtZVByb3ZpZGVyO1xuICAgIGxldCBfY3JlZGVudGlhbHMgPSBydW50aW1lQ29uZmlnLmNyZWRlbnRpYWxzO1xuICAgIHJldHVybiB7XG4gICAgICAgIHNldEh0dHBBdXRoU2NoZW1lKGh0dHBBdXRoU2NoZW1lKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IF9odHRwQXV0aFNjaGVtZXMuZmluZEluZGV4KChzY2hlbWUpID0+IHNjaGVtZS5zY2hlbWVJZCA9PT0gaHR0cEF1dGhTY2hlbWUuc2NoZW1lSWQpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIF9odHRwQXV0aFNjaGVtZXMucHVzaChodHRwQXV0aFNjaGVtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfaHR0cEF1dGhTY2hlbWVzLnNwbGljZShpbmRleCwgMSwgaHR0cEF1dGhTY2hlbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBodHRwQXV0aFNjaGVtZXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2h0dHBBdXRoU2NoZW1lcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0SHR0cEF1dGhTY2hlbWVQcm92aWRlcihodHRwQXV0aFNjaGVtZVByb3ZpZGVyKSB7XG4gICAgICAgICAgICBfaHR0cEF1dGhTY2hlbWVQcm92aWRlciA9IGh0dHBBdXRoU2NoZW1lUHJvdmlkZXI7XG4gICAgICAgIH0sXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lUHJvdmlkZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2h0dHBBdXRoU2NoZW1lUHJvdmlkZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHNldENyZWRlbnRpYWxzKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICBfY3JlZGVudGlhbHMgPSBjcmVkZW50aWFscztcbiAgICAgICAgfSxcbiAgICAgICAgY3JlZGVudGlhbHMoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NyZWRlbnRpYWxzO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVIdHRwQXV0aFJ1bnRpbWVDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVzOiBjb25maWcuaHR0cEF1dGhTY2hlbWVzKCksXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lUHJvdmlkZXI6IGNvbmZpZy5odHRwQXV0aFNjaGVtZVByb3ZpZGVyKCksXG4gICAgICAgIGNyZWRlbnRpYWxzOiBjb25maWcuY3JlZGVudGlhbHMoKSxcbiAgICB9O1xufTtcbiIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiemxpYlwiKTsiLCJpbXBvcnQgeyBjcmVhdGVHemlwIH0gZnJvbSBcInpsaWJcIjtcbmV4cG9ydCBjb25zdCBjb21wcmVzc1N0cmVhbSA9IGFzeW5jIChib2R5KSA9PiBib2R5LnBpcGUoY3JlYXRlR3ppcCgpKTtcbiIsImltcG9ydCB7IHRvVWludDhBcnJheSB9IGZyb20gXCJAc21pdGh5L3V0aWwtdXRmOFwiO1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSBcInV0aWxcIjtcbmltcG9ydCB7IGd6aXAgfSBmcm9tIFwiemxpYlwiO1xuY29uc3QgZ3ppcEFzeW5jID0gcHJvbWlzaWZ5KGd6aXApO1xuZXhwb3J0IGNvbnN0IGNvbXByZXNzU3RyaW5nID0gYXN5bmMgKGJvZHkpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb21wcmVzc2VkQnVmZmVyID0gYXdhaXQgZ3ppcEFzeW5jKHRvVWludDhBcnJheShib2R5IHx8IFwiXCIpKTtcbiAgICAgICAgcmV0dXJuIHRvVWludDhBcnJheShjb21wcmVzc2VkQnVmZmVyKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsdXJlIGR1cmluZyBjb21wcmVzc2lvbjogXCIgKyBlcnIubWVzc2FnZSk7XG4gICAgfVxufTtcbiIsImV4cG9ydCB2YXIgQ29tcHJlc3Npb25BbGdvcml0aG07XG4oZnVuY3Rpb24gKENvbXByZXNzaW9uQWxnb3JpdGhtKSB7XG4gICAgQ29tcHJlc3Npb25BbGdvcml0aG1bXCJHWklQXCJdID0gXCJnemlwXCI7XG59KShDb21wcmVzc2lvbkFsZ29yaXRobSB8fCAoQ29tcHJlc3Npb25BbGdvcml0aG0gPSB7fSkpO1xuZXhwb3J0IGNvbnN0IENMSUVOVF9TVVBQT1JURURfQUxHT1JJVEhNUyA9IFtDb21wcmVzc2lvbkFsZ29yaXRobS5HWklQXTtcbiIsImltcG9ydCB7IGlzQXJyYXlCdWZmZXIgfSBmcm9tIFwiQHNtaXRoeS9pcy1hcnJheS1idWZmZXJcIjtcbmV4cG9ydCBjb25zdCBpc1N0cmVhbWluZyA9IChib2R5KSA9PiBib2R5ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGJvZHkgIT09IFwic3RyaW5nXCIgJiYgIUFycmF5QnVmZmVyLmlzVmlldyhib2R5KSAmJiAhaXNBcnJheUJ1ZmZlcihib2R5KTtcbiIsImltcG9ydCB7IHNldEZlYXR1cmUgfSBmcm9tIFwiQHNtaXRoeS9jb3JlXCI7XG5pbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IGNvbXByZXNzU3RyZWFtIH0gZnJvbSBcIi4vY29tcHJlc3NTdHJlYW1cIjtcbmltcG9ydCB7IGNvbXByZXNzU3RyaW5nIH0gZnJvbSBcIi4vY29tcHJlc3NTdHJpbmdcIjtcbmltcG9ydCB7IENMSUVOVF9TVVBQT1JURURfQUxHT1JJVEhNUyB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgaXNTdHJlYW1pbmcgfSBmcm9tIFwiLi9pc1N0cmVhbWluZ1wiO1xuZXhwb3J0IGNvbnN0IGNvbXByZXNzaW9uTWlkZGxld2FyZSA9IChjb25maWcsIG1pZGRsZXdhcmVDb25maWcpID0+IChuZXh0LCBjb250ZXh0KSA9PiBhc3luYyAoYXJncykgPT4ge1xuICAgIGlmICghSHR0cFJlcXVlc3QuaXNJbnN0YW5jZShhcmdzLnJlcXVlc3QpKSB7XG4gICAgICAgIHJldHVybiBuZXh0KGFyZ3MpO1xuICAgIH1cbiAgICBjb25zdCBkaXNhYmxlUmVxdWVzdENvbXByZXNzaW9uID0gYXdhaXQgY29uZmlnLmRpc2FibGVSZXF1ZXN0Q29tcHJlc3Npb24oKTtcbiAgICBpZiAoZGlzYWJsZVJlcXVlc3RDb21wcmVzc2lvbikge1xuICAgICAgICByZXR1cm4gbmV4dChhcmdzKTtcbiAgICB9XG4gICAgY29uc3QgeyByZXF1ZXN0IH0gPSBhcmdzO1xuICAgIGNvbnN0IHsgYm9keSwgaGVhZGVycyB9ID0gcmVxdWVzdDtcbiAgICBjb25zdCB7IGVuY29kaW5ncywgc3RyZWFtUmVxdWlyZXNMZW5ndGggfSA9IG1pZGRsZXdhcmVDb25maWc7XG4gICAgbGV0IHVwZGF0ZWRCb2R5ID0gYm9keTtcbiAgICBsZXQgdXBkYXRlZEhlYWRlcnMgPSBoZWFkZXJzO1xuICAgIGZvciAoY29uc3QgYWxnb3JpdGhtIG9mIGVuY29kaW5ncykge1xuICAgICAgICBpZiAoQ0xJRU5UX1NVUFBPUlRFRF9BTEdPUklUSE1TLmluY2x1ZGVzKGFsZ29yaXRobSkpIHtcbiAgICAgICAgICAgIGxldCBpc1JlcXVlc3RDb21wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoaXNTdHJlYW1pbmcoYm9keSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXN0cmVhbVJlcXVpcmVzTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRCb2R5ID0gYXdhaXQgY29tcHJlc3NTdHJlYW0oYm9keSk7XG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWVzdENvbXByZXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29tcHJlc3Npb24gaXMgbm90IHN1cHBvcnRlZCBmb3Igc3RyZWFtaW5nIGJsb2JzIHRoYXQgcmVxdWlyZSBhIGxlbmd0aC5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYm9keUxlbmd0aCA9IGNvbmZpZy5ib2R5TGVuZ3RoQ2hlY2tlcihib2R5KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0TWluQ29tcHJlc3Npb25TaXplQnl0ZXMgPSBhd2FpdCBjb25maWcucmVxdWVzdE1pbkNvbXByZXNzaW9uU2l6ZUJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgaWYgKGJvZHlMZW5ndGggJiYgYm9keUxlbmd0aCA+PSByZXF1ZXN0TWluQ29tcHJlc3Npb25TaXplQnl0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZEJvZHkgPSBhd2FpdCBjb21wcmVzc1N0cmluZyhib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1ZXN0Q29tcHJlc3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUmVxdWVzdENvbXByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyc1tcImNvbnRlbnQtZW5jb2RpbmdcIl0pIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZEhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb250ZW50LWVuY29kaW5nXCI6IGAke2hlYWRlcnNbXCJjb250ZW50LWVuY29kaW5nXCJdfSwgJHthbGdvcml0aG19YCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRIZWFkZXJzID0geyAuLi5oZWFkZXJzLCBcImNvbnRlbnQtZW5jb2RpbmdcIjogYWxnb3JpdGhtIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh1cGRhdGVkSGVhZGVyc1tcImNvbnRlbnQtZW5jb2RpbmdcIl0uaW5jbHVkZXMoXCJnemlwXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldEZlYXR1cmUoY29udGV4dCwgXCJHWklQX1JFUVVFU1RfQ09NUFJFU1NJT05cIiwgXCJMXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV4dCh7XG4gICAgICAgIC4uLmFyZ3MsXG4gICAgICAgIHJlcXVlc3Q6IHtcbiAgICAgICAgICAgIC4uLnJlcXVlc3QsXG4gICAgICAgICAgICBib2R5OiB1cGRhdGVkQm9keSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHVwZGF0ZWRIZWFkZXJzLFxuICAgICAgICB9LFxuICAgIH0pO1xufTtcbmV4cG9ydCBjb25zdCBjb21wcmVzc2lvbk1pZGRsZXdhcmVPcHRpb25zID0ge1xuICAgIG5hbWU6IFwiY29tcHJlc3Npb25NaWRkbGV3YXJlXCIsXG4gICAgc3RlcDogXCJidWlsZFwiLFxuICAgIHRhZ3M6IFtcIlJFUVVFU1RfQk9EWV9DT01QUkVTU0lPTlwiLCBcIkdaSVBcIl0sXG4gICAgb3ZlcnJpZGU6IHRydWUsXG4gICAgcHJpb3JpdHk6IFwiaGlnaFwiLFxufTtcbiIsImltcG9ydCB7IGNvbXByZXNzaW9uTWlkZGxld2FyZSwgY29tcHJlc3Npb25NaWRkbGV3YXJlT3B0aW9ucywgfSBmcm9tIFwiLi9jb21wcmVzc2lvbk1pZGRsZXdhcmVcIjtcbmV4cG9ydCBjb25zdCBnZXRDb21wcmVzc2lvblBsdWdpbiA9IChjb25maWcsIG1pZGRsZXdhcmVDb25maWcpID0+ICh7XG4gICAgYXBwbHlUb1N0YWNrOiAoY2xpZW50U3RhY2spID0+IHtcbiAgICAgICAgY2xpZW50U3RhY2suYWRkKGNvbXByZXNzaW9uTWlkZGxld2FyZShjb25maWcsIG1pZGRsZXdhcmVDb25maWcpLCBjb21wcmVzc2lvbk1pZGRsZXdhcmVPcHRpb25zKTtcbiAgICB9LFxufSk7XG4iLCJleHBvcnQgY29uc3Qgc2VyaWFsaXplRmxvYXQgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBcIk5hTlwiO1xuICAgIH1cbiAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgIGNhc2UgSW5maW5pdHk6XG4gICAgICAgICAgICByZXR1cm4gXCJJbmZpbml0eVwiO1xuICAgICAgICBjYXNlIC1JbmZpbml0eTpcbiAgICAgICAgICAgIHJldHVybiBcIi1JbmZpbml0eVwiO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn07XG5leHBvcnQgY29uc3Qgc2VyaWFsaXplRGF0ZVRpbWUgPSAoZGF0ZSkgPT4gZGF0ZS50b0lTT1N0cmluZygpLnJlcGxhY2UoXCIuMDAwWlwiLCBcIlpcIik7XG4iLCJpbXBvcnQgeyBTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fU2VydmljZUV4Y2VwdGlvbiwgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5leHBvcnQgeyBfX1NlcnZpY2VFeGNlcHRpb24gfTtcbmV4cG9ydCBjbGFzcyBDbG91ZFdhdGNoU2VydmljZUV4Y2VwdGlvbiBleHRlbmRzIF9fU2VydmljZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENsb3VkV2F0Y2hTZXJ2aWNlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ2xvdWRXYXRjaFNlcnZpY2VFeGNlcHRpb24gYXMgX19CYXNlRXhjZXB0aW9uIH0gZnJvbSBcIi4vQ2xvdWRXYXRjaFNlcnZpY2VFeGNlcHRpb25cIjtcbmV4cG9ydCBjb25zdCBBY3Rpb25zU3VwcHJlc3NlZEJ5ID0ge1xuICAgIEFsYXJtOiBcIkFsYXJtXCIsXG4gICAgRXh0ZW5zaW9uUGVyaW9kOiBcIkV4dGVuc2lvblBlcmlvZFwiLFxuICAgIFdhaXRQZXJpb2Q6IFwiV2FpdFBlcmlvZFwiLFxufTtcbmV4cG9ydCBjb25zdCBBbGFybVR5cGUgPSB7XG4gICAgQ29tcG9zaXRlQWxhcm06IFwiQ29tcG9zaXRlQWxhcm1cIixcbiAgICBNZXRyaWNBbGFybTogXCJNZXRyaWNBbGFybVwiLFxufTtcbmV4cG9ydCBjb25zdCBIaXN0b3J5SXRlbVR5cGUgPSB7XG4gICAgQWN0aW9uOiBcIkFjdGlvblwiLFxuICAgIEFsYXJtQ29udHJpYnV0b3JBY3Rpb246IFwiQWxhcm1Db250cmlidXRvckFjdGlvblwiLFxuICAgIEFsYXJtQ29udHJpYnV0b3JTdGF0ZVVwZGF0ZTogXCJBbGFybUNvbnRyaWJ1dG9yU3RhdGVVcGRhdGVcIixcbiAgICBDb25maWd1cmF0aW9uVXBkYXRlOiBcIkNvbmZpZ3VyYXRpb25VcGRhdGVcIixcbiAgICBTdGF0ZVVwZGF0ZTogXCJTdGF0ZVVwZGF0ZVwiLFxufTtcbmV4cG9ydCBjb25zdCBTdGFuZGFyZFVuaXQgPSB7XG4gICAgQml0czogXCJCaXRzXCIsXG4gICAgQml0c19TZWNvbmQ6IFwiQml0cy9TZWNvbmRcIixcbiAgICBCeXRlczogXCJCeXRlc1wiLFxuICAgIEJ5dGVzX1NlY29uZDogXCJCeXRlcy9TZWNvbmRcIixcbiAgICBDb3VudDogXCJDb3VudFwiLFxuICAgIENvdW50X1NlY29uZDogXCJDb3VudC9TZWNvbmRcIixcbiAgICBHaWdhYml0czogXCJHaWdhYml0c1wiLFxuICAgIEdpZ2FiaXRzX1NlY29uZDogXCJHaWdhYml0cy9TZWNvbmRcIixcbiAgICBHaWdhYnl0ZXM6IFwiR2lnYWJ5dGVzXCIsXG4gICAgR2lnYWJ5dGVzX1NlY29uZDogXCJHaWdhYnl0ZXMvU2Vjb25kXCIsXG4gICAgS2lsb2JpdHM6IFwiS2lsb2JpdHNcIixcbiAgICBLaWxvYml0c19TZWNvbmQ6IFwiS2lsb2JpdHMvU2Vjb25kXCIsXG4gICAgS2lsb2J5dGVzOiBcIktpbG9ieXRlc1wiLFxuICAgIEtpbG9ieXRlc19TZWNvbmQ6IFwiS2lsb2J5dGVzL1NlY29uZFwiLFxuICAgIE1lZ2FiaXRzOiBcIk1lZ2FiaXRzXCIsXG4gICAgTWVnYWJpdHNfU2Vjb25kOiBcIk1lZ2FiaXRzL1NlY29uZFwiLFxuICAgIE1lZ2FieXRlczogXCJNZWdhYnl0ZXNcIixcbiAgICBNZWdhYnl0ZXNfU2Vjb25kOiBcIk1lZ2FieXRlcy9TZWNvbmRcIixcbiAgICBNaWNyb3NlY29uZHM6IFwiTWljcm9zZWNvbmRzXCIsXG4gICAgTWlsbGlzZWNvbmRzOiBcIk1pbGxpc2Vjb25kc1wiLFxuICAgIE5vbmU6IFwiTm9uZVwiLFxuICAgIFBlcmNlbnQ6IFwiUGVyY2VudFwiLFxuICAgIFNlY29uZHM6IFwiU2Vjb25kc1wiLFxuICAgIFRlcmFiaXRzOiBcIlRlcmFiaXRzXCIsXG4gICAgVGVyYWJpdHNfU2Vjb25kOiBcIlRlcmFiaXRzL1NlY29uZFwiLFxuICAgIFRlcmFieXRlczogXCJUZXJhYnl0ZXNcIixcbiAgICBUZXJhYnl0ZXNfU2Vjb25kOiBcIlRlcmFieXRlcy9TZWNvbmRcIixcbn07XG5leHBvcnQgY29uc3QgQW5vbWFseURldGVjdG9yU3RhdGVWYWx1ZSA9IHtcbiAgICBQRU5ESU5HX1RSQUlOSU5HOiBcIlBFTkRJTkdfVFJBSU5JTkdcIixcbiAgICBUUkFJTkVEOiBcIlRSQUlORURcIixcbiAgICBUUkFJTkVEX0lOU1VGRklDSUVOVF9EQVRBOiBcIlRSQUlORURfSU5TVUZGSUNJRU5UX0RBVEFcIixcbn07XG5leHBvcnQgY29uc3QgQW5vbWFseURldGVjdG9yVHlwZSA9IHtcbiAgICBNRVRSSUNfTUFUSDogXCJNRVRSSUNfTUFUSFwiLFxuICAgIFNJTkdMRV9NRVRSSUM6IFwiU0lOR0xFX01FVFJJQ1wiLFxufTtcbmV4cG9ydCBjb25zdCBDb21wYXJpc29uT3BlcmF0b3IgPSB7XG4gICAgR3JlYXRlclRoYW5PckVxdWFsVG9UaHJlc2hvbGQ6IFwiR3JlYXRlclRoYW5PckVxdWFsVG9UaHJlc2hvbGRcIixcbiAgICBHcmVhdGVyVGhhblRocmVzaG9sZDogXCJHcmVhdGVyVGhhblRocmVzaG9sZFwiLFxuICAgIEdyZWF0ZXJUaGFuVXBwZXJUaHJlc2hvbGQ6IFwiR3JlYXRlclRoYW5VcHBlclRocmVzaG9sZFwiLFxuICAgIExlc3NUaGFuTG93ZXJPckdyZWF0ZXJUaGFuVXBwZXJUaHJlc2hvbGQ6IFwiTGVzc1RoYW5Mb3dlck9yR3JlYXRlclRoYW5VcHBlclRocmVzaG9sZFwiLFxuICAgIExlc3NUaGFuTG93ZXJUaHJlc2hvbGQ6IFwiTGVzc1RoYW5Mb3dlclRocmVzaG9sZFwiLFxuICAgIExlc3NUaGFuT3JFcXVhbFRvVGhyZXNob2xkOiBcIkxlc3NUaGFuT3JFcXVhbFRvVGhyZXNob2xkXCIsXG4gICAgTGVzc1RoYW5UaHJlc2hvbGQ6IFwiTGVzc1RoYW5UaHJlc2hvbGRcIixcbn07XG5leHBvcnQgY29uc3QgU3RhdGVWYWx1ZSA9IHtcbiAgICBBTEFSTTogXCJBTEFSTVwiLFxuICAgIElOU1VGRklDSUVOVF9EQVRBOiBcIklOU1VGRklDSUVOVF9EQVRBXCIsXG4gICAgT0s6IFwiT0tcIixcbn07XG5leHBvcnQgY2xhc3MgQ29uY3VycmVudE1vZGlmaWNhdGlvbkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiQ29uY3VycmVudE1vZGlmaWNhdGlvbkV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ29uY3VycmVudE1vZGlmaWNhdGlvbkV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDb25jdXJyZW50TW9kaWZpY2F0aW9uRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ29uZmxpY3RFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkNvbmZsaWN0RXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJDb25mbGljdEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDb25mbGljdEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIERhc2hib2FyZEludmFsaWRJbnB1dEVycm9yIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJEYXNoYm9hcmRJbnZhbGlkSW5wdXRFcnJvclwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgZGFzaGJvYXJkVmFsaWRhdGlvbk1lc3NhZ2VzO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJEYXNoYm9hcmRJbnZhbGlkSW5wdXRFcnJvclwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBEYXNoYm9hcmRJbnZhbGlkSW5wdXRFcnJvci5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLmRhc2hib2FyZFZhbGlkYXRpb25NZXNzYWdlcyA9IG9wdHMuZGFzaGJvYXJkVmFsaWRhdGlvbk1lc3NhZ2VzO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBEYXNoYm9hcmROb3RGb3VuZEVycm9yIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJEYXNoYm9hcmROb3RGb3VuZEVycm9yXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiRGFzaGJvYXJkTm90Rm91bmRFcnJvclwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBEYXNoYm9hcmROb3RGb3VuZEVycm9yLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJlc291cmNlTm90Rm91bmQgZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIlJlc291cmNlTm90Rm91bmRcIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJSZXNvdXJjZU5vdEZvdW5kXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFJlc291cmNlTm90Rm91bmQucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW50ZXJuYWxTZXJ2aWNlRmF1bHQgZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludGVybmFsU2VydmljZUZhdWx0XCI7XG4gICAgJGZhdWx0ID0gXCJzZXJ2ZXJcIjtcbiAgICBNZXNzYWdlO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnRlcm5hbFNlcnZpY2VGYXVsdFwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcInNlcnZlclwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnRlcm5hbFNlcnZpY2VGYXVsdC5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvbkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW52YWxpZFBhcmFtZXRlckNvbWJpbmF0aW9uRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFBhcmFtZXRlckNvbWJpbmF0aW9uRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludmFsaWRQYXJhbWV0ZXJWYWx1ZUV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRQYXJhbWV0ZXJWYWx1ZUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTWlzc2luZ1JlcXVpcmVkUGFyYW1ldGVyRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJNaXNzaW5nUmVxdWlyZWRQYXJhbWV0ZXJFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJNaXNzaW5nUmVxdWlyZWRQYXJhbWV0ZXJFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTWlzc2luZ1JlcXVpcmVkUGFyYW1ldGVyRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIlJlc291cmNlTm90Rm91bmRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIFJlc291cmNlVHlwZTtcbiAgICBSZXNvdXJjZUlkO1xuICAgIE1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlJlc291cmNlTm90Rm91bmRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLlJlc291cmNlVHlwZSA9IG9wdHMuUmVzb3VyY2VUeXBlO1xuICAgICAgICB0aGlzLlJlc291cmNlSWQgPSBvcHRzLlJlc291cmNlSWQ7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZE5leHRUb2tlbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW52YWxpZE5leHRUb2tlblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWROZXh0VG9rZW5cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZE5leHRUb2tlbi5wcm90b3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBTY2FuQnkgPSB7XG4gICAgVElNRVNUQU1QX0FTQ0VORElORzogXCJUaW1lc3RhbXBBc2NlbmRpbmdcIixcbiAgICBUSU1FU1RBTVBfREVTQ0VORElORzogXCJUaW1lc3RhbXBEZXNjZW5kaW5nXCIsXG59O1xuZXhwb3J0IGNvbnN0IEV2YWx1YXRpb25TdGF0ZSA9IHtcbiAgICBQQVJUSUFMX0RBVEE6IFwiUEFSVElBTF9EQVRBXCIsXG59O1xuZXhwb3J0IGNvbnN0IFN0YXRpc3RpYyA9IHtcbiAgICBBdmVyYWdlOiBcIkF2ZXJhZ2VcIixcbiAgICBNYXhpbXVtOiBcIk1heGltdW1cIixcbiAgICBNaW5pbXVtOiBcIk1pbmltdW1cIixcbiAgICBTYW1wbGVDb3VudDogXCJTYW1wbGVDb3VudFwiLFxuICAgIFN1bTogXCJTdW1cIixcbn07XG5leHBvcnQgY2xhc3MgTGltaXRFeGNlZWRlZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiTGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiTGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgU3RhdHVzQ29kZSA9IHtcbiAgICBDT01QTEVURTogXCJDb21wbGV0ZVwiLFxuICAgIEZPUkJJRERFTjogXCJGb3JiaWRkZW5cIixcbiAgICBJTlRFUk5BTF9FUlJPUjogXCJJbnRlcm5hbEVycm9yXCIsXG4gICAgUEFSVElBTF9EQVRBOiBcIlBhcnRpYWxEYXRhXCIsXG59O1xuZXhwb3J0IGNvbnN0IE1ldHJpY1N0cmVhbU91dHB1dEZvcm1hdCA9IHtcbiAgICBKU09OOiBcImpzb25cIixcbiAgICBPUEVOX1RFTEVNRVRSWV8wXzc6IFwib3BlbnRlbGVtZXRyeTAuN1wiLFxuICAgIE9QRU5fVEVMRU1FVFJZXzFfMDogXCJvcGVudGVsZW1ldHJ5MS4wXCIsXG59O1xuZXhwb3J0IGNvbnN0IFJlY2VudGx5QWN0aXZlID0ge1xuICAgIFBUM0g6IFwiUFQzSFwiLFxufTtcbmV4cG9ydCBjbGFzcyBMaW1pdEV4Y2VlZGVkRmF1bHQgZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkxpbWl0RXhjZWVkZWRGYXVsdFwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkxpbWl0RXhjZWVkZWRGYXVsdFwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBMaW1pdEV4Y2VlZGVkRmF1bHQucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZEZvcm1hdEZhdWx0IGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkRm9ybWF0RmF1bHRcIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkRm9ybWF0RmF1bHRcIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZEZvcm1hdEZhdWx0LnByb3RvdHlwZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgcGFyc2VYbWxCb2R5IGFzIHBhcnNlQm9keSwgcGFyc2VYbWxFcnJvckJvZHkgYXMgcGFyc2VFcnJvckJvZHkgfSBmcm9tIFwiQGF3cy1zZGsvY29yZVwiO1xuaW1wb3J0IHsgSHR0cFJlcXVlc3QgYXMgX19IdHRwUmVxdWVzdCB9IGZyb20gXCJAc21pdGh5L3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IGNvbGxlY3RCb2R5LCBkZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24gYXMgX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24sIGV4cGVjdE5vbk51bGwgYXMgX19leHBlY3ROb25OdWxsLCBleHBlY3RTdHJpbmcgYXMgX19leHBlY3RTdHJpbmcsIGV4dGVuZGVkRW5jb2RlVVJJQ29tcG9uZW50IGFzIF9fZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQsIGdldEFycmF5SWZTaW5nbGVJdGVtIGFzIF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0sIHBhcnNlQm9vbGVhbiBhcyBfX3BhcnNlQm9vbGVhbiwgcGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0IGFzIF9fcGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0LCBzZXJpYWxpemVEYXRlVGltZSBhcyBfX3NlcmlhbGl6ZURhdGVUaW1lLCBzZXJpYWxpemVGbG9hdCBhcyBfX3NlcmlhbGl6ZUZsb2F0LCBzdHJpY3RQYXJzZUZsb2F0IGFzIF9fc3RyaWN0UGFyc2VGbG9hdCwgc3RyaWN0UGFyc2VJbnQzMiBhcyBfX3N0cmljdFBhcnNlSW50MzIsIHN0cmljdFBhcnNlTG9uZyBhcyBfX3N0cmljdFBhcnNlTG9uZywgd2l0aEJhc2VFeGNlcHRpb24sIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgQ2xvdWRXYXRjaFNlcnZpY2VFeGNlcHRpb24gYXMgX19CYXNlRXhjZXB0aW9uIH0gZnJvbSBcIi4uL21vZGVscy9DbG91ZFdhdGNoU2VydmljZUV4Y2VwdGlvblwiO1xuaW1wb3J0IHsgQ29uY3VycmVudE1vZGlmaWNhdGlvbkV4Y2VwdGlvbiwgQ29uZmxpY3RFeGNlcHRpb24sIERhc2hib2FyZEludmFsaWRJbnB1dEVycm9yLCBJbnRlcm5hbFNlcnZpY2VGYXVsdCwgSW52YWxpZEZvcm1hdEZhdWx0LCBJbnZhbGlkTmV4dFRva2VuLCBJbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb24sIEludmFsaWRQYXJhbWV0ZXJWYWx1ZUV4Y2VwdGlvbiwgTGltaXRFeGNlZWRlZEV4Y2VwdGlvbiwgTGltaXRFeGNlZWRlZEZhdWx0LCBNaXNzaW5nUmVxdWlyZWRQYXJhbWV0ZXJFeGNlcHRpb24sIFJlc291cmNlTm90Rm91bmQsIFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24sIH0gZnJvbSBcIi4uL21vZGVscy9tb2RlbHNfMFwiO1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZUFsYXJtc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZWxldGVBbGFybXNJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9EQSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlQW5vbWFseURldGVjdG9yQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0RlbGV0ZUFub21hbHlEZXRlY3RvcklucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RBRCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlRGFzaGJvYXJkc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZWxldGVEYXNoYm9hcmRzSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfREQsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZUluc2lnaHRSdWxlc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZWxldGVJbnNpZ2h0UnVsZXNJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9ESVIsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZU1ldHJpY1N0cmVhbUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZWxldGVNZXRyaWNTdHJlYW1JbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9ETVMsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlQWxhcm1Db250cmlidXRvcnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGVzY3JpYmVBbGFybUNvbnRyaWJ1dG9yc0lucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RBQyxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVBbGFybUhpc3RvcnlDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGVzY3JpYmVBbGFybUhpc3RvcnlJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9EQUgsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlQWxhcm1zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0Rlc2NyaWJlQWxhcm1zSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfREFlLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUFsYXJtc0Zvck1ldHJpY0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZXNjcmliZUFsYXJtc0Zvck1ldHJpY0lucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RBRk0sXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlQW5vbWFseURldGVjdG9yc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZXNjcmliZUFub21hbHlEZXRlY3RvcnNJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9EQURlLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUluc2lnaHRSdWxlc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZXNjcmliZUluc2lnaHRSdWxlc0lucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RJUmUsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rpc2FibGVBbGFybUFjdGlvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGlzYWJsZUFsYXJtQWN0aW9uc0lucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RBQSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGlzYWJsZUluc2lnaHRSdWxlc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EaXNhYmxlSW5zaWdodFJ1bGVzSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfRElSaSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRW5hYmxlQWxhcm1BY3Rpb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0VuYWJsZUFsYXJtQWN0aW9uc0lucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0VBQSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRW5hYmxlSW5zaWdodFJ1bGVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0VuYWJsZUluc2lnaHRSdWxlc0lucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0VJUixcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0RGFzaGJvYXJkQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0dldERhc2hib2FyZElucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0dELFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXRJbnNpZ2h0UnVsZVJlcG9ydENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9HZXRJbnNpZ2h0UnVsZVJlcG9ydElucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0dJUlIsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0dldE1ldHJpY0RhdGFDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfR2V0TWV0cmljRGF0YUlucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0dNRCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0TWV0cmljU3RhdGlzdGljc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9HZXRNZXRyaWNTdGF0aXN0aWNzSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfR01TLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXRNZXRyaWNTdHJlYW1Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfR2V0TWV0cmljU3RyZWFtSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfR01TZSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0TWV0cmljV2lkZ2V0SW1hZ2VDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfR2V0TWV0cmljV2lkZ2V0SW1hZ2VJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9HTVdJLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0RGFzaGJvYXJkc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9MaXN0RGFzaGJvYXJkc0lucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0xELFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0TWFuYWdlZEluc2lnaHRSdWxlc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9MaXN0TWFuYWdlZEluc2lnaHRSdWxlc0lucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0xNSVIsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RNZXRyaWNzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0xpc3RNZXRyaWNzSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfTE0sXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RNZXRyaWNTdHJlYW1zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0xpc3RNZXRyaWNTdHJlYW1zSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfTE1TLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0VGFnc0ZvclJlc291cmNlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0xpc3RUYWdzRm9yUmVzb3VyY2VJbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9MVEZSLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9QdXRBbm9tYWx5RGV0ZWN0b3JDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfUHV0QW5vbWFseURldGVjdG9ySW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfUEFELFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9QdXRDb21wb3NpdGVBbGFybUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9QdXRDb21wb3NpdGVBbGFybUlucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1BDQSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfUHV0RGFzaGJvYXJkQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1B1dERhc2hib2FyZElucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1BELFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9QdXRJbnNpZ2h0UnVsZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9QdXRJbnNpZ2h0UnVsZUlucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1BJUixcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfUHV0TWFuYWdlZEluc2lnaHRSdWxlc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9QdXRNYW5hZ2VkSW5zaWdodFJ1bGVzSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfUE1JUixcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfUHV0TWV0cmljQWxhcm1Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfUHV0TWV0cmljQWxhcm1JbnB1dChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9QTUEsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1B1dE1ldHJpY0RhdGFDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfUHV0TWV0cmljRGF0YUlucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1BNRCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfUHV0TWV0cmljU3RyZWFtQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1B1dE1ldHJpY1N0cmVhbUlucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1BNUyxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU2V0QWxhcm1TdGF0ZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9TZXRBbGFybVN0YXRlSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfU0FTLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TdGFydE1ldHJpY1N0cmVhbXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfU3RhcnRNZXRyaWNTdHJlYW1zSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfU01TLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TdG9wTWV0cmljU3RyZWFtc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9TdG9wTWV0cmljU3RyZWFtc0lucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1NNU3QsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1RhZ1Jlc291cmNlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1RhZ1Jlc291cmNlSW5wdXQoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfVFIsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VudGFnUmVzb3VyY2VDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfVW50YWdSZXNvdXJjZUlucHV0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1VSLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVBbGFybXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBhd2FpdCBjb2xsZWN0Qm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVBbm9tYWx5RGV0ZWN0b3JDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0RlbGV0ZUFub21hbHlEZXRlY3Rvck91dHB1dChkYXRhLkRlbGV0ZUFub21hbHlEZXRlY3RvclJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlRGFzaGJvYXJkc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfRGVsZXRlRGFzaGJvYXJkc091dHB1dChkYXRhLkRlbGV0ZURhc2hib2FyZHNSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUluc2lnaHRSdWxlc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfRGVsZXRlSW5zaWdodFJ1bGVzT3V0cHV0KGRhdGEuRGVsZXRlSW5zaWdodFJ1bGVzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVNZXRyaWNTdHJlYW1Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0RlbGV0ZU1ldHJpY1N0cmVhbU91dHB1dChkYXRhLkRlbGV0ZU1ldHJpY1N0cmVhbVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVBbGFybUNvbnRyaWJ1dG9yc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfRGVzY3JpYmVBbGFybUNvbnRyaWJ1dG9yc091dHB1dChkYXRhLkRlc2NyaWJlQWxhcm1Db250cmlidXRvcnNSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlQWxhcm1IaXN0b3J5Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EZXNjcmliZUFsYXJtSGlzdG9yeU91dHB1dChkYXRhLkRlc2NyaWJlQWxhcm1IaXN0b3J5UmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUFsYXJtc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfRGVzY3JpYmVBbGFybXNPdXRwdXQoZGF0YS5EZXNjcmliZUFsYXJtc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVBbGFybXNGb3JNZXRyaWNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0Rlc2NyaWJlQWxhcm1zRm9yTWV0cmljT3V0cHV0KGRhdGEuRGVzY3JpYmVBbGFybXNGb3JNZXRyaWNSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlQW5vbWFseURldGVjdG9yc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfRGVzY3JpYmVBbm9tYWx5RGV0ZWN0b3JzT3V0cHV0KGRhdGEuRGVzY3JpYmVBbm9tYWx5RGV0ZWN0b3JzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUluc2lnaHRSdWxlc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfRGVzY3JpYmVJbnNpZ2h0UnVsZXNPdXRwdXQoZGF0YS5EZXNjcmliZUluc2lnaHRSdWxlc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGlzYWJsZUFsYXJtQWN0aW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGF3YWl0IGNvbGxlY3RCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rpc2FibGVJbnNpZ2h0UnVsZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0Rpc2FibGVJbnNpZ2h0UnVsZXNPdXRwdXQoZGF0YS5EaXNhYmxlSW5zaWdodFJ1bGVzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9FbmFibGVBbGFybUFjdGlvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBhd2FpdCBjb2xsZWN0Qm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9FbmFibGVJbnNpZ2h0UnVsZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0VuYWJsZUluc2lnaHRSdWxlc091dHB1dChkYXRhLkVuYWJsZUluc2lnaHRSdWxlc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0RGFzaGJvYXJkQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9HZXREYXNoYm9hcmRPdXRwdXQoZGF0YS5HZXREYXNoYm9hcmRSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0dldEluc2lnaHRSdWxlUmVwb3J0Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9HZXRJbnNpZ2h0UnVsZVJlcG9ydE91dHB1dChkYXRhLkdldEluc2lnaHRSdWxlUmVwb3J0UmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRNZXRyaWNEYXRhQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9HZXRNZXRyaWNEYXRhT3V0cHV0KGRhdGEuR2V0TWV0cmljRGF0YVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0TWV0cmljU3RhdGlzdGljc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfR2V0TWV0cmljU3RhdGlzdGljc091dHB1dChkYXRhLkdldE1ldHJpY1N0YXRpc3RpY3NSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0dldE1ldHJpY1N0cmVhbUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfR2V0TWV0cmljU3RyZWFtT3V0cHV0KGRhdGEuR2V0TWV0cmljU3RyZWFtUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXRNZXRyaWNXaWRnZXRJbWFnZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfR2V0TWV0cmljV2lkZ2V0SW1hZ2VPdXRwdXQoZGF0YS5HZXRNZXRyaWNXaWRnZXRJbWFnZVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdERhc2hib2FyZHNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0xpc3REYXNoYm9hcmRzT3V0cHV0KGRhdGEuTGlzdERhc2hib2FyZHNSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RNYW5hZ2VkSW5zaWdodFJ1bGVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9MaXN0TWFuYWdlZEluc2lnaHRSdWxlc091dHB1dChkYXRhLkxpc3RNYW5hZ2VkSW5zaWdodFJ1bGVzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0TWV0cmljc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfTGlzdE1ldHJpY3NPdXRwdXQoZGF0YS5MaXN0TWV0cmljc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdE1ldHJpY1N0cmVhbXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0xpc3RNZXRyaWNTdHJlYW1zT3V0cHV0KGRhdGEuTGlzdE1ldHJpY1N0cmVhbXNSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RUYWdzRm9yUmVzb3VyY2VDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0xpc3RUYWdzRm9yUmVzb3VyY2VPdXRwdXQoZGF0YS5MaXN0VGFnc0ZvclJlc291cmNlUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9QdXRBbm9tYWx5RGV0ZWN0b3JDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1B1dEFub21hbHlEZXRlY3Rvck91dHB1dChkYXRhLlB1dEFub21hbHlEZXRlY3RvclJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfUHV0Q29tcG9zaXRlQWxhcm1Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBhd2FpdCBjb2xsZWN0Qm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9QdXREYXNoYm9hcmRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1B1dERhc2hib2FyZE91dHB1dChkYXRhLlB1dERhc2hib2FyZFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfUHV0SW5zaWdodFJ1bGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1B1dEluc2lnaHRSdWxlT3V0cHV0KGRhdGEuUHV0SW5zaWdodFJ1bGVSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1B1dE1hbmFnZWRJbnNpZ2h0UnVsZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1B1dE1hbmFnZWRJbnNpZ2h0UnVsZXNPdXRwdXQoZGF0YS5QdXRNYW5hZ2VkSW5zaWdodFJ1bGVzUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9QdXRNZXRyaWNBbGFybUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGF3YWl0IGNvbGxlY3RCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1B1dE1ldHJpY0RhdGFDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBhd2FpdCBjb2xsZWN0Qm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9QdXRNZXRyaWNTdHJlYW1Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1B1dE1ldHJpY1N0cmVhbU91dHB1dChkYXRhLlB1dE1ldHJpY1N0cmVhbVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU2V0QWxhcm1TdGF0ZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGF3YWl0IGNvbGxlY3RCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1N0YXJ0TWV0cmljU3RyZWFtc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfU3RhcnRNZXRyaWNTdHJlYW1zT3V0cHV0KGRhdGEuU3RhcnRNZXRyaWNTdHJlYW1zUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TdG9wTWV0cmljU3RyZWFtc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfU3RvcE1ldHJpY1N0cmVhbXNPdXRwdXQoZGF0YS5TdG9wTWV0cmljU3RyZWFtc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfVGFnUmVzb3VyY2VDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1RhZ1Jlc291cmNlT3V0cHV0KGRhdGEuVGFnUmVzb3VyY2VSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VudGFnUmVzb3VyY2VDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1VudGFnUmVzb3VyY2VPdXRwdXQoZGF0YS5VbnRhZ1Jlc291cmNlUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmNvbnN0IGRlX0NvbW1hbmRFcnJvciA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBwYXJzZWRPdXRwdXQgPSB7XG4gICAgICAgIC4uLm91dHB1dCxcbiAgICAgICAgYm9keTogYXdhaXQgcGFyc2VFcnJvckJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpLFxuICAgIH07XG4gICAgY29uc3QgZXJyb3JDb2RlID0gbG9hZFF1ZXJ5RXJyb3JDb2RlKG91dHB1dCwgcGFyc2VkT3V0cHV0LmJvZHkpO1xuICAgIHN3aXRjaCAoZXJyb3JDb2RlKSB7XG4gICAgICAgIGNhc2UgXCJSZXNvdXJjZU5vdEZvdW5kXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3Vkd2F0Y2gjUmVzb3VyY2VOb3RGb3VuZFwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfUmVzb3VyY2VOb3RGb3VuZFJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW50ZXJuYWxTZXJ2aWNlRXJyb3JcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR3YXRjaCNJbnRlcm5hbFNlcnZpY2VGYXVsdFwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW50ZXJuYWxTZXJ2aWNlRmF1bHRSZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHdhdGNoI0ludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvbkV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZFBhcmFtZXRlckNvbWJpbmF0aW9uRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkUGFyYW1ldGVyVmFsdWVcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR3YXRjaCNJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRQYXJhbWV0ZXJWYWx1ZUV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiTWlzc2luZ1BhcmFtZXRlclwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHdhdGNoI01pc3NpbmdSZXF1aXJlZFBhcmFtZXRlckV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfTWlzc2luZ1JlcXVpcmVkUGFyYW1ldGVyRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3Vkd2F0Y2gjUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiQ29uZmxpY3RFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR3YXRjaCNDb25mbGljdEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfQ29uZmxpY3RFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWROZXh0VG9rZW5cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR3YXRjaCNJbnZhbGlkTmV4dFRva2VuXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkTmV4dFRva2VuUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3Vkd2F0Y2gjTGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfTGltaXRFeGNlZWRlZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiTGltaXRFeGNlZWRlZFwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5jbG91ZHdhdGNoI0xpbWl0RXhjZWVkZWRGYXVsdFwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfTGltaXRFeGNlZWRlZEZhdWx0UmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkUGFyYW1ldGVySW5wdXRcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR3YXRjaCNEYXNoYm9hcmRJbnZhbGlkSW5wdXRFcnJvclwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfRGFzaGJvYXJkSW52YWxpZElucHV0RXJyb3JSZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MuY2xvdWR3YXRjaCNDb25jdXJyZW50TW9kaWZpY2F0aW9uRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9Db25jdXJyZW50TW9kaWZpY2F0aW9uRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkRm9ybWF0XCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLmNsb3Vkd2F0Y2gjSW52YWxpZEZvcm1hdEZhdWx0XCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkRm9ybWF0RmF1bHRSZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZEJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICAgICAgICAgIHJldHVybiB0aHJvd0RlZmF1bHRFcnJvcih7XG4gICAgICAgICAgICAgICAgb3V0cHV0LFxuICAgICAgICAgICAgICAgIHBhcnNlZEJvZHk6IHBhcnNlZEJvZHkuRXJyb3IsXG4gICAgICAgICAgICAgICAgZXJyb3JDb2RlLFxuICAgICAgICAgICAgfSk7XG4gICAgfVxufTtcbmNvbnN0IGRlX0NvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0NvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IENvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0NvbmZsaWN0RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9Db25mbGljdEV4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQ29uZmxpY3RFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0Rhc2hib2FyZEludmFsaWRJbnB1dEVycm9yUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9EYXNoYm9hcmRJbnZhbGlkSW5wdXRFcnJvcihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgRGFzaGJvYXJkSW52YWxpZElucHV0RXJyb3Ioe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludGVybmFsU2VydmljZUZhdWx0UmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9JbnRlcm5hbFNlcnZpY2VGYXVsdChib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW50ZXJuYWxTZXJ2aWNlRmF1bHQoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRGb3JtYXRGYXVsdFJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfSW52YWxpZEZvcm1hdEZhdWx0KGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkRm9ybWF0RmF1bHQoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWROZXh0VG9rZW5SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0ludmFsaWROZXh0VG9rZW4oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWROZXh0VG9rZW4oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvbkV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfSW52YWxpZFBhcmFtZXRlckNvbWJpbmF0aW9uRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0ludmFsaWRQYXJhbWV0ZXJWYWx1ZUV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfSW52YWxpZFBhcmFtZXRlclZhbHVlRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0xpbWl0RXhjZWVkZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0xpbWl0RXhjZWVkZWRFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IExpbWl0RXhjZWVkZWRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX0xpbWl0RXhjZWVkZWRGYXVsdFJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfTGltaXRFeGNlZWRlZEZhdWx0KGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBMaW1pdEV4Y2VlZGVkRmF1bHQoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX01pc3NpbmdSZXF1aXJlZFBhcmFtZXRlckV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfTWlzc2luZ1JlcXVpcmVkUGFyYW1ldGVyRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBNaXNzaW5nUmVxdWlyZWRQYXJhbWV0ZXJFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX1Jlc291cmNlTm90Rm91bmRSZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX1Jlc291cmNlTm90Rm91bmQoYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFJlc291cmNlTm90Rm91bmQoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IGRlX1Jlc291cmNlTm90Rm91bmRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX1Jlc291cmNlTm90Rm91bmRFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uZGVzZXJpYWxpemVkLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIGJvZHkpO1xufTtcbmNvbnN0IHNlX0FsYXJtTmFtZXMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfWBdID0gZW50cnk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQWxhcm1UeXBlcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBlbnRyeTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9Bbm9tYWx5RGV0ZWN0b3JDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfRVRSXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9Bbm9tYWx5RGV0ZWN0b3JFeGNsdWRlZFRpbWVSYW5nZXMoaW5wdXRbX0VUUl0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0VUUl0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5FeGNsdWRlZFRpbWVSYW5nZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBFeGNsdWRlZFRpbWVSYW5nZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NVF0gPSBpbnB1dFtfTVRdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9Bbm9tYWx5RGV0ZWN0b3JFeGNsdWRlZFRpbWVSYW5nZXMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfUmFuZ2UoZW50cnksIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9LiR7a2V5fWBdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Fub21hbHlEZXRlY3RvclR5cGVzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn1gXSA9IGVudHJ5O1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0NvdW50cyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBfX3NlcmlhbGl6ZUZsb2F0KGVudHJ5KTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EYXNoYm9hcmROYW1lcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBlbnRyeTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZWxldGVBbGFybXNJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0FOXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9BbGFybU5hbWVzKGlucHV0W19BTl0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0FOXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkFsYXJtTmFtZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBBbGFybU5hbWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGV0ZUFub21hbHlEZXRlY3RvcklucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OXSA9IGlucHV0W19OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NTl0gPSBpbnB1dFtfTU5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0RpbWVuc2lvbnMoaW5wdXRbX0RdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19EXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkRpbWVuc2lvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBEaW1lbnNpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TXSA9IGlucHV0W19TXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TTUFEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9TaW5nbGVNZXRyaWNBbm9tYWx5RGV0ZWN0b3IoaW5wdXRbX1NNQURdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgU2luZ2xlTWV0cmljQW5vbWFseURldGVjdG9yLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTU1BRF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWV0cmljTWF0aEFub21hbHlEZXRlY3RvcihpbnB1dFtfTU1BRF0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBNZXRyaWNNYXRoQW5vbWFseURldGVjdG9yLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGV0ZURhc2hib2FyZHNJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0ROXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9EYXNoYm9hcmROYW1lcyhpbnB1dFtfRE5dLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19ETl0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5EYXNoYm9hcmROYW1lcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYERhc2hib2FyZE5hbWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGV0ZUluc2lnaHRSdWxlc0lucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUk5dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0luc2lnaHRSdWxlTmFtZXMoaW5wdXRbX1JOXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfUk5dPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuUnVsZU5hbWVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgUnVsZU5hbWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGV0ZU1ldHJpY1N0cmVhbUlucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTmFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTmFdID0gaW5wdXRbX05hXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRGVzY3JpYmVBbGFybUNvbnRyaWJ1dG9yc0lucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQU5sXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FObF0gPSBpbnB1dFtfQU5sXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OVF0gPSBpbnB1dFtfTlRdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZXNjcmliZUFsYXJtSGlzdG9yeUlucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQU5sXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FObF0gPSBpbnB1dFtfQU5sXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19BQ0ldICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQUNJXSA9IGlucHV0W19BQ0ldO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FUXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9BbGFybVR5cGVzKGlucHV0W19BVF0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0FUXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkFsYXJtVHlwZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBBbGFybVR5cGVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfSElUXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0hJVF0gPSBpbnB1dFtfSElUXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TRF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TRF0gPSBfX3NlcmlhbGl6ZURhdGVUaW1lKGlucHV0W19TRF0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0VEXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0VEXSA9IF9fc2VyaWFsaXplRGF0ZVRpbWUoaW5wdXRbX0VEXSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTVJdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTVJdID0gaW5wdXRbX01SXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OVF0gPSBpbnB1dFtfTlRdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NCXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NCXSA9IGlucHV0W19TQl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Rlc2NyaWJlQWxhcm1zRm9yTWV0cmljSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19NTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NTl0gPSBpbnB1dFtfTU5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTl0gPSBpbnB1dFtfTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU3RdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU3RdID0gaW5wdXRbX1N0XTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FU10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FU10gPSBpbnB1dFtfRVNdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0RpbWVuc2lvbnMoaW5wdXRbX0RdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19EXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkRpbWVuc2lvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBEaW1lbnNpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19QXSA9IGlucHV0W19QXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19VXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1VdID0gaW5wdXRbX1VdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZXNjcmliZUFsYXJtc0lucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQU5dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0FsYXJtTmFtZXMoaW5wdXRbX0FOXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfQU5dPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuQWxhcm1OYW1lcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEFsYXJtTmFtZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19BTlBdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQU5QXSA9IGlucHV0W19BTlBdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FUXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9BbGFybVR5cGVzKGlucHV0W19BVF0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0FUXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkFsYXJtVHlwZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBBbGFybVR5cGVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQ09BTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19DT0FOXSA9IGlucHV0W19DT0FOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19QT0FOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1BPQU5dID0gaW5wdXRbX1BPQU5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NWXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NWXSA9IGlucHV0W19TVl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQVBdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQVBdID0gaW5wdXRbX0FQXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NUl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NUl0gPSBpbnB1dFtfTVJdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05UXSA9IGlucHV0W19OVF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Rlc2NyaWJlQW5vbWFseURldGVjdG9yc0lucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTlRdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTlRdID0gaW5wdXRbX05UXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NUmFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTVJhXSA9IGlucHV0W19NUmFdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTl0gPSBpbnB1dFtfTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTU5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTU5dID0gaW5wdXRbX01OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9EaW1lbnNpb25zKGlucHV0W19EXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfRF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5EaW1lbnNpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRGltZW5zaW9ucy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FEVF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfQW5vbWFseURldGVjdG9yVHlwZXMoaW5wdXRbX0FEVF0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0FEVF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5Bbm9tYWx5RGV0ZWN0b3JUeXBlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEFub21hbHlEZXRlY3RvclR5cGVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Rlc2NyaWJlSW5zaWdodFJ1bGVzSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OVF0gPSBpbnB1dFtfTlRdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01SYV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NUmFdID0gaW5wdXRbX01SYV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RpbWVuc2lvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05hXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05hXSA9IGlucHV0W19OYV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVmFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVmFdID0gaW5wdXRbX1ZhXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRGltZW5zaW9uRmlsdGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTmFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTmFdID0gaW5wdXRbX05hXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19WYV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19WYV0gPSBpbnB1dFtfVmFdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EaW1lbnNpb25GaWx0ZXJzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0RpbWVuc2lvbkZpbHRlcihlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRGltZW5zaW9ucyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9EaW1lbnNpb24oZW50cnksIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9LiR7a2V5fWBdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Rpc2FibGVBbGFybUFjdGlvbnNJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0FOXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9BbGFybU5hbWVzKGlucHV0W19BTl0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0FOXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkFsYXJtTmFtZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBBbGFybU5hbWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Rpc2FibGVJbnNpZ2h0UnVsZXNJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1JOXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9JbnNpZ2h0UnVsZU5hbWVzKGlucHV0W19STl0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1JOXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlJ1bGVOYW1lcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFJ1bGVOYW1lcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9FbmFibGVBbGFybUFjdGlvbnNJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0FOXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9BbGFybU5hbWVzKGlucHV0W19BTl0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0FOXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkFsYXJtTmFtZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBBbGFybU5hbWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0VuYWJsZUluc2lnaHRSdWxlc0lucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUk5dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0luc2lnaHRSdWxlTmFtZXMoaW5wdXRbX1JOXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfUk5dPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuUnVsZU5hbWVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgUnVsZU5hbWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0VudGl0eSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0tBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9FbnRpdHlLZXlBdHRyaWJ1dGVzTWFwKGlucHV0W19LQV0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBLZXlBdHRyaWJ1dGVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQXRdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0VudGl0eUF0dHJpYnV0ZXNNYXAoaW5wdXRbX0F0XSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEF0dHJpYnV0ZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRW50aXR5QXR0cmlidXRlc01hcCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgT2JqZWN0LmtleXMoaW5wdXQpXG4gICAgICAgIC5maWx0ZXIoKGtleSkgPT4gaW5wdXRba2V5XSAhPSBudWxsKVxuICAgICAgICAuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGVudHJpZXNbYGVudHJ5LiR7Y291bnRlcn0ua2V5YF0gPSBrZXk7XG4gICAgICAgIGVudHJpZXNbYGVudHJ5LiR7Y291bnRlcn0udmFsdWVgXSA9IGlucHV0W2tleV07XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9KTtcbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9FbnRpdHlLZXlBdHRyaWJ1dGVzTWFwID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBPYmplY3Qua2V5cyhpbnB1dClcbiAgICAgICAgLmZpbHRlcigoa2V5KSA9PiBpbnB1dFtrZXldICE9IG51bGwpXG4gICAgICAgIC5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgZW50cmllc1tgZW50cnkuJHtjb3VudGVyfS5rZXlgXSA9IGtleTtcbiAgICAgICAgZW50cmllc1tgZW50cnkuJHtjb3VudGVyfS52YWx1ZWBdID0gaW5wdXRba2V5XTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH0pO1xuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0VudGl0eU1ldHJpY0RhdGEgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19FXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9FbnRpdHkoaW5wdXRbX0VdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRW50aXR5LiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTURdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY0RhdGEoaW5wdXRbX01EXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfTURdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuTWV0cmljRGF0YSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYE1ldHJpY0RhdGEuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRW50aXR5TWV0cmljRGF0YUxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfRW50aXR5TWV0cmljRGF0YShlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRXh0ZW5kZWRTdGF0aXN0aWNzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn1gXSA9IGVudHJ5O1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0dldERhc2hib2FyZElucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfRE5hXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ROYV0gPSBpbnB1dFtfRE5hXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfR2V0SW5zaWdodFJ1bGVSZXBvcnRJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1JOdV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19STnVdID0gaW5wdXRbX1JOdV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU1RdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU1RdID0gX19zZXJpYWxpemVEYXRlVGltZShpbnB1dFtfU1RdKTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FVF0gPSBfX3NlcmlhbGl6ZURhdGVUaW1lKGlucHV0W19FVF0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1BdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUF0gPSBpbnB1dFtfUF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTUNDXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX01DQ10gPSBpbnB1dFtfTUNDXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9JbnNpZ2h0UnVsZU1ldHJpY0xpc3QoaW5wdXRbX01dLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19NXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLk1ldHJpY3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBNZXRyaWNzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfT0JdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfT0JdID0gaW5wdXRbX09CXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfR2V0TWV0cmljRGF0YUlucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTURRXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXRyaWNEYXRhUXVlcmllcyhpbnB1dFtfTURRXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfTURRXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLk1ldHJpY0RhdGFRdWVyaWVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgTWV0cmljRGF0YVF1ZXJpZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TVF0gPSBfX3NlcmlhbGl6ZURhdGVUaW1lKGlucHV0W19TVF0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0VUXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0VUXSA9IF9fc2VyaWFsaXplRGF0ZVRpbWUoaW5wdXRbX0VUXSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTlRdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTlRdID0gaW5wdXRbX05UXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TQl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TQl0gPSBpbnB1dFtfU0JdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01EYV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NRGFdID0gaW5wdXRbX01EYV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTE9dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0xhYmVsT3B0aW9ucyhpbnB1dFtfTE9dLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgTGFiZWxPcHRpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0dldE1ldHJpY1N0YXRpc3RpY3NJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTl0gPSBpbnB1dFtfTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTU5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTU5dID0gaW5wdXRbX01OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9EaW1lbnNpb25zKGlucHV0W19EXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfRF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5EaW1lbnNpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRGltZW5zaW9ucy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NUXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NUXSA9IF9fc2VyaWFsaXplRGF0ZVRpbWUoaW5wdXRbX1NUXSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRVRdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRVRdID0gX19zZXJpYWxpemVEYXRlVGltZShpbnB1dFtfRVRdKTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19QXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1BdID0gaW5wdXRbX1BdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1N0YV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfU3RhdGlzdGljcyhpbnB1dFtfU3RhXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfU3RhXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlN0YXRpc3RpY3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBTdGF0aXN0aWNzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRVN4XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9FeHRlbmRlZFN0YXRpc3RpY3MoaW5wdXRbX0VTeF0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0VTeF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5FeHRlbmRlZFN0YXRpc3RpY3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBFeHRlbmRlZFN0YXRpc3RpY3MuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19VXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1VdID0gaW5wdXRbX1VdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9HZXRNZXRyaWNTdHJlYW1JbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05hXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05hXSA9IGlucHV0W19OYV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0dldE1ldHJpY1dpZGdldEltYWdlSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19NV10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NV10gPSBpbnB1dFtfTVddO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX09GXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX09GXSA9IGlucHV0W19PRl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0luc2lnaHRSdWxlTWV0cmljTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBlbnRyeTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9JbnNpZ2h0UnVsZU5hbWVzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn1gXSA9IGVudHJ5O1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0xhYmVsT3B0aW9ucyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1RdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVF0gPSBpbnB1dFtfVF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0xpc3REYXNoYm9hcmRzSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19ETlBdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRE5QXSA9IGlucHV0W19ETlBdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05UXSA9IGlucHV0W19OVF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0xpc3RNYW5hZ2VkSW5zaWdodFJ1bGVzSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19SQVJOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JBUk5dID0gaW5wdXRbX1JBUk5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05UXSA9IGlucHV0W19OVF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTVJhXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX01SYV0gPSBpbnB1dFtfTVJhXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTGlzdE1ldHJpY3NJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTl0gPSBpbnB1dFtfTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTU5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTU5dID0gaW5wdXRbX01OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9EaW1lbnNpb25GaWx0ZXJzKGlucHV0W19EXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfRF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5EaW1lbnNpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRGltZW5zaW9ucy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05UXSA9IGlucHV0W19OVF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUkFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUkFdID0gaW5wdXRbX1JBXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19JTEFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfSUxBXSA9IGlucHV0W19JTEFdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX09BXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX09BXSA9IGlucHV0W19PQV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0xpc3RNZXRyaWNTdHJlYW1zSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OVF0gPSBpbnB1dFtfTlRdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01SYV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NUmFdID0gaW5wdXRbX01SYV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0xpc3RUYWdzRm9yUmVzb3VyY2VJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1JBUk5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUkFSTl0gPSBpbnB1dFtfUkFSTl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01hbmFnZWRSdWxlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfVE5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVE5dID0gaW5wdXRbX1ROXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SQVJOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JBUk5dID0gaW5wdXRbX1JBUk5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RhXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9UYWdMaXN0KGlucHV0W19UYV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1RhXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlRhZ3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBUYWdzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01hbmFnZWRSdWxlcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NYW5hZ2VkUnVsZShlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWV0cmljID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OXSA9IGlucHV0W19OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NTl0gPSBpbnB1dFtfTU5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0RpbWVuc2lvbnMoaW5wdXRbX0RdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19EXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkRpbWVuc2lvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBEaW1lbnNpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01ldHJpY0NoYXJhY3RlcmlzdGljcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1BTXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1BTXSA9IGlucHV0W19QU107XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01ldHJpY0RhdGEgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWV0cmljRGF0dW0oZW50cnksIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9LiR7a2V5fWBdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01ldHJpY0RhdGFRdWVyaWVzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY0RhdGFRdWVyeShlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWV0cmljRGF0YVF1ZXJ5ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19JXSA9IGlucHV0W19JXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NU10gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWV0cmljU3RhdChpbnB1dFtfTVNdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgTWV0cmljU3RhdC4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0V4XSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0V4XSA9IGlucHV0W19FeF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19MXSA9IGlucHV0W19MXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SRF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SRF0gPSBpbnB1dFtfUkRdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1BdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUF0gPSBpbnB1dFtfUF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQUldICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQUldID0gaW5wdXRbX0FJXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWV0cmljRGF0dW0gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19NTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NTl0gPSBpbnB1dFtfTU5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0RpbWVuc2lvbnMoaW5wdXRbX0RdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19EXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkRpbWVuc2lvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBEaW1lbnNpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVGldICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVGldID0gX19zZXJpYWxpemVEYXRlVGltZShpbnB1dFtfVGldKTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19WYV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19WYV0gPSBfX3NlcmlhbGl6ZUZsb2F0KGlucHV0W19WYV0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NWdF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfU3RhdGlzdGljU2V0KGlucHV0W19TVnRdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgU3RhdGlzdGljVmFsdWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVmFsXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9WYWx1ZXMoaW5wdXRbX1ZhbF0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1ZhbF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5WYWx1ZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBWYWx1ZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19DXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9Db3VudHMoaW5wdXRbX0NdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19DXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkNvdW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYENvdW50cy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1VdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVV0gPSBpbnB1dFtfVV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU1JdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU1JdID0gaW5wdXRbX1NSXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWV0cmljTWF0aEFub21hbHlEZXRlY3RvciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX01EUV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWV0cmljRGF0YVF1ZXJpZXMoaW5wdXRbX01EUV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX01EUV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5NZXRyaWNEYXRhUXVlcmllcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYE1ldHJpY0RhdGFRdWVyaWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01ldHJpY1N0YXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19NZV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWV0cmljKGlucHV0W19NZV0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBNZXRyaWMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19QXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1BdID0gaW5wdXRbX1BdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU10gPSBpbnB1dFtfU107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19VXSA9IGlucHV0W19VXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWV0cmljU3RyZWFtRmlsdGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OXSA9IGlucHV0W19OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NTmVdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY1N0cmVhbUZpbHRlck1ldHJpY05hbWVzKGlucHV0W19NTmVdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19NTmVdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuTWV0cmljTmFtZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBNZXRyaWNOYW1lcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9NZXRyaWNTdHJlYW1GaWx0ZXJNZXRyaWNOYW1lcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBlbnRyeTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9NZXRyaWNTdHJlYW1GaWx0ZXJzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY1N0cmVhbUZpbHRlcihlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWV0cmljU3RyZWFtTmFtZXMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfWBdID0gZW50cnk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWV0cmljU3RyZWFtU3RhdGlzdGljc0FkZGl0aW9uYWxTdGF0aXN0aWNzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn1gXSA9IGVudHJ5O1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01ldHJpY1N0cmVhbVN0YXRpc3RpY3NDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSU1dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY1N0cmVhbVN0YXRpc3RpY3NJbmNsdWRlTWV0cmljcyhpbnB1dFtfSU1dLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19JTV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5JbmNsdWRlTWV0cmljcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEluY2x1ZGVNZXRyaWNzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQVNdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY1N0cmVhbVN0YXRpc3RpY3NBZGRpdGlvbmFsU3RhdGlzdGljcyhpbnB1dFtfQVNdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19BU10/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5BZGRpdGlvbmFsU3RhdGlzdGljcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEFkZGl0aW9uYWxTdGF0aXN0aWNzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01ldHJpY1N0cmVhbVN0YXRpc3RpY3NDb25maWd1cmF0aW9ucyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXRyaWNTdHJlYW1TdGF0aXN0aWNzQ29uZmlndXJhdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWV0cmljU3RyZWFtU3RhdGlzdGljc0luY2x1ZGVNZXRyaWNzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01ldHJpY1N0cmVhbVN0YXRpc3RpY3NNZXRyaWMoZW50cnksIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9LiR7a2V5fWBdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01ldHJpY1N0cmVhbVN0YXRpc3RpY3NNZXRyaWMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05dID0gaW5wdXRbX05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01OXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX01OXSA9IGlucHV0W19NTl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1B1dEFub21hbHlEZXRlY3RvcklucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OXSA9IGlucHV0W19OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NTl0gPSBpbnB1dFtfTU5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0RpbWVuc2lvbnMoaW5wdXRbX0RdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19EXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkRpbWVuc2lvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBEaW1lbnNpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TXSA9IGlucHV0W19TXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19Db10gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfQW5vbWFseURldGVjdG9yQ29uZmlndXJhdGlvbihpbnB1dFtfQ29dLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgQ29uZmlndXJhdGlvbi4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01DXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXRyaWNDaGFyYWN0ZXJpc3RpY3MoaW5wdXRbX01DXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYE1ldHJpY0NoYXJhY3RlcmlzdGljcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NNQURdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1NpbmdsZU1ldHJpY0Fub21hbHlEZXRlY3RvcihpbnB1dFtfU01BRF0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBTaW5nbGVNZXRyaWNBbm9tYWx5RGV0ZWN0b3IuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NTUFEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXRyaWNNYXRoQW5vbWFseURldGVjdG9yKGlucHV0W19NTUFEXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYE1ldHJpY01hdGhBbm9tYWx5RGV0ZWN0b3IuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUHV0Q29tcG9zaXRlQWxhcm1JbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0FFXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FFXSA9IGlucHV0W19BRV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQUFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1Jlc291cmNlTGlzdChpbnB1dFtfQUFdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19BQV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5BbGFybUFjdGlvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBBbGFybUFjdGlvbnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19BRF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19BRF0gPSBpbnB1dFtfQURdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FObF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19BTmxdID0gaW5wdXRbX0FObF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQVJdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQVJdID0gaW5wdXRbX0FSXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19JREFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1Jlc291cmNlTGlzdChpbnB1dFtfSURBXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfSURBXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkluc3VmZmljaWVudERhdGFBY3Rpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgSW5zdWZmaWNpZW50RGF0YUFjdGlvbnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19PS0FdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1Jlc291cmNlTGlzdChpbnB1dFtfT0tBXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfT0tBXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLk9LQWN0aW9ucyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYE9LQWN0aW9ucy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RhXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9UYWdMaXN0KGlucHV0W19UYV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1RhXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlRhZ3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBUYWdzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQVNjXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FTY10gPSBpbnB1dFtfQVNjXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19BU1dQXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FTV1BdID0gaW5wdXRbX0FTV1BdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FTRVBdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQVNFUF0gPSBpbnB1dFtfQVNFUF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1B1dERhc2hib2FyZElucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfRE5hXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ROYV0gPSBpbnB1dFtfRE5hXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EQl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19EQl0gPSBpbnB1dFtfREJdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9QdXRJbnNpZ2h0UnVsZUlucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUk51XSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JOdV0gPSBpbnB1dFtfUk51XTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SU10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SU10gPSBpbnB1dFtfUlNdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1JEdV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SRHVdID0gaW5wdXRbX1JEdV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVGFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1RhZ0xpc3QoaW5wdXRbX1RhXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfVGFdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuVGFncyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFRhZ3MuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19BT1RMXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FPVExdID0gaW5wdXRbX0FPVExdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9QdXRNYW5hZ2VkSW5zaWdodFJ1bGVzSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19NUmFuXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NYW5hZ2VkUnVsZXMoaW5wdXRbX01SYW5dLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19NUmFuXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLk1hbmFnZWRSdWxlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYE1hbmFnZWRSdWxlcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9QdXRNZXRyaWNBbGFybUlucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQU5sXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FObF0gPSBpbnB1dFtfQU5sXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19BRF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19BRF0gPSBpbnB1dFtfQURdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FFXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FFXSA9IGlucHV0W19BRV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfT0tBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9SZXNvdXJjZUxpc3QoaW5wdXRbX09LQV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX09LQV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5PS0FjdGlvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBPS0FjdGlvbnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19BQV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfUmVzb3VyY2VMaXN0KGlucHV0W19BQV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0FBXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkFsYXJtQWN0aW9ucyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEFsYXJtQWN0aW9ucy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0lEQV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfUmVzb3VyY2VMaXN0KGlucHV0W19JREFdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19JREFdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuSW5zdWZmaWNpZW50RGF0YUFjdGlvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBJbnN1ZmZpY2llbnREYXRhQWN0aW9ucy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01OXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX01OXSA9IGlucHV0W19NTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OXSA9IGlucHV0W19OXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TdF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TdF0gPSBpbnB1dFtfU3RdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0VTXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0VTXSA9IGlucHV0W19FU107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfRGltZW5zaW9ucyhpbnB1dFtfRF0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0RdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuRGltZW5zaW9ucyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYERpbWVuc2lvbnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19QXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1BdID0gaW5wdXRbX1BdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1VdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVV0gPSBpbnB1dFtfVV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRVBdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRVBdID0gaW5wdXRbX0VQXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EVEFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRFRBXSA9IGlucHV0W19EVEFdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RoXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RoXSA9IF9fc2VyaWFsaXplRmxvYXQoaW5wdXRbX1RoXSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQ09dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQ09dID0gaW5wdXRbX0NPXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UTURdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVE1EXSA9IGlucHV0W19UTURdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0VMU0NQXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0VMU0NQXSA9IGlucHV0W19FTFNDUF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWV0cmljRGF0YVF1ZXJpZXMoaW5wdXRbX01dLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19NXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLk1ldHJpY3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBNZXRyaWNzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVGFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1RhZ0xpc3QoaW5wdXRbX1RhXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfVGFdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuVGFncyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFRhZ3MuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UTUldICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVE1JXSA9IGlucHV0W19UTUldO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9QdXRNZXRyaWNEYXRhSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05dID0gaW5wdXRbX05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01EXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXRyaWNEYXRhKGlucHV0W19NRF0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX01EXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLk1ldHJpY0RhdGEgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBNZXRyaWNEYXRhLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRU1EXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9FbnRpdHlNZXRyaWNEYXRhTGlzdChpbnB1dFtfRU1EXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfRU1EXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkVudGl0eU1ldHJpY0RhdGEgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBFbnRpdHlNZXRyaWNEYXRhLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU0VWXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NFVl0gPSBpbnB1dFtfU0VWXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUHV0TWV0cmljU3RyZWFtSW5wdXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19OYV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OYV0gPSBpbnB1dFtfTmFdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0lGXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXRyaWNTdHJlYW1GaWx0ZXJzKGlucHV0W19JRl0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0lGXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkluY2x1ZGVGaWx0ZXJzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgSW5jbHVkZUZpbHRlcnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FRl0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWV0cmljU3RyZWFtRmlsdGVycyhpbnB1dFtfRUZdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19FRl0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5FeGNsdWRlRmlsdGVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEV4Y2x1ZGVGaWx0ZXJzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRkFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRkFdID0gaW5wdXRbX0ZBXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SQW9dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUkFvXSA9IGlucHV0W19SQW9dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX09GXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX09GXSA9IGlucHV0W19PRl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVGFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1RhZ0xpc3QoaW5wdXRbX1RhXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfVGFdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuVGFncyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFRhZ3MuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TQ10gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWV0cmljU3RyZWFtU3RhdGlzdGljc0NvbmZpZ3VyYXRpb25zKGlucHV0W19TQ10sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1NDXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlN0YXRpc3RpY3NDb25maWd1cmF0aW9ucyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFN0YXRpc3RpY3NDb25maWd1cmF0aW9ucy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0lMQU1dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfSUxBTV0gPSBpbnB1dFtfSUxBTV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1JhbmdlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfU1RdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU1RdID0gX19zZXJpYWxpemVEYXRlVGltZShpbnB1dFtfU1RdKTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FVF0gPSBfX3NlcmlhbGl6ZURhdGVUaW1lKGlucHV0W19FVF0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9SZXNvdXJjZUxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfWBdID0gZW50cnk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfU2V0QWxhcm1TdGF0ZUlucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQU5sXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FObF0gPSBpbnB1dFtfQU5sXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TVl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TVl0gPSBpbnB1dFtfU1ZdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NSdF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TUnRdID0gaW5wdXRbX1NSdF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU1JEXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NSRF0gPSBpbnB1dFtfU1JEXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfU2luZ2xlTWV0cmljQW5vbWFseURldGVjdG9yID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQUldICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQUldID0gaW5wdXRbX0FJXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05dID0gaW5wdXRbX05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01OXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX01OXSA9IGlucHV0W19NTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfRGltZW5zaW9ucyhpbnB1dFtfRF0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0RdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuRGltZW5zaW9ucyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYERpbWVuc2lvbnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NdID0gaW5wdXRbX1NdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9TdGFydE1ldHJpY1N0cmVhbXNJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05hbV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWV0cmljU3RyZWFtTmFtZXMoaW5wdXRbX05hbV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX05hbV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5OYW1lcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYE5hbWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1N0YXRpc3RpY3MgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfWBdID0gZW50cnk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfU3RhdGlzdGljU2V0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfU0NhXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NDYV0gPSBfX3NlcmlhbGl6ZUZsb2F0KGlucHV0W19TQ2FdKTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TdV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TdV0gPSBfX3NlcmlhbGl6ZUZsb2F0KGlucHV0W19TdV0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01pXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX01pXSA9IF9fc2VyaWFsaXplRmxvYXQoaW5wdXRbX01pXSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTWFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTWFdID0gX19zZXJpYWxpemVGbG9hdChpbnB1dFtfTWFdKTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfU3RvcE1ldHJpY1N0cmVhbXNJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05hbV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWV0cmljU3RyZWFtTmFtZXMoaW5wdXRbX05hbV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX05hbV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5OYW1lcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYE5hbWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1RhZyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0tdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfS10gPSBpbnB1dFtfS107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVmFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVmFdID0gaW5wdXRbX1ZhXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfVGFnS2V5TGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBlbnRyeTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9UYWdMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1RhZyhlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfVGFnUmVzb3VyY2VJbnB1dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1JBUk5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUkFSTl0gPSBpbnB1dFtfUkFSTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVGFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1RhZ0xpc3QoaW5wdXRbX1RhXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfVGFdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuVGFncyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFRhZ3MuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfVW50YWdSZXNvdXJjZUlucHV0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUkFSTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SQVJOXSA9IGlucHV0W19SQVJOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19US10gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfVGFnS2V5TGlzdChpbnB1dFtfVEtdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19US10/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5UYWdLZXlzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgVGFnS2V5cy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9WYWx1ZXMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfWBdID0gX19zZXJpYWxpemVGbG9hdChlbnRyeSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3QgZGVfQWxhcm1Db250cmlidXRvciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0NJXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19DSV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0NJXSk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcob3V0cHV0LkNvbnRyaWJ1dG9yQXR0cmlidXRlcykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19DQV0gPSB7fTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19DQV0gIT0gbnVsbCAmJiBvdXRwdXRbX0NBXVtfZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ0FdID0gZGVfQ29udHJpYnV0b3JBdHRyaWJ1dGVzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19DQV1bX2VdKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NSdF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU1J0XSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU1J0XSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NUVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU1RUXSA9IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldChvdXRwdXRbX1NUVF0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0FsYXJtQ29udHJpYnV0b3JzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9BbGFybUNvbnRyaWJ1dG9yKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9BbGFybUhpc3RvcnlJdGVtID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQU5sXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BTmxdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BTmxdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQUNJXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BQ0ldID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BQ0ldKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQVRsXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BVGxdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BVGxdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfVGldICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1RpXSA9IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldChvdXRwdXRbX1RpXSkpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19ISVRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0hJVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0hJVF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19IU10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfSFNdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19IU10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19IRF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfSERdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19IRF0pO1xuICAgIH1cbiAgICBpZiAoU3RyaW5nKG91dHB1dC5BbGFybUNvbnRyaWJ1dG9yQXR0cmlidXRlcykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19BQ0FdID0ge307XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfQUNBXSAhPSBudWxsICYmIG91dHB1dFtfQUNBXVtfZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQUNBXSA9IGRlX0NvbnRyaWJ1dG9yQXR0cmlidXRlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfQUNBXVtfZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0FsYXJtSGlzdG9yeUl0ZW1zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9BbGFybUhpc3RvcnlJdGVtKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Bbm9tYWx5RGV0ZWN0b3IgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19NTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTU5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19NTl0pO1xuICAgIH1cbiAgICBpZiAoU3RyaW5nKG91dHB1dC5EaW1lbnNpb25zKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0RdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfRF0gIT0gbnVsbCAmJiBvdXRwdXRbX0RdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19EXSA9IGRlX0RpbWVuc2lvbnMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0RdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19Db10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ29dID0gZGVfQW5vbWFseURldGVjdG9yQ29uZmlndXJhdGlvbihvdXRwdXRbX0NvXSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NWXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TVl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NWXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX01DXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NQ10gPSBkZV9NZXRyaWNDaGFyYWN0ZXJpc3RpY3Mob3V0cHV0W19NQ10sIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TTUFEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TTUFEXSA9IGRlX1NpbmdsZU1ldHJpY0Fub21hbHlEZXRlY3RvcihvdXRwdXRbX1NNQURdLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTU1BRF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTU1BRF0gPSBkZV9NZXRyaWNNYXRoQW5vbWFseURldGVjdG9yKG91dHB1dFtfTU1BRF0sIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQW5vbWFseURldGVjdG9yQ29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChTdHJpbmcob3V0cHV0LkV4Y2x1ZGVkVGltZVJhbmdlcykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19FVFJdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfRVRSXSAhPSBudWxsICYmIG91dHB1dFtfRVRSXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRVRSXSA9IGRlX0Fub21hbHlEZXRlY3RvckV4Y2x1ZGVkVGltZVJhbmdlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfRVRSXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTVRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01UXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTVRdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Fub21hbHlEZXRlY3RvckV4Y2x1ZGVkVGltZVJhbmdlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfUmFuZ2UoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX0Fub21hbHlEZXRlY3RvcnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0Fub21hbHlEZXRlY3RvcihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfQmF0Y2hGYWlsdXJlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfUGFydGlhbEZhaWx1cmUoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX0NvbXBvc2l0ZUFsYXJtID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQUVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FFXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfQUVdKTtcbiAgICB9XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuQWxhcm1BY3Rpb25zKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0FBXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0FBXSAhPSBudWxsICYmIG91dHB1dFtfQUFdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BQV0gPSBkZV9SZXNvdXJjZUxpc3QoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0FBXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQUFsXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BQWxdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BQWxdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQUNVVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQUNVVF0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19BQ1VUXSkpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19BRF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQURdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BRF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19BTmxdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FObF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0FObF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19BUl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQVJdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BUl0pO1xuICAgIH1cbiAgICBpZiAoU3RyaW5nKG91dHB1dC5JbnN1ZmZpY2llbnREYXRhQWN0aW9ucykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19JREFdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfSURBXSAhPSBudWxsICYmIG91dHB1dFtfSURBXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfSURBXSA9IGRlX1Jlc291cmNlTGlzdChfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfSURBXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuT0tBY3Rpb25zKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX09LQV0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19PS0FdICE9IG51bGwgJiYgb3V0cHV0W19PS0FdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19PS0FdID0gZGVfUmVzb3VyY2VMaXN0KF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19PS0FdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TUnRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NSdF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NSdF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TUkRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NSRF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NSRF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TVVRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NVVF0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19TVVRdKSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NWXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TVl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NWXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NUVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU1RUXSA9IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldChvdXRwdXRbX1NUVF0pKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQVNCXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BU0JdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BU0JdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQVNSXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BU1JdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BU1JdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQVNjXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BU2NdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BU2NdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQVNXUF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQVNXUF0gPSBfX3N0cmljdFBhcnNlSW50MzIob3V0cHV0W19BU1dQXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0FTRVBdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FTRVBdID0gX19zdHJpY3RQYXJzZUludDMyKG91dHB1dFtfQVNFUF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQ29tcG9zaXRlQWxhcm1zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9Db21wb3NpdGVBbGFybShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ29uY3VycmVudE1vZGlmaWNhdGlvbkV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX01lc10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTWVzXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTWVzXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9Db25mbGljdEV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX01lc10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTWVzXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTWVzXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9Db250cmlidXRvckF0dHJpYnV0ZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIG91dHB1dC5yZWR1Y2UoKGFjYywgcGFpcikgPT4ge1xuICAgICAgICBpZiAocGFpcltcInZhbHVlXCJdID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9XG4gICAgICAgIGFjY1twYWlyW1wia2V5XCJdXSA9IF9fZXhwZWN0U3RyaW5nKHBhaXJbXCJ2YWx1ZVwiXSk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xufTtcbmNvbnN0IGRlX0Rhc2hib2FyZEVudHJpZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0Rhc2hib2FyZEVudHJ5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXNoYm9hcmRFbnRyeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0ROYV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRE5hXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRE5hXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0RBYV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfREFhXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfREFhXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0xNYV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTE1hXSA9IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldChvdXRwdXRbX0xNYV0pKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU2ldICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NpXSA9IF9fc3RyaWN0UGFyc2VMb25nKG91dHB1dFtfU2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Rhc2hib2FyZEludmFsaWRJbnB1dEVycm9yID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21lXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbWVdKTtcbiAgICB9XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuZGFzaGJvYXJkVmFsaWRhdGlvbk1lc3NhZ2VzKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX2RWTV0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19kVk1dICE9IG51bGwgJiYgb3V0cHV0W19kVk1dW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19kVk1dID0gZGVfRGFzaGJvYXJkVmFsaWRhdGlvbk1lc3NhZ2VzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19kVk1dW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGFzaGJvYXJkVmFsaWRhdGlvbk1lc3NhZ2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19EUF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRFBdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19EUF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19NZXNdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01lc10gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX01lc10pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGFzaGJvYXJkVmFsaWRhdGlvbk1lc3NhZ2VzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9EYXNoYm9hcmRWYWxpZGF0aW9uTWVzc2FnZShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfRGF0YXBvaW50ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfVGldICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1RpXSA9IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldChvdXRwdXRbX1RpXSkpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TQ2FdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NDYV0gPSBfX3N0cmljdFBhcnNlRmxvYXQob3V0cHV0W19TQ2FdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQXZdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0F2XSA9IF9fc3RyaWN0UGFyc2VGbG9hdChvdXRwdXRbX0F2XSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1N1XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TdV0gPSBfX3N0cmljdFBhcnNlRmxvYXQob3V0cHV0W19TdV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19NaV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTWldID0gX19zdHJpY3RQYXJzZUZsb2F0KG91dHB1dFtfTWldKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTWFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01hXSA9IF9fc3RyaWN0UGFyc2VGbG9hdChvdXRwdXRbX01hXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1VdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1VdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19VXSk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcob3V0cHV0LkV4dGVuZGVkU3RhdGlzdGljcykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19FU3hdID0ge307XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfRVN4XSAhPSBudWxsICYmIG91dHB1dFtfRVN4XVtfZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRVN4XSA9IGRlX0RhdGFwb2ludFZhbHVlTWFwKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19FU3hdW19lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGF0YXBvaW50cyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfRGF0YXBvaW50KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXRhcG9pbnRWYWx1ZU1hcCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gb3V0cHV0LnJlZHVjZSgoYWNjLCBwYWlyKSA9PiB7XG4gICAgICAgIGlmIChwYWlyW1widmFsdWVcIl0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH1cbiAgICAgICAgYWNjW3BhaXJbXCJrZXlcIl1dID0gX19zdHJpY3RQYXJzZUZsb2F0KHBhaXJbXCJ2YWx1ZVwiXSk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xufTtcbmNvbnN0IGRlX0RhdGFwb2ludFZhbHVlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gX19zdHJpY3RQYXJzZUZsb2F0KGVudHJ5KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EZWxldGVBbm9tYWx5RGV0ZWN0b3JPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGVsZXRlRGFzaGJvYXJkc091dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZWxldGVJbnNpZ2h0UnVsZXNPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAoU3RyaW5nKG91dHB1dC5GYWlsdXJlcykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19GXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0ZdICE9IG51bGwgJiYgb3V0cHV0W19GXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRl0gPSBkZV9CYXRjaEZhaWx1cmVzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19GXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0RlbGV0ZU1ldHJpY1N0cmVhbU91dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZXNjcmliZUFsYXJtQ29udHJpYnV0b3JzT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuQWxhcm1Db250cmlidXRvcnMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfQUNdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfQUNdICE9IG51bGwgJiYgb3V0cHV0W19BQ11bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FDXSA9IGRlX0FsYXJtQ29udHJpYnV0b3JzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19BQ11bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05UXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZXNjcmliZUFsYXJtSGlzdG9yeU91dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChTdHJpbmcob3V0cHV0LkFsYXJtSGlzdG9yeUl0ZW1zKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0FISV0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19BSEldICE9IG51bGwgJiYgb3V0cHV0W19BSEldW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BSEldID0gZGVfQWxhcm1IaXN0b3J5SXRlbXMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0FISV1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05UXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZXNjcmliZUFsYXJtc0Zvck1ldHJpY091dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChTdHJpbmcob3V0cHV0Lk1ldHJpY0FsYXJtcykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19NQV0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19NQV0gIT0gbnVsbCAmJiBvdXRwdXRbX01BXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTUFdID0gZGVfTWV0cmljQWxhcm1zKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19NQV1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZXNjcmliZUFsYXJtc091dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChTdHJpbmcob3V0cHV0LkNvbXBvc2l0ZUFsYXJtcykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19DQW9dID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfQ0FvXSAhPSBudWxsICYmIG91dHB1dFtfQ0FvXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ0FvXSA9IGRlX0NvbXBvc2l0ZUFsYXJtcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfQ0FvXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuTWV0cmljQWxhcm1zKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX01BXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX01BXSAhPSBudWxsICYmIG91dHB1dFtfTUFdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NQV0gPSBkZV9NZXRyaWNBbGFybXMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX01BXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTlRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05UXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTlRdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Rlc2NyaWJlQW5vbWFseURldGVjdG9yc091dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChTdHJpbmcob3V0cHV0LkFub21hbHlEZXRlY3RvcnMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfQURuXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0FEbl0gIT0gbnVsbCAmJiBvdXRwdXRbX0FEbl1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FEbl0gPSBkZV9Bbm9tYWx5RGV0ZWN0b3JzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19BRG5dW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTlRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OVF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGVzY3JpYmVJbnNpZ2h0UnVsZXNPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTlRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OVF0pO1xuICAgIH1cbiAgICBpZiAoU3RyaW5nKG91dHB1dC5JbnNpZ2h0UnVsZXMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfSVJdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfSVJdICE9IG51bGwgJiYgb3V0cHV0W19JUl1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0lSXSA9IGRlX0luc2lnaHRSdWxlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfSVJdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGltZW5zaW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTmFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05hXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTmFdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfVmFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1ZhXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVmFdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0RpbWVuc2lvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0RpbWVuc2lvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfRGlzYWJsZUluc2lnaHRSdWxlc091dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChTdHJpbmcob3V0cHV0LkZhaWx1cmVzKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0ZdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfRl0gIT0gbnVsbCAmJiBvdXRwdXRbX0ZdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19GXSA9IGRlX0JhdGNoRmFpbHVyZXMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0ZdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRW5hYmxlSW5zaWdodFJ1bGVzT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuRmFpbHVyZXMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfRl0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19GXSAhPSBudWxsICYmIG91dHB1dFtfRl1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZdID0gZGVfQmF0Y2hGYWlsdXJlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfRl1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9HZXREYXNoYm9hcmRPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19EQWFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RBYV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0RBYV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19EQl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfREJdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19EQl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19ETmFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ROYV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0ROYV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfR2V0SW5zaWdodFJ1bGVSZXBvcnRPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAoU3RyaW5nKG91dHB1dC5LZXlMYWJlbHMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfS0xdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfS0xdICE9IG51bGwgJiYgb3V0cHV0W19LTF1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0tMXSA9IGRlX0luc2lnaHRSdWxlQ29udHJpYnV0b3JLZXlMYWJlbHMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0tMXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQVNnXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BU2ddID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BU2ddKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQVZdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FWXSA9IF9fc3RyaWN0UGFyc2VGbG9hdChvdXRwdXRbX0FWXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0FVQ10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQVVDXSA9IF9fc3RyaWN0UGFyc2VMb25nKG91dHB1dFtfQVVDXSk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcob3V0cHV0LkNvbnRyaWJ1dG9ycykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19Db25dID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfQ29uXSAhPSBudWxsICYmIG91dHB1dFtfQ29uXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ29uXSA9IGRlX0luc2lnaHRSdWxlQ29udHJpYnV0b3JzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19Db25dW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAoU3RyaW5nKG91dHB1dC5NZXRyaWNEYXRhcG9pbnRzKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX01EZV0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19NRGVdICE9IG51bGwgJiYgb3V0cHV0W19NRGVdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NRGVdID0gZGVfSW5zaWdodFJ1bGVNZXRyaWNEYXRhcG9pbnRzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19NRGVdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfR2V0TWV0cmljRGF0YU91dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChTdHJpbmcob3V0cHV0Lk1ldHJpY0RhdGFSZXN1bHRzKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX01EUl0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19NRFJdICE9IG51bGwgJiYgb3V0cHV0W19NRFJdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NRFJdID0gZGVfTWV0cmljRGF0YVJlc3VsdHMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX01EUl1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05UXSk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcob3V0cHV0Lk1lc3NhZ2VzKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX01lc3NdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfTWVzc10gIT0gbnVsbCAmJiBvdXRwdXRbX01lc3NdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NZXNzXSA9IGRlX01ldHJpY0RhdGFSZXN1bHRNZXNzYWdlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfTWVzc11bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9HZXRNZXRyaWNTdGF0aXN0aWNzT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0xdKTtcbiAgICB9XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuRGF0YXBvaW50cykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19EYV0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19EYV0gIT0gbnVsbCAmJiBvdXRwdXRbX0RhXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRGFdID0gZGVfRGF0YXBvaW50cyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfRGFdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfR2V0TWV0cmljU3RyZWFtT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQXJdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FyXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQXJdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTmFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05hXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTmFdKTtcbiAgICB9XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuSW5jbHVkZUZpbHRlcnMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfSUZdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfSUZdICE9IG51bGwgJiYgb3V0cHV0W19JRl1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0lGXSA9IGRlX01ldHJpY1N0cmVhbUZpbHRlcnMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0lGXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuRXhjbHVkZUZpbHRlcnMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfRUZdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfRUZdICE9IG51bGwgJiYgb3V0cHV0W19FRl1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0VGXSA9IGRlX01ldHJpY1N0cmVhbUZpbHRlcnMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0VGXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRkFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZBXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRkFdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfUkFvXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19SQW9dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19SQW9dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU3RhdF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU3RhdF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1N0YXRdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQ0RdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NEXSA9IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldChvdXRwdXRbX0NEXSkpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19MVURdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0xVRF0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19MVURdKSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX09GXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19PRl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX09GXSk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcob3V0cHV0LlN0YXRpc3RpY3NDb25maWd1cmF0aW9ucykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19TQ10gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19TQ10gIT0gbnVsbCAmJiBvdXRwdXRbX1NDXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU0NdID0gZGVfTWV0cmljU3RyZWFtU3RhdGlzdGljc0NvbmZpZ3VyYXRpb25zKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19TQ11bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0lMQU1dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0lMQU1dID0gX19wYXJzZUJvb2xlYW4ob3V0cHV0W19JTEFNXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9HZXRNZXRyaWNXaWRnZXRJbWFnZU91dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX01XSV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTVdJXSA9IGNvbnRleHQuYmFzZTY0RGVjb2RlcihvdXRwdXRbX01XSV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfSW5zaWdodFJ1bGUgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19OYV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTmFdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OYV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TdGF0XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TdGF0XSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU3RhdF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TY10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU2NdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TY10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19EZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRGVdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19EZV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19NUmFuYV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTVJhbmFdID0gX19wYXJzZUJvb2xlYW4ob3V0cHV0W19NUmFuYV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19BT1RMXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BT1RMXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfQU9UTF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfSW5zaWdodFJ1bGVDb250cmlidXRvciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChTdHJpbmcob3V0cHV0LktleXMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfS2VdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfS2VdICE9IG51bGwgJiYgb3V0cHV0W19LZV1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0tlXSA9IGRlX0luc2lnaHRSdWxlQ29udHJpYnV0b3JLZXlzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19LZV1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0FBVl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQUFWXSA9IF9fc3RyaWN0UGFyc2VGbG9hdChvdXRwdXRbX0FBVl0pO1xuICAgIH1cbiAgICBpZiAoU3RyaW5nKG91dHB1dC5EYXRhcG9pbnRzKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0RhXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0RhXSAhPSBudWxsICYmIG91dHB1dFtfRGFdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19EYV0gPSBkZV9JbnNpZ2h0UnVsZUNvbnRyaWJ1dG9yRGF0YXBvaW50cyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfRGFdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfSW5zaWdodFJ1bGVDb250cmlidXRvckRhdGFwb2ludCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1RpXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UaV0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19UaV0pKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQVZwXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BVnBdID0gX19zdHJpY3RQYXJzZUZsb2F0KG91dHB1dFtfQVZwXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JbnNpZ2h0UnVsZUNvbnRyaWJ1dG9yRGF0YXBvaW50cyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfSW5zaWdodFJ1bGVDb250cmlidXRvckRhdGFwb2ludChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfSW5zaWdodFJ1bGVDb250cmlidXRvcktleUxhYmVscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gX19leHBlY3RTdHJpbmcoZW50cnkpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX0luc2lnaHRSdWxlQ29udHJpYnV0b3JLZXlzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2V4cGVjdFN0cmluZyhlbnRyeSk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfSW5zaWdodFJ1bGVDb250cmlidXRvcnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0luc2lnaHRSdWxlQ29udHJpYnV0b3IoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX0luc2lnaHRSdWxlTWV0cmljRGF0YXBvaW50ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfVGldICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1RpXSA9IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldChvdXRwdXRbX1RpXSkpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19VQ10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVUNdID0gX19zdHJpY3RQYXJzZUZsb2F0KG91dHB1dFtfVUNdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTUNWXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NQ1ZdID0gX19zdHJpY3RQYXJzZUZsb2F0KG91dHB1dFtfTUNWXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NDYV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU0NhXSA9IF9fc3RyaWN0UGFyc2VGbG9hdChvdXRwdXRbX1NDYV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19Bdl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQXZdID0gX19zdHJpY3RQYXJzZUZsb2F0KG91dHB1dFtfQXZdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU3VdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1N1XSA9IF9fc3RyaWN0UGFyc2VGbG9hdChvdXRwdXRbX1N1XSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX01pXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NaV0gPSBfX3N0cmljdFBhcnNlRmxvYXQob3V0cHV0W19NaV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19NYV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTWFdID0gX19zdHJpY3RQYXJzZUZsb2F0KG91dHB1dFtfTWFdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0luc2lnaHRSdWxlTWV0cmljRGF0YXBvaW50cyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfSW5zaWdodFJ1bGVNZXRyaWNEYXRhcG9pbnQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX0luc2lnaHRSdWxlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfSW5zaWdodFJ1bGUoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX0ludGVybmFsU2VydmljZUZhdWx0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTWVzXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NZXNdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19NZXNdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0ludmFsaWRGb3JtYXRGYXVsdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tZV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21lXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JbnZhbGlkTmV4dFRva2VuID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21lXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbWVdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0ludmFsaWRQYXJhbWV0ZXJDb21iaW5hdGlvbkV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tZV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21lXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbWVdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tZV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTGltaXRFeGNlZWRlZEV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX01lc10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTWVzXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTWVzXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9MaW1pdEV4Y2VlZGVkRmF1bHQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbWVdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tZV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTGlzdERhc2hib2FyZHNPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAoU3RyaW5nKG91dHB1dC5EYXNoYm9hcmRFbnRyaWVzKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0RFXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0RFXSAhPSBudWxsICYmIG91dHB1dFtfREVdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19ERV0gPSBkZV9EYXNoYm9hcmRFbnRyaWVzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19ERV1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05UXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9MaXN0TWFuYWdlZEluc2lnaHRSdWxlc091dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChTdHJpbmcob3V0cHV0Lk1hbmFnZWRSdWxlcykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19NUmFuXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX01SYW5dICE9IG51bGwgJiYgb3V0cHV0W19NUmFuXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTVJhbl0gPSBkZV9NYW5hZ2VkUnVsZURlc2NyaXB0aW9ucyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfTVJhbl1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05UXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9MaXN0TWV0cmljc091dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChTdHJpbmcob3V0cHV0Lk1ldHJpY3MpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfTV0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19NXSAhPSBudWxsICYmIG91dHB1dFtfTV1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01dID0gZGVfTWV0cmljcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfTV1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05UXSk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcob3V0cHV0Lk93bmluZ0FjY291bnRzKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX09Bd10gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19PQXddICE9IG51bGwgJiYgb3V0cHV0W19PQXddW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19PQXddID0gZGVfT3duaW5nQWNjb3VudHMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX09Bd11bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9MaXN0TWV0cmljU3RyZWFtc091dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05UXSk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcob3V0cHV0LkVudHJpZXMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfRW5dID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfRW5dICE9IG51bGwgJiYgb3V0cHV0W19Fbl1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0VuXSA9IGRlX01ldHJpY1N0cmVhbUVudHJpZXMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0VuXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0xpc3RUYWdzRm9yUmVzb3VyY2VPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAoU3RyaW5nKG91dHB1dC5UYWdzKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX1RhXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX1RhXSAhPSBudWxsICYmIG91dHB1dFtfVGFdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UYV0gPSBkZV9UYWdMaXN0KF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19UYV1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9NYW5hZ2VkUnVsZURlc2NyaXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfVE5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1ROXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVE5dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfUkFSTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfUkFSTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1JBUk5dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfUlNdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1JTXSA9IGRlX01hbmFnZWRSdWxlU3RhdGUob3V0cHV0W19SU10sIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTWFuYWdlZFJ1bGVEZXNjcmlwdGlvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX01hbmFnZWRSdWxlRGVzY3JpcHRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX01hbmFnZWRSdWxlU3RhdGUgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19STnVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1JOdV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1JOdV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TdGF0XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TdGF0XSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU3RhdF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTWVzc2FnZURhdGEgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19Db2RdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NvZF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0NvZF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19WYV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVmFdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19WYV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTWV0cmljID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTU5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01OXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTU5dKTtcbiAgICB9XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuRGltZW5zaW9ucykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19EXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0RdICE9IG51bGwgJiYgb3V0cHV0W19EXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRF0gPSBkZV9EaW1lbnNpb25zKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19EXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01ldHJpY0FsYXJtID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQU5sXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BTmxdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BTmxdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQUFsXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BQWxdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BQWxdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQURdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FEXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQURdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQUNVVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQUNVVF0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19BQ1VUXSkpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19BRV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQUVdID0gX19wYXJzZUJvb2xlYW4ob3V0cHV0W19BRV0pO1xuICAgIH1cbiAgICBpZiAoU3RyaW5nKG91dHB1dC5PS0FjdGlvbnMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfT0tBXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX09LQV0gIT0gbnVsbCAmJiBvdXRwdXRbX09LQV1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX09LQV0gPSBkZV9SZXNvdXJjZUxpc3QoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX09LQV1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcob3V0cHV0LkFsYXJtQWN0aW9ucykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19BQV0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19BQV0gIT0gbnVsbCAmJiBvdXRwdXRbX0FBXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQUFdID0gZGVfUmVzb3VyY2VMaXN0KF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19BQV1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcob3V0cHV0Lkluc3VmZmljaWVudERhdGFBY3Rpb25zKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0lEQV0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19JREFdICE9IG51bGwgJiYgb3V0cHV0W19JREFdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19JREFdID0gZGVfUmVzb3VyY2VMaXN0KF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19JREFdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TVl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU1ZdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TVl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TUnRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NSdF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NSdF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TUkRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NSRF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NSRF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TVVRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NVVF0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19TVVRdKSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX01OXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX01OXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1N0XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TdF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1N0XSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0VTXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19FU10gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0VTXSk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcob3V0cHV0LkRpbWVuc2lvbnMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfRF0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19EXSAhPSBudWxsICYmIG91dHB1dFtfRF1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RdID0gZGVfRGltZW5zaW9ucyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfRF1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1BdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1BdID0gX19zdHJpY3RQYXJzZUludDMyKG91dHB1dFtfUF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19VXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19VXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19FUF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRVBdID0gX19zdHJpY3RQYXJzZUludDMyKG91dHB1dFtfRVBdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRFRBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19EVEFdID0gX19zdHJpY3RQYXJzZUludDMyKG91dHB1dFtfRFRBXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1RoXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UaF0gPSBfX3N0cmljdFBhcnNlRmxvYXQob3V0cHV0W19UaF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19DT10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ09dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19DT10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19UTURdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1RNRF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1RNRF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19FTFNDUF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRUxTQ1BdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19FTFNDUF0pO1xuICAgIH1cbiAgICBpZiAoU3RyaW5nKG91dHB1dC5NZXRyaWNzKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX01dID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfTV0gIT0gbnVsbCAmJiBvdXRwdXRbX01dW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NXSA9IGRlX01ldHJpY0RhdGFRdWVyaWVzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19NXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfVE1JXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UTUldID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UTUldKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRVN2XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19FU3ZdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19FU3ZdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU1RUXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TVFRdID0gX19leHBlY3ROb25OdWxsKF9fcGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0KG91dHB1dFtfU1RUXSkpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTWV0cmljQWxhcm1zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NZXRyaWNBbGFybShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfTWV0cmljQ2hhcmFjdGVyaXN0aWNzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfUFNdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1BTXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfUFNdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01ldHJpY0RhdGFRdWVyaWVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NZXRyaWNEYXRhUXVlcnkoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX01ldHJpY0RhdGFRdWVyeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0ldICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ldID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19JXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX01TXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NU10gPSBkZV9NZXRyaWNTdGF0KG91dHB1dFtfTVNdLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRXhdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0V4XSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRXhdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0xdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfUkRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1JEXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfUkRdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfUF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfUF0gPSBfX3N0cmljdFBhcnNlSW50MzIob3V0cHV0W19QXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0FJXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19BSV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0FJXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9NZXRyaWNEYXRhUmVzdWx0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfSV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfSV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0ldKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0xdKTtcbiAgICB9XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuVGltZXN0YW1wcykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19UaW1dID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfVGltXSAhPSBudWxsICYmIG91dHB1dFtfVGltXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVGltXSA9IGRlX1RpbWVzdGFtcHMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX1RpbV1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcob3V0cHV0LlZhbHVlcykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19WYWxdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfVmFsXSAhPSBudWxsICYmIG91dHB1dFtfVmFsXVtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVmFsXSA9IGRlX0RhdGFwb2ludFZhbHVlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfVmFsXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU0N0XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TQ3RdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TQ3RdKTtcbiAgICB9XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuTWVzc2FnZXMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfTWVzc10gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19NZXNzXSAhPSBudWxsICYmIG91dHB1dFtfTWVzc11bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01lc3NdID0gZGVfTWV0cmljRGF0YVJlc3VsdE1lc3NhZ2VzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19NZXNzXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01ldHJpY0RhdGFSZXN1bHRNZXNzYWdlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfTWVzc2FnZURhdGEoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX01ldHJpY0RhdGFSZXN1bHRzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NZXRyaWNEYXRhUmVzdWx0KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9NZXRyaWNNYXRoQW5vbWFseURldGVjdG9yID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuTWV0cmljRGF0YVF1ZXJpZXMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfTURRXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX01EUV0gIT0gbnVsbCAmJiBvdXRwdXRbX01EUV1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01EUV0gPSBkZV9NZXRyaWNEYXRhUXVlcmllcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfTURRXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01ldHJpY3MgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX01ldHJpYyhlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfTWV0cmljU3RhdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX01lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NZV0gPSBkZV9NZXRyaWMob3V0cHV0W19NZV0sIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19QXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19QXSA9IF9fc3RyaWN0UGFyc2VJbnQzMihvdXRwdXRbX1BdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU10gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfVV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1VdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01ldHJpY1N0cmVhbUVudHJpZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX01ldHJpY1N0cmVhbUVudHJ5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9NZXRyaWNTdHJlYW1FbnRyeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0FyXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19Bcl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0FyXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0NEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19DRF0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19DRF0pKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTFVEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19MVURdID0gX19leHBlY3ROb25OdWxsKF9fcGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0KG91dHB1dFtfTFVEXSkpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19OYV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTmFdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OYV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19GQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRkFdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19GQV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TdGF0XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TdGF0XSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU3RhdF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19PRl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfT0ZdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19PRl0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTWV0cmljU3RyZWFtRmlsdGVyID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05dKTtcbiAgICB9XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuTWV0cmljTmFtZXMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfTU5lXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX01OZV0gIT0gbnVsbCAmJiBvdXRwdXRbX01OZV1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01OZV0gPSBkZV9NZXRyaWNTdHJlYW1GaWx0ZXJNZXRyaWNOYW1lcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfTU5lXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01ldHJpY1N0cmVhbUZpbHRlck1ldHJpY05hbWVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2V4cGVjdFN0cmluZyhlbnRyeSk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfTWV0cmljU3RyZWFtRmlsdGVycyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfTWV0cmljU3RyZWFtRmlsdGVyKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9NZXRyaWNTdHJlYW1TdGF0aXN0aWNzQWRkaXRpb25hbFN0YXRpc3RpY3MgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fZXhwZWN0U3RyaW5nKGVudHJ5KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9NZXRyaWNTdHJlYW1TdGF0aXN0aWNzQ29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChTdHJpbmcob3V0cHV0LkluY2x1ZGVNZXRyaWNzKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0lNXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0lNXSAhPSBudWxsICYmIG91dHB1dFtfSU1dW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19JTV0gPSBkZV9NZXRyaWNTdHJlYW1TdGF0aXN0aWNzSW5jbHVkZU1ldHJpY3MoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0lNXVtfbV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuQWRkaXRpb25hbFN0YXRpc3RpY3MpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfQVNdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfQVNdICE9IG51bGwgJiYgb3V0cHV0W19BU11bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FTXSA9IGRlX01ldHJpY1N0cmVhbVN0YXRpc3RpY3NBZGRpdGlvbmFsU3RhdGlzdGljcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfQVNdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTWV0cmljU3RyZWFtU3RhdGlzdGljc0NvbmZpZ3VyYXRpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NZXRyaWNTdHJlYW1TdGF0aXN0aWNzQ29uZmlndXJhdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfTWV0cmljU3RyZWFtU3RhdGlzdGljc0luY2x1ZGVNZXRyaWNzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NZXRyaWNTdHJlYW1TdGF0aXN0aWNzTWV0cmljKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9NZXRyaWNTdHJlYW1TdGF0aXN0aWNzTWV0cmljID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTU5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01OXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTU5dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01pc3NpbmdSZXF1aXJlZFBhcmFtZXRlckV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tZV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21lXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9Pd25pbmdBY2NvdW50cyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gX19leHBlY3RTdHJpbmcoZW50cnkpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX1BhcnRpYWxGYWlsdXJlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfRlJdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZSXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRlJdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRVR4XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19FVHhdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19FVHhdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRkNdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZDXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRkNdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRkRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZEXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRkRdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1B1dEFub21hbHlEZXRlY3Rvck91dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9QdXREYXNoYm9hcmRPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAoU3RyaW5nKG91dHB1dC5EYXNoYm9hcmRWYWxpZGF0aW9uTWVzc2FnZXMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfRFZNXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0RWTV0gIT0gbnVsbCAmJiBvdXRwdXRbX0RWTV1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RWTV0gPSBkZV9EYXNoYm9hcmRWYWxpZGF0aW9uTWVzc2FnZXMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0RWTV1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9QdXRJbnNpZ2h0UnVsZU91dHB1dCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9QdXRNYW5hZ2VkSW5zaWdodFJ1bGVzT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuRmFpbHVyZXMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfRl0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19GXSAhPSBudWxsICYmIG91dHB1dFtfRl1bX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZdID0gZGVfQmF0Y2hGYWlsdXJlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfRl1bX21dKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9QdXRNZXRyaWNTdHJlYW1PdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19Bcl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQXJdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19Bcl0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfUmFuZ2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19TVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU1RdID0gX19leHBlY3ROb25OdWxsKF9fcGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0KG91dHB1dFtfU1RdKSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0VUXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19FVF0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19FVF0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1Jlc291cmNlTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gX19leHBlY3RTdHJpbmcoZW50cnkpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Jlc291cmNlTm90Rm91bmQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbWVdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tZV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1JUXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19SVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1JUXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1JJXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19SSV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1JJXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX01lc10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTWVzXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTWVzXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9TaW5nbGVNZXRyaWNBbm9tYWx5RGV0ZWN0b3IgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19BSV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQUldID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19BSV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19NTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTU5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19NTl0pO1xuICAgIH1cbiAgICBpZiAoU3RyaW5nKG91dHB1dC5EaW1lbnNpb25zKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0RdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfRF0gIT0gbnVsbCAmJiBvdXRwdXRbX0RdW19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19EXSA9IGRlX0RpbWVuc2lvbnMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0RdW19tXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU10pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfU3RhcnRNZXRyaWNTdHJlYW1zT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1N0b3BNZXRyaWNTdHJlYW1zT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1RhZyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0tdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0tdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19LXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1ZhXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19WYV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1ZhXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9UYWdMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9UYWcoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RhZ1Jlc291cmNlT3V0cHV0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1RpbWVzdGFtcHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldChlbnRyeSkpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX1VudGFnUmVzb3VyY2VPdXRwdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVzZXJpYWxpemVNZXRhZGF0YSA9IChvdXRwdXQpID0+ICh7XG4gICAgaHR0cFN0YXR1c0NvZGU6IG91dHB1dC5zdGF0dXNDb2RlLFxuICAgIHJlcXVlc3RJZDogb3V0cHV0LmhlYWRlcnNbXCJ4LWFtem4tcmVxdWVzdGlkXCJdID8/IG91dHB1dC5oZWFkZXJzW1wieC1hbXpuLXJlcXVlc3QtaWRcIl0gPz8gb3V0cHV0LmhlYWRlcnNbXCJ4LWFtei1yZXF1ZXN0LWlkXCJdLFxuICAgIGV4dGVuZGVkUmVxdWVzdElkOiBvdXRwdXQuaGVhZGVyc1tcIngtYW16LWlkLTJcIl0sXG4gICAgY2ZJZDogb3V0cHV0LmhlYWRlcnNbXCJ4LWFtei1jZi1pZFwiXSxcbn0pO1xuY29uc3QgY29sbGVjdEJvZHlTdHJpbmcgPSAoc3RyZWFtQm9keSwgY29udGV4dCkgPT4gY29sbGVjdEJvZHkoc3RyZWFtQm9keSwgY29udGV4dCkudGhlbigoYm9keSkgPT4gY29udGV4dC51dGY4RW5jb2Rlcihib2R5KSk7XG5jb25zdCB0aHJvd0RlZmF1bHRFcnJvciA9IHdpdGhCYXNlRXhjZXB0aW9uKF9fQmFzZUV4Y2VwdGlvbik7XG5jb25zdCBidWlsZEh0dHBScGNSZXF1ZXN0ID0gYXN5bmMgKGNvbnRleHQsIGhlYWRlcnMsIHBhdGgsIHJlc29sdmVkSG9zdG5hbWUsIGJvZHkpID0+IHtcbiAgICBjb25zdCB7IGhvc3RuYW1lLCBwcm90b2NvbCA9IFwiaHR0cHNcIiwgcG9ydCwgcGF0aDogYmFzZVBhdGggfSA9IGF3YWl0IGNvbnRleHQuZW5kcG9pbnQoKTtcbiAgICBjb25zdCBjb250ZW50cyA9IHtcbiAgICAgICAgcHJvdG9jb2wsXG4gICAgICAgIGhvc3RuYW1lLFxuICAgICAgICBwb3J0LFxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBwYXRoOiBiYXNlUGF0aC5lbmRzV2l0aChcIi9cIikgPyBiYXNlUGF0aC5zbGljZSgwLCAtMSkgKyBwYXRoIDogYmFzZVBhdGggKyBwYXRoLFxuICAgICAgICBoZWFkZXJzLFxuICAgIH07XG4gICAgaWYgKHJlc29sdmVkSG9zdG5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250ZW50cy5ob3N0bmFtZSA9IHJlc29sdmVkSG9zdG5hbWU7XG4gICAgfVxuICAgIGlmIChib2R5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29udGVudHMuYm9keSA9IGJvZHk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgX19IdHRwUmVxdWVzdChjb250ZW50cyk7XG59O1xuY29uc3QgU0hBUkVEX0hFQURFUlMgPSB7XG4gICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbn07XG5jb25zdCBfID0gXCIyMDEwLTA4LTAxXCI7XG5jb25zdCBfQSA9IFwiQWN0aW9uXCI7XG5jb25zdCBfQUEgPSBcIkFsYXJtQWN0aW9uc1wiO1xuY29uc3QgX0FBViA9IFwiQXBwcm94aW1hdGVBZ2dyZWdhdGVWYWx1ZVwiO1xuY29uc3QgX0FBbCA9IFwiQWxhcm1Bcm5cIjtcbmNvbnN0IF9BQyA9IFwiQWxhcm1Db250cmlidXRvcnNcIjtcbmNvbnN0IF9BQ0EgPSBcIkFsYXJtQ29udHJpYnV0b3JBdHRyaWJ1dGVzXCI7XG5jb25zdCBfQUNJID0gXCJBbGFybUNvbnRyaWJ1dG9ySWRcIjtcbmNvbnN0IF9BQ1VUID0gXCJBbGFybUNvbmZpZ3VyYXRpb25VcGRhdGVkVGltZXN0YW1wXCI7XG5jb25zdCBfQUQgPSBcIkFsYXJtRGVzY3JpcHRpb25cIjtcbmNvbnN0IF9BRFQgPSBcIkFub21hbHlEZXRlY3RvclR5cGVzXCI7XG5jb25zdCBfQURuID0gXCJBbm9tYWx5RGV0ZWN0b3JzXCI7XG5jb25zdCBfQUUgPSBcIkFjdGlvbnNFbmFibGVkXCI7XG5jb25zdCBfQUhJID0gXCJBbGFybUhpc3RvcnlJdGVtc1wiO1xuY29uc3QgX0FJID0gXCJBY2NvdW50SWRcIjtcbmNvbnN0IF9BTiA9IFwiQWxhcm1OYW1lc1wiO1xuY29uc3QgX0FOUCA9IFwiQWxhcm1OYW1lUHJlZml4XCI7XG5jb25zdCBfQU5sID0gXCJBbGFybU5hbWVcIjtcbmNvbnN0IF9BT1RMID0gXCJBcHBseU9uVHJhbnNmb3JtZWRMb2dzXCI7XG5jb25zdCBfQVAgPSBcIkFjdGlvblByZWZpeFwiO1xuY29uc3QgX0FSID0gXCJBbGFybVJ1bGVcIjtcbmNvbnN0IF9BUyA9IFwiQWRkaXRpb25hbFN0YXRpc3RpY3NcIjtcbmNvbnN0IF9BU0IgPSBcIkFjdGlvbnNTdXBwcmVzc2VkQnlcIjtcbmNvbnN0IF9BU0VQID0gXCJBY3Rpb25zU3VwcHJlc3NvckV4dGVuc2lvblBlcmlvZFwiO1xuY29uc3QgX0FTUiA9IFwiQWN0aW9uc1N1cHByZXNzZWRSZWFzb25cIjtcbmNvbnN0IF9BU1dQID0gXCJBY3Rpb25zU3VwcHJlc3NvcldhaXRQZXJpb2RcIjtcbmNvbnN0IF9BU2MgPSBcIkFjdGlvbnNTdXBwcmVzc29yXCI7XG5jb25zdCBfQVNnID0gXCJBZ2dyZWdhdGlvblN0YXRpc3RpY1wiO1xuY29uc3QgX0FUID0gXCJBbGFybVR5cGVzXCI7XG5jb25zdCBfQVRsID0gXCJBbGFybVR5cGVcIjtcbmNvbnN0IF9BVUMgPSBcIkFwcHJveGltYXRlVW5pcXVlQ291bnRcIjtcbmNvbnN0IF9BViA9IFwiQWdncmVnYXRlVmFsdWVcIjtcbmNvbnN0IF9BVnAgPSBcIkFwcHJveGltYXRlVmFsdWVcIjtcbmNvbnN0IF9BciA9IFwiQXJuXCI7XG5jb25zdCBfQXQgPSBcIkF0dHJpYnV0ZXNcIjtcbmNvbnN0IF9BdiA9IFwiQXZlcmFnZVwiO1xuY29uc3QgX0MgPSBcIkNvdW50c1wiO1xuY29uc3QgX0NBID0gXCJDb250cmlidXRvckF0dHJpYnV0ZXNcIjtcbmNvbnN0IF9DQW8gPSBcIkNvbXBvc2l0ZUFsYXJtc1wiO1xuY29uc3QgX0NEID0gXCJDcmVhdGlvbkRhdGVcIjtcbmNvbnN0IF9DSSA9IFwiQ29udHJpYnV0b3JJZFwiO1xuY29uc3QgX0NPID0gXCJDb21wYXJpc29uT3BlcmF0b3JcIjtcbmNvbnN0IF9DT0FOID0gXCJDaGlsZHJlbk9mQWxhcm1OYW1lXCI7XG5jb25zdCBfQ28gPSBcIkNvbmZpZ3VyYXRpb25cIjtcbmNvbnN0IF9Db2QgPSBcIkNvZGVcIjtcbmNvbnN0IF9Db24gPSBcIkNvbnRyaWJ1dG9yc1wiO1xuY29uc3QgX0QgPSBcIkRpbWVuc2lvbnNcIjtcbmNvbnN0IF9EQSA9IFwiRGVsZXRlQWxhcm1zXCI7XG5jb25zdCBfREFBID0gXCJEaXNhYmxlQWxhcm1BY3Rpb25zXCI7XG5jb25zdCBfREFDID0gXCJEZXNjcmliZUFsYXJtQ29udHJpYnV0b3JzXCI7XG5jb25zdCBfREFEID0gXCJEZWxldGVBbm9tYWx5RGV0ZWN0b3JcIjtcbmNvbnN0IF9EQURlID0gXCJEZXNjcmliZUFub21hbHlEZXRlY3RvcnNcIjtcbmNvbnN0IF9EQUZNID0gXCJEZXNjcmliZUFsYXJtc0Zvck1ldHJpY1wiO1xuY29uc3QgX0RBSCA9IFwiRGVzY3JpYmVBbGFybUhpc3RvcnlcIjtcbmNvbnN0IF9EQWEgPSBcIkRhc2hib2FyZEFyblwiO1xuY29uc3QgX0RBZSA9IFwiRGVzY3JpYmVBbGFybXNcIjtcbmNvbnN0IF9EQiA9IFwiRGFzaGJvYXJkQm9keVwiO1xuY29uc3QgX0REID0gXCJEZWxldGVEYXNoYm9hcmRzXCI7XG5jb25zdCBfREUgPSBcIkRhc2hib2FyZEVudHJpZXNcIjtcbmNvbnN0IF9ESVIgPSBcIkRlbGV0ZUluc2lnaHRSdWxlc1wiO1xuY29uc3QgX0RJUmUgPSBcIkRlc2NyaWJlSW5zaWdodFJ1bGVzXCI7XG5jb25zdCBfRElSaSA9IFwiRGlzYWJsZUluc2lnaHRSdWxlc1wiO1xuY29uc3QgX0RNUyA9IFwiRGVsZXRlTWV0cmljU3RyZWFtXCI7XG5jb25zdCBfRE4gPSBcIkRhc2hib2FyZE5hbWVzXCI7XG5jb25zdCBfRE5QID0gXCJEYXNoYm9hcmROYW1lUHJlZml4XCI7XG5jb25zdCBfRE5hID0gXCJEYXNoYm9hcmROYW1lXCI7XG5jb25zdCBfRFAgPSBcIkRhdGFQYXRoXCI7XG5jb25zdCBfRFRBID0gXCJEYXRhcG9pbnRzVG9BbGFybVwiO1xuY29uc3QgX0RWTSA9IFwiRGFzaGJvYXJkVmFsaWRhdGlvbk1lc3NhZ2VzXCI7XG5jb25zdCBfRGEgPSBcIkRhdGFwb2ludHNcIjtcbmNvbnN0IF9EZSA9IFwiRGVmaW5pdGlvblwiO1xuY29uc3QgX0UgPSBcIkVudGl0eVwiO1xuY29uc3QgX0VBQSA9IFwiRW5hYmxlQWxhcm1BY3Rpb25zXCI7XG5jb25zdCBfRUQgPSBcIkVuZERhdGVcIjtcbmNvbnN0IF9FRiA9IFwiRXhjbHVkZUZpbHRlcnNcIjtcbmNvbnN0IF9FSVIgPSBcIkVuYWJsZUluc2lnaHRSdWxlc1wiO1xuY29uc3QgX0VMU0NQID0gXCJFdmFsdWF0ZUxvd1NhbXBsZUNvdW50UGVyY2VudGlsZVwiO1xuY29uc3QgX0VNRCA9IFwiRW50aXR5TWV0cmljRGF0YVwiO1xuY29uc3QgX0VQID0gXCJFdmFsdWF0aW9uUGVyaW9kc1wiO1xuY29uc3QgX0VTID0gXCJFeHRlbmRlZFN0YXRpc3RpY1wiO1xuY29uc3QgX0VTdiA9IFwiRXZhbHVhdGlvblN0YXRlXCI7XG5jb25zdCBfRVN4ID0gXCJFeHRlbmRlZFN0YXRpc3RpY3NcIjtcbmNvbnN0IF9FVCA9IFwiRW5kVGltZVwiO1xuY29uc3QgX0VUUiA9IFwiRXhjbHVkZWRUaW1lUmFuZ2VzXCI7XG5jb25zdCBfRVR4ID0gXCJFeGNlcHRpb25UeXBlXCI7XG5jb25zdCBfRW4gPSBcIkVudHJpZXNcIjtcbmNvbnN0IF9FeCA9IFwiRXhwcmVzc2lvblwiO1xuY29uc3QgX0YgPSBcIkZhaWx1cmVzXCI7XG5jb25zdCBfRkEgPSBcIkZpcmVob3NlQXJuXCI7XG5jb25zdCBfRkMgPSBcIkZhaWx1cmVDb2RlXCI7XG5jb25zdCBfRkQgPSBcIkZhaWx1cmVEZXNjcmlwdGlvblwiO1xuY29uc3QgX0ZSID0gXCJGYWlsdXJlUmVzb3VyY2VcIjtcbmNvbnN0IF9HRCA9IFwiR2V0RGFzaGJvYXJkXCI7XG5jb25zdCBfR0lSUiA9IFwiR2V0SW5zaWdodFJ1bGVSZXBvcnRcIjtcbmNvbnN0IF9HTUQgPSBcIkdldE1ldHJpY0RhdGFcIjtcbmNvbnN0IF9HTVMgPSBcIkdldE1ldHJpY1N0YXRpc3RpY3NcIjtcbmNvbnN0IF9HTVNlID0gXCJHZXRNZXRyaWNTdHJlYW1cIjtcbmNvbnN0IF9HTVdJID0gXCJHZXRNZXRyaWNXaWRnZXRJbWFnZVwiO1xuY29uc3QgX0hEID0gXCJIaXN0b3J5RGF0YVwiO1xuY29uc3QgX0hJVCA9IFwiSGlzdG9yeUl0ZW1UeXBlXCI7XG5jb25zdCBfSFMgPSBcIkhpc3RvcnlTdW1tYXJ5XCI7XG5jb25zdCBfSSA9IFwiSWRcIjtcbmNvbnN0IF9JREEgPSBcIkluc3VmZmljaWVudERhdGFBY3Rpb25zXCI7XG5jb25zdCBfSUYgPSBcIkluY2x1ZGVGaWx0ZXJzXCI7XG5jb25zdCBfSUxBID0gXCJJbmNsdWRlTGlua2VkQWNjb3VudHNcIjtcbmNvbnN0IF9JTEFNID0gXCJJbmNsdWRlTGlua2VkQWNjb3VudHNNZXRyaWNzXCI7XG5jb25zdCBfSU0gPSBcIkluY2x1ZGVNZXRyaWNzXCI7XG5jb25zdCBfSVIgPSBcIkluc2lnaHRSdWxlc1wiO1xuY29uc3QgX0sgPSBcIktleVwiO1xuY29uc3QgX0tBID0gXCJLZXlBdHRyaWJ1dGVzXCI7XG5jb25zdCBfS0wgPSBcIktleUxhYmVsc1wiO1xuY29uc3QgX0tlID0gXCJLZXlzXCI7XG5jb25zdCBfTCA9IFwiTGFiZWxcIjtcbmNvbnN0IF9MRCA9IFwiTGlzdERhc2hib2FyZHNcIjtcbmNvbnN0IF9MTSA9IFwiTGlzdE1ldHJpY3NcIjtcbmNvbnN0IF9MTUlSID0gXCJMaXN0TWFuYWdlZEluc2lnaHRSdWxlc1wiO1xuY29uc3QgX0xNUyA9IFwiTGlzdE1ldHJpY1N0cmVhbXNcIjtcbmNvbnN0IF9MTWEgPSBcIkxhc3RNb2RpZmllZFwiO1xuY29uc3QgX0xPID0gXCJMYWJlbE9wdGlvbnNcIjtcbmNvbnN0IF9MVEZSID0gXCJMaXN0VGFnc0ZvclJlc291cmNlXCI7XG5jb25zdCBfTFVEID0gXCJMYXN0VXBkYXRlRGF0ZVwiO1xuY29uc3QgX00gPSBcIk1ldHJpY3NcIjtcbmNvbnN0IF9NQSA9IFwiTWV0cmljQWxhcm1zXCI7XG5jb25zdCBfTUMgPSBcIk1ldHJpY0NoYXJhY3RlcmlzdGljc1wiO1xuY29uc3QgX01DQyA9IFwiTWF4Q29udHJpYnV0b3JDb3VudFwiO1xuY29uc3QgX01DViA9IFwiTWF4Q29udHJpYnV0b3JWYWx1ZVwiO1xuY29uc3QgX01EID0gXCJNZXRyaWNEYXRhXCI7XG5jb25zdCBfTURRID0gXCJNZXRyaWNEYXRhUXVlcmllc1wiO1xuY29uc3QgX01EUiA9IFwiTWV0cmljRGF0YVJlc3VsdHNcIjtcbmNvbnN0IF9NRGEgPSBcIk1heERhdGFwb2ludHNcIjtcbmNvbnN0IF9NRGUgPSBcIk1ldHJpY0RhdGFwb2ludHNcIjtcbmNvbnN0IF9NTUFEID0gXCJNZXRyaWNNYXRoQW5vbWFseURldGVjdG9yXCI7XG5jb25zdCBfTU4gPSBcIk1ldHJpY05hbWVcIjtcbmNvbnN0IF9NTmUgPSBcIk1ldHJpY05hbWVzXCI7XG5jb25zdCBfTVIgPSBcIk1heFJlY29yZHNcIjtcbmNvbnN0IF9NUmEgPSBcIk1heFJlc3VsdHNcIjtcbmNvbnN0IF9NUmFuID0gXCJNYW5hZ2VkUnVsZXNcIjtcbmNvbnN0IF9NUmFuYSA9IFwiTWFuYWdlZFJ1bGVcIjtcbmNvbnN0IF9NUyA9IFwiTWV0cmljU3RhdFwiO1xuY29uc3QgX01UID0gXCJNZXRyaWNUaW1lem9uZVwiO1xuY29uc3QgX01XID0gXCJNZXRyaWNXaWRnZXRcIjtcbmNvbnN0IF9NV0kgPSBcIk1ldHJpY1dpZGdldEltYWdlXCI7XG5jb25zdCBfTWEgPSBcIk1heGltdW1cIjtcbmNvbnN0IF9NZSA9IFwiTWV0cmljXCI7XG5jb25zdCBfTWVzID0gXCJNZXNzYWdlXCI7XG5jb25zdCBfTWVzcyA9IFwiTWVzc2FnZXNcIjtcbmNvbnN0IF9NaSA9IFwiTWluaW11bVwiO1xuY29uc3QgX04gPSBcIk5hbWVzcGFjZVwiO1xuY29uc3QgX05UID0gXCJOZXh0VG9rZW5cIjtcbmNvbnN0IF9OYSA9IFwiTmFtZVwiO1xuY29uc3QgX05hbSA9IFwiTmFtZXNcIjtcbmNvbnN0IF9PQSA9IFwiT3duaW5nQWNjb3VudFwiO1xuY29uc3QgX09BdyA9IFwiT3duaW5nQWNjb3VudHNcIjtcbmNvbnN0IF9PQiA9IFwiT3JkZXJCeVwiO1xuY29uc3QgX09GID0gXCJPdXRwdXRGb3JtYXRcIjtcbmNvbnN0IF9PS0EgPSBcIk9LQWN0aW9uc1wiO1xuY29uc3QgX1AgPSBcIlBlcmlvZFwiO1xuY29uc3QgX1BBRCA9IFwiUHV0QW5vbWFseURldGVjdG9yXCI7XG5jb25zdCBfUENBID0gXCJQdXRDb21wb3NpdGVBbGFybVwiO1xuY29uc3QgX1BEID0gXCJQdXREYXNoYm9hcmRcIjtcbmNvbnN0IF9QSVIgPSBcIlB1dEluc2lnaHRSdWxlXCI7XG5jb25zdCBfUE1BID0gXCJQdXRNZXRyaWNBbGFybVwiO1xuY29uc3QgX1BNRCA9IFwiUHV0TWV0cmljRGF0YVwiO1xuY29uc3QgX1BNSVIgPSBcIlB1dE1hbmFnZWRJbnNpZ2h0UnVsZXNcIjtcbmNvbnN0IF9QTVMgPSBcIlB1dE1ldHJpY1N0cmVhbVwiO1xuY29uc3QgX1BPQU4gPSBcIlBhcmVudHNPZkFsYXJtTmFtZVwiO1xuY29uc3QgX1BTID0gXCJQZXJpb2RpY1NwaWtlc1wiO1xuY29uc3QgX1JBID0gXCJSZWNlbnRseUFjdGl2ZVwiO1xuY29uc3QgX1JBUk4gPSBcIlJlc291cmNlQVJOXCI7XG5jb25zdCBfUkFvID0gXCJSb2xlQXJuXCI7XG5jb25zdCBfUkQgPSBcIlJldHVybkRhdGFcIjtcbmNvbnN0IF9SRHUgPSBcIlJ1bGVEZWZpbml0aW9uXCI7XG5jb25zdCBfUkkgPSBcIlJlc291cmNlSWRcIjtcbmNvbnN0IF9STiA9IFwiUnVsZU5hbWVzXCI7XG5jb25zdCBfUk51ID0gXCJSdWxlTmFtZVwiO1xuY29uc3QgX1JTID0gXCJSdWxlU3RhdGVcIjtcbmNvbnN0IF9SVCA9IFwiUmVzb3VyY2VUeXBlXCI7XG5jb25zdCBfUyA9IFwiU3RhdFwiO1xuY29uc3QgX1NBUyA9IFwiU2V0QWxhcm1TdGF0ZVwiO1xuY29uc3QgX1NCID0gXCJTY2FuQnlcIjtcbmNvbnN0IF9TQyA9IFwiU3RhdGlzdGljc0NvbmZpZ3VyYXRpb25zXCI7XG5jb25zdCBfU0NhID0gXCJTYW1wbGVDb3VudFwiO1xuY29uc3QgX1NDdCA9IFwiU3RhdHVzQ29kZVwiO1xuY29uc3QgX1NEID0gXCJTdGFydERhdGVcIjtcbmNvbnN0IF9TRVYgPSBcIlN0cmljdEVudGl0eVZhbGlkYXRpb25cIjtcbmNvbnN0IF9TTUFEID0gXCJTaW5nbGVNZXRyaWNBbm9tYWx5RGV0ZWN0b3JcIjtcbmNvbnN0IF9TTVMgPSBcIlN0YXJ0TWV0cmljU3RyZWFtc1wiO1xuY29uc3QgX1NNU3QgPSBcIlN0b3BNZXRyaWNTdHJlYW1zXCI7XG5jb25zdCBfU1IgPSBcIlN0b3JhZ2VSZXNvbHV0aW9uXCI7XG5jb25zdCBfU1JEID0gXCJTdGF0ZVJlYXNvbkRhdGFcIjtcbmNvbnN0IF9TUnQgPSBcIlN0YXRlUmVhc29uXCI7XG5jb25zdCBfU1QgPSBcIlN0YXJ0VGltZVwiO1xuY29uc3QgX1NUVCA9IFwiU3RhdGVUcmFuc2l0aW9uZWRUaW1lc3RhbXBcIjtcbmNvbnN0IF9TVVQgPSBcIlN0YXRlVXBkYXRlZFRpbWVzdGFtcFwiO1xuY29uc3QgX1NWID0gXCJTdGF0ZVZhbHVlXCI7XG5jb25zdCBfU1Z0ID0gXCJTdGF0aXN0aWNWYWx1ZXNcIjtcbmNvbnN0IF9TYyA9IFwiU2NoZW1hXCI7XG5jb25zdCBfU2kgPSBcIlNpemVcIjtcbmNvbnN0IF9TdCA9IFwiU3RhdGlzdGljXCI7XG5jb25zdCBfU3RhID0gXCJTdGF0aXN0aWNzXCI7XG5jb25zdCBfU3RhdCA9IFwiU3RhdGVcIjtcbmNvbnN0IF9TdSA9IFwiU3VtXCI7XG5jb25zdCBfVCA9IFwiVGltZXpvbmVcIjtcbmNvbnN0IF9USyA9IFwiVGFnS2V5c1wiO1xuY29uc3QgX1RNRCA9IFwiVHJlYXRNaXNzaW5nRGF0YVwiO1xuY29uc3QgX1RNSSA9IFwiVGhyZXNob2xkTWV0cmljSWRcIjtcbmNvbnN0IF9UTiA9IFwiVGVtcGxhdGVOYW1lXCI7XG5jb25zdCBfVFIgPSBcIlRhZ1Jlc291cmNlXCI7XG5jb25zdCBfVGEgPSBcIlRhZ3NcIjtcbmNvbnN0IF9UaCA9IFwiVGhyZXNob2xkXCI7XG5jb25zdCBfVGkgPSBcIlRpbWVzdGFtcFwiO1xuY29uc3QgX1RpbSA9IFwiVGltZXN0YW1wc1wiO1xuY29uc3QgX1UgPSBcIlVuaXRcIjtcbmNvbnN0IF9VQyA9IFwiVW5pcXVlQ29udHJpYnV0b3JzXCI7XG5jb25zdCBfVVIgPSBcIlVudGFnUmVzb3VyY2VcIjtcbmNvbnN0IF9WID0gXCJWZXJzaW9uXCI7XG5jb25zdCBfVmEgPSBcIlZhbHVlXCI7XG5jb25zdCBfVmFsID0gXCJWYWx1ZXNcIjtcbmNvbnN0IF9kVk0gPSBcImRhc2hib2FyZFZhbGlkYXRpb25NZXNzYWdlc1wiO1xuY29uc3QgX2UgPSBcImVudHJ5XCI7XG5jb25zdCBfbSA9IFwibWVtYmVyXCI7XG5jb25zdCBfbWUgPSBcIm1lc3NhZ2VcIjtcbmNvbnN0IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcgPSAoZm9ybUVudHJpZXMpID0+IE9iamVjdC5lbnRyaWVzKGZvcm1FbnRyaWVzKVxuICAgIC5tYXAoKFtrZXksIHZhbHVlXSkgPT4gX19leHRlbmRlZEVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgXCI9XCIgKyBfX2V4dGVuZGVkRW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAuam9pbihcIiZcIik7XG5jb25zdCBsb2FkUXVlcnlFcnJvckNvZGUgPSAob3V0cHV0LCBkYXRhKSA9PiB7XG4gICAgaWYgKGRhdGEuRXJyb3I/LkNvZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZGF0YS5FcnJvci5Db2RlO1xuICAgIH1cbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPT0gNDA0KSB7XG4gICAgICAgIHJldHVybiBcIk5vdEZvdW5kXCI7XG4gICAgfVxufTtcbiIsImV4cG9ydCBjb25zdCBnZXRBcnJheUlmU2luZ2xlSXRlbSA9IChtYXlCZUFycmF5KSA9PiBBcnJheS5pc0FycmF5KG1heUJlQXJyYXkpID8gbWF5QmVBcnJheSA6IFttYXlCZUFycmF5XTtcbiIsImltcG9ydCB7IGdldENvbXByZXNzaW9uUGx1Z2luIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1jb21wcmVzc2lvblwiO1xuaW1wb3J0IHsgZ2V0RW5kcG9pbnRQbHVnaW4gfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50XCI7XG5pbXBvcnQgeyBnZXRTZXJkZVBsdWdpbiB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtc2VyZGVcIjtcbmltcG9ydCB7IENvbW1hbmQgYXMgJENvbW1hbmQgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBjb21tb25QYXJhbXMgfSBmcm9tIFwiLi4vZW5kcG9pbnQvRW5kcG9pbnRQYXJhbWV0ZXJzXCI7XG5pbXBvcnQgeyBkZV9QdXRNZXRyaWNEYXRhQ29tbWFuZCwgc2VfUHV0TWV0cmljRGF0YUNvbW1hbmQgfSBmcm9tIFwiLi4vcHJvdG9jb2xzL0F3c19xdWVyeVwiO1xuZXhwb3J0IHsgJENvbW1hbmQgfTtcbmV4cG9ydCBjbGFzcyBQdXRNZXRyaWNEYXRhQ29tbWFuZCBleHRlbmRzICRDb21tYW5kXG4gICAgLmNsYXNzQnVpbGRlcigpXG4gICAgLmVwKGNvbW1vblBhcmFtcylcbiAgICAubShmdW5jdGlvbiAoQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICAgIHJldHVybiBbXG4gICAgICAgIGdldFNlcmRlUGx1Z2luKGNvbmZpZywgdGhpcy5zZXJpYWxpemUsIHRoaXMuZGVzZXJpYWxpemUpLFxuICAgICAgICBnZXRFbmRwb2ludFBsdWdpbihjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSksXG4gICAgICAgIGdldENvbXByZXNzaW9uUGx1Z2luKGNvbmZpZywge1xuICAgICAgICAgICAgZW5jb2RpbmdzOiBbXCJnemlwXCJdLFxuICAgICAgICB9KSxcbiAgICBdO1xufSlcbiAgICAucyhcIkdyYW5pdGVTZXJ2aWNlVmVyc2lvbjIwMTAwODAxXCIsIFwiUHV0TWV0cmljRGF0YVwiLCB7fSlcbiAgICAubihcIkNsb3VkV2F0Y2hDbGllbnRcIiwgXCJQdXRNZXRyaWNEYXRhQ29tbWFuZFwiKVxuICAgIC5mKHZvaWQgMCwgdm9pZCAwKVxuICAgIC5zZXIoc2VfUHV0TWV0cmljRGF0YUNvbW1hbmQpXG4gICAgLmRlKGRlX1B1dE1ldHJpY0RhdGFDb21tYW5kKVxuICAgIC5idWlsZCgpIHtcbn1cbiIsImltcG9ydCB7IENsb3VkV2F0Y2hDbGllbnQsIE1ldHJpY0RhdHVtLCBQdXRNZXRyaWNEYXRhQ29tbWFuZCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHdhdGNoJ1xuXG5leHBvcnQgY2xhc3MgQ2xvdWRXYXRjaE1ldHJpY0NsaWVudCB7XG5cdHByaXZhdGUgbWV0cmljRGF0YTogTWV0cmljRGF0dW1bXSA9IFtdXG5cdHByaXZhdGUgY2xvdWRXYXRjaENsaWVudCA9IG5ldyBDbG91ZFdhdGNoQ2xpZW50KHt9KVxuXG5cdC8vIE5vcm1hbGx5IHdlJ2Qgd29ycnkgYWJvdXQgbWF4IG1ldHJpYyBkYXRhIHBlciByZXF1ZXN0IGJ1dCB0aGUgbWF4IGlzIGN1cnJlbnRseSAyMCBhbmQgd2Ugd29uJ3QgYmUgcHVibGlzaGluZyB0aGF0IG1hbnkgbWV0cmljc1xuXHRwdWJsaWMgcXVldWVNZXRyaWMobWV0cmljRGF0dW06IE1ldHJpY0RhdHVtKSB7XG5cdFx0dGhpcy5tZXRyaWNEYXRhLnB1c2gobWV0cmljRGF0dW0pXG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgZW1pdFF1ZXVlZE1ldHJpY3MoKSB7XG5cdFx0Y29uc3QgcHV0TWV0cmljRGF0YUNvbW1hbmQgPSBuZXcgUHV0TWV0cmljRGF0YUNvbW1hbmQoe1xuXHRcdFx0TmFtZXNwYWNlOiBwcm9jZXNzLmVudi5BV1NfTEFNQkRBX0ZVTkNUSU9OX05BTUUsXG5cdFx0XHRNZXRyaWNEYXRhOiB0aGlzLm1ldHJpY0RhdGEsXG5cdFx0fSlcblxuXHRcdC8vIFN0cnlrZXIgZGlzYWJsZSBuZXh0LWxpbmUgYWxsIFwiSSBkbyBub3QgY2FyZSBhYm91dCBtdXRhdGluZyBjb25zb2xlIHN0YXRlbWVudHNcIlxuXHRcdGNvbnNvbGUuZGVidWcoYEVtaXR0aW5nIG1ldHJpY3M6XFxuJHtKU09OLnN0cmluZ2lmeShwdXRNZXRyaWNEYXRhQ29tbWFuZC5pbnB1dCwgbnVsbCwgMil9YClcblxuXHRcdGF3YWl0IHRoaXMuY2xvdWRXYXRjaENsaWVudC5zZW5kKHB1dE1ldHJpY0RhdGFDb21tYW5kKVxuXG5cdFx0dGhpcy5tZXRyaWNEYXRhID0gW11cblx0fVxufSIsImltcG9ydCB7IHJlc29sdmVBd3NTZGtTaWdWNENvbmZpZywgfSBmcm9tIFwiQGF3cy1zZGsvY29yZVwiO1xuaW1wb3J0IHsgZ2V0U21pdGh5Q29udGV4dCwgbm9ybWFsaXplUHJvdmlkZXIgfSBmcm9tIFwiQHNtaXRoeS91dGlsLW1pZGRsZXdhcmVcIjtcbmV4cG9ydCBjb25zdCBkZWZhdWx0U0VTSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIgPSBhc3luYyAoY29uZmlnLCBjb250ZXh0LCBpbnB1dCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIG9wZXJhdGlvbjogZ2V0U21pdGh5Q29udGV4dChjb250ZXh0KS5vcGVyYXRpb24sXG4gICAgICAgIHJlZ2lvbjogKGF3YWl0IG5vcm1hbGl6ZVByb3ZpZGVyKGNvbmZpZy5yZWdpb24pKCkpIHx8XG4gICAgICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImV4cGVjdGVkIGByZWdpb25gIHRvIGJlIGNvbmZpZ3VyZWQgZm9yIGBhd3MuYXV0aCNzaWd2NGBcIik7XG4gICAgICAgICAgICB9KSgpLFxuICAgIH07XG59O1xuZnVuY3Rpb24gY3JlYXRlQXdzQXV0aFNpZ3Y0SHR0cEF1dGhPcHRpb24oYXV0aFBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzY2hlbWVJZDogXCJhd3MuYXV0aCNzaWd2NFwiLFxuICAgICAgICBzaWduaW5nUHJvcGVydGllczoge1xuICAgICAgICAgICAgbmFtZTogXCJzZXNcIixcbiAgICAgICAgICAgIHJlZ2lvbjogYXV0aFBhcmFtZXRlcnMucmVnaW9uLFxuICAgICAgICB9LFxuICAgICAgICBwcm9wZXJ0aWVzRXh0cmFjdG9yOiAoY29uZmlnLCBjb250ZXh0KSA9PiAoe1xuICAgICAgICAgICAgc2lnbmluZ1Byb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgIH07XG59XG5leHBvcnQgY29uc3QgZGVmYXVsdFNFU0h0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPSAoYXV0aFBhcmFtZXRlcnMpID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0gW107XG4gICAgc3dpdGNoIChhdXRoUGFyYW1ldGVycy5vcGVyYXRpb24pIHtcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGNyZWF0ZUF3c0F1dGhTaWd2NEh0dHBBdXRoT3B0aW9uKGF1dGhQYXJhbWV0ZXJzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICBjb25zdCBjb25maWdfMCA9IHJlc29sdmVBd3NTZGtTaWdWNENvbmZpZyhjb25maWcpO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGNvbmZpZ18wLCB7XG4gICAgICAgIGF1dGhTY2hlbWVQcmVmZXJlbmNlOiBub3JtYWxpemVQcm92aWRlcihjb25maWcuYXV0aFNjaGVtZVByZWZlcmVuY2UgPz8gW10pLFxuICAgIH0pO1xufTtcbiIsImV4cG9ydCBjb25zdCByZXNvbHZlQ2xpZW50RW5kcG9pbnRQYXJhbWV0ZXJzID0gKG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvcHRpb25zLCB7XG4gICAgICAgIHVzZUR1YWxzdGFja0VuZHBvaW50OiBvcHRpb25zLnVzZUR1YWxzdGFja0VuZHBvaW50ID8/IGZhbHNlLFxuICAgICAgICB1c2VGaXBzRW5kcG9pbnQ6IG9wdGlvbnMudXNlRmlwc0VuZHBvaW50ID8/IGZhbHNlLFxuICAgICAgICBkZWZhdWx0U2lnbmluZ05hbWU6IFwic2VzXCIsXG4gICAgfSk7XG59O1xuZXhwb3J0IGNvbnN0IGNvbW1vblBhcmFtcyA9IHtcbiAgICBVc2VGSVBTOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInVzZUZpcHNFbmRwb2ludFwiIH0sXG4gICAgRW5kcG9pbnQ6IHsgdHlwZTogXCJidWlsdEluUGFyYW1zXCIsIG5hbWU6IFwiZW5kcG9pbnRcIiB9LFxuICAgIFJlZ2lvbjogeyB0eXBlOiBcImJ1aWx0SW5QYXJhbXNcIiwgbmFtZTogXCJyZWdpb25cIiB9LFxuICAgIFVzZUR1YWxTdGFjazogeyB0eXBlOiBcImJ1aWx0SW5QYXJhbXNcIiwgbmFtZTogXCJ1c2VEdWFsc3RhY2tFbmRwb2ludFwiIH0sXG59O1xuIiwiY29uc3QgcyA9IFwicmVxdWlyZWRcIiwgdCA9IFwiZm5cIiwgdSA9IFwiYXJndlwiLCB2ID0gXCJyZWZcIjtcbmNvbnN0IGEgPSB0cnVlLCBiID0gXCJpc1NldFwiLCBjID0gXCJib29sZWFuRXF1YWxzXCIsIGQgPSBcImVycm9yXCIsIGUgPSBcImVuZHBvaW50XCIsIGYgPSBcInRyZWVcIiwgZyA9IFwiUGFydGl0aW9uUmVzdWx0XCIsIGggPSB7IFtzXTogZmFsc2UsIFwidHlwZVwiOiBcIlN0cmluZ1wiIH0sIGkgPSB7IFtzXTogdHJ1ZSwgXCJkZWZhdWx0XCI6IGZhbHNlLCBcInR5cGVcIjogXCJCb29sZWFuXCIgfSwgaiA9IHsgW3ZdOiBcIkVuZHBvaW50XCIgfSwgayA9IHsgW3RdOiBjLCBbdV06IFt7IFt2XTogXCJVc2VGSVBTXCIgfSwgdHJ1ZV0gfSwgbCA9IHsgW3RdOiBjLCBbdV06IFt7IFt2XTogXCJVc2VEdWFsU3RhY2tcIiB9LCB0cnVlXSB9LCBtID0ge30sIG4gPSB7IFt0XTogXCJnZXRBdHRyXCIsIFt1XTogW3sgW3ZdOiBnIH0sIFwic3VwcG9ydHNGSVBTXCJdIH0sIG8gPSB7IFt0XTogYywgW3VdOiBbdHJ1ZSwgeyBbdF06IFwiZ2V0QXR0clwiLCBbdV06IFt7IFt2XTogZyB9LCBcInN1cHBvcnRzRHVhbFN0YWNrXCJdIH1dIH0sIHAgPSBba10sIHEgPSBbbF0sIHIgPSBbeyBbdl06IFwiUmVnaW9uXCIgfV07XG5jb25zdCBfZGF0YSA9IHsgdmVyc2lvbjogXCIxLjBcIiwgcGFyYW1ldGVyczogeyBSZWdpb246IGgsIFVzZUR1YWxTdGFjazogaSwgVXNlRklQUzogaSwgRW5kcG9pbnQ6IGggfSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt0XTogYiwgW3VdOiBbal0gfV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBwLCBlcnJvcjogXCJJbnZhbGlkIENvbmZpZ3VyYXRpb246IEZJUFMgYW5kIGN1c3RvbSBlbmRwb2ludCBhcmUgbm90IHN1cHBvcnRlZFwiLCB0eXBlOiBkIH0sIHsgY29uZGl0aW9uczogcSwgZXJyb3I6IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBEdWFsc3RhY2sgYW5kIGN1c3RvbSBlbmRwb2ludCBhcmUgbm90IHN1cHBvcnRlZFwiLCB0eXBlOiBkIH0sIHsgZW5kcG9pbnQ6IHsgdXJsOiBqLCBwcm9wZXJ0aWVzOiBtLCBoZWFkZXJzOiBtIH0sIHR5cGU6IGUgfV0sIHR5cGU6IGYgfSwgeyBjb25kaXRpb25zOiBbeyBbdF06IGIsIFt1XTogciB9XSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IFt7IFt0XTogXCJhd3MucGFydGl0aW9uXCIsIFt1XTogciwgYXNzaWduOiBnIH1dLCBydWxlczogW3sgY29uZGl0aW9uczogW2ssIGxdLCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW3RdOiBjLCBbdV06IFthLCBuXSB9LCBvXSwgcnVsZXM6IFt7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL2VtYWlsLWZpcHMue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkdWFsU3RhY2tEbnNTdWZmaXh9XCIsIHByb3BlcnRpZXM6IG0sIGhlYWRlcnM6IG0gfSwgdHlwZTogZSB9XSwgdHlwZTogZiB9LCB7IGVycm9yOiBcIkZJUFMgYW5kIER1YWxTdGFjayBhcmUgZW5hYmxlZCwgYnV0IHRoaXMgcGFydGl0aW9uIGRvZXMgbm90IHN1cHBvcnQgb25lIG9yIGJvdGhcIiwgdHlwZTogZCB9XSwgdHlwZTogZiB9LCB7IGNvbmRpdGlvbnM6IHAsIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbdF06IGMsIFt1XTogW24sIGFdIH1dLCBydWxlczogW3sgZW5kcG9pbnQ6IHsgdXJsOiBcImh0dHBzOi8vZW1haWwtZmlwcy57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogbSwgaGVhZGVyczogbSB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH0sIHsgZXJyb3I6IFwiRklQUyBpcyBlbmFibGVkIGJ1dCB0aGlzIHBhcnRpdGlvbiBkb2VzIG5vdCBzdXBwb3J0IEZJUFNcIiwgdHlwZTogZCB9XSwgdHlwZTogZiB9LCB7IGNvbmRpdGlvbnM6IHEsIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbb10sIHJ1bGVzOiBbeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9lbWFpbC57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2R1YWxTdGFja0Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogbSwgaGVhZGVyczogbSB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH0sIHsgZXJyb3I6IFwiRHVhbFN0YWNrIGlzIGVuYWJsZWQgYnV0IHRoaXMgcGFydGl0aW9uIGRvZXMgbm90IHN1cHBvcnQgRHVhbFN0YWNrXCIsIHR5cGU6IGQgfV0sIHR5cGU6IGYgfSwgeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9lbWFpbC57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogbSwgaGVhZGVyczogbSB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH1dLCB0eXBlOiBmIH0sIHsgZXJyb3I6IFwiSW52YWxpZCBDb25maWd1cmF0aW9uOiBNaXNzaW5nIFJlZ2lvblwiLCB0eXBlOiBkIH1dIH07XG5leHBvcnQgY29uc3QgcnVsZVNldCA9IF9kYXRhO1xuIiwiaW1wb3J0IHsgYXdzRW5kcG9pbnRGdW5jdGlvbnMgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1lbmRwb2ludHNcIjtcbmltcG9ydCB7IGN1c3RvbUVuZHBvaW50RnVuY3Rpb25zLCBFbmRwb2ludENhY2hlLCByZXNvbHZlRW5kcG9pbnQgfSBmcm9tIFwiQHNtaXRoeS91dGlsLWVuZHBvaW50c1wiO1xuaW1wb3J0IHsgcnVsZVNldCB9IGZyb20gXCIuL3J1bGVzZXRcIjtcbmNvbnN0IGNhY2hlID0gbmV3IEVuZHBvaW50Q2FjaGUoe1xuICAgIHNpemU6IDUwLFxuICAgIHBhcmFtczogW1wiRW5kcG9pbnRcIiwgXCJSZWdpb25cIiwgXCJVc2VEdWFsU3RhY2tcIiwgXCJVc2VGSVBTXCJdLFxufSk7XG5leHBvcnQgY29uc3QgZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIgPSAoZW5kcG9pbnRQYXJhbXMsIGNvbnRleHQgPSB7fSkgPT4ge1xuICAgIHJldHVybiBjYWNoZS5nZXQoZW5kcG9pbnRQYXJhbXMsICgpID0+IHJlc29sdmVFbmRwb2ludChydWxlU2V0LCB7XG4gICAgICAgIGVuZHBvaW50UGFyYW1zOiBlbmRwb2ludFBhcmFtcyxcbiAgICAgICAgbG9nZ2VyOiBjb250ZXh0LmxvZ2dlcixcbiAgICB9KSk7XG59O1xuY3VzdG9tRW5kcG9pbnRGdW5jdGlvbnMuYXdzID0gYXdzRW5kcG9pbnRGdW5jdGlvbnM7XG4iLCJpbXBvcnQgeyBnZXRIb3N0SGVhZGVyUGx1Z2luLCByZXNvbHZlSG9zdEhlYWRlckNvbmZpZywgfSBmcm9tIFwiQGF3cy1zZGsvbWlkZGxld2FyZS1ob3N0LWhlYWRlclwiO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyUGx1Z2luIH0gZnJvbSBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtbG9nZ2VyXCI7XG5pbXBvcnQgeyBnZXRSZWN1cnNpb25EZXRlY3Rpb25QbHVnaW4gfSBmcm9tIFwiQGF3cy1zZGsvbWlkZGxld2FyZS1yZWN1cnNpb24tZGV0ZWN0aW9uXCI7XG5pbXBvcnQgeyBnZXRVc2VyQWdlbnRQbHVnaW4sIHJlc29sdmVVc2VyQWdlbnRDb25maWcsIH0gZnJvbSBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtdXNlci1hZ2VudFwiO1xuaW1wb3J0IHsgcmVzb2x2ZVJlZ2lvbkNvbmZpZyB9IGZyb20gXCJAc21pdGh5L2NvbmZpZy1yZXNvbHZlclwiO1xuaW1wb3J0IHsgRGVmYXVsdElkZW50aXR5UHJvdmlkZXJDb25maWcsIGdldEh0dHBBdXRoU2NoZW1lRW5kcG9pbnRSdWxlU2V0UGx1Z2luLCBnZXRIdHRwU2lnbmluZ1BsdWdpbiwgfSBmcm9tIFwiQHNtaXRoeS9jb3JlXCI7XG5pbXBvcnQgeyBnZXRDb250ZW50TGVuZ3RoUGx1Z2luIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1jb250ZW50LWxlbmd0aFwiO1xuaW1wb3J0IHsgcmVzb2x2ZUVuZHBvaW50Q29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1lbmRwb2ludFwiO1xuaW1wb3J0IHsgZ2V0UmV0cnlQbHVnaW4sIHJlc29sdmVSZXRyeUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtcmV0cnlcIjtcbmltcG9ydCB7IENsaWVudCBhcyBfX0NsaWVudCwgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBkZWZhdWx0U0VTSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIsIHJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZywgfSBmcm9tIFwiLi9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXJcIjtcbmltcG9ydCB7IHJlc29sdmVDbGllbnRFbmRwb2ludFBhcmFtZXRlcnMsIH0gZnJvbSBcIi4vZW5kcG9pbnQvRW5kcG9pbnRQYXJhbWV0ZXJzXCI7XG5pbXBvcnQgeyBnZXRSdW50aW1lQ29uZmlnIGFzIF9fZ2V0UnVudGltZUNvbmZpZyB9IGZyb20gXCIuL3J1bnRpbWVDb25maWdcIjtcbmltcG9ydCB7IHJlc29sdmVSdW50aW1lRXh0ZW5zaW9ucyB9IGZyb20gXCIuL3J1bnRpbWVFeHRlbnNpb25zXCI7XG5leHBvcnQgeyBfX0NsaWVudCB9O1xuZXhwb3J0IGNsYXNzIFNFU0NsaWVudCBleHRlbmRzIF9fQ2xpZW50IHtcbiAgICBjb25maWc7XG4gICAgY29uc3RydWN0b3IoLi4uW2NvbmZpZ3VyYXRpb25dKSB7XG4gICAgICAgIGNvbnN0IF9jb25maWdfMCA9IF9fZ2V0UnVudGltZUNvbmZpZyhjb25maWd1cmF0aW9uIHx8IHt9KTtcbiAgICAgICAgc3VwZXIoX2NvbmZpZ18wKTtcbiAgICAgICAgdGhpcy5pbml0Q29uZmlnID0gX2NvbmZpZ18wO1xuICAgICAgICBjb25zdCBfY29uZmlnXzEgPSByZXNvbHZlQ2xpZW50RW5kcG9pbnRQYXJhbWV0ZXJzKF9jb25maWdfMCk7XG4gICAgICAgIGNvbnN0IF9jb25maWdfMiA9IHJlc29sdmVVc2VyQWdlbnRDb25maWcoX2NvbmZpZ18xKTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ18zID0gcmVzb2x2ZVJldHJ5Q29uZmlnKF9jb25maWdfMik7XG4gICAgICAgIGNvbnN0IF9jb25maWdfNCA9IHJlc29sdmVSZWdpb25Db25maWcoX2NvbmZpZ18zKTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ181ID0gcmVzb2x2ZUhvc3RIZWFkZXJDb25maWcoX2NvbmZpZ180KTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ182ID0gcmVzb2x2ZUVuZHBvaW50Q29uZmlnKF9jb25maWdfNSk7XG4gICAgICAgIGNvbnN0IF9jb25maWdfNyA9IHJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZyhfY29uZmlnXzYpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzggPSByZXNvbHZlUnVudGltZUV4dGVuc2lvbnMoX2NvbmZpZ183LCBjb25maWd1cmF0aW9uPy5leHRlbnNpb25zIHx8IFtdKTtcbiAgICAgICAgdGhpcy5jb25maWcgPSBfY29uZmlnXzg7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRVc2VyQWdlbnRQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldFJldHJ5UGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRDb250ZW50TGVuZ3RoUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRIb3N0SGVhZGVyUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRMb2dnZXJQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldFJlY3Vyc2lvbkRldGVjdGlvblBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4odGhpcy5jb25maWcsIHtcbiAgICAgICAgICAgIGh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyOiBkZWZhdWx0U0VTSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIsXG4gICAgICAgICAgICBpZGVudGl0eVByb3ZpZGVyQ29uZmlnUHJvdmlkZXI6IGFzeW5jIChjb25maWcpID0+IG5ldyBEZWZhdWx0SWRlbnRpdHlQcm92aWRlckNvbmZpZyh7XG4gICAgICAgICAgICAgICAgXCJhd3MuYXV0aCNzaWd2NFwiOiBjb25maWcuY3JlZGVudGlhbHMsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0SHR0cFNpZ25pbmdQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCBwYWNrYWdlSW5mbyBmcm9tIFwiLi4vcGFja2FnZS5qc29uXCI7XG5pbXBvcnQgeyBOT0RFX0FVVEhfU0NIRU1FX1BSRUZFUkVOQ0VfT1BUSU9OUywgZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbiBhcyBhd3NDaGVja1ZlcnNpb24gfSBmcm9tIFwiQGF3cy1zZGsvY29yZVwiO1xuaW1wb3J0IHsgZGVmYXVsdFByb3ZpZGVyIGFzIGNyZWRlbnRpYWxEZWZhdWx0UHJvdmlkZXIgfSBmcm9tIFwiQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlci1ub2RlXCI7XG5pbXBvcnQgeyBOT0RFX0FQUF9JRF9DT05GSUdfT1BUSU9OUywgY3JlYXRlRGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyIH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtdXNlci1hZ2VudC1ub2RlXCI7XG5pbXBvcnQgeyBOT0RFX1JFR0lPTl9DT05GSUdfRklMRV9PUFRJT05TLCBOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUywgTk9ERV9VU0VfRFVBTFNUQUNLX0VORFBPSU5UX0NPTkZJR19PUFRJT05TLCBOT0RFX1VTRV9GSVBTX0VORFBPSU5UX0NPTkZJR19PUFRJT05TLCB9IGZyb20gXCJAc21pdGh5L2NvbmZpZy1yZXNvbHZlclwiO1xuaW1wb3J0IHsgSGFzaCB9IGZyb20gXCJAc21pdGh5L2hhc2gtbm9kZVwiO1xuaW1wb3J0IHsgTk9ERV9NQVhfQVRURU1QVF9DT05GSUdfT1BUSU9OUywgTk9ERV9SRVRSWV9NT0RFX0NPTkZJR19PUFRJT05TIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1yZXRyeVwiO1xuaW1wb3J0IHsgbG9hZENvbmZpZyBhcyBsb2FkTm9kZUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBOb2RlSHR0cEhhbmRsZXIgYXMgUmVxdWVzdEhhbmRsZXIsIHN0cmVhbUNvbGxlY3RvciB9IGZyb20gXCJAc21pdGh5L25vZGUtaHR0cC1oYW5kbGVyXCI7XG5pbXBvcnQgeyBjYWxjdWxhdGVCb2R5TGVuZ3RoIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1ib2R5LWxlbmd0aC1ub2RlXCI7XG5pbXBvcnQgeyBERUZBVUxUX1JFVFJZX01PREUgfSBmcm9tIFwiQHNtaXRoeS91dGlsLXJldHJ5XCI7XG5pbXBvcnQgeyBnZXRSdW50aW1lQ29uZmlnIGFzIGdldFNoYXJlZFJ1bnRpbWVDb25maWcgfSBmcm9tIFwiLi9ydW50aW1lQ29uZmlnLnNoYXJlZFwiO1xuaW1wb3J0IHsgbG9hZENvbmZpZ3NGb3JEZWZhdWx0TW9kZSB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IHJlc29sdmVEZWZhdWx0c01vZGVDb25maWcgfSBmcm9tIFwiQHNtaXRoeS91dGlsLWRlZmF1bHRzLW1vZGUtbm9kZVwiO1xuaW1wb3J0IHsgZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbiB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmV4cG9ydCBjb25zdCBnZXRSdW50aW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIGVtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24ocHJvY2Vzcy52ZXJzaW9uKTtcbiAgICBjb25zdCBkZWZhdWx0c01vZGUgPSByZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnKGNvbmZpZyk7XG4gICAgY29uc3QgZGVmYXVsdENvbmZpZ1Byb3ZpZGVyID0gKCkgPT4gZGVmYXVsdHNNb2RlKCkudGhlbihsb2FkQ29uZmlnc0ZvckRlZmF1bHRNb2RlKTtcbiAgICBjb25zdCBjbGllbnRTaGFyZWRWYWx1ZXMgPSBnZXRTaGFyZWRSdW50aW1lQ29uZmlnKGNvbmZpZyk7XG4gICAgYXdzQ2hlY2tWZXJzaW9uKHByb2Nlc3MudmVyc2lvbik7XG4gICAgY29uc3QgbG9hZGVyQ29uZmlnID0ge1xuICAgICAgICBwcm9maWxlOiBjb25maWc/LnByb2ZpbGUsXG4gICAgICAgIGxvZ2dlcjogY2xpZW50U2hhcmVkVmFsdWVzLmxvZ2dlcixcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmNsaWVudFNoYXJlZFZhbHVlcyxcbiAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICBydW50aW1lOiBcIm5vZGVcIixcbiAgICAgICAgZGVmYXVsdHNNb2RlLFxuICAgICAgICBhdXRoU2NoZW1lUHJlZmVyZW5jZTogY29uZmlnPy5hdXRoU2NoZW1lUHJlZmVyZW5jZSA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX0FVVEhfU0NIRU1FX1BSRUZFUkVOQ0VfT1BUSU9OUywgbG9hZGVyQ29uZmlnKSxcbiAgICAgICAgYm9keUxlbmd0aENoZWNrZXI6IGNvbmZpZz8uYm9keUxlbmd0aENoZWNrZXIgPz8gY2FsY3VsYXRlQm9keUxlbmd0aCxcbiAgICAgICAgY3JlZGVudGlhbERlZmF1bHRQcm92aWRlcjogY29uZmlnPy5jcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyID8/IGNyZWRlbnRpYWxEZWZhdWx0UHJvdmlkZXIsXG4gICAgICAgIGRlZmF1bHRVc2VyQWdlbnRQcm92aWRlcjogY29uZmlnPy5kZWZhdWx0VXNlckFnZW50UHJvdmlkZXIgPz9cbiAgICAgICAgICAgIGNyZWF0ZURlZmF1bHRVc2VyQWdlbnRQcm92aWRlcih7IHNlcnZpY2VJZDogY2xpZW50U2hhcmVkVmFsdWVzLnNlcnZpY2VJZCwgY2xpZW50VmVyc2lvbjogcGFja2FnZUluZm8udmVyc2lvbiB9KSxcbiAgICAgICAgbWF4QXR0ZW1wdHM6IGNvbmZpZz8ubWF4QXR0ZW1wdHMgPz8gbG9hZE5vZGVDb25maWcoTk9ERV9NQVhfQVRURU1QVF9DT05GSUdfT1BUSU9OUywgY29uZmlnKSxcbiAgICAgICAgcmVnaW9uOiBjb25maWc/LnJlZ2lvbiA/P1xuICAgICAgICAgICAgbG9hZE5vZGVDb25maWcoTk9ERV9SRUdJT05fQ09ORklHX09QVElPTlMsIHsgLi4uTk9ERV9SRUdJT05fQ09ORklHX0ZJTEVfT1BUSU9OUywgLi4ubG9hZGVyQ29uZmlnIH0pLFxuICAgICAgICByZXF1ZXN0SGFuZGxlcjogUmVxdWVzdEhhbmRsZXIuY3JlYXRlKGNvbmZpZz8ucmVxdWVzdEhhbmRsZXIgPz8gZGVmYXVsdENvbmZpZ1Byb3ZpZGVyKSxcbiAgICAgICAgcmV0cnlNb2RlOiBjb25maWc/LnJldHJ5TW9kZSA/P1xuICAgICAgICAgICAgbG9hZE5vZGVDb25maWcoe1xuICAgICAgICAgICAgICAgIC4uLk5PREVfUkVUUllfTU9ERV9DT05GSUdfT1BUSU9OUyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBhc3luYyAoKSA9PiAoYXdhaXQgZGVmYXVsdENvbmZpZ1Byb3ZpZGVyKCkpLnJldHJ5TW9kZSB8fCBERUZBVUxUX1JFVFJZX01PREUsXG4gICAgICAgICAgICB9LCBjb25maWcpLFxuICAgICAgICBzaGEyNTY6IGNvbmZpZz8uc2hhMjU2ID8/IEhhc2guYmluZChudWxsLCBcInNoYTI1NlwiKSxcbiAgICAgICAgc3RyZWFtQ29sbGVjdG9yOiBjb25maWc/LnN0cmVhbUNvbGxlY3RvciA/PyBzdHJlYW1Db2xsZWN0b3IsXG4gICAgICAgIHVzZUR1YWxzdGFja0VuZHBvaW50OiBjb25maWc/LnVzZUR1YWxzdGFja0VuZHBvaW50ID8/IGxvYWROb2RlQ29uZmlnKE5PREVfVVNFX0RVQUxTVEFDS19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUywgbG9hZGVyQ29uZmlnKSxcbiAgICAgICAgdXNlRmlwc0VuZHBvaW50OiBjb25maWc/LnVzZUZpcHNFbmRwb2ludCA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX1VTRV9GSVBTX0VORFBPSU5UX0NPTkZJR19PUFRJT05TLCBsb2FkZXJDb25maWcpLFxuICAgICAgICB1c2VyQWdlbnRBcHBJZDogY29uZmlnPy51c2VyQWdlbnRBcHBJZCA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX0FQUF9JRF9DT05GSUdfT1BUSU9OUywgbG9hZGVyQ29uZmlnKSxcbiAgICB9O1xufTtcbiIsImltcG9ydCB7IEF3c1Nka1NpZ1Y0U2lnbmVyIH0gZnJvbSBcIkBhd3Mtc2RrL2NvcmVcIjtcbmltcG9ydCB7IE5vT3BMb2dnZXIgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBwYXJzZVVybCB9IGZyb20gXCJAc21pdGh5L3VybC1wYXJzZXJcIjtcbmltcG9ydCB7IGZyb21CYXNlNjQsIHRvQmFzZTY0IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1iYXNlNjRcIjtcbmltcG9ydCB7IGZyb21VdGY4LCB0b1V0ZjggfSBmcm9tIFwiQHNtaXRoeS91dGlsLXV0ZjhcIjtcbmltcG9ydCB7IGRlZmF1bHRTRVNIdHRwQXV0aFNjaGVtZVByb3ZpZGVyIH0gZnJvbSBcIi4vYXV0aC9odHRwQXV0aFNjaGVtZVByb3ZpZGVyXCI7XG5pbXBvcnQgeyBkZWZhdWx0RW5kcG9pbnRSZXNvbHZlciB9IGZyb20gXCIuL2VuZHBvaW50L2VuZHBvaW50UmVzb2x2ZXJcIjtcbmV4cG9ydCBjb25zdCBnZXRSdW50aW1lQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFwaVZlcnNpb246IFwiMjAxMC0xMi0wMVwiLFxuICAgICAgICBiYXNlNjREZWNvZGVyOiBjb25maWc/LmJhc2U2NERlY29kZXIgPz8gZnJvbUJhc2U2NCxcbiAgICAgICAgYmFzZTY0RW5jb2RlcjogY29uZmlnPy5iYXNlNjRFbmNvZGVyID8/IHRvQmFzZTY0LFxuICAgICAgICBkaXNhYmxlSG9zdFByZWZpeDogY29uZmlnPy5kaXNhYmxlSG9zdFByZWZpeCA/PyBmYWxzZSxcbiAgICAgICAgZW5kcG9pbnRQcm92aWRlcjogY29uZmlnPy5lbmRwb2ludFByb3ZpZGVyID8/IGRlZmF1bHRFbmRwb2ludFJlc29sdmVyLFxuICAgICAgICBleHRlbnNpb25zOiBjb25maWc/LmV4dGVuc2lvbnMgPz8gW10sXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lUHJvdmlkZXI6IGNvbmZpZz8uaHR0cEF1dGhTY2hlbWVQcm92aWRlciA/PyBkZWZhdWx0U0VTSHR0cEF1dGhTY2hlbWVQcm92aWRlcixcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVzOiBjb25maWc/Lmh0dHBBdXRoU2NoZW1lcyA/PyBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2NoZW1lSWQ6IFwiYXdzLmF1dGgjc2lndjRcIixcbiAgICAgICAgICAgICAgICBpZGVudGl0eVByb3ZpZGVyOiAoaXBjKSA9PiBpcGMuZ2V0SWRlbnRpdHlQcm92aWRlcihcImF3cy5hdXRoI3NpZ3Y0XCIpLFxuICAgICAgICAgICAgICAgIHNpZ25lcjogbmV3IEF3c1Nka1NpZ1Y0U2lnbmVyKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBsb2dnZXI6IGNvbmZpZz8ubG9nZ2VyID8/IG5ldyBOb09wTG9nZ2VyKCksXG4gICAgICAgIHNlcnZpY2VJZDogY29uZmlnPy5zZXJ2aWNlSWQgPz8gXCJTRVNcIixcbiAgICAgICAgdXJsUGFyc2VyOiBjb25maWc/LnVybFBhcnNlciA/PyBwYXJzZVVybCxcbiAgICAgICAgdXRmOERlY29kZXI6IGNvbmZpZz8udXRmOERlY29kZXIgPz8gZnJvbVV0ZjgsXG4gICAgICAgIHV0ZjhFbmNvZGVyOiBjb25maWc/LnV0ZjhFbmNvZGVyID8/IHRvVXRmOCxcbiAgICB9O1xufTtcbiIsImltcG9ydCB7IGdldEF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sIHJlc29sdmVBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uLCB9IGZyb20gXCJAYXdzLXNkay9yZWdpb24tY29uZmlnLXJlc29sdmVyXCI7XG5pbXBvcnQgeyBnZXRIdHRwSGFuZGxlckV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sIHJlc29sdmVIdHRwSGFuZGxlclJ1bnRpbWVDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9wcm90b2NvbC1odHRwXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0RXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgcmVzb2x2ZURlZmF1bHRSdW50aW1lQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgZ2V0SHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uLCByZXNvbHZlSHR0cEF1dGhSdW50aW1lQ29uZmlnIH0gZnJvbSBcIi4vYXV0aC9odHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb25cIjtcbmV4cG9ydCBjb25zdCByZXNvbHZlUnVudGltZUV4dGVuc2lvbnMgPSAocnVudGltZUNvbmZpZywgZXh0ZW5zaW9ucykgPT4ge1xuICAgIGNvbnN0IGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24gPSBPYmplY3QuYXNzaWduKGdldEF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZyksIGdldERlZmF1bHRFeHRlbnNpb25Db25maWd1cmF0aW9uKHJ1bnRpbWVDb25maWcpLCBnZXRIdHRwSGFuZGxlckV4dGVuc2lvbkNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZyksIGdldEh0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvbihydW50aW1lQ29uZmlnKSk7XG4gICAgZXh0ZW5zaW9ucy5mb3JFYWNoKChleHRlbnNpb24pID0+IGV4dGVuc2lvbi5jb25maWd1cmUoZXh0ZW5zaW9uQ29uZmlndXJhdGlvbikpO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHJ1bnRpbWVDb25maWcsIHJlc29sdmVBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pLCByZXNvbHZlRGVmYXVsdFJ1bnRpbWVDb25maWcoZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiksIHJlc29sdmVIdHRwSGFuZGxlclJ1bnRpbWVDb25maWcoZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiksIHJlc29sdmVIdHRwQXV0aFJ1bnRpbWVDb25maWcoZXh0ZW5zaW9uQ29uZmlndXJhdGlvbikpO1xufTtcbiIsImV4cG9ydCBjb25zdCBnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24gPSAocnVudGltZUNvbmZpZykgPT4ge1xuICAgIGNvbnN0IF9odHRwQXV0aFNjaGVtZXMgPSBydW50aW1lQ29uZmlnLmh0dHBBdXRoU2NoZW1lcztcbiAgICBsZXQgX2h0dHBBdXRoU2NoZW1lUHJvdmlkZXIgPSBydW50aW1lQ29uZmlnLmh0dHBBdXRoU2NoZW1lUHJvdmlkZXI7XG4gICAgbGV0IF9jcmVkZW50aWFscyA9IHJ1bnRpbWVDb25maWcuY3JlZGVudGlhbHM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2V0SHR0cEF1dGhTY2hlbWUoaHR0cEF1dGhTY2hlbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gX2h0dHBBdXRoU2NoZW1lcy5maW5kSW5kZXgoKHNjaGVtZSkgPT4gc2NoZW1lLnNjaGVtZUlkID09PSBodHRwQXV0aFNjaGVtZS5zY2hlbWVJZCk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgX2h0dHBBdXRoU2NoZW1lcy5wdXNoKGh0dHBBdXRoU2NoZW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF9odHRwQXV0aFNjaGVtZXMuc3BsaWNlKGluZGV4LCAxLCBodHRwQXV0aFNjaGVtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lcygpIHtcbiAgICAgICAgICAgIHJldHVybiBfaHR0cEF1dGhTY2hlbWVzO1xuICAgICAgICB9LFxuICAgICAgICBzZXRIdHRwQXV0aFNjaGVtZVByb3ZpZGVyKGh0dHBBdXRoU2NoZW1lUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIF9odHRwQXV0aFNjaGVtZVByb3ZpZGVyID0gaHR0cEF1dGhTY2hlbWVQcm92aWRlcjtcbiAgICAgICAgfSxcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVQcm92aWRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBfaHR0cEF1dGhTY2hlbWVQcm92aWRlcjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0Q3JlZGVudGlhbHMoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIF9jcmVkZW50aWFscyA9IGNyZWRlbnRpYWxzO1xuICAgICAgICB9LFxuICAgICAgICBjcmVkZW50aWFscygpIHtcbiAgICAgICAgICAgIHJldHVybiBfY3JlZGVudGlhbHM7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5leHBvcnQgY29uc3QgcmVzb2x2ZUh0dHBBdXRoUnVudGltZUNvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBodHRwQXV0aFNjaGVtZXM6IGNvbmZpZy5odHRwQXV0aFNjaGVtZXMoKSxcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVQcm92aWRlcjogY29uZmlnLmh0dHBBdXRoU2NoZW1lUHJvdmlkZXIoKSxcbiAgICAgICAgY3JlZGVudGlhbHM6IGNvbmZpZy5jcmVkZW50aWFscygpLFxuICAgIH07XG59O1xuIiwiaW1wb3J0IHsgU2VydmljZUV4Y2VwdGlvbiBhcyBfX1NlcnZpY2VFeGNlcHRpb24sIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuZXhwb3J0IHsgX19TZXJ2aWNlRXhjZXB0aW9uIH07XG5leHBvcnQgY2xhc3MgU0VTU2VydmljZUV4Y2VwdGlvbiBleHRlbmRzIF9fU2VydmljZUV4Y2VwdGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFNFU1NlcnZpY2VFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTRVNTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fQmFzZUV4Y2VwdGlvbiB9IGZyb20gXCIuL1NFU1NlcnZpY2VFeGNlcHRpb25cIjtcbmV4cG9ydCBjbGFzcyBBY2NvdW50U2VuZGluZ1BhdXNlZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiQWNjb3VudFNlbmRpbmdQYXVzZWRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJBY2NvdW50U2VuZGluZ1BhdXNlZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBBY2NvdW50U2VuZGluZ1BhdXNlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBbHJlYWR5RXhpc3RzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBOYW1lO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEFscmVhZHlFeGlzdHNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5OYW1lID0gb3B0cy5OYW1lO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBCZWhhdmlvck9uTVhGYWlsdXJlID0ge1xuICAgIFJlamVjdE1lc3NhZ2U6IFwiUmVqZWN0TWVzc2FnZVwiLFxuICAgIFVzZURlZmF1bHRWYWx1ZTogXCJVc2VEZWZhdWx0VmFsdWVcIixcbn07XG5leHBvcnQgY29uc3QgQm91bmNlVHlwZSA9IHtcbiAgICBDb250ZW50UmVqZWN0ZWQ6IFwiQ29udGVudFJlamVjdGVkXCIsXG4gICAgRG9lc05vdEV4aXN0OiBcIkRvZXNOb3RFeGlzdFwiLFxuICAgIEV4Y2VlZGVkUXVvdGE6IFwiRXhjZWVkZWRRdW90YVwiLFxuICAgIE1lc3NhZ2VUb29MYXJnZTogXCJNZXNzYWdlVG9vTGFyZ2VcIixcbiAgICBUZW1wb3JhcnlGYWlsdXJlOiBcIlRlbXBvcmFyeUZhaWx1cmVcIixcbiAgICBVbmRlZmluZWQ6IFwiVW5kZWZpbmVkXCIsXG59O1xuZXhwb3J0IGNvbnN0IERzbkFjdGlvbiA9IHtcbiAgICBERUxBWUVEOiBcImRlbGF5ZWRcIixcbiAgICBERUxJVkVSRUQ6IFwiZGVsaXZlcmVkXCIsXG4gICAgRVhQQU5ERUQ6IFwiZXhwYW5kZWRcIixcbiAgICBGQUlMRUQ6IFwiZmFpbGVkXCIsXG4gICAgUkVMQVlFRDogXCJyZWxheWVkXCIsXG59O1xuZXhwb3J0IGNvbnN0IEJ1bGtFbWFpbFN0YXR1cyA9IHtcbiAgICBBY2NvdW50RGFpbHlRdW90YUV4Y2VlZGVkOiBcIkFjY291bnREYWlseVF1b3RhRXhjZWVkZWRcIixcbiAgICBBY2NvdW50U2VuZGluZ1BhdXNlZDogXCJBY2NvdW50U2VuZGluZ1BhdXNlZFwiLFxuICAgIEFjY291bnRTdXNwZW5kZWQ6IFwiQWNjb3VudFN1c3BlbmRlZFwiLFxuICAgIEFjY291bnRUaHJvdHRsZWQ6IFwiQWNjb3VudFRocm90dGxlZFwiLFxuICAgIENvbmZpZ3VyYXRpb25TZXREb2VzTm90RXhpc3Q6IFwiQ29uZmlndXJhdGlvblNldERvZXNOb3RFeGlzdFwiLFxuICAgIENvbmZpZ3VyYXRpb25TZXRTZW5kaW5nUGF1c2VkOiBcIkNvbmZpZ3VyYXRpb25TZXRTZW5kaW5nUGF1c2VkXCIsXG4gICAgRmFpbGVkOiBcIkZhaWxlZFwiLFxuICAgIEludmFsaWRQYXJhbWV0ZXJWYWx1ZTogXCJJbnZhbGlkUGFyYW1ldGVyVmFsdWVcIixcbiAgICBJbnZhbGlkU2VuZGluZ1Bvb2xOYW1lOiBcIkludmFsaWRTZW5kaW5nUG9vbE5hbWVcIixcbiAgICBNYWlsRnJvbURvbWFpbk5vdFZlcmlmaWVkOiBcIk1haWxGcm9tRG9tYWluTm90VmVyaWZpZWRcIixcbiAgICBNZXNzYWdlUmVqZWN0ZWQ6IFwiTWVzc2FnZVJlamVjdGVkXCIsXG4gICAgU3VjY2VzczogXCJTdWNjZXNzXCIsXG4gICAgVGVtcGxhdGVEb2VzTm90RXhpc3Q6IFwiVGVtcGxhdGVEb2VzTm90RXhpc3RcIixcbiAgICBUcmFuc2llbnRGYWlsdXJlOiBcIlRyYW5zaWVudEZhaWx1cmVcIixcbn07XG5leHBvcnQgY2xhc3MgQ2Fubm90RGVsZXRlRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJDYW5ub3REZWxldGVFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE5hbWU7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkNhbm5vdERlbGV0ZUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDYW5ub3REZWxldGVFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5OYW1lID0gb3B0cy5OYW1lO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiTGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJ1bGVTZXREb2VzTm90RXhpc3RFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIlJ1bGVTZXREb2VzTm90RXhpc3RFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE5hbWU7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlJ1bGVTZXREb2VzTm90RXhpc3RFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgUnVsZVNldERvZXNOb3RFeGlzdEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk5hbWUgPSBvcHRzLk5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IERpbWVuc2lvblZhbHVlU291cmNlID0ge1xuICAgIEVNQUlMX0hFQURFUjogXCJlbWFpbEhlYWRlclwiLFxuICAgIExJTktfVEFHOiBcImxpbmtUYWdcIixcbiAgICBNRVNTQUdFX1RBRzogXCJtZXNzYWdlVGFnXCIsXG59O1xuZXhwb3J0IGNsYXNzIENvbmZpZ3VyYXRpb25TZXRBbHJlYWR5RXhpc3RzRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJDb25maWd1cmF0aW9uU2V0QWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgQ29uZmlndXJhdGlvblNldE5hbWU7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkNvbmZpZ3VyYXRpb25TZXRBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENvbmZpZ3VyYXRpb25TZXRBbHJlYWR5RXhpc3RzRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuQ29uZmlndXJhdGlvblNldE5hbWUgPSBvcHRzLkNvbmZpZ3VyYXRpb25TZXROYW1lO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBDb25maWd1cmF0aW9uU2V0QXR0cmlidXRlID0ge1xuICAgIERFTElWRVJZX09QVElPTlM6IFwiZGVsaXZlcnlPcHRpb25zXCIsXG4gICAgRVZFTlRfREVTVElOQVRJT05TOiBcImV2ZW50RGVzdGluYXRpb25zXCIsXG4gICAgUkVQVVRBVElPTl9PUFRJT05TOiBcInJlcHV0YXRpb25PcHRpb25zXCIsXG4gICAgVFJBQ0tJTkdfT1BUSU9OUzogXCJ0cmFja2luZ09wdGlvbnNcIixcbn07XG5leHBvcnQgY2xhc3MgQ29uZmlndXJhdGlvblNldERvZXNOb3RFeGlzdEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiQ29uZmlndXJhdGlvblNldERvZXNOb3RFeGlzdEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgQ29uZmlndXJhdGlvblNldE5hbWU7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkNvbmZpZ3VyYXRpb25TZXREb2VzTm90RXhpc3RFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ29uZmlndXJhdGlvblNldERvZXNOb3RFeGlzdEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLkNvbmZpZ3VyYXRpb25TZXROYW1lID0gb3B0cy5Db25maWd1cmF0aW9uU2V0TmFtZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ29uZmlndXJhdGlvblNldFNlbmRpbmdQYXVzZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkNvbmZpZ3VyYXRpb25TZXRTZW5kaW5nUGF1c2VkRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBDb25maWd1cmF0aW9uU2V0TmFtZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ29uZmlndXJhdGlvblNldFNlbmRpbmdQYXVzZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ29uZmlndXJhdGlvblNldFNlbmRpbmdQYXVzZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5Db25maWd1cmF0aW9uU2V0TmFtZSA9IG9wdHMuQ29uZmlndXJhdGlvblNldE5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRDb25maWd1cmF0aW9uU2V0RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkQ29uZmlndXJhdGlvblNldEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRDb25maWd1cmF0aW9uU2V0RXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRDb25maWd1cmF0aW9uU2V0RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEV2ZW50VHlwZSA9IHtcbiAgICBCT1VOQ0U6IFwiYm91bmNlXCIsXG4gICAgQ0xJQ0s6IFwiY2xpY2tcIixcbiAgICBDT01QTEFJTlQ6IFwiY29tcGxhaW50XCIsXG4gICAgREVMSVZFUlk6IFwiZGVsaXZlcnlcIixcbiAgICBPUEVOOiBcIm9wZW5cIixcbiAgICBSRUpFQ1Q6IFwicmVqZWN0XCIsXG4gICAgUkVOREVSSU5HX0ZBSUxVUkU6IFwicmVuZGVyaW5nRmFpbHVyZVwiLFxuICAgIFNFTkQ6IFwic2VuZFwiLFxufTtcbmV4cG9ydCBjbGFzcyBFdmVudERlc3RpbmF0aW9uQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiRXZlbnREZXN0aW5hdGlvbkFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIENvbmZpZ3VyYXRpb25TZXROYW1lO1xuICAgIEV2ZW50RGVzdGluYXRpb25OYW1lO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJFdmVudERlc3RpbmF0aW9uQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBFdmVudERlc3RpbmF0aW9uQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLkNvbmZpZ3VyYXRpb25TZXROYW1lID0gb3B0cy5Db25maWd1cmF0aW9uU2V0TmFtZTtcbiAgICAgICAgdGhpcy5FdmVudERlc3RpbmF0aW9uTmFtZSA9IG9wdHMuRXZlbnREZXN0aW5hdGlvbk5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRDbG91ZFdhdGNoRGVzdGluYXRpb25FeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludmFsaWRDbG91ZFdhdGNoRGVzdGluYXRpb25FeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIENvbmZpZ3VyYXRpb25TZXROYW1lO1xuICAgIEV2ZW50RGVzdGluYXRpb25OYW1lO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkQ2xvdWRXYXRjaERlc3RpbmF0aW9uRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRDbG91ZFdhdGNoRGVzdGluYXRpb25FeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5Db25maWd1cmF0aW9uU2V0TmFtZSA9IG9wdHMuQ29uZmlndXJhdGlvblNldE5hbWU7XG4gICAgICAgIHRoaXMuRXZlbnREZXN0aW5hdGlvbk5hbWUgPSBvcHRzLkV2ZW50RGVzdGluYXRpb25OYW1lO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkRmlyZWhvc2VEZXN0aW5hdGlvbkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW52YWxpZEZpcmVob3NlRGVzdGluYXRpb25FeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIENvbmZpZ3VyYXRpb25TZXROYW1lO1xuICAgIEV2ZW50RGVzdGluYXRpb25OYW1lO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkRmlyZWhvc2VEZXN0aW5hdGlvbkV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkRmlyZWhvc2VEZXN0aW5hdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLkNvbmZpZ3VyYXRpb25TZXROYW1lID0gb3B0cy5Db25maWd1cmF0aW9uU2V0TmFtZTtcbiAgICAgICAgdGhpcy5FdmVudERlc3RpbmF0aW9uTmFtZSA9IG9wdHMuRXZlbnREZXN0aW5hdGlvbk5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRTTlNEZXN0aW5hdGlvbkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW52YWxpZFNOU0Rlc3RpbmF0aW9uRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBDb25maWd1cmF0aW9uU2V0TmFtZTtcbiAgICBFdmVudERlc3RpbmF0aW9uTmFtZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFNOU0Rlc3RpbmF0aW9uRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRTTlNEZXN0aW5hdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLkNvbmZpZ3VyYXRpb25TZXROYW1lID0gb3B0cy5Db25maWd1cmF0aW9uU2V0TmFtZTtcbiAgICAgICAgdGhpcy5FdmVudERlc3RpbmF0aW9uTmFtZSA9IG9wdHMuRXZlbnREZXN0aW5hdGlvbk5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRUcmFja2luZ09wdGlvbnNFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludmFsaWRUcmFja2luZ09wdGlvbnNFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkVHJhY2tpbmdPcHRpb25zRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRUcmFja2luZ09wdGlvbnNFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVHJhY2tpbmdPcHRpb25zQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiVHJhY2tpbmdPcHRpb25zQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgQ29uZmlndXJhdGlvblNldE5hbWU7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlRyYWNraW5nT3B0aW9uc0FscmVhZHlFeGlzdHNFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgVHJhY2tpbmdPcHRpb25zQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLkNvbmZpZ3VyYXRpb25TZXROYW1lID0gb3B0cy5Db25maWd1cmF0aW9uU2V0TmFtZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxJbnZhbGlkQ29udGVudEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxJbnZhbGlkQ29udGVudEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsSW52YWxpZENvbnRlbnRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxJbnZhbGlkQ29udGVudEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZUFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVOYW1lO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVOYW1lID0gb3B0cy5DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlTmFtZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRnJvbUVtYWlsQWRkcmVzc05vdFZlcmlmaWVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJGcm9tRW1haWxBZGRyZXNzTm90VmVyaWZpZWRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIEZyb21FbWFpbEFkZHJlc3M7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkZyb21FbWFpbEFkZHJlc3NOb3RWZXJpZmllZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBGcm9tRW1haWxBZGRyZXNzTm90VmVyaWZpZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5Gcm9tRW1haWxBZGRyZXNzID0gb3B0cy5Gcm9tRW1haWxBZGRyZXNzO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBSZWNlaXB0RmlsdGVyUG9saWN5ID0ge1xuICAgIEFsbG93OiBcIkFsbG93XCIsXG4gICAgQmxvY2s6IFwiQmxvY2tcIixcbn07XG5leHBvcnQgY29uc3QgSW52b2NhdGlvblR5cGUgPSB7XG4gICAgRXZlbnQ6IFwiRXZlbnRcIixcbiAgICBSZXF1ZXN0UmVzcG9uc2U6IFwiUmVxdWVzdFJlc3BvbnNlXCIsXG59O1xuZXhwb3J0IGNvbnN0IFNOU0FjdGlvbkVuY29kaW5nID0ge1xuICAgIEJhc2U2NDogXCJCYXNlNjRcIixcbiAgICBVVEY4OiBcIlVURi04XCIsXG59O1xuZXhwb3J0IGNvbnN0IFN0b3BTY29wZSA9IHtcbiAgICBSVUxFX1NFVDogXCJSdWxlU2V0XCIsXG59O1xuZXhwb3J0IGNvbnN0IFRsc1BvbGljeSA9IHtcbiAgICBPcHRpb25hbDogXCJPcHRpb25hbFwiLFxuICAgIFJlcXVpcmU6IFwiUmVxdWlyZVwiLFxufTtcbmV4cG9ydCBjbGFzcyBJbnZhbGlkTGFtYmRhRnVuY3Rpb25FeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludmFsaWRMYW1iZGFGdW5jdGlvbkV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgRnVuY3Rpb25Bcm47XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWRMYW1iZGFGdW5jdGlvbkV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkTGFtYmRhRnVuY3Rpb25FeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5GdW5jdGlvbkFybiA9IG9wdHMuRnVuY3Rpb25Bcm47XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRTM0NvbmZpZ3VyYXRpb25FeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludmFsaWRTM0NvbmZpZ3VyYXRpb25FeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIEJ1Y2tldDtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFMzQ29uZmlndXJhdGlvbkV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkUzNDb25maWd1cmF0aW9uRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuQnVja2V0ID0gb3B0cy5CdWNrZXQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRTbnNUb3BpY0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW52YWxpZFNuc1RvcGljRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBUb3BpYztcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFNuc1RvcGljRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRTbnNUb3BpY0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLlRvcGljID0gb3B0cy5Ub3BpYztcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUnVsZURvZXNOb3RFeGlzdEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiUnVsZURvZXNOb3RFeGlzdEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTmFtZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiUnVsZURvZXNOb3RFeGlzdEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBSdWxlRG9lc05vdEV4aXN0RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTmFtZSA9IG9wdHMuTmFtZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZFRlbXBsYXRlRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkVGVtcGxhdGVFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIFRlbXBsYXRlTmFtZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFRlbXBsYXRlRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEludmFsaWRUZW1wbGF0ZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLlRlbXBsYXRlTmFtZSA9IG9wdHMuVGVtcGxhdGVOYW1lO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBDdXN0b21NYWlsRnJvbVN0YXR1cyA9IHtcbiAgICBGYWlsZWQ6IFwiRmFpbGVkXCIsXG4gICAgUGVuZGluZzogXCJQZW5kaW5nXCIsXG4gICAgU3VjY2VzczogXCJTdWNjZXNzXCIsXG4gICAgVGVtcG9yYXJ5RmFpbHVyZTogXCJUZW1wb3JhcnlGYWlsdXJlXCIsXG59O1xuZXhwb3J0IGNsYXNzIEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVOYW1lO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlTmFtZSA9IG9wdHMuQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZU5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEV2ZW50RGVzdGluYXRpb25Eb2VzTm90RXhpc3RFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkV2ZW50RGVzdGluYXRpb25Eb2VzTm90RXhpc3RFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIENvbmZpZ3VyYXRpb25TZXROYW1lO1xuICAgIEV2ZW50RGVzdGluYXRpb25OYW1lO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJFdmVudERlc3RpbmF0aW9uRG9lc05vdEV4aXN0RXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEV2ZW50RGVzdGluYXRpb25Eb2VzTm90RXhpc3RFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5Db25maWd1cmF0aW9uU2V0TmFtZSA9IG9wdHMuQ29uZmlndXJhdGlvblNldE5hbWU7XG4gICAgICAgIHRoaXMuRXZlbnREZXN0aW5hdGlvbk5hbWUgPSBvcHRzLkV2ZW50RGVzdGluYXRpb25OYW1lO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBUcmFja2luZ09wdGlvbnNEb2VzTm90RXhpc3RFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIlRyYWNraW5nT3B0aW9uc0RvZXNOb3RFeGlzdEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgQ29uZmlndXJhdGlvblNldE5hbWU7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlRyYWNraW5nT3B0aW9uc0RvZXNOb3RFeGlzdEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUcmFja2luZ09wdGlvbnNEb2VzTm90RXhpc3RFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5Db25maWd1cmF0aW9uU2V0TmFtZSA9IG9wdHMuQ29uZmlndXJhdGlvblNldE5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IFZlcmlmaWNhdGlvblN0YXR1cyA9IHtcbiAgICBGYWlsZWQ6IFwiRmFpbGVkXCIsXG4gICAgTm90U3RhcnRlZDogXCJOb3RTdGFydGVkXCIsXG4gICAgUGVuZGluZzogXCJQZW5kaW5nXCIsXG4gICAgU3VjY2VzczogXCJTdWNjZXNzXCIsXG4gICAgVGVtcG9yYXJ5RmFpbHVyZTogXCJUZW1wb3JhcnlGYWlsdXJlXCIsXG59O1xuZXhwb3J0IGNsYXNzIFRlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJUZW1wbGF0ZURvZXNOb3RFeGlzdEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgVGVtcGxhdGVOYW1lO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJUZW1wbGF0ZURvZXNOb3RFeGlzdEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUZW1wbGF0ZURvZXNOb3RFeGlzdEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLlRlbXBsYXRlTmFtZSA9IG9wdHMuVGVtcGxhdGVOYW1lO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBJZGVudGl0eVR5cGUgPSB7XG4gICAgRG9tYWluOiBcIkRvbWFpblwiLFxuICAgIEVtYWlsQWRkcmVzczogXCJFbWFpbEFkZHJlc3NcIixcbn07XG5leHBvcnQgY2xhc3MgSW52YWxpZERlbGl2ZXJ5T3B0aW9uc0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW52YWxpZERlbGl2ZXJ5T3B0aW9uc0V4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWREZWxpdmVyeU9wdGlvbnNFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZERlbGl2ZXJ5T3B0aW9uc0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkUG9saWN5RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkUG9saWN5RXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFBvbGljeUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkUG9saWN5RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRSZW5kZXJpbmdQYXJhbWV0ZXJFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkludmFsaWRSZW5kZXJpbmdQYXJhbWV0ZXJFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIFRlbXBsYXRlTmFtZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW52YWxpZFJlbmRlcmluZ1BhcmFtZXRlckV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkUmVuZGVyaW5nUGFyYW1ldGVyRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuVGVtcGxhdGVOYW1lID0gb3B0cy5UZW1wbGF0ZU5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE1haWxGcm9tRG9tYWluTm90VmVyaWZpZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIk1haWxGcm9tRG9tYWluTm90VmVyaWZpZWRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJNYWlsRnJvbURvbWFpbk5vdFZlcmlmaWVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE1haWxGcm9tRG9tYWluTm90VmVyaWZpZWRFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTWVzc2FnZVJlamVjdGVkIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJNZXNzYWdlUmVqZWN0ZWRcIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJNZXNzYWdlUmVqZWN0ZWRcIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTWVzc2FnZVJlamVjdGVkLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE1pc3NpbmdSZW5kZXJpbmdBdHRyaWJ1dGVFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIk1pc3NpbmdSZW5kZXJpbmdBdHRyaWJ1dGVFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIFRlbXBsYXRlTmFtZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiTWlzc2luZ1JlbmRlcmluZ0F0dHJpYnV0ZUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBNaXNzaW5nUmVuZGVyaW5nQXR0cmlidXRlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuVGVtcGxhdGVOYW1lID0gb3B0cy5UZW1wbGF0ZU5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IE5vdGlmaWNhdGlvblR5cGUgPSB7XG4gICAgQm91bmNlOiBcIkJvdW5jZVwiLFxuICAgIENvbXBsYWludDogXCJDb21wbGFpbnRcIixcbiAgICBEZWxpdmVyeTogXCJEZWxpdmVyeVwiLFxufTtcbmV4cG9ydCBjbGFzcyBQcm9kdWN0aW9uQWNjZXNzTm90R3JhbnRlZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiUHJvZHVjdGlvbkFjY2Vzc05vdEdyYW50ZWRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJQcm9kdWN0aW9uQWNjZXNzTm90R3JhbnRlZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBQcm9kdWN0aW9uQWNjZXNzTm90R3JhbnRlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHBhcnNlWG1sQm9keSBhcyBwYXJzZUJvZHksIHBhcnNlWG1sRXJyb3JCb2R5IGFzIHBhcnNlRXJyb3JCb2R5IH0gZnJvbSBcIkBhd3Mtc2RrL2NvcmVcIjtcbmltcG9ydCB7IEh0dHBSZXF1ZXN0IGFzIF9fSHR0cFJlcXVlc3QgfSBmcm9tIFwiQHNtaXRoeS9wcm90b2NvbC1odHRwXCI7XG5pbXBvcnQgeyBjb2xsZWN0Qm9keSwgZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uLCBleHBlY3ROb25OdWxsIGFzIF9fZXhwZWN0Tm9uTnVsbCwgZXhwZWN0U3RyaW5nIGFzIF9fZXhwZWN0U3RyaW5nLCBleHRlbmRlZEVuY29kZVVSSUNvbXBvbmVudCBhcyBfX2V4dGVuZGVkRW5jb2RlVVJJQ29tcG9uZW50LCBnZXRBcnJheUlmU2luZ2xlSXRlbSBhcyBfX2dldEFycmF5SWZTaW5nbGVJdGVtLCBwYXJzZUJvb2xlYW4gYXMgX19wYXJzZUJvb2xlYW4sIHBhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldCBhcyBfX3BhcnNlUmZjMzMzOURhdGVUaW1lV2l0aE9mZnNldCwgc2VyaWFsaXplRGF0ZVRpbWUgYXMgX19zZXJpYWxpemVEYXRlVGltZSwgc3RyaWN0UGFyc2VGbG9hdCBhcyBfX3N0cmljdFBhcnNlRmxvYXQsIHN0cmljdFBhcnNlTG9uZyBhcyBfX3N0cmljdFBhcnNlTG9uZywgd2l0aEJhc2VFeGNlcHRpb24sIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgQWNjb3VudFNlbmRpbmdQYXVzZWRFeGNlcHRpb24sIEFscmVhZHlFeGlzdHNFeGNlcHRpb24sIENhbm5vdERlbGV0ZUV4Y2VwdGlvbiwgQ29uZmlndXJhdGlvblNldEFscmVhZHlFeGlzdHNFeGNlcHRpb24sIENvbmZpZ3VyYXRpb25TZXREb2VzTm90RXhpc3RFeGNlcHRpb24sIENvbmZpZ3VyYXRpb25TZXRTZW5kaW5nUGF1c2VkRXhjZXB0aW9uLCBDdXN0b21WZXJpZmljYXRpb25FbWFpbEludmFsaWRDb250ZW50RXhjZXB0aW9uLCBDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiwgQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZURvZXNOb3RFeGlzdEV4Y2VwdGlvbiwgRXZlbnREZXN0aW5hdGlvbkFscmVhZHlFeGlzdHNFeGNlcHRpb24sIEV2ZW50RGVzdGluYXRpb25Eb2VzTm90RXhpc3RFeGNlcHRpb24sIEZyb21FbWFpbEFkZHJlc3NOb3RWZXJpZmllZEV4Y2VwdGlvbiwgSW52YWxpZENsb3VkV2F0Y2hEZXN0aW5hdGlvbkV4Y2VwdGlvbiwgSW52YWxpZENvbmZpZ3VyYXRpb25TZXRFeGNlcHRpb24sIEludmFsaWREZWxpdmVyeU9wdGlvbnNFeGNlcHRpb24sIEludmFsaWRGaXJlaG9zZURlc3RpbmF0aW9uRXhjZXB0aW9uLCBJbnZhbGlkTGFtYmRhRnVuY3Rpb25FeGNlcHRpb24sIEludmFsaWRQb2xpY3lFeGNlcHRpb24sIEludmFsaWRSZW5kZXJpbmdQYXJhbWV0ZXJFeGNlcHRpb24sIEludmFsaWRTM0NvbmZpZ3VyYXRpb25FeGNlcHRpb24sIEludmFsaWRTTlNEZXN0aW5hdGlvbkV4Y2VwdGlvbiwgSW52YWxpZFNuc1RvcGljRXhjZXB0aW9uLCBJbnZhbGlkVGVtcGxhdGVFeGNlcHRpb24sIEludmFsaWRUcmFja2luZ09wdGlvbnNFeGNlcHRpb24sIExpbWl0RXhjZWVkZWRFeGNlcHRpb24sIE1haWxGcm9tRG9tYWluTm90VmVyaWZpZWRFeGNlcHRpb24sIE1lc3NhZ2VSZWplY3RlZCwgTWlzc2luZ1JlbmRlcmluZ0F0dHJpYnV0ZUV4Y2VwdGlvbiwgUHJvZHVjdGlvbkFjY2Vzc05vdEdyYW50ZWRFeGNlcHRpb24sIFJ1bGVEb2VzTm90RXhpc3RFeGNlcHRpb24sIFJ1bGVTZXREb2VzTm90RXhpc3RFeGNlcHRpb24sIFRlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uLCBUcmFja2luZ09wdGlvbnNBbHJlYWR5RXhpc3RzRXhjZXB0aW9uLCBUcmFja2luZ09wdGlvbnNEb2VzTm90RXhpc3RFeGNlcHRpb24sIH0gZnJvbSBcIi4uL21vZGVscy9tb2RlbHNfMFwiO1xuaW1wb3J0IHsgU0VTU2VydmljZUV4Y2VwdGlvbiBhcyBfX0Jhc2VFeGNlcHRpb24gfSBmcm9tIFwiLi4vbW9kZWxzL1NFU1NlcnZpY2VFeGNlcHRpb25cIjtcbmV4cG9ydCBjb25zdCBzZV9DbG9uZVJlY2VpcHRSdWxlU2V0Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0Nsb25lUmVjZWlwdFJ1bGVTZXRSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0NSUlMsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZUNvbmZpZ3VyYXRpb25TZXRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfQ3JlYXRlQ29uZmlndXJhdGlvblNldFJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfQ0NTLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVDb25maWd1cmF0aW9uU2V0RXZlbnREZXN0aW5hdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9DcmVhdGVDb25maWd1cmF0aW9uU2V0RXZlbnREZXN0aW5hdGlvblJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfQ0NTRUQsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZUNvbmZpZ3VyYXRpb25TZXRUcmFja2luZ09wdGlvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfQ3JlYXRlQ29uZmlndXJhdGlvblNldFRyYWNraW5nT3B0aW9uc1JlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfQ0NTVE8sXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZUN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfQ3JlYXRlQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZVJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfQ0NWRVQsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZVJlY2VpcHRGaWx0ZXJDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfQ3JlYXRlUmVjZWlwdEZpbHRlclJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfQ1JGLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVSZWNlaXB0UnVsZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9DcmVhdGVSZWNlaXB0UnVsZVJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfQ1JSLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVSZWNlaXB0UnVsZVNldENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9DcmVhdGVSZWNlaXB0UnVsZVNldFJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfQ1JSU3IsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZVRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0NyZWF0ZVRlbXBsYXRlUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9DVCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlQ29uZmlndXJhdGlvblNldENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZWxldGVDb25maWd1cmF0aW9uU2V0UmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9EQ1MsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0RlbGV0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9EQ1NFRCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlQ29uZmlndXJhdGlvblNldFRyYWNraW5nT3B0aW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZWxldGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9EQ1NUTyxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZWxldGVDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9EQ1ZFVCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlSWRlbnRpdHlDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGVsZXRlSWRlbnRpdHlSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RJLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVJZGVudGl0eVBvbGljeUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZWxldGVJZGVudGl0eVBvbGljeVJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfRElQLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVSZWNlaXB0RmlsdGVyQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0RlbGV0ZVJlY2VpcHRGaWx0ZXJSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RSRixcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlUmVjZWlwdFJ1bGVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGVsZXRlUmVjZWlwdFJ1bGVSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RSUixcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlUmVjZWlwdFJ1bGVTZXRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGVsZXRlUmVjZWlwdFJ1bGVTZXRSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RSUlMsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZVRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0RlbGV0ZVRlbXBsYXRlUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9EVCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlVmVyaWZpZWRFbWFpbEFkZHJlc3NDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGVsZXRlVmVyaWZpZWRFbWFpbEFkZHJlc3NSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RWRUEsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlQWN0aXZlUmVjZWlwdFJ1bGVTZXRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGVzY3JpYmVBY3RpdmVSZWNlaXB0UnVsZVNldFJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfREFSUlMsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlQ29uZmlndXJhdGlvblNldENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZXNjcmliZUNvbmZpZ3VyYXRpb25TZXRSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0RDU2UsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlUmVjZWlwdFJ1bGVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfRGVzY3JpYmVSZWNlaXB0UnVsZVJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfRFJSZSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVSZWNlaXB0UnVsZVNldENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9EZXNjcmliZVJlY2VpcHRSdWxlU2V0UmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9EUlJTZSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0QWNjb3VudFNlbmRpbmdFbmFibGVkQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBjb25zdCBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIFtfQV06IF9HQVNFLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXRDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0dldEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0dDVkVULFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXRJZGVudGl0eURraW1BdHRyaWJ1dGVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0dldElkZW50aXR5RGtpbUF0dHJpYnV0ZXNSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0dJREEsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0dldElkZW50aXR5TWFpbEZyb21Eb21haW5BdHRyaWJ1dGVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0dldElkZW50aXR5TWFpbEZyb21Eb21haW5BdHRyaWJ1dGVzUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9HSU1GREEsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0dldElkZW50aXR5Tm90aWZpY2F0aW9uQXR0cmlidXRlc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9HZXRJZGVudGl0eU5vdGlmaWNhdGlvbkF0dHJpYnV0ZXNSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0dJTkEsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0dldElkZW50aXR5UG9saWNpZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfR2V0SWRlbnRpdHlQb2xpY2llc1JlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfR0lQLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXRJZGVudGl0eVZlcmlmaWNhdGlvbkF0dHJpYnV0ZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfR2V0SWRlbnRpdHlWZXJpZmljYXRpb25BdHRyaWJ1dGVzUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9HSVZBLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXRTZW5kUXVvdGFDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGNvbnN0IGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgW19BXTogX0dTUSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0U2VuZFN0YXRpc3RpY3NDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGNvbnN0IGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgW19BXTogX0dTUyxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0VGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfR2V0VGVtcGxhdGVSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0dULFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0Q29uZmlndXJhdGlvblNldHNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfTGlzdENvbmZpZ3VyYXRpb25TZXRzUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9MQ1MsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9MaXN0Q3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZXNSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0xDVkVULFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0SWRlbnRpdGllc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9MaXN0SWRlbnRpdGllc1JlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfTEksXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RJZGVudGl0eVBvbGljaWVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0xpc3RJZGVudGl0eVBvbGljaWVzUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9MSVAsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RSZWNlaXB0RmlsdGVyc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9MaXN0UmVjZWlwdEZpbHRlcnNSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0xSRixcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdFJlY2VpcHRSdWxlU2V0c0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9MaXN0UmVjZWlwdFJ1bGVTZXRzUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9MUlJTLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0VGVtcGxhdGVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX0xpc3RUZW1wbGF0ZXNSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX0xULFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0VmVyaWZpZWRFbWFpbEFkZHJlc3Nlc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgY29uc3QgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICBbX0FdOiBfTFZFQSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfUHV0Q29uZmlndXJhdGlvblNldERlbGl2ZXJ5T3B0aW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9QdXRDb25maWd1cmF0aW9uU2V0RGVsaXZlcnlPcHRpb25zUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9QQ1NETyxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfUHV0SWRlbnRpdHlQb2xpY3lDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfUHV0SWRlbnRpdHlQb2xpY3lSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1BJUCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfUmVvcmRlclJlY2VpcHRSdWxlU2V0Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1Jlb3JkZXJSZWNlaXB0UnVsZVNldFJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfUlJSUyxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU2VuZEJvdW5jZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9TZW5kQm91bmNlUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9TQixcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU2VuZEJ1bGtUZW1wbGF0ZWRFbWFpbENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9TZW5kQnVsa1RlbXBsYXRlZEVtYWlsUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9TQlRFLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TZW5kQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfU2VuZEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9TQ1ZFLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TZW5kRW1haWxDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfU2VuZEVtYWlsUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9TRSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU2VuZFJhd0VtYWlsQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1NlbmRSYXdFbWFpbFJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfU1JFLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TZW5kVGVtcGxhdGVkRW1haWxDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfU2VuZFRlbXBsYXRlZEVtYWlsUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9TVEUsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1NldEFjdGl2ZVJlY2VpcHRSdWxlU2V0Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1NldEFjdGl2ZVJlY2VpcHRSdWxlU2V0UmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9TQVJSUyxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU2V0SWRlbnRpdHlEa2ltRW5hYmxlZENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9TZXRJZGVudGl0eURraW1FbmFibGVkUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9TSURFLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TZXRJZGVudGl0eUZlZWRiYWNrRm9yd2FyZGluZ0VuYWJsZWRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfU2V0SWRlbnRpdHlGZWVkYmFja0ZvcndhcmRpbmdFbmFibGVkUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9TSUZGRSxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU2V0SWRlbnRpdHlIZWFkZXJzSW5Ob3RpZmljYXRpb25zRW5hYmxlZENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9TZXRJZGVudGl0eUhlYWRlcnNJbk5vdGlmaWNhdGlvbnNFbmFibGVkUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9TSUhJTkUsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1NldElkZW50aXR5TWFpbEZyb21Eb21haW5Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfU2V0SWRlbnRpdHlNYWlsRnJvbURvbWFpblJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfU0lNRkQsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1NldElkZW50aXR5Tm90aWZpY2F0aW9uVG9waWNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfU2V0SWRlbnRpdHlOb3RpZmljYXRpb25Ub3BpY1JlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfU0lOVCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU2V0UmVjZWlwdFJ1bGVQb3NpdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9TZXRSZWNlaXB0UnVsZVBvc2l0aW9uUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9TUlJQLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9UZXN0UmVuZGVyVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfVGVzdFJlbmRlclRlbXBsYXRlUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9UUlQsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZUFjY291bnRTZW5kaW5nRW5hYmxlZENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9VcGRhdGVBY2NvdW50U2VuZGluZ0VuYWJsZWRSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1VBU0UsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1VwZGF0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9VQ1NFRCxcbiAgICAgICAgW19WXTogXyxcbiAgICB9KTtcbiAgICByZXR1cm4gYnVpbGRIdHRwUnBjUmVxdWVzdChjb250ZXh0LCBoZWFkZXJzLCBcIi9cIiwgdW5kZWZpbmVkLCBib2R5KTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlQ29uZmlndXJhdGlvblNldFJlcHV0YXRpb25NZXRyaWNzRW5hYmxlZENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9VcGRhdGVDb25maWd1cmF0aW9uU2V0UmVwdXRhdGlvbk1ldHJpY3NFbmFibGVkUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9VQ1NSTUUsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZUNvbmZpZ3VyYXRpb25TZXRTZW5kaW5nRW5hYmxlZENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9VcGRhdGVDb25maWd1cmF0aW9uU2V0U2VuZGluZ0VuYWJsZWRSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1VDU1NFLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1VwZGF0ZUNvbmZpZ3VyYXRpb25TZXRUcmFja2luZ09wdGlvbnNSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1VDU1RPLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBTSEFSRURfSEVBREVSUztcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gYnVpbGRGb3JtVXJsZW5jb2RlZFN0cmluZyh7XG4gICAgICAgIC4uLnNlX1VwZGF0ZUN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVSZXF1ZXN0KGlucHV0LCBjb250ZXh0KSxcbiAgICAgICAgW19BXTogX1VDVkVULFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVSZWNlaXB0UnVsZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9VcGRhdGVSZWNlaXB0UnVsZVJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfVVJSLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVUZW1wbGF0ZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9VcGRhdGVUZW1wbGF0ZVJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfVVQsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1ZlcmlmeURvbWFpbkRraW1Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfVmVyaWZ5RG9tYWluRGtpbVJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfVkRELFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9WZXJpZnlEb21haW5JZGVudGl0eUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gU0hBUkVEX0hFQURFUlM7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IGJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmcoe1xuICAgICAgICAuLi5zZV9WZXJpZnlEb21haW5JZGVudGl0eVJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfVkRJLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9WZXJpZnlFbWFpbEFkZHJlc3NDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfVmVyaWZ5RW1haWxBZGRyZXNzUmVxdWVzdChpbnB1dCwgY29udGV4dCksXG4gICAgICAgIFtfQV06IF9WRUEsXG4gICAgICAgIFtfVl06IF8sXG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1aWxkSHR0cFJwY1JlcXVlc3QoY29udGV4dCwgaGVhZGVycywgXCIvXCIsIHVuZGVmaW5lZCwgYm9keSk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1ZlcmlmeUVtYWlsSWRlbnRpdHlDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IFNIQVJFRF9IRUFERVJTO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nKHtcbiAgICAgICAgLi4uc2VfVmVyaWZ5RW1haWxJZGVudGl0eVJlcXVlc3QoaW5wdXQsIGNvbnRleHQpLFxuICAgICAgICBbX0FdOiBfVkVJLFxuICAgICAgICBbX1ZdOiBfLFxuICAgIH0pO1xuICAgIHJldHVybiBidWlsZEh0dHBScGNSZXF1ZXN0KGNvbnRleHQsIGhlYWRlcnMsIFwiL1wiLCB1bmRlZmluZWQsIGJvZHkpO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DbG9uZVJlY2VpcHRSdWxlU2V0Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9DbG9uZVJlY2VpcHRSdWxlU2V0UmVzcG9uc2UoZGF0YS5DbG9uZVJlY2VpcHRSdWxlU2V0UmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVDb25maWd1cmF0aW9uU2V0Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9DcmVhdGVDb25maWd1cmF0aW9uU2V0UmVzcG9uc2UoZGF0YS5DcmVhdGVDb25maWd1cmF0aW9uU2V0UmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVDb25maWd1cmF0aW9uU2V0RXZlbnREZXN0aW5hdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfQ3JlYXRlQ29uZmlndXJhdGlvblNldEV2ZW50RGVzdGluYXRpb25SZXNwb25zZShkYXRhLkNyZWF0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9DcmVhdGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zUmVzcG9uc2UoZGF0YS5DcmVhdGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgYXdhaXQgY29sbGVjdEJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlUmVjZWlwdEZpbHRlckNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfQ3JlYXRlUmVjZWlwdEZpbHRlclJlc3BvbnNlKGRhdGEuQ3JlYXRlUmVjZWlwdEZpbHRlclJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlUmVjZWlwdFJ1bGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0NyZWF0ZVJlY2VpcHRSdWxlUmVzcG9uc2UoZGF0YS5DcmVhdGVSZWNlaXB0UnVsZVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlUmVjZWlwdFJ1bGVTZXRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0NyZWF0ZVJlY2VpcHRSdWxlU2V0UmVzcG9uc2UoZGF0YS5DcmVhdGVSZWNlaXB0UnVsZVNldFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0NyZWF0ZVRlbXBsYXRlUmVzcG9uc2UoZGF0YS5DcmVhdGVUZW1wbGF0ZVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlQ29uZmlndXJhdGlvblNldENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfRGVsZXRlQ29uZmlndXJhdGlvblNldFJlc3BvbnNlKGRhdGEuRGVsZXRlQ29uZmlndXJhdGlvblNldFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlQ29uZmlndXJhdGlvblNldEV2ZW50RGVzdGluYXRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0RlbGV0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uUmVzcG9uc2UoZGF0YS5EZWxldGVDb25maWd1cmF0aW9uU2V0RXZlbnREZXN0aW5hdGlvblJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlQ29uZmlndXJhdGlvblNldFRyYWNraW5nT3B0aW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfRGVsZXRlQ29uZmlndXJhdGlvblNldFRyYWNraW5nT3B0aW9uc1Jlc3BvbnNlKGRhdGEuRGVsZXRlQ29uZmlndXJhdGlvblNldFRyYWNraW5nT3B0aW9uc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGF3YWl0IGNvbGxlY3RCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUlkZW50aXR5Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EZWxldGVJZGVudGl0eVJlc3BvbnNlKGRhdGEuRGVsZXRlSWRlbnRpdHlSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUlkZW50aXR5UG9saWN5Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EZWxldGVJZGVudGl0eVBvbGljeVJlc3BvbnNlKGRhdGEuRGVsZXRlSWRlbnRpdHlQb2xpY3lSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZVJlY2VpcHRGaWx0ZXJDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0RlbGV0ZVJlY2VpcHRGaWx0ZXJSZXNwb25zZShkYXRhLkRlbGV0ZVJlY2VpcHRGaWx0ZXJSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZVJlY2VpcHRSdWxlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EZWxldGVSZWNlaXB0UnVsZVJlc3BvbnNlKGRhdGEuRGVsZXRlUmVjZWlwdFJ1bGVSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZVJlY2VpcHRSdWxlU2V0Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EZWxldGVSZWNlaXB0UnVsZVNldFJlc3BvbnNlKGRhdGEuRGVsZXRlUmVjZWlwdFJ1bGVTZXRSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZVRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EZWxldGVUZW1wbGF0ZVJlc3BvbnNlKGRhdGEuRGVsZXRlVGVtcGxhdGVSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZVZlcmlmaWVkRW1haWxBZGRyZXNzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgYXdhaXQgY29sbGVjdEJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVBY3RpdmVSZWNlaXB0UnVsZVNldENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfRGVzY3JpYmVBY3RpdmVSZWNlaXB0UnVsZVNldFJlc3BvbnNlKGRhdGEuRGVzY3JpYmVBY3RpdmVSZWNlaXB0UnVsZVNldFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVDb25maWd1cmF0aW9uU2V0Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9EZXNjcmliZUNvbmZpZ3VyYXRpb25TZXRSZXNwb25zZShkYXRhLkRlc2NyaWJlQ29uZmlndXJhdGlvblNldFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVSZWNlaXB0UnVsZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfRGVzY3JpYmVSZWNlaXB0UnVsZVJlc3BvbnNlKGRhdGEuRGVzY3JpYmVSZWNlaXB0UnVsZVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVSZWNlaXB0UnVsZVNldENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfRGVzY3JpYmVSZWNlaXB0UnVsZVNldFJlc3BvbnNlKGRhdGEuRGVzY3JpYmVSZWNlaXB0UnVsZVNldFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0QWNjb3VudFNlbmRpbmdFbmFibGVkQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9HZXRBY2NvdW50U2VuZGluZ0VuYWJsZWRSZXNwb25zZShkYXRhLkdldEFjY291bnRTZW5kaW5nRW5hYmxlZFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0Q3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfR2V0Q3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZVJlc3BvbnNlKGRhdGEuR2V0Q3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0SWRlbnRpdHlEa2ltQXR0cmlidXRlc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfR2V0SWRlbnRpdHlEa2ltQXR0cmlidXRlc1Jlc3BvbnNlKGRhdGEuR2V0SWRlbnRpdHlEa2ltQXR0cmlidXRlc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0SWRlbnRpdHlNYWlsRnJvbURvbWFpbkF0dHJpYnV0ZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0dldElkZW50aXR5TWFpbEZyb21Eb21haW5BdHRyaWJ1dGVzUmVzcG9uc2UoZGF0YS5HZXRJZGVudGl0eU1haWxGcm9tRG9tYWluQXR0cmlidXRlc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0SWRlbnRpdHlOb3RpZmljYXRpb25BdHRyaWJ1dGVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9HZXRJZGVudGl0eU5vdGlmaWNhdGlvbkF0dHJpYnV0ZXNSZXNwb25zZShkYXRhLkdldElkZW50aXR5Tm90aWZpY2F0aW9uQXR0cmlidXRlc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0SWRlbnRpdHlQb2xpY2llc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfR2V0SWRlbnRpdHlQb2xpY2llc1Jlc3BvbnNlKGRhdGEuR2V0SWRlbnRpdHlQb2xpY2llc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0SWRlbnRpdHlWZXJpZmljYXRpb25BdHRyaWJ1dGVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9HZXRJZGVudGl0eVZlcmlmaWNhdGlvbkF0dHJpYnV0ZXNSZXNwb25zZShkYXRhLkdldElkZW50aXR5VmVyaWZpY2F0aW9uQXR0cmlidXRlc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0U2VuZFF1b3RhQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9HZXRTZW5kUXVvdGFSZXNwb25zZShkYXRhLkdldFNlbmRRdW90YVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0U2VuZFN0YXRpc3RpY3NDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0dldFNlbmRTdGF0aXN0aWNzUmVzcG9uc2UoZGF0YS5HZXRTZW5kU3RhdGlzdGljc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfR2V0VGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0dldFRlbXBsYXRlUmVzcG9uc2UoZGF0YS5HZXRUZW1wbGF0ZVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdENvbmZpZ3VyYXRpb25TZXRzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9MaXN0Q29uZmlndXJhdGlvblNldHNSZXNwb25zZShkYXRhLkxpc3RDb25maWd1cmF0aW9uU2V0c1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9MaXN0Q3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZXNSZXNwb25zZShkYXRhLkxpc3RDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdElkZW50aXRpZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0xpc3RJZGVudGl0aWVzUmVzcG9uc2UoZGF0YS5MaXN0SWRlbnRpdGllc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdElkZW50aXR5UG9saWNpZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0xpc3RJZGVudGl0eVBvbGljaWVzUmVzcG9uc2UoZGF0YS5MaXN0SWRlbnRpdHlQb2xpY2llc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFJlY2VpcHRGaWx0ZXJzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9MaXN0UmVjZWlwdEZpbHRlcnNSZXNwb25zZShkYXRhLkxpc3RSZWNlaXB0RmlsdGVyc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFJlY2VpcHRSdWxlU2V0c0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfTGlzdFJlY2VpcHRSdWxlU2V0c1Jlc3BvbnNlKGRhdGEuTGlzdFJlY2VpcHRSdWxlU2V0c1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFRlbXBsYXRlc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfTGlzdFRlbXBsYXRlc1Jlc3BvbnNlKGRhdGEuTGlzdFRlbXBsYXRlc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFZlcmlmaWVkRW1haWxBZGRyZXNzZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX0xpc3RWZXJpZmllZEVtYWlsQWRkcmVzc2VzUmVzcG9uc2UoZGF0YS5MaXN0VmVyaWZpZWRFbWFpbEFkZHJlc3Nlc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfUHV0Q29uZmlndXJhdGlvblNldERlbGl2ZXJ5T3B0aW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfUHV0Q29uZmlndXJhdGlvblNldERlbGl2ZXJ5T3B0aW9uc1Jlc3BvbnNlKGRhdGEuUHV0Q29uZmlndXJhdGlvblNldERlbGl2ZXJ5T3B0aW9uc1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfUHV0SWRlbnRpdHlQb2xpY3lDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1B1dElkZW50aXR5UG9saWN5UmVzcG9uc2UoZGF0YS5QdXRJZGVudGl0eVBvbGljeVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfUmVvcmRlclJlY2VpcHRSdWxlU2V0Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9SZW9yZGVyUmVjZWlwdFJ1bGVTZXRSZXNwb25zZShkYXRhLlJlb3JkZXJSZWNlaXB0UnVsZVNldFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU2VuZEJvdW5jZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfU2VuZEJvdW5jZVJlc3BvbnNlKGRhdGEuU2VuZEJvdW5jZVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU2VuZEJ1bGtUZW1wbGF0ZWRFbWFpbENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfU2VuZEJ1bGtUZW1wbGF0ZWRFbWFpbFJlc3BvbnNlKGRhdGEuU2VuZEJ1bGtUZW1wbGF0ZWRFbWFpbFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU2VuZEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9TZW5kQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxSZXNwb25zZShkYXRhLlNlbmRDdXN0b21WZXJpZmljYXRpb25FbWFpbFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU2VuZEVtYWlsQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9TZW5kRW1haWxSZXNwb25zZShkYXRhLlNlbmRFbWFpbFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU2VuZFJhd0VtYWlsQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9TZW5kUmF3RW1haWxSZXNwb25zZShkYXRhLlNlbmRSYXdFbWFpbFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU2VuZFRlbXBsYXRlZEVtYWlsQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9TZW5kVGVtcGxhdGVkRW1haWxSZXNwb25zZShkYXRhLlNlbmRUZW1wbGF0ZWRFbWFpbFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU2V0QWN0aXZlUmVjZWlwdFJ1bGVTZXRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1NldEFjdGl2ZVJlY2VpcHRSdWxlU2V0UmVzcG9uc2UoZGF0YS5TZXRBY3RpdmVSZWNlaXB0UnVsZVNldFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU2V0SWRlbnRpdHlEa2ltRW5hYmxlZENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfU2V0SWRlbnRpdHlEa2ltRW5hYmxlZFJlc3BvbnNlKGRhdGEuU2V0SWRlbnRpdHlEa2ltRW5hYmxlZFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU2V0SWRlbnRpdHlGZWVkYmFja0ZvcndhcmRpbmdFbmFibGVkQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9TZXRJZGVudGl0eUZlZWRiYWNrRm9yd2FyZGluZ0VuYWJsZWRSZXNwb25zZShkYXRhLlNldElkZW50aXR5RmVlZGJhY2tGb3J3YXJkaW5nRW5hYmxlZFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU2V0SWRlbnRpdHlIZWFkZXJzSW5Ob3RpZmljYXRpb25zRW5hYmxlZENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfU2V0SWRlbnRpdHlIZWFkZXJzSW5Ob3RpZmljYXRpb25zRW5hYmxlZFJlc3BvbnNlKGRhdGEuU2V0SWRlbnRpdHlIZWFkZXJzSW5Ob3RpZmljYXRpb25zRW5hYmxlZFJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU2V0SWRlbnRpdHlNYWlsRnJvbURvbWFpbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfU2V0SWRlbnRpdHlNYWlsRnJvbURvbWFpblJlc3BvbnNlKGRhdGEuU2V0SWRlbnRpdHlNYWlsRnJvbURvbWFpblJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU2V0SWRlbnRpdHlOb3RpZmljYXRpb25Ub3BpY0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfU2V0SWRlbnRpdHlOb3RpZmljYXRpb25Ub3BpY1Jlc3BvbnNlKGRhdGEuU2V0SWRlbnRpdHlOb3RpZmljYXRpb25Ub3BpY1Jlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfU2V0UmVjZWlwdFJ1bGVQb3NpdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfU2V0UmVjZWlwdFJ1bGVQb3NpdGlvblJlc3BvbnNlKGRhdGEuU2V0UmVjZWlwdFJ1bGVQb3NpdGlvblJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfVGVzdFJlbmRlclRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9UZXN0UmVuZGVyVGVtcGxhdGVSZXNwb25zZShkYXRhLlRlc3RSZW5kZXJUZW1wbGF0ZVJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlQWNjb3VudFNlbmRpbmdFbmFibGVkQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgYXdhaXQgY29sbGVjdEJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlQ29uZmlndXJhdGlvblNldEV2ZW50RGVzdGluYXRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1VwZGF0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uUmVzcG9uc2UoZGF0YS5VcGRhdGVDb25maWd1cmF0aW9uU2V0RXZlbnREZXN0aW5hdGlvblJlc3VsdCwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9O1xuICAgIHJldHVybiByZXNwb25zZTtcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlQ29uZmlndXJhdGlvblNldFJlcHV0YXRpb25NZXRyaWNzRW5hYmxlZENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGF3YWl0IGNvbGxlY3RCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZUNvbmZpZ3VyYXRpb25TZXRTZW5kaW5nRW5hYmxlZENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGF3YWl0IGNvbGxlY3RCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZUNvbmZpZ3VyYXRpb25TZXRUcmFja2luZ09wdGlvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KTtcbiAgICBsZXQgY29udGVudHMgPSB7fTtcbiAgICBjb250ZW50cyA9IGRlX1VwZGF0ZUNvbmZpZ3VyYXRpb25TZXRUcmFja2luZ09wdGlvbnNSZXNwb25zZShkYXRhLlVwZGF0ZUNvbmZpZ3VyYXRpb25TZXRUcmFja2luZ09wdGlvbnNSZXN1bHQsIGNvbnRleHQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZUN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBhd2FpdCBjb2xsZWN0Qm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVSZWNlaXB0UnVsZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfVXBkYXRlUmVjZWlwdFJ1bGVSZXNwb25zZShkYXRhLlVwZGF0ZVJlY2VpcHRSdWxlUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVUZW1wbGF0ZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfVXBkYXRlVGVtcGxhdGVSZXNwb25zZShkYXRhLlVwZGF0ZVRlbXBsYXRlUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9WZXJpZnlEb21haW5Ea2ltQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9WZXJpZnlEb21haW5Ea2ltUmVzcG9uc2UoZGF0YS5WZXJpZnlEb21haW5Ea2ltUmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9WZXJpZnlEb21haW5JZGVudGl0eUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpO1xuICAgIGxldCBjb250ZW50cyA9IHt9O1xuICAgIGNvbnRlbnRzID0gZGVfVmVyaWZ5RG9tYWluSWRlbnRpdHlSZXNwb25zZShkYXRhLlZlcmlmeURvbWFpbklkZW50aXR5UmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9WZXJpZnlFbWFpbEFkZHJlc3NDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBhd2FpdCBjb2xsZWN0Qm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmV4cG9ydCBjb25zdCBkZV9WZXJpZnlFbWFpbElkZW50aXR5Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCk7XG4gICAgbGV0IGNvbnRlbnRzID0ge307XG4gICAgY29udGVudHMgPSBkZV9WZXJpZnlFbWFpbElkZW50aXR5UmVzcG9uc2UoZGF0YS5WZXJpZnlFbWFpbElkZW50aXR5UmVzdWx0LCBjb250ZXh0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmNvbnN0IGRlX0NvbW1hbmRFcnJvciA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBwYXJzZWRPdXRwdXQgPSB7XG4gICAgICAgIC4uLm91dHB1dCxcbiAgICAgICAgYm9keTogYXdhaXQgcGFyc2VFcnJvckJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpLFxuICAgIH07XG4gICAgY29uc3QgZXJyb3JDb2RlID0gbG9hZFF1ZXJ5RXJyb3JDb2RlKG91dHB1dCwgcGFyc2VkT3V0cHV0LmJvZHkpO1xuICAgIHN3aXRjaCAoZXJyb3JDb2RlKSB7XG4gICAgICAgIGNhc2UgXCJBbHJlYWR5RXhpc3RzXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9BbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJMaW1pdEV4Y2VlZGVkXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9MaW1pdEV4Y2VlZGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJSdWxlU2V0RG9lc05vdEV4aXN0XCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNSdWxlU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9SdWxlU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJDb25maWd1cmF0aW9uU2V0QWxyZWFkeUV4aXN0c1wiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjQ29uZmlndXJhdGlvblNldEFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0NvbmZpZ3VyYXRpb25TZXRBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkQ29uZmlndXJhdGlvblNldFwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjSW52YWxpZENvbmZpZ3VyYXRpb25TZXRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRDb25maWd1cmF0aW9uU2V0RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJDb25maWd1cmF0aW9uU2V0RG9lc05vdEV4aXN0XCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNDb25maWd1cmF0aW9uU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9Db25maWd1cmF0aW9uU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJFdmVudERlc3RpbmF0aW9uQWxyZWFkeUV4aXN0c1wiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjRXZlbnREZXN0aW5hdGlvbkFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0V2ZW50RGVzdGluYXRpb25BbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkQ2xvdWRXYXRjaERlc3RpbmF0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNJbnZhbGlkQ2xvdWRXYXRjaERlc3RpbmF0aW9uRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkQ2xvdWRXYXRjaERlc3RpbmF0aW9uRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkRmlyZWhvc2VEZXN0aW5hdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjSW52YWxpZEZpcmVob3NlRGVzdGluYXRpb25FeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludmFsaWRGaXJlaG9zZURlc3RpbmF0aW9uRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkU05TRGVzdGluYXRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0ludmFsaWRTTlNEZXN0aW5hdGlvbkV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZFNOU0Rlc3RpbmF0aW9uRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkVHJhY2tpbmdPcHRpb25zXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNJbnZhbGlkVHJhY2tpbmdPcHRpb25zRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkVHJhY2tpbmdPcHRpb25zRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJUcmFja2luZ09wdGlvbnNBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNUcmFja2luZ09wdGlvbnNBbHJlYWR5RXhpc3RzRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9UcmFja2luZ09wdGlvbnNBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJDdXN0b21WZXJpZmljYXRpb25FbWFpbEludmFsaWRDb250ZW50XCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNDdXN0b21WZXJpZmljYXRpb25FbWFpbEludmFsaWRDb250ZW50RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbEludmFsaWRDb250ZW50RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQWxyZWFkeUV4aXN0c1wiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZUFscmVhZHlFeGlzdHNFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJGcm9tRW1haWxBZGRyZXNzTm90VmVyaWZpZWRcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0Zyb21FbWFpbEFkZHJlc3NOb3RWZXJpZmllZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfRnJvbUVtYWlsQWRkcmVzc05vdFZlcmlmaWVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkTGFtYmRhRnVuY3Rpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0ludmFsaWRMYW1iZGFGdW5jdGlvbkV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZExhbWJkYUZ1bmN0aW9uRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkUzNDb25maWd1cmF0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNJbnZhbGlkUzNDb25maWd1cmF0aW9uRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkUzNDb25maWd1cmF0aW9uRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkU25zVG9waWNcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0ludmFsaWRTbnNUb3BpY0V4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZFNuc1RvcGljRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJSdWxlRG9lc05vdEV4aXN0XCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNSdWxlRG9lc05vdEV4aXN0RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9SdWxlRG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkVGVtcGxhdGVcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0ludmFsaWRUZW1wbGF0ZUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZFRlbXBsYXRlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJFdmVudERlc3RpbmF0aW9uRG9lc05vdEV4aXN0XCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNFdmVudERlc3RpbmF0aW9uRG9lc05vdEV4aXN0RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9FdmVudERlc3RpbmF0aW9uRG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJUcmFja2luZ09wdGlvbnNEb2VzTm90RXhpc3RFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI1RyYWNraW5nT3B0aW9uc0RvZXNOb3RFeGlzdEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfVHJhY2tpbmdPcHRpb25zRG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJDYW5ub3REZWxldGVcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI0Nhbm5vdERlbGV0ZUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfQ2Fubm90RGVsZXRlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlRG9lc05vdEV4aXN0XCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJUZW1wbGF0ZURvZXNOb3RFeGlzdFwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1RlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkRGVsaXZlcnlPcHRpb25zXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNJbnZhbGlkRGVsaXZlcnlPcHRpb25zRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkRGVsaXZlcnlPcHRpb25zRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkUG9saWN5XCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNJbnZhbGlkUG9saWN5RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkUG9saWN5RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJNZXNzYWdlUmVqZWN0ZWRcIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3Muc2VzI01lc3NhZ2VSZWplY3RlZFwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfTWVzc2FnZVJlamVjdGVkUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJBY2NvdW50U2VuZGluZ1BhdXNlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjQWNjb3VudFNlbmRpbmdQYXVzZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0FjY291bnRTZW5kaW5nUGF1c2VkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJDb25maWd1cmF0aW9uU2V0U2VuZGluZ1BhdXNlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjQ29uZmlndXJhdGlvblNldFNlbmRpbmdQYXVzZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0NvbmZpZ3VyYXRpb25TZXRTZW5kaW5nUGF1c2VkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJNYWlsRnJvbURvbWFpbk5vdFZlcmlmaWVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNNYWlsRnJvbURvbWFpbk5vdFZlcmlmaWVkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9NYWlsRnJvbURvbWFpbk5vdFZlcmlmaWVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJQcm9kdWN0aW9uQWNjZXNzTm90R3JhbnRlZFwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5zZXMjUHJvZHVjdGlvbkFjY2Vzc05vdEdyYW50ZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1Byb2R1Y3Rpb25BY2Nlc3NOb3RHcmFudGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkUmVuZGVyaW5nUGFyYW1ldGVyXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNJbnZhbGlkUmVuZGVyaW5nUGFyYW1ldGVyRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkUmVuZGVyaW5nUGFyYW1ldGVyRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJNaXNzaW5nUmVuZGVyaW5nQXR0cmlidXRlXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnNlcyNNaXNzaW5nUmVuZGVyaW5nQXR0cmlidXRlRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9NaXNzaW5nUmVuZGVyaW5nQXR0cmlidXRlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRCb2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dEZWZhdWx0RXJyb3Ioe1xuICAgICAgICAgICAgICAgIG91dHB1dCxcbiAgICAgICAgICAgICAgICBwYXJzZWRCb2R5OiBwYXJzZWRCb2R5LkVycm9yLFxuICAgICAgICAgICAgICAgIGVycm9yQ29kZSxcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn07XG5jb25zdCBkZV9BY2NvdW50U2VuZGluZ1BhdXNlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfQWNjb3VudFNlbmRpbmdQYXVzZWRFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEFjY291bnRTZW5kaW5nUGF1c2VkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9BbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9BbHJlYWR5RXhpc3RzRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBBbHJlYWR5RXhpc3RzRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9DYW5ub3REZWxldGVFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0Nhbm5vdERlbGV0ZUV4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQ2Fubm90RGVsZXRlRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9Db25maWd1cmF0aW9uU2V0QWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfQ29uZmlndXJhdGlvblNldEFscmVhZHlFeGlzdHNFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IENvbmZpZ3VyYXRpb25TZXRBbHJlYWR5RXhpc3RzRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9Db25maWd1cmF0aW9uU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9Db25maWd1cmF0aW9uU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBDb25maWd1cmF0aW9uU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9Db25maWd1cmF0aW9uU2V0U2VuZGluZ1BhdXNlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfQ29uZmlndXJhdGlvblNldFNlbmRpbmdQYXVzZWRFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IENvbmZpZ3VyYXRpb25TZXRTZW5kaW5nUGF1c2VkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbEludmFsaWRDb250ZW50RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbEludmFsaWRDb250ZW50RXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBDdXN0b21WZXJpZmljYXRpb25FbWFpbEludmFsaWRDb250ZW50RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZUFscmVhZHlFeGlzdHNFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9FdmVudERlc3RpbmF0aW9uQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfRXZlbnREZXN0aW5hdGlvbkFscmVhZHlFeGlzdHNFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEV2ZW50RGVzdGluYXRpb25BbHJlYWR5RXhpc3RzRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9FdmVudERlc3RpbmF0aW9uRG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9FdmVudERlc3RpbmF0aW9uRG9lc05vdEV4aXN0RXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBFdmVudERlc3RpbmF0aW9uRG9lc05vdEV4aXN0RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9Gcm9tRW1haWxBZGRyZXNzTm90VmVyaWZpZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0Zyb21FbWFpbEFkZHJlc3NOb3RWZXJpZmllZEV4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgRnJvbUVtYWlsQWRkcmVzc05vdFZlcmlmaWVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkQ2xvdWRXYXRjaERlc3RpbmF0aW9uRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9JbnZhbGlkQ2xvdWRXYXRjaERlc3RpbmF0aW9uRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkQ2xvdWRXYXRjaERlc3RpbmF0aW9uRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkQ29uZmlndXJhdGlvblNldEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfSW52YWxpZENvbmZpZ3VyYXRpb25TZXRFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRDb25maWd1cmF0aW9uU2V0RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkRGVsaXZlcnlPcHRpb25zRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9JbnZhbGlkRGVsaXZlcnlPcHRpb25zRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkRGVsaXZlcnlPcHRpb25zRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkRmlyZWhvc2VEZXN0aW5hdGlvbkV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfSW52YWxpZEZpcmVob3NlRGVzdGluYXRpb25FeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEludmFsaWRGaXJlaG9zZURlc3RpbmF0aW9uRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkTGFtYmRhRnVuY3Rpb25FeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0ludmFsaWRMYW1iZGFGdW5jdGlvbkV4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZExhbWJkYUZ1bmN0aW9uRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkUG9saWN5RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9JbnZhbGlkUG9saWN5RXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkUG9saWN5RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkUmVuZGVyaW5nUGFyYW1ldGVyRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9JbnZhbGlkUmVuZGVyaW5nUGFyYW1ldGVyRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkUmVuZGVyaW5nUGFyYW1ldGVyRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkUzNDb25maWd1cmF0aW9uRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9JbnZhbGlkUzNDb25maWd1cmF0aW9uRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkUzNDb25maWd1cmF0aW9uRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkU05TRGVzdGluYXRpb25FeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0ludmFsaWRTTlNEZXN0aW5hdGlvbkV4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZFNOU0Rlc3RpbmF0aW9uRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkU25zVG9waWNFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0ludmFsaWRTbnNUb3BpY0V4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZFNuc1RvcGljRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkVGVtcGxhdGVFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX0ludmFsaWRUZW1wbGF0ZUV4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZFRlbXBsYXRlRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkVHJhY2tpbmdPcHRpb25zRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9JbnZhbGlkVHJhY2tpbmdPcHRpb25zRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkVHJhY2tpbmdPcHRpb25zRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9MaW1pdEV4Y2VlZGVkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9MaW1pdEV4Y2VlZGVkRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9NYWlsRnJvbURvbWFpbk5vdFZlcmlmaWVkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9NYWlsRnJvbURvbWFpbk5vdFZlcmlmaWVkRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBNYWlsRnJvbURvbWFpbk5vdFZlcmlmaWVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9NZXNzYWdlUmVqZWN0ZWRSZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX01lc3NhZ2VSZWplY3RlZChib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgTWVzc2FnZVJlamVjdGVkKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9NaXNzaW5nUmVuZGVyaW5nQXR0cmlidXRlRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9NaXNzaW5nUmVuZGVyaW5nQXR0cmlidXRlRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBNaXNzaW5nUmVuZGVyaW5nQXR0cmlidXRlRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9Qcm9kdWN0aW9uQWNjZXNzTm90R3JhbnRlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfUHJvZHVjdGlvbkFjY2Vzc05vdEdyYW50ZWRFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFByb2R1Y3Rpb25BY2Nlc3NOb3RHcmFudGVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9SdWxlRG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9SdWxlRG9lc05vdEV4aXN0RXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBSdWxlRG9lc05vdEV4aXN0RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9SdWxlU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9SdWxlU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBSdWxlU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9UZW1wbGF0ZURvZXNOb3RFeGlzdEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gZGVfVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb24oYm9keS5FcnJvciwgY29udGV4dCk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFRlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9UcmFja2luZ09wdGlvbnNBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBkZV9UcmFja2luZ09wdGlvbnNBbHJlYWR5RXhpc3RzRXhjZXB0aW9uKGJvZHkuRXJyb3IsIGNvbnRleHQpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBUcmFja2luZ09wdGlvbnNBbHJlYWR5RXhpc3RzRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBkZV9UcmFja2luZ09wdGlvbnNEb2VzTm90RXhpc3RFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGRlX1RyYWNraW5nT3B0aW9uc0RvZXNOb3RFeGlzdEV4Y2VwdGlvbihib2R5LkVycm9yLCBjb250ZXh0KTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgVHJhY2tpbmdPcHRpb25zRG9lc05vdEV4aXN0RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmRlc2VyaWFsaXplZCxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBib2R5KTtcbn07XG5jb25zdCBzZV9BZGRIZWFkZXJBY3Rpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19ITl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19ITl0gPSBpbnB1dFtfSE5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0hWXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0hWXSA9IGlucHV0W19IVl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0FkZHJlc3NMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn1gXSA9IGVudHJ5O1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0JvZHkgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19UXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9Db250ZW50KGlucHV0W19UXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFRleHQuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19IXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9Db250ZW50KGlucHV0W19IXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEh0bWwuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQm91bmNlQWN0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfVEFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVEFdID0gaW5wdXRbX1RBXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TUkNdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU1JDXSA9IGlucHV0W19TUkNdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NDXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NDXSA9IGlucHV0W19TQ107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19NXSA9IGlucHV0W19NXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NdID0gaW5wdXRbX1NdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9Cb3VuY2VkUmVjaXBpZW50SW5mbyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1JdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUl0gPSBpbnB1dFtfUl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUkFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUkFdID0gaW5wdXRbX1JBXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19CVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19CVF0gPSBpbnB1dFtfQlRdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1JERl0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfUmVjaXBpZW50RHNuRmllbGRzKGlucHV0W19SREZdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgUmVjaXBpZW50RHNuRmllbGRzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0JvdW5jZWRSZWNpcGllbnRJbmZvTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9Cb3VuY2VkUmVjaXBpZW50SW5mbyhlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQnVsa0VtYWlsRGVzdGluYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19EXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9EZXN0aW5hdGlvbihpbnB1dFtfRF0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBEZXN0aW5hdGlvbi4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1JUXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXNzYWdlVGFnTGlzdChpbnB1dFtfUlRdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19SVF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5SZXBsYWNlbWVudFRhZ3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBSZXBsYWNlbWVudFRhZ3MuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SVERdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUlREXSA9IGlucHV0W19SVERdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9CdWxrRW1haWxEZXN0aW5hdGlvbkxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfQnVsa0VtYWlsRGVzdGluYXRpb24oZW50cnksIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9LiR7a2V5fWBdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Nsb25lUmVjZWlwdFJ1bGVTZXRSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUlNOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JTTl0gPSBpbnB1dFtfUlNOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19PUlNOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX09SU05dID0gaW5wdXRbX09SU05dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9DbG91ZFdhdGNoRGVzdGluYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19EQ10gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfQ2xvdWRXYXRjaERpbWVuc2lvbkNvbmZpZ3VyYXRpb25zKGlucHV0W19EQ10sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0RDXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkRpbWVuc2lvbkNvbmZpZ3VyYXRpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRGltZW5zaW9uQ29uZmlndXJhdGlvbnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQ2xvdWRXYXRjaERpbWVuc2lvbkNvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19ETl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19ETl0gPSBpbnB1dFtfRE5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RWU10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19EVlNdID0gaW5wdXRbX0RWU107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRERWXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0REVl0gPSBpbnB1dFtfRERWXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQ2xvdWRXYXRjaERpbWVuc2lvbkNvbmZpZ3VyYXRpb25zID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0Nsb3VkV2F0Y2hEaW1lbnNpb25Db25maWd1cmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfS4ke2tleX1gXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9Db25maWd1cmF0aW9uU2V0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OXSA9IGlucHV0W19OXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQ29uZmlndXJhdGlvblNldEF0dHJpYnV0ZUxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfWBdID0gZW50cnk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQ29ubmVjdEFjdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0lBUk5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfSUFSTl0gPSBpbnB1dFtfSUFSTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfSUFNUkFSTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19JQU1SQVJOXSA9IGlucHV0W19JQU1SQVJOXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQ29udGVudCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0RhXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0RhXSA9IGlucHV0W19EYV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQ10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19DXSA9IGlucHV0W19DXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQ3JlYXRlQ29uZmlndXJhdGlvblNldEV2ZW50RGVzdGluYXRpb25SZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FRF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfRXZlbnREZXN0aW5hdGlvbihpbnB1dFtfRURdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRXZlbnREZXN0aW5hdGlvbi4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9DcmVhdGVDb25maWd1cmF0aW9uU2V0UmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0NTXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9Db25maWd1cmF0aW9uU2V0KGlucHV0W19DU10sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBDb25maWd1cmF0aW9uU2V0LiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0NyZWF0ZUNvbmZpZ3VyYXRpb25TZXRUcmFja2luZ09wdGlvbnNSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UT10gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfVHJhY2tpbmdPcHRpb25zKGlucHV0W19UT10sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBUcmFja2luZ09wdGlvbnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQ3JlYXRlQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19UTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UTl0gPSBpbnB1dFtfVE5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0ZFQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19GRUFdID0gaW5wdXRbX0ZFQV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVFNdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVFNdID0gaW5wdXRbX1RTXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UQ10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UQ10gPSBpbnB1dFtfVENdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NSVVJMXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NSVVJMXSA9IGlucHV0W19TUlVSTF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRlJVUkxdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRlJVUkxdID0gaW5wdXRbX0ZSVVJMXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfQ3JlYXRlUmVjZWlwdEZpbHRlclJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19GXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9SZWNlaXB0RmlsdGVyKGlucHV0W19GXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEZpbHRlci4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9DcmVhdGVSZWNlaXB0UnVsZVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19SU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUlNOXSA9IGlucHV0W19SU05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FmXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FmXSA9IGlucHV0W19BZl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUnVdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1JlY2VpcHRSdWxlKGlucHV0W19SdV0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBSdWxlLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0NyZWF0ZVJlY2VpcHRSdWxlU2V0UmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1JTTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SU05dID0gaW5wdXRbX1JTTl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0NyZWF0ZVRlbXBsYXRlUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1RlXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9UZW1wbGF0ZShpbnB1dFtfVGVdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgVGVtcGxhdGUuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRGVsZXRlQ29uZmlndXJhdGlvblNldEV2ZW50RGVzdGluYXRpb25SZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FRE5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRUROXSA9IGlucHV0W19FRE5dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZWxldGVDb25maWd1cmF0aW9uU2V0UmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0NTTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19DU05dID0gaW5wdXRbX0NTTl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGV0ZUNvbmZpZ3VyYXRpb25TZXRUcmFja2luZ09wdGlvbnNSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRGVsZXRlQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19UTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UTl0gPSBpbnB1dFtfVE5dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZWxldGVJZGVudGl0eVBvbGljeVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19JXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ldID0gaW5wdXRbX0ldO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1BOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1BOXSA9IGlucHV0W19QTl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGV0ZUlkZW50aXR5UmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0ldICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfSV0gPSBpbnB1dFtfSV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0RlbGV0ZVJlY2VpcHRGaWx0ZXJSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfRk5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRk5dID0gaW5wdXRbX0ZOXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRGVsZXRlUmVjZWlwdFJ1bGVSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUlNOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JTTl0gPSBpbnB1dFtfUlNOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19STl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19STl0gPSBpbnB1dFtfUk5dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZWxldGVSZWNlaXB0UnVsZVNldFJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19SU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUlNOXSA9IGlucHV0W19SU05dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZWxldGVUZW1wbGF0ZVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19UTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UTl0gPSBpbnB1dFtfVE5dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZWxldGVWZXJpZmllZEVtYWlsQWRkcmVzc1JlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19FQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FQV0gPSBpbnB1dFtfRUFdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZWxpdmVyeU9wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19UUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UUF0gPSBpbnB1dFtfVFBdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZXNjcmliZUFjdGl2ZVJlY2VpcHRSdWxlU2V0UmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZXNjcmliZUNvbmZpZ3VyYXRpb25TZXRSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19DU0FOXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9Db25maWd1cmF0aW9uU2V0QXR0cmlidXRlTGlzdChpbnB1dFtfQ1NBTl0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0NTQU5dPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuQ29uZmlndXJhdGlvblNldEF0dHJpYnV0ZU5hbWVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgQ29uZmlndXJhdGlvblNldEF0dHJpYnV0ZU5hbWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Rlc2NyaWJlUmVjZWlwdFJ1bGVSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUlNOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JTTl0gPSBpbnB1dFtfUlNOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19STl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19STl0gPSBpbnB1dFtfUk5dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9EZXNjcmliZVJlY2VpcHRSdWxlU2V0UmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1JTTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SU05dID0gaW5wdXRbX1JTTl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0Rlc3RpbmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfVEFvXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9BZGRyZXNzTGlzdChpbnB1dFtfVEFvXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfVEFvXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlRvQWRkcmVzc2VzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgVG9BZGRyZXNzZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19DQV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfQWRkcmVzc0xpc3QoaW5wdXRbX0NBXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfQ0FdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuQ2NBZGRyZXNzZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBDY0FkZHJlc3Nlcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0JBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9BZGRyZXNzTGlzdChpbnB1dFtfQkFdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19CQV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5CY2NBZGRyZXNzZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBCY2NBZGRyZXNzZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRXZlbnREZXN0aW5hdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTl0gPSBpbnB1dFtfTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FXSA9IGlucHV0W19FXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NRVRdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0V2ZW50VHlwZXMoaW5wdXRbX01FVF0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX01FVF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5NYXRjaGluZ0V2ZW50VHlwZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBNYXRjaGluZ0V2ZW50VHlwZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19LRkRdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0tpbmVzaXNGaXJlaG9zZURlc3RpbmF0aW9uKGlucHV0W19LRkRdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgS2luZXNpc0ZpcmVob3NlRGVzdGluYXRpb24uJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19DV0RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0Nsb3VkV2F0Y2hEZXN0aW5hdGlvbihpbnB1dFtfQ1dEXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYENsb3VkV2F0Y2hEZXN0aW5hdGlvbi4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NOU0RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1NOU0Rlc3RpbmF0aW9uKGlucHV0W19TTlNEXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFNOU0Rlc3RpbmF0aW9uLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0V2ZW50VHlwZXMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfWBdID0gZW50cnk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfRXh0ZW5zaW9uRmllbGQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05dID0gaW5wdXRbX05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1ZhXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1ZhXSA9IGlucHV0W19WYV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0V4dGVuc2lvbkZpZWxkTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9FeHRlbnNpb25GaWVsZChlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfR2V0Q3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19UTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UTl0gPSBpbnB1dFtfVE5dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9HZXRJZGVudGl0eURraW1BdHRyaWJ1dGVzUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0lkXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9JZGVudGl0eUxpc3QoaW5wdXRbX0lkXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfSWRdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuSWRlbnRpdGllcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYElkZW50aXRpZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfR2V0SWRlbnRpdHlNYWlsRnJvbURvbWFpbkF0dHJpYnV0ZXNSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSWRdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0lkZW50aXR5TGlzdChpbnB1dFtfSWRdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19JZF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5JZGVudGl0aWVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgSWRlbnRpdGllcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9HZXRJZGVudGl0eU5vdGlmaWNhdGlvbkF0dHJpYnV0ZXNSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSWRdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0lkZW50aXR5TGlzdChpbnB1dFtfSWRdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19JZF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5JZGVudGl0aWVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgSWRlbnRpdGllcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9HZXRJZGVudGl0eVBvbGljaWVzUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0ldICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfSV0gPSBpbnB1dFtfSV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUE5vXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9Qb2xpY3lOYW1lTGlzdChpbnB1dFtfUE5vXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfUE5vXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlBvbGljeU5hbWVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgUG9saWN5TmFtZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfR2V0SWRlbnRpdHlWZXJpZmljYXRpb25BdHRyaWJ1dGVzUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0lkXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9JZGVudGl0eUxpc3QoaW5wdXRbX0lkXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfSWRdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuSWRlbnRpdGllcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYElkZW50aXRpZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfR2V0VGVtcGxhdGVSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfVE5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVE5dID0gaW5wdXRbX1ROXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfSWRlbnRpdHlMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGxldCBjb3VudGVyID0gMTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGlucHV0KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn1gXSA9IGVudHJ5O1xuICAgICAgICBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0tpbmVzaXNGaXJlaG9zZURlc3RpbmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSUFNUkFSTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19JQU1SQVJOXSA9IGlucHV0W19JQU1SQVJOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EU0FSTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19EU0FSTl0gPSBpbnB1dFtfRFNBUk5dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9MYW1iZGFBY3Rpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19UQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UQV0gPSBpbnB1dFtfVEFdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0ZBXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ZBXSA9IGlucHV0W19GQV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfSVRdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfSVRdID0gaW5wdXRbX0lUXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTGlzdENvbmZpZ3VyYXRpb25TZXRzUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05UXSA9IGlucHV0W19OVF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTUldICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTUldID0gaW5wdXRbX01JXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTGlzdEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVzUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05UXSA9IGlucHV0W19OVF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTVJdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTVJdID0gaW5wdXRbX01SXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTGlzdElkZW50aXRpZXNSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSVRkXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0lUZF0gPSBpbnB1dFtfSVRkXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OVF0gPSBpbnB1dFtfTlRdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01JXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX01JXSA9IGlucHV0W19NSV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0xpc3RJZGVudGl0eVBvbGljaWVzUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0ldICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfSV0gPSBpbnB1dFtfSV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX0xpc3RSZWNlaXB0RmlsdGVyc1JlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTGlzdFJlY2VpcHRSdWxlU2V0c1JlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19OVF0gPSBpbnB1dFtfTlRdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9MaXN0VGVtcGxhdGVzUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX05UXSA9IGlucHV0W19OVF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTUldICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTUldID0gaW5wdXRbX01JXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWVzc2FnZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1N1XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9Db250ZW50KGlucHV0W19TdV0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBTdWJqZWN0LiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQl0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfQm9keShpbnB1dFtfQl0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBCb2R5LiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX01lc3NhZ2VEc24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19STV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19STV0gPSBpbnB1dFtfUk1dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FEXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FEXSA9IF9fc2VyaWFsaXplRGF0ZVRpbWUoaW5wdXRbX0FEXSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRUZdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0V4dGVuc2lvbkZpZWxkTGlzdChpbnB1dFtfRUZdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19FRl0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5FeHRlbnNpb25GaWVsZHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBFeHRlbnNpb25GaWVsZHMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWVzc2FnZVRhZyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTl0gPSBpbnB1dFtfTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVmFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVmFdID0gaW5wdXRbX1ZhXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfTWVzc2FnZVRhZ0xpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWVzc2FnZVRhZyhlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUG9saWN5TmFtZUxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbnRyaWVzW2BtZW1iZXIuJHtjb3VudGVyfWBdID0gZW50cnk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUHV0Q29uZmlndXJhdGlvblNldERlbGl2ZXJ5T3B0aW9uc1JlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQ1NOXSA9IGlucHV0W19DU05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RPXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9EZWxpdmVyeU9wdGlvbnMoaW5wdXRbX0RPXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYERlbGl2ZXJ5T3B0aW9ucy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9QdXRJZGVudGl0eVBvbGljeVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19JXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ldID0gaW5wdXRbX0ldO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1BOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1BOXSA9IGlucHV0W19QTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19QXSA9IGlucHV0W19QXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUmF3TWVzc2FnZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0RhXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0RhXSA9IGNvbnRleHQuYmFzZTY0RW5jb2RlcihpbnB1dFtfRGFdKTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUmVjZWlwdEFjdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1NBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9TM0FjdGlvbihpbnB1dFtfU0FdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgUzNBY3Rpb24uJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19CQW9dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0JvdW5jZUFjdGlvbihpbnB1dFtfQkFvXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEJvdW5jZUFjdGlvbi4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1dBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9Xb3JrbWFpbEFjdGlvbihpbnB1dFtfV0FdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgV29ya21haWxBY3Rpb24uJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19MQV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTGFtYmRhQWN0aW9uKGlucHV0W19MQV0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBMYW1iZGFBY3Rpb24uJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TQXRdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1N0b3BBY3Rpb24oaW5wdXRbX1NBdF0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBTdG9wQWN0aW9uLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQUhBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9BZGRIZWFkZXJBY3Rpb24oaW5wdXRbX0FIQV0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBBZGRIZWFkZXJBY3Rpb24uJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TTlNBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9TTlNBY3Rpb24oaW5wdXRbX1NOU0FdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgU05TQWN0aW9uLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQ0FvXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9Db25uZWN0QWN0aW9uKGlucHV0W19DQW9dLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgQ29ubmVjdEFjdGlvbi4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9SZWNlaXB0QWN0aW9uc0xpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgbGV0IGNvdW50ZXIgPSAxO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgaW5wdXQpIHtcbiAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfUmVjZWlwdEFjdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgZW50cmllc1tgbWVtYmVyLiR7Y291bnRlcn0uJHtrZXl9YF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvdW50ZXIrKztcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUmVjZWlwdEZpbHRlciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTl0gPSBpbnB1dFtfTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfSUZdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1JlY2VpcHRJcEZpbHRlcihpbnB1dFtfSUZdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgSXBGaWx0ZXIuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfUmVjZWlwdElwRmlsdGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19QXSA9IGlucHV0W19QXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19DaV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19DaV0gPSBpbnB1dFtfQ2ldO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9SZWNlaXB0UnVsZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTl0gPSBpbnB1dFtfTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FXSA9IGlucHV0W19FXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UUF0gPSBpbnB1dFtfVFBdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1JlXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9SZWNpcGllbnRzTGlzdChpbnB1dFtfUmVdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19SZV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5SZWNpcGllbnRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgUmVjaXBpZW50cy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FjXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9SZWNlaXB0QWN0aW9uc0xpc3QoaW5wdXRbX0FjXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfQWNdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuQWN0aW9ucyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEFjdGlvbnMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TRWNdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU0VjXSA9IGlucHV0W19TRWNdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9SZWNlaXB0UnVsZU5hbWVzTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBlbnRyeTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9SZWNpcGllbnREc25GaWVsZHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19GUl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19GUl0gPSBpbnB1dFtfRlJdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQV0gPSBpbnB1dFtfQV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUk1lXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JNZV0gPSBpbnB1dFtfUk1lXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TdF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TdF0gPSBpbnB1dFtfU3RdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RDaV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19EQ2ldID0gaW5wdXRbX0RDaV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfTEFEXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0xBRF0gPSBfX3NlcmlhbGl6ZURhdGVUaW1lKGlucHV0W19MQURdKTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FRl0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfRXh0ZW5zaW9uRmllbGRMaXN0KGlucHV0W19FRl0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX0VGXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLkV4dGVuc2lvbkZpZWxkcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYEV4dGVuc2lvbkZpZWxkcy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9SZWNpcGllbnRzTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBsZXQgY291bnRlciA9IDE7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBpbnB1dCkge1xuICAgICAgICBpZiAoZW50cnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXNbYG1lbWJlci4ke2NvdW50ZXJ9YF0gPSBlbnRyeTtcbiAgICAgICAgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9SZW9yZGVyUmVjZWlwdFJ1bGVTZXRSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUlNOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JTTl0gPSBpbnB1dFtfUlNOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19STnVdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1JlY2VpcHRSdWxlTmFtZXNMaXN0KGlucHV0W19STnVdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19STnVdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuUnVsZU5hbWVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgUnVsZU5hbWVzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1MzQWN0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfVEFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVEFdID0gaW5wdXRbX1RBXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19CTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19CTl0gPSBpbnB1dFtfQk5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX09LUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19PS1BdID0gaW5wdXRbX09LUF07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfS0tBXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0tLQV0gPSBpbnB1dFtfS0tBXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19JUkFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfSVJBXSA9IGlucHV0W19JUkFdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9TZW5kQm91bmNlUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX09NSV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19PTUldID0gaW5wdXRbX09NSV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQlNdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQlNdID0gaW5wdXRbX0JTXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FeF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FeF0gPSBpbnB1dFtfRXhdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX01EXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXNzYWdlRHNuKGlucHV0W19NRF0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBNZXNzYWdlRHNuLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQlJJTF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfQm91bmNlZFJlY2lwaWVudEluZm9MaXN0KGlucHV0W19CUklMXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfQlJJTF0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5Cb3VuY2VkUmVjaXBpZW50SW5mb0xpc3QgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBCb3VuY2VkUmVjaXBpZW50SW5mb0xpc3QuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19CU0FdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQlNBXSA9IGlucHV0W19CU0FdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9TZW5kQnVsa1RlbXBsYXRlZEVtYWlsUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1NvXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NvXSA9IGlucHV0W19Tb107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU0FvXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NBb10gPSBpbnB1dFtfU0FvXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SVEFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0FkZHJlc3NMaXN0KGlucHV0W19SVEFdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19SVEFdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuUmVwbHlUb0FkZHJlc3NlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFJlcGx5VG9BZGRyZXNzZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SUF0gPSBpbnB1dFtfUlBdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1JQQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SUEFdID0gaW5wdXRbX1JQQV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EVGVdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01lc3NhZ2VUYWdMaXN0KGlucHV0W19EVGVdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19EVGVdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuRGVmYXVsdFRhZ3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBEZWZhdWx0VGFncy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RlXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RlXSA9IGlucHV0W19UZV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVEFlXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RBZV0gPSBpbnB1dFtfVEFlXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EVERdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRFREXSA9IGlucHV0W19EVERdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RlXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9CdWxrRW1haWxEZXN0aW5hdGlvbkxpc3QoaW5wdXRbX0RlXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfRGVdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuRGVzdGluYXRpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRGVzdGluYXRpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1NlbmRDdXN0b21WZXJpZmljYXRpb25FbWFpbFJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19FQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FQV0gPSBpbnB1dFtfRUFdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1ROXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1ROXSA9IGlucHV0W19UTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfU2VuZEVtYWlsUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1NvXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NvXSA9IGlucHV0W19Tb107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRF0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfRGVzdGluYXRpb24oaW5wdXRbX0RdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRGVzdGluYXRpb24uJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXNzYWdlKGlucHV0W19NXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYE1lc3NhZ2UuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SVEFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0FkZHJlc3NMaXN0KGlucHV0W19SVEFdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19SVEFdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuUmVwbHlUb0FkZHJlc3NlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFJlcGx5VG9BZGRyZXNzZXMuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SUF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SUF0gPSBpbnB1dFtfUlBdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NBb10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TQW9dID0gaW5wdXRbX1NBb107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUlBBXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JQQV0gPSBpbnB1dFtfUlBBXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UYV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfTWVzc2FnZVRhZ0xpc3QoaW5wdXRbX1RhXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfVGFdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuVGFncyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYFRhZ3MuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQ1NOXSA9IGlucHV0W19DU05dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9TZW5kUmF3RW1haWxSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfU29dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU29dID0gaW5wdXRbX1NvXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19EZV0gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBtZW1iZXJFbnRyaWVzID0gc2VfQWRkcmVzc0xpc3QoaW5wdXRbX0RlXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfRGVdPy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudHJpZXMuRGVzdGluYXRpb25zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgRGVzdGluYXRpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUk1hXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9SYXdNZXNzYWdlKGlucHV0W19STWFdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgUmF3TWVzc2FnZS4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0ZBcl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19GQXJdID0gaW5wdXRbX0ZBcl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU0FvXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NBb10gPSBpbnB1dFtfU0FvXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19SUEFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUlBBXSA9IGlucHV0W19SUEFdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RhXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9NZXNzYWdlVGFnTGlzdChpbnB1dFtfVGFdLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGlucHV0W19UYV0/Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZW50cmllcy5UYWdzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgVGFncy4ke2tleX1gO1xuICAgICAgICAgICAgZW50cmllc1tsb2NdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0NTTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19DU05dID0gaW5wdXRbX0NTTl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1NlbmRUZW1wbGF0ZWRFbWFpbFJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19Tb10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19Tb10gPSBpbnB1dFtfU29dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX0Rlc3RpbmF0aW9uKGlucHV0W19EXSwgY29udGV4dCk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG1lbWJlckVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jID0gYERlc3RpbmF0aW9uLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUlRBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9BZGRyZXNzTGlzdChpbnB1dFtfUlRBXSwgY29udGV4dCk7XG4gICAgICAgIGlmIChpbnB1dFtfUlRBXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlJlcGx5VG9BZGRyZXNzZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBSZXBseVRvQWRkcmVzc2VzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUlBdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfUlBdID0gaW5wdXRbX1JQXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TQW9dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU0FvXSA9IGlucHV0W19TQW9dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1JQQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SUEFdID0gaW5wdXRbX1JQQV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVGFdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX01lc3NhZ2VUYWdMaXN0KGlucHV0W19UYV0sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW5wdXRbX1RhXT8ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlbnRyaWVzLlRhZ3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBUYWdzLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UZV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UZV0gPSBpbnB1dFtfVGVdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RBZV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UQWVdID0gaW5wdXRbX1RBZV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVERdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVERdID0gaW5wdXRbX1REXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfU2V0QWN0aXZlUmVjZWlwdFJ1bGVTZXRSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUlNOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JTTl0gPSBpbnB1dFtfUlNOXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfU2V0SWRlbnRpdHlEa2ltRW5hYmxlZFJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19JXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ldID0gaW5wdXRbX0ldO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0RFXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0RFXSA9IGlucHV0W19ERV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1NldElkZW50aXR5RmVlZGJhY2tGb3J3YXJkaW5nRW5hYmxlZFJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19JXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ldID0gaW5wdXRbX0ldO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0ZFXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ZFXSA9IGlucHV0W19GRV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1NldElkZW50aXR5SGVhZGVyc0luTm90aWZpY2F0aW9uc0VuYWJsZWRSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19JXSA9IGlucHV0W19JXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19OVG9dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTlRvXSA9IGlucHV0W19OVG9dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0VdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRV0gPSBpbnB1dFtfRV07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1NldElkZW50aXR5TWFpbEZyb21Eb21haW5SZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19JXSA9IGlucHV0W19JXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19NRkRdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTUZEXSA9IGlucHV0W19NRkRdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0JPTVhGXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0JPTVhGXSA9IGlucHV0W19CT01YRl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1NldElkZW50aXR5Tm90aWZpY2F0aW9uVG9waWNSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfSV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19JXSA9IGlucHV0W19JXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19OVG9dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfTlRvXSA9IGlucHV0W19OVG9dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1NUXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1NUXSA9IGlucHV0W19TVF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1NldFJlY2VpcHRSdWxlUG9zaXRpb25SZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfUlNOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1JTTl0gPSBpbnB1dFtfUlNOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19STl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19STl0gPSBpbnB1dFtfUk5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0FmXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0FmXSA9IGlucHV0W19BZl07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1NOU0FjdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1RBXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RBXSA9IGlucHV0W19UQV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfRW5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRW5dID0gaW5wdXRbX0VuXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfU05TRGVzdGluYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19UQVJOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RBUk5dID0gaW5wdXRbX1RBUk5dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9TdG9wQWN0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfU2NdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU2NdID0gaW5wdXRbX1NjXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UQV0gPSBpbnB1dFtfVEFdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9UZW1wbGF0ZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1ROXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1ROXSA9IGlucHV0W19UTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfU1BdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfU1BdID0gaW5wdXRbX1NQXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19UUGVdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVFBlXSA9IGlucHV0W19UUGVdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0hQXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0hQXSA9IGlucHV0W19IUF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1Rlc3RSZW5kZXJUZW1wbGF0ZVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19UTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19UTl0gPSBpbnB1dFtfVE5dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1REXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1REXSA9IGlucHV0W19URF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1RyYWNraW5nT3B0aW9ucyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0NSRF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19DUkRdID0gaW5wdXRbX0NSRF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1VwZGF0ZUFjY291bnRTZW5kaW5nRW5hYmxlZFJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19FXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0VdID0gaW5wdXRbX0VdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9VcGRhdGVDb25maWd1cmF0aW9uU2V0RXZlbnREZXN0aW5hdGlvblJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfQ1NOXSA9IGlucHV0W19DU05dO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0VEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9FdmVudERlc3RpbmF0aW9uKGlucHV0W19FRF0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBFdmVudERlc3RpbmF0aW9uLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1VwZGF0ZUNvbmZpZ3VyYXRpb25TZXRSZXB1dGF0aW9uTWV0cmljc0VuYWJsZWRSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0VdID0gaW5wdXRbX0VdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9VcGRhdGVDb25maWd1cmF0aW9uU2V0U2VuZGluZ0VuYWJsZWRSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0NTTl0gPSBpbnB1dFtfQ1NOXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19FXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0VdID0gaW5wdXRbX0VdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9VcGRhdGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX0NTTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19DU05dID0gaW5wdXRbX0NTTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVE9dICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1RyYWNraW5nT3B0aW9ucyhpbnB1dFtfVE9dLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgVHJhY2tpbmdPcHRpb25zLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1VwZGF0ZUN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfVE5dICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVE5dID0gaW5wdXRbX1ROXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19GRUFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRkVBXSA9IGlucHV0W19GRUFdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX1RTXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RTXSA9IGlucHV0W19UU107XG4gICAgfVxuICAgIGlmIChpbnB1dFtfVENdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfVENdID0gaW5wdXRbX1RDXTtcbiAgICB9XG4gICAgaWYgKGlucHV0W19TUlVSTF0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19TUlVSTF0gPSBpbnB1dFtfU1JVUkxdO1xuICAgIH1cbiAgICBpZiAoaW5wdXRbX0ZSVVJMXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX0ZSVVJMXSA9IGlucHV0W19GUlVSTF07XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1VwZGF0ZVJlY2VpcHRSdWxlUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1JTTl0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19SU05dID0gaW5wdXRbX1JTTl07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfUnVdICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWVtYmVyRW50cmllcyA9IHNlX1JlY2VpcHRSdWxlKGlucHV0W19SdV0sIGNvbnRleHQpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhtZW1iZXJFbnRyaWVzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGBSdWxlLiR7a2V5fWA7XG4gICAgICAgICAgICBlbnRyaWVzW2xvY10gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xufTtcbmNvbnN0IHNlX1VwZGF0ZVRlbXBsYXRlUmVxdWVzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1RlXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlckVudHJpZXMgPSBzZV9UZW1wbGF0ZShpbnB1dFtfVGVdLCBjb250ZXh0KTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobWVtYmVyRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsb2MgPSBgVGVtcGxhdGUuJHtrZXl9YDtcbiAgICAgICAgICAgIGVudHJpZXNbbG9jXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfVmVyaWZ5RG9tYWluRGtpbVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19Eb10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19Eb10gPSBpbnB1dFtfRG9dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9WZXJpZnlEb21haW5JZGVudGl0eVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19Eb10gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19Eb10gPSBpbnB1dFtfRG9dO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9WZXJpZnlFbWFpbEFkZHJlc3NSZXF1ZXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgZW50cmllcyA9IHt9O1xuICAgIGlmIChpbnB1dFtfRUFdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfRUFdID0gaW5wdXRbX0VBXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3Qgc2VfVmVyaWZ5RW1haWxJZGVudGl0eVJlcXVlc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBlbnRyaWVzID0ge307XG4gICAgaWYgKGlucHV0W19FQV0gIT0gbnVsbCkge1xuICAgICAgICBlbnRyaWVzW19FQV0gPSBpbnB1dFtfRUFdO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbn07XG5jb25zdCBzZV9Xb3JrbWFpbEFjdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGVudHJpZXMgPSB7fTtcbiAgICBpZiAoaW5wdXRbX1RBXSAhPSBudWxsKSB7XG4gICAgICAgIGVudHJpZXNbX1RBXSA9IGlucHV0W19UQV07XG4gICAgfVxuICAgIGlmIChpbnB1dFtfT0FdICE9IG51bGwpIHtcbiAgICAgICAgZW50cmllc1tfT0FdID0gaW5wdXRbX09BXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59O1xuY29uc3QgZGVfQWNjb3VudFNlbmRpbmdQYXVzZWRFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQWRkSGVhZGVyQWN0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfSE5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0hOXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfSE5dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfSFZdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0hWXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfSFZdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0FkZHJlc3NMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2V4cGVjdFN0cmluZyhlbnRyeSk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9Cb3VuY2VBY3Rpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19UQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVEFdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UQV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TUkNdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NSQ10gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NSQ10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TQ10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU0NdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TQ10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19NXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19TXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU10pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQnVsa0VtYWlsRGVzdGluYXRpb25TdGF0dXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19TdF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU3RdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19TdF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19Fcl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRXJdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19Fcl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19NSWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01JZV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX01JZV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQnVsa0VtYWlsRGVzdGluYXRpb25TdGF0dXNMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9CdWxrRW1haWxEZXN0aW5hdGlvblN0YXR1cyhlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ2Fubm90RGVsZXRlRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Nsb25lUmVjZWlwdFJ1bGVTZXRSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9DbG91ZFdhdGNoRGVzdGluYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAoU3RyaW5nKG91dHB1dC5EaW1lbnNpb25Db25maWd1cmF0aW9ucykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19EQ10gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19EQ10gIT0gbnVsbCAmJiBvdXRwdXRbX0RDXVtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RDXSA9IGRlX0Nsb3VkV2F0Y2hEaW1lbnNpb25Db25maWd1cmF0aW9ucyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfRENdW19tZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Nsb3VkV2F0Y2hEaW1lbnNpb25Db25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfRE5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ROXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRE5dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRFZTXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19EVlNdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19EVlNdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRERWXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19ERFZdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19ERFZdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Nsb3VkV2F0Y2hEaW1lbnNpb25Db25maWd1cmF0aW9ucyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfQ2xvdWRXYXRjaERpbWVuc2lvbkNvbmZpZ3VyYXRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX0NvbmZpZ3VyYXRpb25TZXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTl0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQ29uZmlndXJhdGlvblNldEFscmVhZHlFeGlzdHNFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NTTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0NTTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQ29uZmlndXJhdGlvblNldERvZXNOb3RFeGlzdEV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0NTTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ1NOXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQ1NOXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9Db25maWd1cmF0aW9uU2V0cyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfQ29uZmlndXJhdGlvblNldChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ29uZmlndXJhdGlvblNldFNlbmRpbmdQYXVzZWRFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NTTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0NTTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQ29ubmVjdEFjdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0lBUk5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0lBUk5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19JQVJOXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0lBTVJBUk5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0lBTVJBUk5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19JQU1SQVJOXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9DcmVhdGVDb25maWd1cmF0aW9uU2V0RXZlbnREZXN0aW5hdGlvblJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0NyZWF0ZUNvbmZpZ3VyYXRpb25TZXRSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9DcmVhdGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQ3JlYXRlUmVjZWlwdEZpbHRlclJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0NyZWF0ZVJlY2VpcHRSdWxlUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQ3JlYXRlUmVjZWlwdFJ1bGVTZXRSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9DcmVhdGVUZW1wbGF0ZVJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsSW52YWxpZENvbnRlbnRFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1ROXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1ROXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0ZFQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRkVBXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRkVBXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1RTXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UU10gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1RTXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NSVVJMXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TUlVSTF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NSVVJMXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0ZSVVJMXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19GUlVSTF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0ZSVVJMXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0NWRVROXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19DVkVUTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0NWRVROXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQ1ZFVE5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NWRVROXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQ1ZFVE5dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EZWxldGVDb25maWd1cmF0aW9uU2V0RXZlbnREZXN0aW5hdGlvblJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0RlbGV0ZUNvbmZpZ3VyYXRpb25TZXRSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZWxldGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGVsZXRlSWRlbnRpdHlQb2xpY3lSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZWxldGVJZGVudGl0eVJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0RlbGV0ZVJlY2VpcHRGaWx0ZXJSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZWxldGVSZWNlaXB0UnVsZVJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0RlbGV0ZVJlY2VpcHRSdWxlU2V0UmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGVsZXRlVGVtcGxhdGVSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZWxpdmVyeU9wdGlvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19UUF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVFBdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UUF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGVzY3JpYmVBY3RpdmVSZWNlaXB0UnVsZVNldFJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01lXSA9IGRlX1JlY2VpcHRSdWxlU2V0TWV0YWRhdGEob3V0cHV0W19NZV0sIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAoU3RyaW5nKG91dHB1dC5SdWxlcykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19SdWxdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfUnVsXSAhPSBudWxsICYmIG91dHB1dFtfUnVsXVtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1J1bF0gPSBkZV9SZWNlaXB0UnVsZXNMaXN0KF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19SdWxdW19tZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Rlc2NyaWJlQ29uZmlndXJhdGlvblNldFJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQ1NdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NTXSA9IGRlX0NvbmZpZ3VyYXRpb25TZXQob3V0cHV0W19DU10sIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAoU3RyaW5nKG91dHB1dC5FdmVudERlc3RpbmF0aW9ucykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19FRHZdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfRUR2XSAhPSBudWxsICYmIG91dHB1dFtfRUR2XVtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0VEdl0gPSBkZV9FdmVudERlc3RpbmF0aW9ucyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfRUR2XVtfbWVdKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1RPXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UT10gPSBkZV9UcmFja2luZ09wdGlvbnMob3V0cHV0W19UT10sIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19ET10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRE9dID0gZGVfRGVsaXZlcnlPcHRpb25zKG91dHB1dFtfRE9dLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfUk9dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1JPXSA9IGRlX1JlcHV0YXRpb25PcHRpb25zKG91dHB1dFtfUk9dLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0Rlc2NyaWJlUmVjZWlwdFJ1bGVSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1J1XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19SdV0gPSBkZV9SZWNlaXB0UnVsZShvdXRwdXRbX1J1XSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9EZXNjcmliZVJlY2VpcHRSdWxlU2V0UmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19NZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTWVdID0gZGVfUmVjZWlwdFJ1bGVTZXRNZXRhZGF0YShvdXRwdXRbX01lXSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcob3V0cHV0LlJ1bGVzKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX1J1bF0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19SdWxdICE9IG51bGwgJiYgb3V0cHV0W19SdWxdW19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfUnVsXSA9IGRlX1JlY2VpcHRSdWxlc0xpc3QoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX1J1bF1bX21lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfRGtpbUF0dHJpYnV0ZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIG91dHB1dC5yZWR1Y2UoKGFjYywgcGFpcikgPT4ge1xuICAgICAgICBpZiAocGFpcltcInZhbHVlXCJdID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9XG4gICAgICAgIGFjY1twYWlyW1wia2V5XCJdXSA9IGRlX0lkZW50aXR5RGtpbUF0dHJpYnV0ZXMocGFpcltcInZhbHVlXCJdLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG59O1xuY29uc3QgZGVfRXZlbnREZXN0aW5hdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0VdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0VdID0gX19wYXJzZUJvb2xlYW4ob3V0cHV0W19FXSk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcob3V0cHV0Lk1hdGNoaW5nRXZlbnRUeXBlcykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19NRVRdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfTUVUXSAhPSBudWxsICYmIG91dHB1dFtfTUVUXVtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01FVF0gPSBkZV9FdmVudFR5cGVzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19NRVRdW19tZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfS0ZEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19LRkRdID0gZGVfS2luZXNpc0ZpcmVob3NlRGVzdGluYXRpb24ob3V0cHV0W19LRkRdLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQ1dEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19DV0RdID0gZGVfQ2xvdWRXYXRjaERlc3RpbmF0aW9uKG91dHB1dFtfQ1dEXSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NOU0RdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NOU0RdID0gZGVfU05TRGVzdGluYXRpb24ob3V0cHV0W19TTlNEXSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9FdmVudERlc3RpbmF0aW9uQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0NTTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ1NOXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQ1NOXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0VETl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRUROXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRUROXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9FdmVudERlc3RpbmF0aW9uRG9lc05vdEV4aXN0RXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19DU05dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19DU05dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRUROXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19FRE5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19FRE5dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0V2ZW50RGVzdGluYXRpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9FdmVudERlc3RpbmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBkZV9FdmVudFR5cGVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2V4cGVjdFN0cmluZyhlbnRyeSk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfRnJvbUVtYWlsQWRkcmVzc05vdFZlcmlmaWVkRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfRkVBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19GRUFdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19GRUFdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0dldEFjY291bnRTZW5kaW5nRW5hYmxlZFJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfRV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRV0gPSBfX3BhcnNlQm9vbGVhbihvdXRwdXRbX0VdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0dldEN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1ROXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1ROXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0ZFQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRkVBXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRkVBXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1RTXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UU10gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1RTXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1RDXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UQ10gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1RDXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1NSVVJMXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TUlVSTF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1NSVVJMXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0ZSVVJMXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19GUlVSTF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0ZSVVJMXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9HZXRJZGVudGl0eURraW1BdHRyaWJ1dGVzUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAoU3RyaW5nKG91dHB1dC5Ea2ltQXR0cmlidXRlcykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19EQV0gPSB7fTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19EQV0gIT0gbnVsbCAmJiBvdXRwdXRbX0RBXVtfZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfREFdID0gZGVfRGtpbUF0dHJpYnV0ZXMoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0RBXVtfZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0dldElkZW50aXR5TWFpbEZyb21Eb21haW5BdHRyaWJ1dGVzUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAoU3RyaW5nKG91dHB1dC5NYWlsRnJvbURvbWFpbkF0dHJpYnV0ZXMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfTUZEQV0gPSB7fTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19NRkRBXSAhPSBudWxsICYmIG91dHB1dFtfTUZEQV1bX2VdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01GREFdID0gZGVfTWFpbEZyb21Eb21haW5BdHRyaWJ1dGVzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19NRkRBXVtfZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0dldElkZW50aXR5Tm90aWZpY2F0aW9uQXR0cmlidXRlc1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuTm90aWZpY2F0aW9uQXR0cmlidXRlcykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19OQV0gPSB7fTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19OQV0gIT0gbnVsbCAmJiBvdXRwdXRbX05BXVtfZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTkFdID0gZGVfTm90aWZpY2F0aW9uQXR0cmlidXRlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfTkFdW19lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfR2V0SWRlbnRpdHlQb2xpY2llc1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuUG9saWNpZXMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfUG9dID0ge307XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfUG9dICE9IG51bGwgJiYgb3V0cHV0W19Qb11bX2VdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1BvXSA9IGRlX1BvbGljeU1hcChfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfUG9dW19lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfR2V0SWRlbnRpdHlWZXJpZmljYXRpb25BdHRyaWJ1dGVzUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAoU3RyaW5nKG91dHB1dC5WZXJpZmljYXRpb25BdHRyaWJ1dGVzKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX1ZBXSA9IHt9O1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX1ZBXSAhPSBudWxsICYmIG91dHB1dFtfVkFdW19lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19WQV0gPSBkZV9WZXJpZmljYXRpb25BdHRyaWJ1dGVzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19WQV1bX2VdKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9HZXRTZW5kUXVvdGFSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX01IU10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTUhTXSA9IF9fc3RyaWN0UGFyc2VGbG9hdChvdXRwdXRbX01IU10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19NU1JdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01TUl0gPSBfX3N0cmljdFBhcnNlRmxvYXQob3V0cHV0W19NU1JdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU0xIXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TTEhdID0gX19zdHJpY3RQYXJzZUZsb2F0KG91dHB1dFtfU0xIXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9HZXRTZW5kU3RhdGlzdGljc1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuU2VuZERhdGFQb2ludHMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfU0RQXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX1NEUF0gIT0gbnVsbCAmJiBvdXRwdXRbX1NEUF1bX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TRFBdID0gZGVfU2VuZERhdGFQb2ludExpc3QoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX1NEUF1bX21lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfR2V0VGVtcGxhdGVSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1RlXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UZV0gPSBkZV9UZW1wbGF0ZShvdXRwdXRbX1RlXSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JZGVudGl0eURraW1BdHRyaWJ1dGVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfREVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RFXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfREVdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRFZTa10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRFZTa10gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0RWU2tdKTtcbiAgICB9XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuRGtpbVRva2VucykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19EVGtdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfRFRrXSAhPSBudWxsICYmIG91dHB1dFtfRFRrXVtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RUa10gPSBkZV9WZXJpZmljYXRpb25Ub2tlbkxpc3QoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0RUa11bX21lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfSWRlbnRpdHlMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2V4cGVjdFN0cmluZyhlbnRyeSk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfSWRlbnRpdHlNYWlsRnJvbURvbWFpbkF0dHJpYnV0ZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19NRkRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01GRF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX01GRF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19NRkRTXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NRkRTXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTUZEU10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19CT01YRl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQk9NWEZdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19CT01YRl0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfSWRlbnRpdHlOb3RpZmljYXRpb25BdHRyaWJ1dGVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQlRvXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19CVG9dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19CVG9dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfQ1RvXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19DVG9dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19DVG9dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRFRlbF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRFRlbF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0RUZWxdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRkVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZFXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfRkVdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfSElCTkVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0hJQk5FXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfSElCTkVdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfSElDTkVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0hJQ05FXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfSElDTkVdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfSElETkVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0hJRE5FXSA9IF9fcGFyc2VCb29sZWFuKG91dHB1dFtfSElETkVdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0lkZW50aXR5VmVyaWZpY2F0aW9uQXR0cmlidXRlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1ZTXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19WU10gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1ZTXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1ZUXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19WVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1ZUXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JbnZhbGlkQ2xvdWRXYXRjaERlc3RpbmF0aW9uRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19DU05dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19DU05dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRUROXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19FRE5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19FRE5dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0ludmFsaWRDb25maWd1cmF0aW9uU2V0RXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0ludmFsaWREZWxpdmVyeU9wdGlvbnNFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfSW52YWxpZEZpcmVob3NlRGVzdGluYXRpb25FeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NTTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0NTTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19FRE5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0VETl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0VETl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfSW52YWxpZExhbWJkYUZ1bmN0aW9uRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfRkFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZBXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRkFdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0ludmFsaWRQb2xpY3lFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfSW52YWxpZFJlbmRlcmluZ1BhcmFtZXRlckV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1ROXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1ROXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JbnZhbGlkUzNDb25maWd1cmF0aW9uRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQnVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0J1XSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQnVdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0ludmFsaWRTTlNEZXN0aW5hdGlvbkV4Y2VwdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX0NTTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ1NOXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfQ1NOXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0VETl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRUROXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRUROXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9JbnZhbGlkU25zVG9waWNFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19Ub10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVG9dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19Ub10pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfSW52YWxpZFRlbXBsYXRlRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfVE5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1ROXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVE5dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0ludmFsaWRUcmFja2luZ09wdGlvbnNFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfS2luZXNpc0ZpcmVob3NlRGVzdGluYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19JQU1SQVJOXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19JQU1SQVJOXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfSUFNUkFSTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19EU0FSTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRFNBUk5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19EU0FSTl0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTGFtYmRhQWN0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfVEFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1RBXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVEFdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfRkFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0ZBXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfRkFdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfSVRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0lUXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfSVRdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0xpbWl0RXhjZWVkZWRFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTGlzdENvbmZpZ3VyYXRpb25TZXRzUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAoU3RyaW5nKG91dHB1dC5Db25maWd1cmF0aW9uU2V0cykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19DU29dID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfQ1NvXSAhPSBudWxsICYmIG91dHB1dFtfQ1NvXVtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NTb10gPSBkZV9Db25maWd1cmF0aW9uU2V0cyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfQ1NvXVtfbWVdKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05UXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9MaXN0Q3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZXNSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChTdHJpbmcob3V0cHV0LkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVzKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0NWRVRdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfQ1ZFVF0gIT0gbnVsbCAmJiBvdXRwdXRbX0NWRVRdW19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ1ZFVF0gPSBkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlcyhfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfQ1ZFVF1bX21lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTlRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OVF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTGlzdElkZW50aXRpZXNSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChTdHJpbmcob3V0cHV0LklkZW50aXRpZXMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfSWRdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfSWRdICE9IG51bGwgJiYgb3V0cHV0W19JZF1bX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19JZF0gPSBkZV9JZGVudGl0eUxpc3QoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0lkXVtfbWVdKSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX05UXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05UXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9MaXN0SWRlbnRpdHlQb2xpY2llc1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuUG9saWN5TmFtZXMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfUE5vXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX1BOb10gIT0gbnVsbCAmJiBvdXRwdXRbX1BOb11bX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19QTm9dID0gZGVfUG9saWN5TmFtZUxpc3QoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX1BOb11bX21lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTGlzdFJlY2VpcHRGaWx0ZXJzUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAoU3RyaW5nKG91dHB1dC5GaWx0ZXJzKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX0ZpXSA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChvdXRwdXRbX0ZpXSAhPSBudWxsICYmIG91dHB1dFtfRmldW19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfRmldID0gZGVfUmVjZWlwdEZpbHRlckxpc3QoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0ZpXVtfbWVdKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9MaXN0UmVjZWlwdFJ1bGVTZXRzUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAoU3RyaW5nKG91dHB1dC5SdWxlU2V0cykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19SU10gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19SU10gIT0gbnVsbCAmJiBvdXRwdXRbX1JTXVtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1JTXSA9IGRlX1JlY2VpcHRSdWxlU2V0c0xpc3RzKF9fZ2V0QXJyYXlJZlNpbmdsZUl0ZW0ob3V0cHV0W19SU11bX21lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19OVF0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTlRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OVF0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTGlzdFRlbXBsYXRlc1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuVGVtcGxhdGVzTWV0YWRhdGEpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfVE1dID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfVE1dICE9IG51bGwgJiYgb3V0cHV0W19UTV1bX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UTV0gPSBkZV9UZW1wbGF0ZU1ldGFkYXRhTGlzdChfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfVE1dW19tZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfTlRdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05UXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTlRdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0xpc3RWZXJpZmllZEVtYWlsQWRkcmVzc2VzUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAoU3RyaW5nKG91dHB1dC5WZXJpZmllZEVtYWlsQWRkcmVzc2VzKS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgY29udGVudHNbX1ZFQWVdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfVkVBZV0gIT0gbnVsbCAmJiBvdXRwdXRbX1ZFQWVdW19tZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVkVBZV0gPSBkZV9BZGRyZXNzTGlzdChfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfVkVBZV1bX21lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfTWFpbEZyb21Eb21haW5BdHRyaWJ1dGVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBvdXRwdXQucmVkdWNlKChhY2MsIHBhaXIpID0+IHtcbiAgICAgICAgaWYgKHBhaXJbXCJ2YWx1ZVwiXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgICAgICBhY2NbcGFpcltcImtleVwiXV0gPSBkZV9JZGVudGl0eU1haWxGcm9tRG9tYWluQXR0cmlidXRlcyhwYWlyW1widmFsdWVcIl0sIGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbn07XG5jb25zdCBkZV9NYWlsRnJvbURvbWFpbk5vdFZlcmlmaWVkRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX01lc3NhZ2VSZWplY3RlZCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX21dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX21dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19tXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9NaXNzaW5nUmVuZGVyaW5nQXR0cmlidXRlRXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfVE5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1ROXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVE5dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX05vdGlmaWNhdGlvbkF0dHJpYnV0ZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIG91dHB1dC5yZWR1Y2UoKGFjYywgcGFpcikgPT4ge1xuICAgICAgICBpZiAocGFpcltcInZhbHVlXCJdID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9XG4gICAgICAgIGFjY1twYWlyW1wia2V5XCJdXSA9IGRlX0lkZW50aXR5Tm90aWZpY2F0aW9uQXR0cmlidXRlcyhwYWlyW1widmFsdWVcIl0sIGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbn07XG5jb25zdCBkZV9Qb2xpY3lNYXAgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIG91dHB1dC5yZWR1Y2UoKGFjYywgcGFpcikgPT4ge1xuICAgICAgICBpZiAocGFpcltcInZhbHVlXCJdID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9XG4gICAgICAgIGFjY1twYWlyW1wia2V5XCJdXSA9IF9fZXhwZWN0U3RyaW5nKHBhaXJbXCJ2YWx1ZVwiXSk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xufTtcbmNvbnN0IGRlX1BvbGljeU5hbWVMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2V4cGVjdFN0cmluZyhlbnRyeSk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfUHJvZHVjdGlvbkFjY2Vzc05vdEdyYW50ZWRFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfUHV0Q29uZmlndXJhdGlvblNldERlbGl2ZXJ5T3B0aW9uc1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1B1dElkZW50aXR5UG9saWN5UmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfUmVjZWlwdEFjdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1NBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TQV0gPSBkZV9TM0FjdGlvbihvdXRwdXRbX1NBXSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0JBb10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQkFvXSA9IGRlX0JvdW5jZUFjdGlvbihvdXRwdXRbX0JBb10sIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19XQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfV0FdID0gZGVfV29ya21haWxBY3Rpb24ob3V0cHV0W19XQV0sIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19MQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTEFdID0gZGVfTGFtYmRhQWN0aW9uKG91dHB1dFtfTEFdLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU0F0XSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TQXRdID0gZGVfU3RvcEFjdGlvbihvdXRwdXRbX1NBdF0sIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19BSEFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FIQV0gPSBkZV9BZGRIZWFkZXJBY3Rpb24ob3V0cHV0W19BSEFdLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU05TQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfU05TQV0gPSBkZV9TTlNBY3Rpb24ob3V0cHV0W19TTlNBXSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0NBb10gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQ0FvXSA9IGRlX0Nvbm5lY3RBY3Rpb24ob3V0cHV0W19DQW9dLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1JlY2VpcHRBY3Rpb25zTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfUmVjZWlwdEFjdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfUmVjZWlwdEZpbHRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0lGXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19JRl0gPSBkZV9SZWNlaXB0SXBGaWx0ZXIob3V0cHV0W19JRl0sIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfUmVjZWlwdEZpbHRlckxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX1JlY2VpcHRGaWx0ZXIoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX1JlY2VpcHRJcEZpbHRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1BdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1BdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19QXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0NpXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19DaV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0NpXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9SZWNlaXB0UnVsZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX05dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19OXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0VdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0VdID0gX19wYXJzZUJvb2xlYW4ob3V0cHV0W19FXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1RQXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UUF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1RQXSk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcob3V0cHV0LlJlY2lwaWVudHMpLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICBjb250ZW50c1tfUmVdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfUmVdICE9IG51bGwgJiYgb3V0cHV0W19SZV1bX21lXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19SZV0gPSBkZV9SZWNpcGllbnRzTGlzdChfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfUmVdW19tZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuQWN0aW9ucykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19BY10gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19BY10gIT0gbnVsbCAmJiBvdXRwdXRbX0FjXVtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0FjXSA9IGRlX1JlY2VpcHRBY3Rpb25zTGlzdChfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfQWNdW19tZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU0VjXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19TRWNdID0gX19wYXJzZUJvb2xlYW4ob3V0cHV0W19TRWNdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1JlY2VpcHRSdWxlU2V0TWV0YWRhdGEgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19DVHJdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NUcl0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19DVHJdKSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9SZWNlaXB0UnVsZVNldHNMaXN0cyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfUmVjZWlwdFJ1bGVTZXRNZXRhZGF0YShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfUmVjZWlwdFJ1bGVzTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfUmVjZWlwdFJ1bGUoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlX1JlY2lwaWVudHNMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2V4cGVjdFN0cmluZyhlbnRyeSk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfUmVvcmRlclJlY2VpcHRSdWxlU2V0UmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfUmVwdXRhdGlvbk9wdGlvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19TRWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NFZV0gPSBfX3BhcnNlQm9vbGVhbihvdXRwdXRbX1NFZV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19STUVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1JNRV0gPSBfX3BhcnNlQm9vbGVhbihvdXRwdXRbX1JNRV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19MRlNdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0xGU10gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19MRlNdKSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9SdWxlRG9lc05vdEV4aXN0RXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX05dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1J1bGVTZXREb2VzTm90RXhpc3RFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfUzNBY3Rpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19UQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVEFdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UQV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19CTl0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfQk5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19CTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19PS1BdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX09LUF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX09LUF0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19LS0FdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0tLQV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0tLQV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19JUkFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0lSQV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0lSQV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfU2VuZEJvdW5jZVJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTUllXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NSWVdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19NSWVdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1NlbmRCdWxrVGVtcGxhdGVkRW1haWxSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChTdHJpbmcob3V0cHV0LlN0YXR1cykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19TdF0gPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0cHV0W19TdF0gIT0gbnVsbCAmJiBvdXRwdXRbX1N0XVtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1N0XSA9IGRlX0J1bGtFbWFpbERlc3RpbmF0aW9uU3RhdHVzTGlzdChfX2dldEFycmF5SWZTaW5nbGVJdGVtKG91dHB1dFtfU3RdW19tZV0pLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1NlbmRDdXN0b21WZXJpZmljYXRpb25FbWFpbFJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfTUllXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19NSWVdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19NSWVdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1NlbmREYXRhUG9pbnQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19UaV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVGldID0gX19leHBlY3ROb25OdWxsKF9fcGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0KG91dHB1dFtfVGldKSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0RBZV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfREFlXSA9IF9fc3RyaWN0UGFyc2VMb25nKG91dHB1dFtfREFlXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0JvXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19Cb10gPSBfX3N0cmljdFBhcnNlTG9uZyhvdXRwdXRbX0JvXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0NvXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19Db10gPSBfX3N0cmljdFBhcnNlTG9uZyhvdXRwdXRbX0NvXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX1Jlal0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfUmVqXSA9IF9fc3RyaWN0UGFyc2VMb25nKG91dHB1dFtfUmVqXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9TZW5kRGF0YVBvaW50TGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfU2VuZERhdGFQb2ludChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2VuZEVtYWlsUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19NSWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01JZV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX01JZV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfU2VuZFJhd0VtYWlsUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19NSWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01JZV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX01JZV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfU2VuZFRlbXBsYXRlZEVtYWlsUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19NSWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX01JZV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX01JZV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfU2V0QWN0aXZlUmVjZWlwdFJ1bGVTZXRSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9TZXRJZGVudGl0eURraW1FbmFibGVkUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfU2V0SWRlbnRpdHlGZWVkYmFja0ZvcndhcmRpbmdFbmFibGVkUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfU2V0SWRlbnRpdHlIZWFkZXJzSW5Ob3RpZmljYXRpb25zRW5hYmxlZFJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1NldElkZW50aXR5TWFpbEZyb21Eb21haW5SZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9TZXRJZGVudGl0eU5vdGlmaWNhdGlvblRvcGljUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfU2V0UmVjZWlwdFJ1bGVQb3NpdGlvblJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1NOU0FjdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1RBXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UQV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1RBXSk7XG4gICAgfVxuICAgIGlmIChvdXRwdXRbX0VuXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19Fbl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0VuXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9TTlNEZXN0aW5hdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1RBUk5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1RBUk5dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UQVJOXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9TdG9wQWN0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfU2NdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NjXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU2NdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfVEFdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1RBXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVEFdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1RlbXBsYXRlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfVE5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1ROXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVE5dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfU1BdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1NQXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfU1BdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfVFBlXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19UUGVdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UUGVdKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfSFBdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0hQXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfSFBdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1RlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfVE5dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1ROXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfVE5dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1RlbXBsYXRlTWV0YWRhdGEgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19OXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19OXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19DVHJdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NUcl0gPSBfX2V4cGVjdE5vbk51bGwoX19wYXJzZVJmYzMzMzlEYXRlVGltZVdpdGhPZmZzZXQob3V0cHV0W19DVHJdKSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9UZW1wbGF0ZU1ldGFkYXRhTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfVGVtcGxhdGVNZXRhZGF0YShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGVzdFJlbmRlclRlbXBsYXRlUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19SVGVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX1JUZV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1JUZV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfVHJhY2tpbmdPcHRpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQ1JEXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19DUkRdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19DUkRdKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1RyYWNraW5nT3B0aW9uc0FscmVhZHlFeGlzdHNFeGNlcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19DU05dICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0NTTl0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX0NTTl0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19tXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19tXSA9IF9fZXhwZWN0U3RyaW5nKG91dHB1dFtfbV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfVHJhY2tpbmdPcHRpb25zRG9lc05vdEV4aXN0RXhjZXB0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKG91dHB1dFtfQ1NOXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19DU05dID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19DU05dKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dFtfbV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfbV0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX21dKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1VwZGF0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfVXBkYXRlQ29uZmlndXJhdGlvblNldFRyYWNraW5nT3B0aW9uc1Jlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX1VwZGF0ZVJlY2VpcHRSdWxlUmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfVXBkYXRlVGVtcGxhdGVSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9WZXJpZmljYXRpb25BdHRyaWJ1dGVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBvdXRwdXQucmVkdWNlKChhY2MsIHBhaXIpID0+IHtcbiAgICAgICAgaWYgKHBhaXJbXCJ2YWx1ZVwiXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgICAgICBhY2NbcGFpcltcImtleVwiXV0gPSBkZV9JZGVudGl0eVZlcmlmaWNhdGlvbkF0dHJpYnV0ZXMocGFpcltcInZhbHVlXCJdLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG59O1xuY29uc3QgZGVfVmVyaWZpY2F0aW9uVG9rZW5MaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2V4cGVjdFN0cmluZyhlbnRyeSk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVfVmVyaWZ5RG9tYWluRGtpbVJlc3BvbnNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0ge307XG4gICAgaWYgKFN0cmluZyhvdXRwdXQuRGtpbVRva2VucykudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgIGNvbnRlbnRzW19EVGtdID0gW107XG4gICAgfVxuICAgIGVsc2UgaWYgKG91dHB1dFtfRFRrXSAhPSBudWxsICYmIG91dHB1dFtfRFRrXVtfbWVdICE9IG51bGwpIHtcbiAgICAgICAgY29udGVudHNbX0RUa10gPSBkZV9WZXJpZmljYXRpb25Ub2tlbkxpc3QoX19nZXRBcnJheUlmU2luZ2xlSXRlbShvdXRwdXRbX0RUa11bX21lXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfVmVyaWZ5RG9tYWluSWRlbnRpdHlSZXNwb25zZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IHt9O1xuICAgIGlmIChvdXRwdXRbX1ZUXSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRlbnRzW19WVF0gPSBfX2V4cGVjdFN0cmluZyhvdXRwdXRbX1ZUXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50cztcbn07XG5jb25zdCBkZV9WZXJpZnlFbWFpbElkZW50aXR5UmVzcG9uc2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVfV29ya21haWxBY3Rpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSB7fTtcbiAgICBpZiAob3V0cHV0W19UQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfVEFdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19UQV0pO1xuICAgIH1cbiAgICBpZiAob3V0cHV0W19PQV0gIT0gbnVsbCkge1xuICAgICAgICBjb250ZW50c1tfT0FdID0gX19leHBlY3RTdHJpbmcob3V0cHV0W19PQV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuY29uc3QgZGVzZXJpYWxpemVNZXRhZGF0YSA9IChvdXRwdXQpID0+ICh7XG4gICAgaHR0cFN0YXR1c0NvZGU6IG91dHB1dC5zdGF0dXNDb2RlLFxuICAgIHJlcXVlc3RJZDogb3V0cHV0LmhlYWRlcnNbXCJ4LWFtem4tcmVxdWVzdGlkXCJdID8/IG91dHB1dC5oZWFkZXJzW1wieC1hbXpuLXJlcXVlc3QtaWRcIl0gPz8gb3V0cHV0LmhlYWRlcnNbXCJ4LWFtei1yZXF1ZXN0LWlkXCJdLFxuICAgIGV4dGVuZGVkUmVxdWVzdElkOiBvdXRwdXQuaGVhZGVyc1tcIngtYW16LWlkLTJcIl0sXG4gICAgY2ZJZDogb3V0cHV0LmhlYWRlcnNbXCJ4LWFtei1jZi1pZFwiXSxcbn0pO1xuY29uc3QgY29sbGVjdEJvZHlTdHJpbmcgPSAoc3RyZWFtQm9keSwgY29udGV4dCkgPT4gY29sbGVjdEJvZHkoc3RyZWFtQm9keSwgY29udGV4dCkudGhlbigoYm9keSkgPT4gY29udGV4dC51dGY4RW5jb2Rlcihib2R5KSk7XG5jb25zdCB0aHJvd0RlZmF1bHRFcnJvciA9IHdpdGhCYXNlRXhjZXB0aW9uKF9fQmFzZUV4Y2VwdGlvbik7XG5jb25zdCBidWlsZEh0dHBScGNSZXF1ZXN0ID0gYXN5bmMgKGNvbnRleHQsIGhlYWRlcnMsIHBhdGgsIHJlc29sdmVkSG9zdG5hbWUsIGJvZHkpID0+IHtcbiAgICBjb25zdCB7IGhvc3RuYW1lLCBwcm90b2NvbCA9IFwiaHR0cHNcIiwgcG9ydCwgcGF0aDogYmFzZVBhdGggfSA9IGF3YWl0IGNvbnRleHQuZW5kcG9pbnQoKTtcbiAgICBjb25zdCBjb250ZW50cyA9IHtcbiAgICAgICAgcHJvdG9jb2wsXG4gICAgICAgIGhvc3RuYW1lLFxuICAgICAgICBwb3J0LFxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBwYXRoOiBiYXNlUGF0aC5lbmRzV2l0aChcIi9cIikgPyBiYXNlUGF0aC5zbGljZSgwLCAtMSkgKyBwYXRoIDogYmFzZVBhdGggKyBwYXRoLFxuICAgICAgICBoZWFkZXJzLFxuICAgIH07XG4gICAgaWYgKHJlc29sdmVkSG9zdG5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250ZW50cy5ob3N0bmFtZSA9IHJlc29sdmVkSG9zdG5hbWU7XG4gICAgfVxuICAgIGlmIChib2R5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29udGVudHMuYm9keSA9IGJvZHk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgX19IdHRwUmVxdWVzdChjb250ZW50cyk7XG59O1xuY29uc3QgU0hBUkVEX0hFQURFUlMgPSB7XG4gICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbn07XG5jb25zdCBfID0gXCIyMDEwLTEyLTAxXCI7XG5jb25zdCBfQSA9IFwiQWN0aW9uXCI7XG5jb25zdCBfQUQgPSBcIkFycml2YWxEYXRlXCI7XG5jb25zdCBfQUhBID0gXCJBZGRIZWFkZXJBY3Rpb25cIjtcbmNvbnN0IF9BYyA9IFwiQWN0aW9uc1wiO1xuY29uc3QgX0FmID0gXCJBZnRlclwiO1xuY29uc3QgX0IgPSBcIkJvZHlcIjtcbmNvbnN0IF9CQSA9IFwiQmNjQWRkcmVzc2VzXCI7XG5jb25zdCBfQkFvID0gXCJCb3VuY2VBY3Rpb25cIjtcbmNvbnN0IF9CTiA9IFwiQnVja2V0TmFtZVwiO1xuY29uc3QgX0JPTVhGID0gXCJCZWhhdmlvck9uTVhGYWlsdXJlXCI7XG5jb25zdCBfQlJJTCA9IFwiQm91bmNlZFJlY2lwaWVudEluZm9MaXN0XCI7XG5jb25zdCBfQlMgPSBcIkJvdW5jZVNlbmRlclwiO1xuY29uc3QgX0JTQSA9IFwiQm91bmNlU2VuZGVyQXJuXCI7XG5jb25zdCBfQlQgPSBcIkJvdW5jZVR5cGVcIjtcbmNvbnN0IF9CVG8gPSBcIkJvdW5jZVRvcGljXCI7XG5jb25zdCBfQm8gPSBcIkJvdW5jZXNcIjtcbmNvbnN0IF9CdSA9IFwiQnVja2V0XCI7XG5jb25zdCBfQyA9IFwiQ2hhcnNldFwiO1xuY29uc3QgX0NBID0gXCJDY0FkZHJlc3Nlc1wiO1xuY29uc3QgX0NBbyA9IFwiQ29ubmVjdEFjdGlvblwiO1xuY29uc3QgX0NDUyA9IFwiQ3JlYXRlQ29uZmlndXJhdGlvblNldFwiO1xuY29uc3QgX0NDU0VEID0gXCJDcmVhdGVDb25maWd1cmF0aW9uU2V0RXZlbnREZXN0aW5hdGlvblwiO1xuY29uc3QgX0NDU1RPID0gXCJDcmVhdGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zXCI7XG5jb25zdCBfQ0NWRVQgPSBcIkNyZWF0ZUN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVcIjtcbmNvbnN0IF9DUkQgPSBcIkN1c3RvbVJlZGlyZWN0RG9tYWluXCI7XG5jb25zdCBfQ1JGID0gXCJDcmVhdGVSZWNlaXB0RmlsdGVyXCI7XG5jb25zdCBfQ1JSID0gXCJDcmVhdGVSZWNlaXB0UnVsZVwiO1xuY29uc3QgX0NSUlMgPSBcIkNsb25lUmVjZWlwdFJ1bGVTZXRcIjtcbmNvbnN0IF9DUlJTciA9IFwiQ3JlYXRlUmVjZWlwdFJ1bGVTZXRcIjtcbmNvbnN0IF9DUyA9IFwiQ29uZmlndXJhdGlvblNldFwiO1xuY29uc3QgX0NTQU4gPSBcIkNvbmZpZ3VyYXRpb25TZXRBdHRyaWJ1dGVOYW1lc1wiO1xuY29uc3QgX0NTTiA9IFwiQ29uZmlndXJhdGlvblNldE5hbWVcIjtcbmNvbnN0IF9DU28gPSBcIkNvbmZpZ3VyYXRpb25TZXRzXCI7XG5jb25zdCBfQ1QgPSBcIkNyZWF0ZVRlbXBsYXRlXCI7XG5jb25zdCBfQ1RvID0gXCJDb21wbGFpbnRUb3BpY1wiO1xuY29uc3QgX0NUciA9IFwiQ3JlYXRlZFRpbWVzdGFtcFwiO1xuY29uc3QgX0NWRVQgPSBcIkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVzXCI7XG5jb25zdCBfQ1ZFVE4gPSBcIkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVOYW1lXCI7XG5jb25zdCBfQ1dEID0gXCJDbG91ZFdhdGNoRGVzdGluYXRpb25cIjtcbmNvbnN0IF9DaSA9IFwiQ2lkclwiO1xuY29uc3QgX0NvID0gXCJDb21wbGFpbnRzXCI7XG5jb25zdCBfRCA9IFwiRGVzdGluYXRpb25cIjtcbmNvbnN0IF9EQSA9IFwiRGtpbUF0dHJpYnV0ZXNcIjtcbmNvbnN0IF9EQVJSUyA9IFwiRGVzY3JpYmVBY3RpdmVSZWNlaXB0UnVsZVNldFwiO1xuY29uc3QgX0RBZSA9IFwiRGVsaXZlcnlBdHRlbXB0c1wiO1xuY29uc3QgX0RDID0gXCJEaW1lbnNpb25Db25maWd1cmF0aW9uc1wiO1xuY29uc3QgX0RDUyA9IFwiRGVsZXRlQ29uZmlndXJhdGlvblNldFwiO1xuY29uc3QgX0RDU0VEID0gXCJEZWxldGVDb25maWd1cmF0aW9uU2V0RXZlbnREZXN0aW5hdGlvblwiO1xuY29uc3QgX0RDU1RPID0gXCJEZWxldGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zXCI7XG5jb25zdCBfRENTZSA9IFwiRGVzY3JpYmVDb25maWd1cmF0aW9uU2V0XCI7XG5jb25zdCBfRENWRVQgPSBcIkRlbGV0ZUN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVcIjtcbmNvbnN0IF9EQ2kgPSBcIkRpYWdub3N0aWNDb2RlXCI7XG5jb25zdCBfRERWID0gXCJEZWZhdWx0RGltZW5zaW9uVmFsdWVcIjtcbmNvbnN0IF9ERSA9IFwiRGtpbUVuYWJsZWRcIjtcbmNvbnN0IF9ESSA9IFwiRGVsZXRlSWRlbnRpdHlcIjtcbmNvbnN0IF9ESVAgPSBcIkRlbGV0ZUlkZW50aXR5UG9saWN5XCI7XG5jb25zdCBfRE4gPSBcIkRpbWVuc2lvbk5hbWVcIjtcbmNvbnN0IF9ETyA9IFwiRGVsaXZlcnlPcHRpb25zXCI7XG5jb25zdCBfRFJGID0gXCJEZWxldGVSZWNlaXB0RmlsdGVyXCI7XG5jb25zdCBfRFJSID0gXCJEZWxldGVSZWNlaXB0UnVsZVwiO1xuY29uc3QgX0RSUlMgPSBcIkRlbGV0ZVJlY2VpcHRSdWxlU2V0XCI7XG5jb25zdCBfRFJSU2UgPSBcIkRlc2NyaWJlUmVjZWlwdFJ1bGVTZXRcIjtcbmNvbnN0IF9EUlJlID0gXCJEZXNjcmliZVJlY2VpcHRSdWxlXCI7XG5jb25zdCBfRFNBUk4gPSBcIkRlbGl2ZXJ5U3RyZWFtQVJOXCI7XG5jb25zdCBfRFQgPSBcIkRlbGV0ZVRlbXBsYXRlXCI7XG5jb25zdCBfRFREID0gXCJEZWZhdWx0VGVtcGxhdGVEYXRhXCI7XG5jb25zdCBfRFRlID0gXCJEZWZhdWx0VGFnc1wiO1xuY29uc3QgX0RUZWwgPSBcIkRlbGl2ZXJ5VG9waWNcIjtcbmNvbnN0IF9EVGsgPSBcIkRraW1Ub2tlbnNcIjtcbmNvbnN0IF9EVkVBID0gXCJEZWxldGVWZXJpZmllZEVtYWlsQWRkcmVzc1wiO1xuY29uc3QgX0RWUyA9IFwiRGltZW5zaW9uVmFsdWVTb3VyY2VcIjtcbmNvbnN0IF9EVlNrID0gXCJEa2ltVmVyaWZpY2F0aW9uU3RhdHVzXCI7XG5jb25zdCBfRGEgPSBcIkRhdGFcIjtcbmNvbnN0IF9EZSA9IFwiRGVzdGluYXRpb25zXCI7XG5jb25zdCBfRG8gPSBcIkRvbWFpblwiO1xuY29uc3QgX0UgPSBcIkVuYWJsZWRcIjtcbmNvbnN0IF9FQSA9IFwiRW1haWxBZGRyZXNzXCI7XG5jb25zdCBfRUQgPSBcIkV2ZW50RGVzdGluYXRpb25cIjtcbmNvbnN0IF9FRE4gPSBcIkV2ZW50RGVzdGluYXRpb25OYW1lXCI7XG5jb25zdCBfRUR2ID0gXCJFdmVudERlc3RpbmF0aW9uc1wiO1xuY29uc3QgX0VGID0gXCJFeHRlbnNpb25GaWVsZHNcIjtcbmNvbnN0IF9FbiA9IFwiRW5jb2RpbmdcIjtcbmNvbnN0IF9FciA9IFwiRXJyb3JcIjtcbmNvbnN0IF9FeCA9IFwiRXhwbGFuYXRpb25cIjtcbmNvbnN0IF9GID0gXCJGaWx0ZXJcIjtcbmNvbnN0IF9GQSA9IFwiRnVuY3Rpb25Bcm5cIjtcbmNvbnN0IF9GQXIgPSBcIkZyb21Bcm5cIjtcbmNvbnN0IF9GRSA9IFwiRm9yd2FyZGluZ0VuYWJsZWRcIjtcbmNvbnN0IF9GRUEgPSBcIkZyb21FbWFpbEFkZHJlc3NcIjtcbmNvbnN0IF9GTiA9IFwiRmlsdGVyTmFtZVwiO1xuY29uc3QgX0ZSID0gXCJGaW5hbFJlY2lwaWVudFwiO1xuY29uc3QgX0ZSVVJMID0gXCJGYWlsdXJlUmVkaXJlY3Rpb25VUkxcIjtcbmNvbnN0IF9GaSA9IFwiRmlsdGVyc1wiO1xuY29uc3QgX0dBU0UgPSBcIkdldEFjY291bnRTZW5kaW5nRW5hYmxlZFwiO1xuY29uc3QgX0dDVkVUID0gXCJHZXRDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlXCI7XG5jb25zdCBfR0lEQSA9IFwiR2V0SWRlbnRpdHlEa2ltQXR0cmlidXRlc1wiO1xuY29uc3QgX0dJTUZEQSA9IFwiR2V0SWRlbnRpdHlNYWlsRnJvbURvbWFpbkF0dHJpYnV0ZXNcIjtcbmNvbnN0IF9HSU5BID0gXCJHZXRJZGVudGl0eU5vdGlmaWNhdGlvbkF0dHJpYnV0ZXNcIjtcbmNvbnN0IF9HSVAgPSBcIkdldElkZW50aXR5UG9saWNpZXNcIjtcbmNvbnN0IF9HSVZBID0gXCJHZXRJZGVudGl0eVZlcmlmaWNhdGlvbkF0dHJpYnV0ZXNcIjtcbmNvbnN0IF9HU1EgPSBcIkdldFNlbmRRdW90YVwiO1xuY29uc3QgX0dTUyA9IFwiR2V0U2VuZFN0YXRpc3RpY3NcIjtcbmNvbnN0IF9HVCA9IFwiR2V0VGVtcGxhdGVcIjtcbmNvbnN0IF9IID0gXCJIdG1sXCI7XG5jb25zdCBfSElCTkUgPSBcIkhlYWRlcnNJbkJvdW5jZU5vdGlmaWNhdGlvbnNFbmFibGVkXCI7XG5jb25zdCBfSElDTkUgPSBcIkhlYWRlcnNJbkNvbXBsYWludE5vdGlmaWNhdGlvbnNFbmFibGVkXCI7XG5jb25zdCBfSElETkUgPSBcIkhlYWRlcnNJbkRlbGl2ZXJ5Tm90aWZpY2F0aW9uc0VuYWJsZWRcIjtcbmNvbnN0IF9ITiA9IFwiSGVhZGVyTmFtZVwiO1xuY29uc3QgX0hQID0gXCJIdG1sUGFydFwiO1xuY29uc3QgX0hWID0gXCJIZWFkZXJWYWx1ZVwiO1xuY29uc3QgX0kgPSBcIklkZW50aXR5XCI7XG5jb25zdCBfSUFNUkFSTiA9IFwiSUFNUm9sZUFSTlwiO1xuY29uc3QgX0lBUk4gPSBcIkluc3RhbmNlQVJOXCI7XG5jb25zdCBfSUYgPSBcIklwRmlsdGVyXCI7XG5jb25zdCBfSVJBID0gXCJJYW1Sb2xlQXJuXCI7XG5jb25zdCBfSVQgPSBcIkludm9jYXRpb25UeXBlXCI7XG5jb25zdCBfSVRkID0gXCJJZGVudGl0eVR5cGVcIjtcbmNvbnN0IF9JZCA9IFwiSWRlbnRpdGllc1wiO1xuY29uc3QgX0tGRCA9IFwiS2luZXNpc0ZpcmVob3NlRGVzdGluYXRpb25cIjtcbmNvbnN0IF9LS0EgPSBcIkttc0tleUFyblwiO1xuY29uc3QgX0xBID0gXCJMYW1iZGFBY3Rpb25cIjtcbmNvbnN0IF9MQUQgPSBcIkxhc3RBdHRlbXB0RGF0ZVwiO1xuY29uc3QgX0xDUyA9IFwiTGlzdENvbmZpZ3VyYXRpb25TZXRzXCI7XG5jb25zdCBfTENWRVQgPSBcIkxpc3RDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlc1wiO1xuY29uc3QgX0xGUyA9IFwiTGFzdEZyZXNoU3RhcnRcIjtcbmNvbnN0IF9MSSA9IFwiTGlzdElkZW50aXRpZXNcIjtcbmNvbnN0IF9MSVAgPSBcIkxpc3RJZGVudGl0eVBvbGljaWVzXCI7XG5jb25zdCBfTFJGID0gXCJMaXN0UmVjZWlwdEZpbHRlcnNcIjtcbmNvbnN0IF9MUlJTID0gXCJMaXN0UmVjZWlwdFJ1bGVTZXRzXCI7XG5jb25zdCBfTFQgPSBcIkxpc3RUZW1wbGF0ZXNcIjtcbmNvbnN0IF9MVkVBID0gXCJMaXN0VmVyaWZpZWRFbWFpbEFkZHJlc3Nlc1wiO1xuY29uc3QgX00gPSBcIk1lc3NhZ2VcIjtcbmNvbnN0IF9NRCA9IFwiTWVzc2FnZURzblwiO1xuY29uc3QgX01FVCA9IFwiTWF0Y2hpbmdFdmVudFR5cGVzXCI7XG5jb25zdCBfTUZEID0gXCJNYWlsRnJvbURvbWFpblwiO1xuY29uc3QgX01GREEgPSBcIk1haWxGcm9tRG9tYWluQXR0cmlidXRlc1wiO1xuY29uc3QgX01GRFMgPSBcIk1haWxGcm9tRG9tYWluU3RhdHVzXCI7XG5jb25zdCBfTUhTID0gXCJNYXgyNEhvdXJTZW5kXCI7XG5jb25zdCBfTUkgPSBcIk1heEl0ZW1zXCI7XG5jb25zdCBfTUllID0gXCJNZXNzYWdlSWRcIjtcbmNvbnN0IF9NUiA9IFwiTWF4UmVzdWx0c1wiO1xuY29uc3QgX01TUiA9IFwiTWF4U2VuZFJhdGVcIjtcbmNvbnN0IF9NZSA9IFwiTWV0YWRhdGFcIjtcbmNvbnN0IF9OID0gXCJOYW1lXCI7XG5jb25zdCBfTkEgPSBcIk5vdGlmaWNhdGlvbkF0dHJpYnV0ZXNcIjtcbmNvbnN0IF9OVCA9IFwiTmV4dFRva2VuXCI7XG5jb25zdCBfTlRvID0gXCJOb3RpZmljYXRpb25UeXBlXCI7XG5jb25zdCBfT0EgPSBcIk9yZ2FuaXphdGlvbkFyblwiO1xuY29uc3QgX09LUCA9IFwiT2JqZWN0S2V5UHJlZml4XCI7XG5jb25zdCBfT01JID0gXCJPcmlnaW5hbE1lc3NhZ2VJZFwiO1xuY29uc3QgX09SU04gPSBcIk9yaWdpbmFsUnVsZVNldE5hbWVcIjtcbmNvbnN0IF9QID0gXCJQb2xpY3lcIjtcbmNvbnN0IF9QQ1NETyA9IFwiUHV0Q29uZmlndXJhdGlvblNldERlbGl2ZXJ5T3B0aW9uc1wiO1xuY29uc3QgX1BJUCA9IFwiUHV0SWRlbnRpdHlQb2xpY3lcIjtcbmNvbnN0IF9QTiA9IFwiUG9saWN5TmFtZVwiO1xuY29uc3QgX1BObyA9IFwiUG9saWN5TmFtZXNcIjtcbmNvbnN0IF9QbyA9IFwiUG9saWNpZXNcIjtcbmNvbnN0IF9SID0gXCJSZWNpcGllbnRcIjtcbmNvbnN0IF9SQSA9IFwiUmVjaXBpZW50QXJuXCI7XG5jb25zdCBfUkRGID0gXCJSZWNpcGllbnREc25GaWVsZHNcIjtcbmNvbnN0IF9STSA9IFwiUmVwb3J0aW5nTXRhXCI7XG5jb25zdCBfUk1FID0gXCJSZXB1dGF0aW9uTWV0cmljc0VuYWJsZWRcIjtcbmNvbnN0IF9STWEgPSBcIlJhd01lc3NhZ2VcIjtcbmNvbnN0IF9STWUgPSBcIlJlbW90ZU10YVwiO1xuY29uc3QgX1JOID0gXCJSdWxlTmFtZVwiO1xuY29uc3QgX1JOdSA9IFwiUnVsZU5hbWVzXCI7XG5jb25zdCBfUk8gPSBcIlJlcHV0YXRpb25PcHRpb25zXCI7XG5jb25zdCBfUlAgPSBcIlJldHVyblBhdGhcIjtcbmNvbnN0IF9SUEEgPSBcIlJldHVyblBhdGhBcm5cIjtcbmNvbnN0IF9SUlJTID0gXCJSZW9yZGVyUmVjZWlwdFJ1bGVTZXRcIjtcbmNvbnN0IF9SUyA9IFwiUnVsZVNldHNcIjtcbmNvbnN0IF9SU04gPSBcIlJ1bGVTZXROYW1lXCI7XG5jb25zdCBfUlQgPSBcIlJlcGxhY2VtZW50VGFnc1wiO1xuY29uc3QgX1JUQSA9IFwiUmVwbHlUb0FkZHJlc3Nlc1wiO1xuY29uc3QgX1JURCA9IFwiUmVwbGFjZW1lbnRUZW1wbGF0ZURhdGFcIjtcbmNvbnN0IF9SVGUgPSBcIlJlbmRlcmVkVGVtcGxhdGVcIjtcbmNvbnN0IF9SZSA9IFwiUmVjaXBpZW50c1wiO1xuY29uc3QgX1JlaiA9IFwiUmVqZWN0c1wiO1xuY29uc3QgX1J1ID0gXCJSdWxlXCI7XG5jb25zdCBfUnVsID0gXCJSdWxlc1wiO1xuY29uc3QgX1MgPSBcIlNlbmRlclwiO1xuY29uc3QgX1NBID0gXCJTM0FjdGlvblwiO1xuY29uc3QgX1NBUlJTID0gXCJTZXRBY3RpdmVSZWNlaXB0UnVsZVNldFwiO1xuY29uc3QgX1NBbyA9IFwiU291cmNlQXJuXCI7XG5jb25zdCBfU0F0ID0gXCJTdG9wQWN0aW9uXCI7XG5jb25zdCBfU0IgPSBcIlNlbmRCb3VuY2VcIjtcbmNvbnN0IF9TQlRFID0gXCJTZW5kQnVsa1RlbXBsYXRlZEVtYWlsXCI7XG5jb25zdCBfU0MgPSBcIlN0YXR1c0NvZGVcIjtcbmNvbnN0IF9TQ1ZFID0gXCJTZW5kQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxcIjtcbmNvbnN0IF9TRFAgPSBcIlNlbmREYXRhUG9pbnRzXCI7XG5jb25zdCBfU0UgPSBcIlNlbmRFbWFpbFwiO1xuY29uc3QgX1NFYyA9IFwiU2NhbkVuYWJsZWRcIjtcbmNvbnN0IF9TRWUgPSBcIlNlbmRpbmdFbmFibGVkXCI7XG5jb25zdCBfU0lERSA9IFwiU2V0SWRlbnRpdHlEa2ltRW5hYmxlZFwiO1xuY29uc3QgX1NJRkZFID0gXCJTZXRJZGVudGl0eUZlZWRiYWNrRm9yd2FyZGluZ0VuYWJsZWRcIjtcbmNvbnN0IF9TSUhJTkUgPSBcIlNldElkZW50aXR5SGVhZGVyc0luTm90aWZpY2F0aW9uc0VuYWJsZWRcIjtcbmNvbnN0IF9TSU1GRCA9IFwiU2V0SWRlbnRpdHlNYWlsRnJvbURvbWFpblwiO1xuY29uc3QgX1NJTlQgPSBcIlNldElkZW50aXR5Tm90aWZpY2F0aW9uVG9waWNcIjtcbmNvbnN0IF9TTEggPSBcIlNlbnRMYXN0MjRIb3Vyc1wiO1xuY29uc3QgX1NOU0EgPSBcIlNOU0FjdGlvblwiO1xuY29uc3QgX1NOU0QgPSBcIlNOU0Rlc3RpbmF0aW9uXCI7XG5jb25zdCBfU1AgPSBcIlN1YmplY3RQYXJ0XCI7XG5jb25zdCBfU1JDID0gXCJTbXRwUmVwbHlDb2RlXCI7XG5jb25zdCBfU1JFID0gXCJTZW5kUmF3RW1haWxcIjtcbmNvbnN0IF9TUlJQID0gXCJTZXRSZWNlaXB0UnVsZVBvc2l0aW9uXCI7XG5jb25zdCBfU1JVUkwgPSBcIlN1Y2Nlc3NSZWRpcmVjdGlvblVSTFwiO1xuY29uc3QgX1NUID0gXCJTbnNUb3BpY1wiO1xuY29uc3QgX1NURSA9IFwiU2VuZFRlbXBsYXRlZEVtYWlsXCI7XG5jb25zdCBfU2MgPSBcIlNjb3BlXCI7XG5jb25zdCBfU28gPSBcIlNvdXJjZVwiO1xuY29uc3QgX1N0ID0gXCJTdGF0dXNcIjtcbmNvbnN0IF9TdSA9IFwiU3ViamVjdFwiO1xuY29uc3QgX1QgPSBcIlRleHRcIjtcbmNvbnN0IF9UQSA9IFwiVG9waWNBcm5cIjtcbmNvbnN0IF9UQVJOID0gXCJUb3BpY0FSTlwiO1xuY29uc3QgX1RBZSA9IFwiVGVtcGxhdGVBcm5cIjtcbmNvbnN0IF9UQW8gPSBcIlRvQWRkcmVzc2VzXCI7XG5jb25zdCBfVEMgPSBcIlRlbXBsYXRlQ29udGVudFwiO1xuY29uc3QgX1REID0gXCJUZW1wbGF0ZURhdGFcIjtcbmNvbnN0IF9UTSA9IFwiVGVtcGxhdGVzTWV0YWRhdGFcIjtcbmNvbnN0IF9UTiA9IFwiVGVtcGxhdGVOYW1lXCI7XG5jb25zdCBfVE8gPSBcIlRyYWNraW5nT3B0aW9uc1wiO1xuY29uc3QgX1RQID0gXCJUbHNQb2xpY3lcIjtcbmNvbnN0IF9UUGUgPSBcIlRleHRQYXJ0XCI7XG5jb25zdCBfVFJUID0gXCJUZXN0UmVuZGVyVGVtcGxhdGVcIjtcbmNvbnN0IF9UUyA9IFwiVGVtcGxhdGVTdWJqZWN0XCI7XG5jb25zdCBfVGEgPSBcIlRhZ3NcIjtcbmNvbnN0IF9UZSA9IFwiVGVtcGxhdGVcIjtcbmNvbnN0IF9UaSA9IFwiVGltZXN0YW1wXCI7XG5jb25zdCBfVG8gPSBcIlRvcGljXCI7XG5jb25zdCBfVUFTRSA9IFwiVXBkYXRlQWNjb3VudFNlbmRpbmdFbmFibGVkXCI7XG5jb25zdCBfVUNTRUQgPSBcIlVwZGF0ZUNvbmZpZ3VyYXRpb25TZXRFdmVudERlc3RpbmF0aW9uXCI7XG5jb25zdCBfVUNTUk1FID0gXCJVcGRhdGVDb25maWd1cmF0aW9uU2V0UmVwdXRhdGlvbk1ldHJpY3NFbmFibGVkXCI7XG5jb25zdCBfVUNTU0UgPSBcIlVwZGF0ZUNvbmZpZ3VyYXRpb25TZXRTZW5kaW5nRW5hYmxlZFwiO1xuY29uc3QgX1VDU1RPID0gXCJVcGRhdGVDb25maWd1cmF0aW9uU2V0VHJhY2tpbmdPcHRpb25zXCI7XG5jb25zdCBfVUNWRVQgPSBcIlVwZGF0ZUN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVcIjtcbmNvbnN0IF9VUlIgPSBcIlVwZGF0ZVJlY2VpcHRSdWxlXCI7XG5jb25zdCBfVVQgPSBcIlVwZGF0ZVRlbXBsYXRlXCI7XG5jb25zdCBfViA9IFwiVmVyc2lvblwiO1xuY29uc3QgX1ZBID0gXCJWZXJpZmljYXRpb25BdHRyaWJ1dGVzXCI7XG5jb25zdCBfVkREID0gXCJWZXJpZnlEb21haW5Ea2ltXCI7XG5jb25zdCBfVkRJID0gXCJWZXJpZnlEb21haW5JZGVudGl0eVwiO1xuY29uc3QgX1ZFQSA9IFwiVmVyaWZ5RW1haWxBZGRyZXNzXCI7XG5jb25zdCBfVkVBZSA9IFwiVmVyaWZpZWRFbWFpbEFkZHJlc3Nlc1wiO1xuY29uc3QgX1ZFSSA9IFwiVmVyaWZ5RW1haWxJZGVudGl0eVwiO1xuY29uc3QgX1ZTID0gXCJWZXJpZmljYXRpb25TdGF0dXNcIjtcbmNvbnN0IF9WVCA9IFwiVmVyaWZpY2F0aW9uVG9rZW5cIjtcbmNvbnN0IF9WYSA9IFwiVmFsdWVcIjtcbmNvbnN0IF9XQSA9IFwiV29ya21haWxBY3Rpb25cIjtcbmNvbnN0IF9lID0gXCJlbnRyeVwiO1xuY29uc3QgX20gPSBcIm1lc3NhZ2VcIjtcbmNvbnN0IF9tZSA9IFwibWVtYmVyXCI7XG5jb25zdCBidWlsZEZvcm1VcmxlbmNvZGVkU3RyaW5nID0gKGZvcm1FbnRyaWVzKSA9PiBPYmplY3QuZW50cmllcyhmb3JtRW50cmllcylcbiAgICAubWFwKChba2V5LCB2YWx1ZV0pID0+IF9fZXh0ZW5kZWRFbmNvZGVVUklDb21wb25lbnQoa2V5KSArIFwiPVwiICsgX19leHRlbmRlZEVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgLmpvaW4oXCImXCIpO1xuY29uc3QgbG9hZFF1ZXJ5RXJyb3JDb2RlID0gKG91dHB1dCwgZGF0YSkgPT4ge1xuICAgIGlmIChkYXRhLkVycm9yPy5Db2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuRXJyb3IuQ29kZTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlID09IDQwNCkge1xuICAgICAgICByZXR1cm4gXCJOb3RGb3VuZFwiO1xuICAgIH1cbn07XG4iLCJpbXBvcnQgeyBnZXRFbmRwb2ludFBsdWdpbiB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtZW5kcG9pbnRcIjtcbmltcG9ydCB7IGdldFNlcmRlUGx1Z2luIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1zZXJkZVwiO1xuaW1wb3J0IHsgQ29tbWFuZCBhcyAkQ29tbWFuZCB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IGNvbW1vblBhcmFtcyB9IGZyb20gXCIuLi9lbmRwb2ludC9FbmRwb2ludFBhcmFtZXRlcnNcIjtcbmltcG9ydCB7IGRlX1NlbmRFbWFpbENvbW1hbmQsIHNlX1NlbmRFbWFpbENvbW1hbmQgfSBmcm9tIFwiLi4vcHJvdG9jb2xzL0F3c19xdWVyeVwiO1xuZXhwb3J0IHsgJENvbW1hbmQgfTtcbmV4cG9ydCBjbGFzcyBTZW5kRW1haWxDb21tYW5kIGV4dGVuZHMgJENvbW1hbmRcbiAgICAuY2xhc3NCdWlsZGVyKClcbiAgICAuZXAoY29tbW9uUGFyYW1zKVxuICAgIC5tKGZ1bmN0aW9uIChDb21tYW5kLCBjcywgY29uZmlnLCBvKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgZ2V0U2VyZGVQbHVnaW4oY29uZmlnLCB0aGlzLnNlcmlhbGl6ZSwgdGhpcy5kZXNlcmlhbGl6ZSksXG4gICAgICAgIGdldEVuZHBvaW50UGx1Z2luKGNvbmZpZywgQ29tbWFuZC5nZXRFbmRwb2ludFBhcmFtZXRlckluc3RydWN0aW9ucygpKSxcbiAgICBdO1xufSlcbiAgICAucyhcIlNpbXBsZUVtYWlsU2VydmljZVwiLCBcIlNlbmRFbWFpbFwiLCB7fSlcbiAgICAubihcIlNFU0NsaWVudFwiLCBcIlNlbmRFbWFpbENvbW1hbmRcIilcbiAgICAuZih2b2lkIDAsIHZvaWQgMClcbiAgICAuc2VyKHNlX1NlbmRFbWFpbENvbW1hbmQpXG4gICAgLmRlKGRlX1NlbmRFbWFpbENvbW1hbmQpXG4gICAgLmJ1aWxkKCkge1xufVxuIiwiaW1wb3J0IHsgVXNlciB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1xdWlja3NpZ2h0J1xuXG5leHBvcnQgY2xhc3MgUXVpY2tTaWdodFVzZXIge1xuXHRhcm46IHN0cmluZyAvLyBhcm46YXdzOnF1aWNrc2lnaHQ6PFJFR0lPTj46PEFDQ09VTlQ+OnVzZXIvZGVmYXVsdC88SUFNIFJPTEUgTkFNRT4vPFNUUyBTRVNTSU9OPlxuXHRlbWFpbDogc3RyaW5nXG5cdGxhc3RBY2Nlc3M6IERhdGUgLy8gQ29tZXMgZnJvbSBDbG91ZFRyYWlsXG5cdHJvbGU6IFF1aWNrU2lnaHRSb2xlXG5cdHVzZXJuYW1lOiBzdHJpbmcgLy8gPElBTSBST0xFPi88U1RTIFNFU1NJT04+XG5cdGlhbVJvbGU6IHN0cmluZ1xuXHRzdHNTZXNzaW9uOiBzdHJpbmdcblx0aW52YWxpZDogYm9vbGVhbiAvLyBVc2VyIGlzIGludmFsaWQgaWYgdXNlcm5hbWUgaXMgXCJOL0FcIi4gU2VlIFJFQURNRS5tZCBmb3IgbW9yZSBkZXRhaWxzXG5cblx0Y29uc3RydWN0b3IocXVpY2tTaWdodFVzZXI6IFVzZXIpIHtcblx0XHR0aGlzLmFybiA9IHF1aWNrU2lnaHRVc2VyLkFyblxuXHRcdHRoaXMuZW1haWwgPSBxdWlja1NpZ2h0VXNlci5FbWFpbFxuXHRcdHRoaXMucm9sZSA9IFF1aWNrU2lnaHRSb2xlW3F1aWNrU2lnaHRVc2VyLlJvbGUgYXMga2V5b2YgdHlwZW9mIFF1aWNrU2lnaHRSb2xlXSAvLyBPbmx5IHZhbHVlcyB0aGF0IHdpbGwgYmUgcmV0dXJuZWQgLy8gYWxzbyB0aGUga2V5b2YgdHlwZW9mIGhhY2sgY2FtZSBmcm9tIGhlcmUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQyNjIzOTA1XG5cdFx0dGhpcy51c2VybmFtZSA9IHF1aWNrU2lnaHRVc2VyLlVzZXJOYW1lXG5cdFx0dGhpcy5pbnZhbGlkID0gdGhpcy51c2VybmFtZSA9PT0gJ04vQSdcblx0XHRjb25zdCBbaWFtUm9sZSwgc3RzU2Vzc2lvbl0gPSB0aGlzLnVzZXJuYW1lLnNwbGl0KCcvJylcblx0XHR0aGlzLmlhbVJvbGUgPSBpYW1Sb2xlXG5cdFx0dGhpcy5zdHNTZXNzaW9uID0gc3RzU2Vzc2lvblxuXHR9XG59XG5cbmV4cG9ydCBlbnVtIFF1aWNrU2lnaHRSb2xlIHtcblx0UkVBREVSID0gJ1JFQURFUicsIEFVVEhPUiA9ICdBVVRIT1InLCBBRE1JTiA9ICdBRE1JTidcbn1cbiIsImltcG9ydCB7IFNlbmRFbWFpbENvbW1hbmQsIFNFU0NsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1zZXMnXG5pbXBvcnQgeyBRdWlja1NpZ2h0VXNlciB9IGZyb20gJy4vUXVpY2tTaWdodFVzZXInXG5cbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25NYW5hZ2VyIHtcblx0cHJpdmF0ZSBzZXNDbGllbnQgPSBuZXcgU0VTQ2xpZW50KHt9KVxuXHRwcml2YXRlIG5vTGFzdEFjY2Vzc0RhdGUgPSBuZXcgRGF0ZSgwKS50b0xvY2FsZVN0cmluZygpXG5cblx0cHVibGljIGFzeW5jIG5vdGlmeVVzZXIodXNlcjogUXVpY2tTaWdodFVzZXIpIHtcblx0XHQvLyBTdHJ5a2VyIGRpc2FibGUgbmV4dC1saW5lIGFsbCBcIkkgZG8gbm90IGNhcmUgYWJvdXQgbXV0YXRpbmcgY29uc29sZSBzdGF0ZW1lbnRzXCJcblx0XHRjb25zb2xlLmRlYnVnKGBOb3RpZnlpbmcgJHtKU09OLnN0cmluZ2lmeSh1c2VyLCBudWxsLCAxKX1gKVxuXHRcdFxuXHRcdC8vIElmIHRoZSBkYXRlIGlzIDE5NzAsIHdlIGRpZG4ndCBmaW5kIGFueSBhY3Rpdml0eSBmb3IgdGhlIHVzZXJcblx0XHRjb25zdCBsYXN0QWNjZXNzID1cblx0XHRcdHVzZXIubGFzdEFjY2Vzcy50b0xvY2FsZVN0cmluZygpID09PSB0aGlzLm5vTGFzdEFjY2Vzc0RhdGVcblx0XHRcdFx0PyBgbm90IGluIHRoZSBsYXN0ICR7cHJvY2Vzcy5lbnYuZGVsZXRlRGF5c30gZGF5c2Bcblx0XHRcdFx0OiB1c2VyLmxhc3RBY2Nlc3MudG9Mb2NhbGVEYXRlU3RyaW5nKClcblxuXHRcdGNvbnN0IHN1YmplY3QgPSBgSTogUXVpY2tTaWdodCB1c2VyICR7dXNlci51c2VybmFtZX0gaW4gYWNjb3VudCAke3Byb2Nlc3MuZW52LmFjY291bnRBbGlhc30gd2lsbCBiZSBkZWxldGVkYFxuXHRcdGNvbnN0IGJvZHkgPSBgSW4gb3JkZXIgdG8gPGEgaHJlZj1cImh0dHBzOi8vYXdzLmFtYXpvbi5jb20vcXVpY2tzaWdodC9wcmljaW5nL1wiPmNvbnRyb2wgY29zdHMgKCQyNC9tb250aC91c2VyKTwvYT4sXG4gICAgeW91ciBBV1MgUXVpY2tTaWdodCB1c2VyICcke3VzZXIudXNlcm5hbWV9JyBcbiAgICB3aWxsIGJlIGRlbGV0ZWQgd2hlbiB5b3UgaGF2ZSBub3QgYWNjZXNzZWQgUXVpY2tTaWdodCBpbiAke3Byb2Nlc3MuZW52LmRlbGV0ZURheXN9IGRheXMuIFxuICAgIENsb3VkVHJhaWwgcmVjb3JkcyBpbmRpY2F0ZSB0aGF0IHlvdXIgbGFzdCBhY2Nlc3Mgd2FzICR7bGFzdEFjY2Vzc30uPGJyIC8+PGJyIC8+XG4gICAgXG4gICAgWW91IGNhbiBrZWVwIHlvdXIgdXNlciBieSBsb2dnaW5nIGluIGFuZCB0YWtpbmcgYWN0aW9ucyBpbiBRdWlja1NpZ2h0LiBcbiAgICBBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIGRvIG5vdGhpbmcsIGFuZCB5b3VyIHVzZXIgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGRlbGV0ZWQuIFxuICAgIE5ldmVyIGZlYXIsIHlvdSBzaW1wbHkgbG9nIGJhY2sgaW50byBRdWlja1NpZ2h0IGFuZCBlbnRlciB5b3VyIGUtbWFpbCwgYW5kIHlvdXIgdXNlciBnZXRzIHJlY3JlYXRlZC4gXG4gICAgTm8gZGFzaGJvYXJkcyBvciBvdGhlciByZXNvdXJjZXMgd2lsbCBiZSBkZWxldGVkIGF0IHRoaXMgdGltZSAod2UgbWF5IGNsZWFuIHRob3NlIHVwIGluIHRoZSBmdXR1cmUsIHdpdGggbm90aWZpY2F0aW9uLCBvZiBjb3Vyc2UpLjxiciAvPjxiciAvPlxuICAgIFxuICAgIEFjY291bnQgTnVtYmVyOiAke3Byb2Nlc3MuZW52LmF3c0FjY291bnRJZH08YnIgLz5cbiAgICBBY2NvdW50IEFsaWFzOiAke3Byb2Nlc3MuZW52LmFjY291bnRBbGlhc308YnIgLz5cbiAgICBBc3N1bWVkIFJvbGU6ICR7dXNlci5pYW1Sb2xlfTxiciAvPlxuICAgIEVtYWlsOiAke3VzZXIuZW1haWx9PGJyIC8+PGJyIC8+XG4gIFxuICAgIEZvciBmdXJ0aGVyIGFzc2lzdGFuY2UsIGNvbnRhY3QgPGEgaHJlZj1cIm1haWx0bzoke3Byb2Nlc3MuZW52LmNvbnRhY3R9XCI+JHtwcm9jZXNzLmVudi5jb250YWN0fTwvYT4uIFRoYW5rIHlvdSBhbmQgaGF2ZSBhIGZhbnRhc3RpY2FsbHkgZnVuLWZpbGxlZCBkYXkg8J+lsy5cbiAgICBgXG5cblx0XHRjb25zdCBzZW5kRW1haWxDb21tYW5kID0gbmV3IFNlbmRFbWFpbENvbW1hbmQoe1xuXHRcdFx0U291cmNlOiBgJHtwcm9jZXNzLmVudi5hY2NvdW50QWxpYXN9IENsb3VkIEFjY291bnQgQWRtaW5pc3RyYXRvcjwke3Byb2Nlc3MuZW52LmZyb219PmAsXG5cdFx0XHREZXN0aW5hdGlvbjoge1xuXHRcdFx0XHRUb0FkZHJlc3NlczogW3VzZXIuZW1haWxdLFxuXHRcdFx0XHRDY0FkZHJlc3NlczogSlNPTi5wYXJzZShwcm9jZXNzLmVudi5jYyksXG5cdFx0XHR9LFxuXHRcdFx0UmVwbHlUb0FkZHJlc3NlczogW3Byb2Nlc3MuZW52LnJlcGx5VG9dLFxuXHRcdFx0U291cmNlQXJuOiBwcm9jZXNzLmVudi5zZXNBcm4sXG5cdFx0XHRNZXNzYWdlOiB7XG5cdFx0XHRcdFN1YmplY3Q6IHsgRGF0YTogc3ViamVjdCB9LFxuXHRcdFx0XHRCb2R5OiB7XG5cdFx0XHRcdFx0SHRtbDogeyBEYXRhOiBib2R5IH0sXG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdH0pXG5cblx0XHRhd2FpdCB0aGlzLnNlc0NsaWVudC5zZW5kKHNlbmRFbWFpbENvbW1hbmQpXG5cdH1cbn0iLCJpbXBvcnQgeyByZXNvbHZlQXdzU2RrU2lnVjRDb25maWcsIH0gZnJvbSBcIkBhd3Mtc2RrL2NvcmVcIjtcbmltcG9ydCB7IGdldFNtaXRoeUNvbnRleHQsIG5vcm1hbGl6ZVByb3ZpZGVyIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1taWRkbGV3YXJlXCI7XG5leHBvcnQgY29uc3QgZGVmYXVsdFF1aWNrU2lnaHRIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciA9IGFzeW5jIChjb25maWcsIGNvbnRleHQsIGlucHV0KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb3BlcmF0aW9uOiBnZXRTbWl0aHlDb250ZXh0KGNvbnRleHQpLm9wZXJhdGlvbixcbiAgICAgICAgcmVnaW9uOiAoYXdhaXQgbm9ybWFsaXplUHJvdmlkZXIoY29uZmlnLnJlZ2lvbikoKSkgfHxcbiAgICAgICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZXhwZWN0ZWQgYHJlZ2lvbmAgdG8gYmUgY29uZmlndXJlZCBmb3IgYGF3cy5hdXRoI3NpZ3Y0YFwiKTtcbiAgICAgICAgICAgIH0pKCksXG4gICAgfTtcbn07XG5mdW5jdGlvbiBjcmVhdGVBd3NBdXRoU2lndjRIdHRwQXV0aE9wdGlvbihhdXRoUGFyYW1ldGVycykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNjaGVtZUlkOiBcImF3cy5hdXRoI3NpZ3Y0XCIsXG4gICAgICAgIHNpZ25pbmdQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBuYW1lOiBcInF1aWNrc2lnaHRcIixcbiAgICAgICAgICAgIHJlZ2lvbjogYXV0aFBhcmFtZXRlcnMucmVnaW9uLFxuICAgICAgICB9LFxuICAgICAgICBwcm9wZXJ0aWVzRXh0cmFjdG9yOiAoY29uZmlnLCBjb250ZXh0KSA9PiAoe1xuICAgICAgICAgICAgc2lnbmluZ1Byb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgIH07XG59XG5leHBvcnQgY29uc3QgZGVmYXVsdFF1aWNrU2lnaHRIdHRwQXV0aFNjaGVtZVByb3ZpZGVyID0gKGF1dGhQYXJhbWV0ZXJzKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IFtdO1xuICAgIHN3aXRjaCAoYXV0aFBhcmFtZXRlcnMub3BlcmF0aW9uKSB7XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaChjcmVhdGVBd3NBdXRoU2lndjRIdHRwQXV0aE9wdGlvbihhdXRoUGFyYW1ldGVycykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufTtcbmV4cG9ydCBjb25zdCByZXNvbHZlSHR0cEF1dGhTY2hlbWVDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgY29uc3QgY29uZmlnXzAgPSByZXNvbHZlQXdzU2RrU2lnVjRDb25maWcoY29uZmlnKTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihjb25maWdfMCwge1xuICAgICAgICBhdXRoU2NoZW1lUHJlZmVyZW5jZTogbm9ybWFsaXplUHJvdmlkZXIoY29uZmlnLmF1dGhTY2hlbWVQcmVmZXJlbmNlID8/IFtdKSxcbiAgICB9KTtcbn07XG4iLCJleHBvcnQgY29uc3QgcmVzb2x2ZUNsaWVudEVuZHBvaW50UGFyYW1ldGVycyA9IChvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ob3B0aW9ucywge1xuICAgICAgICB1c2VEdWFsc3RhY2tFbmRwb2ludDogb3B0aW9ucy51c2VEdWFsc3RhY2tFbmRwb2ludCA/PyBmYWxzZSxcbiAgICAgICAgdXNlRmlwc0VuZHBvaW50OiBvcHRpb25zLnVzZUZpcHNFbmRwb2ludCA/PyBmYWxzZSxcbiAgICAgICAgZGVmYXVsdFNpZ25pbmdOYW1lOiBcInF1aWNrc2lnaHRcIixcbiAgICB9KTtcbn07XG5leHBvcnQgY29uc3QgY29tbW9uUGFyYW1zID0ge1xuICAgIFVzZUZJUFM6IHsgdHlwZTogXCJidWlsdEluUGFyYW1zXCIsIG5hbWU6IFwidXNlRmlwc0VuZHBvaW50XCIgfSxcbiAgICBFbmRwb2ludDogeyB0eXBlOiBcImJ1aWx0SW5QYXJhbXNcIiwgbmFtZTogXCJlbmRwb2ludFwiIH0sXG4gICAgUmVnaW9uOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInJlZ2lvblwiIH0sXG4gICAgVXNlRHVhbFN0YWNrOiB7IHR5cGU6IFwiYnVpbHRJblBhcmFtc1wiLCBuYW1lOiBcInVzZUR1YWxzdGFja0VuZHBvaW50XCIgfSxcbn07XG4iLCJjb25zdCBzID0gXCJyZXF1aXJlZFwiLCB0ID0gXCJmblwiLCB1ID0gXCJhcmd2XCIsIHYgPSBcInJlZlwiO1xuY29uc3QgYSA9IHRydWUsIGIgPSBcImlzU2V0XCIsIGMgPSBcImJvb2xlYW5FcXVhbHNcIiwgZCA9IFwiZXJyb3JcIiwgZSA9IFwiZW5kcG9pbnRcIiwgZiA9IFwidHJlZVwiLCBnID0gXCJQYXJ0aXRpb25SZXN1bHRcIiwgaCA9IHsgW3NdOiBmYWxzZSwgXCJ0eXBlXCI6IFwiU3RyaW5nXCIgfSwgaSA9IHsgW3NdOiB0cnVlLCBcImRlZmF1bHRcIjogZmFsc2UsIFwidHlwZVwiOiBcIkJvb2xlYW5cIiB9LCBqID0geyBbdl06IFwiRW5kcG9pbnRcIiB9LCBrID0geyBbdF06IGMsIFt1XTogW3sgW3ZdOiBcIlVzZUZJUFNcIiB9LCB0cnVlXSB9LCBsID0geyBbdF06IGMsIFt1XTogW3sgW3ZdOiBcIlVzZUR1YWxTdGFja1wiIH0sIHRydWVdIH0sIG0gPSB7fSwgbiA9IHsgW3RdOiBcImdldEF0dHJcIiwgW3VdOiBbeyBbdl06IGcgfSwgXCJzdXBwb3J0c0ZJUFNcIl0gfSwgbyA9IHsgW3RdOiBjLCBbdV06IFt0cnVlLCB7IFt0XTogXCJnZXRBdHRyXCIsIFt1XTogW3sgW3ZdOiBnIH0sIFwic3VwcG9ydHNEdWFsU3RhY2tcIl0gfV0gfSwgcCA9IFtrXSwgcSA9IFtsXSwgciA9IFt7IFt2XTogXCJSZWdpb25cIiB9XTtcbmNvbnN0IF9kYXRhID0geyB2ZXJzaW9uOiBcIjEuMFwiLCBwYXJhbWV0ZXJzOiB7IFJlZ2lvbjogaCwgVXNlRHVhbFN0YWNrOiBpLCBVc2VGSVBTOiBpLCBFbmRwb2ludDogaCB9LCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW3RdOiBiLCBbdV06IFtqXSB9XSwgcnVsZXM6IFt7IGNvbmRpdGlvbnM6IHAsIGVycm9yOiBcIkludmFsaWQgQ29uZmlndXJhdGlvbjogRklQUyBhbmQgY3VzdG9tIGVuZHBvaW50IGFyZSBub3Qgc3VwcG9ydGVkXCIsIHR5cGU6IGQgfSwgeyBjb25kaXRpb25zOiBxLCBlcnJvcjogXCJJbnZhbGlkIENvbmZpZ3VyYXRpb246IER1YWxzdGFjayBhbmQgY3VzdG9tIGVuZHBvaW50IGFyZSBub3Qgc3VwcG9ydGVkXCIsIHR5cGU6IGQgfSwgeyBlbmRwb2ludDogeyB1cmw6IGosIHByb3BlcnRpZXM6IG0sIGhlYWRlcnM6IG0gfSwgdHlwZTogZSB9XSwgdHlwZTogZiB9LCB7IGNvbmRpdGlvbnM6IFt7IFt0XTogYiwgW3VdOiByIH1dLCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW3RdOiBcImF3cy5wYXJ0aXRpb25cIiwgW3VdOiByLCBhc3NpZ246IGcgfV0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbaywgbF0sIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbeyBbdF06IGMsIFt1XTogW2EsIG5dIH0sIG9dLCBydWxlczogW3sgZW5kcG9pbnQ6IHsgdXJsOiBcImh0dHBzOi8vcXVpY2tzaWdodC1maXBzLntSZWdpb259LntQYXJ0aXRpb25SZXN1bHQjZHVhbFN0YWNrRG5zU3VmZml4fVwiLCBwcm9wZXJ0aWVzOiBtLCBoZWFkZXJzOiBtIH0sIHR5cGU6IGUgfV0sIHR5cGU6IGYgfSwgeyBlcnJvcjogXCJGSVBTIGFuZCBEdWFsU3RhY2sgYXJlIGVuYWJsZWQsIGJ1dCB0aGlzIHBhcnRpdGlvbiBkb2VzIG5vdCBzdXBwb3J0IG9uZSBvciBib3RoXCIsIHR5cGU6IGQgfV0sIHR5cGU6IGYgfSwgeyBjb25kaXRpb25zOiBwLCBydWxlczogW3sgY29uZGl0aW9uczogW3sgW3RdOiBjLCBbdV06IFtuLCBhXSB9XSwgcnVsZXM6IFt7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL3F1aWNrc2lnaHQtZmlwcy57UmVnaW9ufS57UGFydGl0aW9uUmVzdWx0I2Ruc1N1ZmZpeH1cIiwgcHJvcGVydGllczogbSwgaGVhZGVyczogbSB9LCB0eXBlOiBlIH1dLCB0eXBlOiBmIH0sIHsgZXJyb3I6IFwiRklQUyBpcyBlbmFibGVkIGJ1dCB0aGlzIHBhcnRpdGlvbiBkb2VzIG5vdCBzdXBwb3J0IEZJUFNcIiwgdHlwZTogZCB9XSwgdHlwZTogZiB9LCB7IGNvbmRpdGlvbnM6IHEsIHJ1bGVzOiBbeyBjb25kaXRpb25zOiBbb10sIHJ1bGVzOiBbeyBlbmRwb2ludDogeyB1cmw6IFwiaHR0cHM6Ly9xdWlja3NpZ2h0LntSZWdpb259LntQYXJ0aXRpb25SZXN1bHQjZHVhbFN0YWNrRG5zU3VmZml4fVwiLCBwcm9wZXJ0aWVzOiBtLCBoZWFkZXJzOiBtIH0sIHR5cGU6IGUgfV0sIHR5cGU6IGYgfSwgeyBlcnJvcjogXCJEdWFsU3RhY2sgaXMgZW5hYmxlZCBidXQgdGhpcyBwYXJ0aXRpb24gZG9lcyBub3Qgc3VwcG9ydCBEdWFsU3RhY2tcIiwgdHlwZTogZCB9XSwgdHlwZTogZiB9LCB7IGVuZHBvaW50OiB7IHVybDogXCJodHRwczovL3F1aWNrc2lnaHQue1JlZ2lvbn0ue1BhcnRpdGlvblJlc3VsdCNkbnNTdWZmaXh9XCIsIHByb3BlcnRpZXM6IG0sIGhlYWRlcnM6IG0gfSwgdHlwZTogZSB9XSwgdHlwZTogZiB9XSwgdHlwZTogZiB9LCB7IGVycm9yOiBcIkludmFsaWQgQ29uZmlndXJhdGlvbjogTWlzc2luZyBSZWdpb25cIiwgdHlwZTogZCB9XSB9O1xuZXhwb3J0IGNvbnN0IHJ1bGVTZXQgPSBfZGF0YTtcbiIsImltcG9ydCB7IGF3c0VuZHBvaW50RnVuY3Rpb25zIH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtZW5kcG9pbnRzXCI7XG5pbXBvcnQgeyBjdXN0b21FbmRwb2ludEZ1bmN0aW9ucywgRW5kcG9pbnRDYWNoZSwgcmVzb2x2ZUVuZHBvaW50IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1lbmRwb2ludHNcIjtcbmltcG9ydCB7IHJ1bGVTZXQgfSBmcm9tIFwiLi9ydWxlc2V0XCI7XG5jb25zdCBjYWNoZSA9IG5ldyBFbmRwb2ludENhY2hlKHtcbiAgICBzaXplOiA1MCxcbiAgICBwYXJhbXM6IFtcIkVuZHBvaW50XCIsIFwiUmVnaW9uXCIsIFwiVXNlRHVhbFN0YWNrXCIsIFwiVXNlRklQU1wiXSxcbn0pO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRFbmRwb2ludFJlc29sdmVyID0gKGVuZHBvaW50UGFyYW1zLCBjb250ZXh0ID0ge30pID0+IHtcbiAgICByZXR1cm4gY2FjaGUuZ2V0KGVuZHBvaW50UGFyYW1zLCAoKSA9PiByZXNvbHZlRW5kcG9pbnQocnVsZVNldCwge1xuICAgICAgICBlbmRwb2ludFBhcmFtczogZW5kcG9pbnRQYXJhbXMsXG4gICAgICAgIGxvZ2dlcjogY29udGV4dC5sb2dnZXIsXG4gICAgfSkpO1xufTtcbmN1c3RvbUVuZHBvaW50RnVuY3Rpb25zLmF3cyA9IGF3c0VuZHBvaW50RnVuY3Rpb25zO1xuIiwiaW1wb3J0IHsgZ2V0SG9zdEhlYWRlclBsdWdpbiwgcmVzb2x2ZUhvc3RIZWFkZXJDb25maWcsIH0gZnJvbSBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtaG9zdC1oZWFkZXJcIjtcbmltcG9ydCB7IGdldExvZ2dlclBsdWdpbiB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLWxvZ2dlclwiO1xuaW1wb3J0IHsgZ2V0UmVjdXJzaW9uRGV0ZWN0aW9uUGx1Z2luIH0gZnJvbSBcIkBhd3Mtc2RrL21pZGRsZXdhcmUtcmVjdXJzaW9uLWRldGVjdGlvblwiO1xuaW1wb3J0IHsgZ2V0VXNlckFnZW50UGx1Z2luLCByZXNvbHZlVXNlckFnZW50Q29uZmlnLCB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLXVzZXItYWdlbnRcIjtcbmltcG9ydCB7IHJlc29sdmVSZWdpb25Db25maWcgfSBmcm9tIFwiQHNtaXRoeS9jb25maWctcmVzb2x2ZXJcIjtcbmltcG9ydCB7IERlZmF1bHRJZGVudGl0eVByb3ZpZGVyQ29uZmlnLCBnZXRIdHRwQXV0aFNjaGVtZUVuZHBvaW50UnVsZVNldFBsdWdpbiwgZ2V0SHR0cFNpZ25pbmdQbHVnaW4sIH0gZnJvbSBcIkBzbWl0aHkvY29yZVwiO1xuaW1wb3J0IHsgZ2V0Q29udGVudExlbmd0aFBsdWdpbiB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtY29udGVudC1sZW5ndGhcIjtcbmltcG9ydCB7IHJlc29sdmVFbmRwb2ludENvbmZpZyB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtZW5kcG9pbnRcIjtcbmltcG9ydCB7IGdldFJldHJ5UGx1Z2luLCByZXNvbHZlUmV0cnlDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLXJldHJ5XCI7XG5pbXBvcnQgeyBDbGllbnQgYXMgX19DbGllbnQsIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgZGVmYXVsdFF1aWNrU2lnaHRIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciwgcmVzb2x2ZUh0dHBBdXRoU2NoZW1lQ29uZmlnLCB9IGZyb20gXCIuL2F1dGgvaHR0cEF1dGhTY2hlbWVQcm92aWRlclwiO1xuaW1wb3J0IHsgcmVzb2x2ZUNsaWVudEVuZHBvaW50UGFyYW1ldGVycywgfSBmcm9tIFwiLi9lbmRwb2ludC9FbmRwb2ludFBhcmFtZXRlcnNcIjtcbmltcG9ydCB7IGdldFJ1bnRpbWVDb25maWcgYXMgX19nZXRSdW50aW1lQ29uZmlnIH0gZnJvbSBcIi4vcnVudGltZUNvbmZpZ1wiO1xuaW1wb3J0IHsgcmVzb2x2ZVJ1bnRpbWVFeHRlbnNpb25zIH0gZnJvbSBcIi4vcnVudGltZUV4dGVuc2lvbnNcIjtcbmV4cG9ydCB7IF9fQ2xpZW50IH07XG5leHBvcnQgY2xhc3MgUXVpY2tTaWdodENsaWVudCBleHRlbmRzIF9fQ2xpZW50IHtcbiAgICBjb25maWc7XG4gICAgY29uc3RydWN0b3IoLi4uW2NvbmZpZ3VyYXRpb25dKSB7XG4gICAgICAgIGNvbnN0IF9jb25maWdfMCA9IF9fZ2V0UnVudGltZUNvbmZpZyhjb25maWd1cmF0aW9uIHx8IHt9KTtcbiAgICAgICAgc3VwZXIoX2NvbmZpZ18wKTtcbiAgICAgICAgdGhpcy5pbml0Q29uZmlnID0gX2NvbmZpZ18wO1xuICAgICAgICBjb25zdCBfY29uZmlnXzEgPSByZXNvbHZlQ2xpZW50RW5kcG9pbnRQYXJhbWV0ZXJzKF9jb25maWdfMCk7XG4gICAgICAgIGNvbnN0IF9jb25maWdfMiA9IHJlc29sdmVVc2VyQWdlbnRDb25maWcoX2NvbmZpZ18xKTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ18zID0gcmVzb2x2ZVJldHJ5Q29uZmlnKF9jb25maWdfMik7XG4gICAgICAgIGNvbnN0IF9jb25maWdfNCA9IHJlc29sdmVSZWdpb25Db25maWcoX2NvbmZpZ18zKTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ181ID0gcmVzb2x2ZUhvc3RIZWFkZXJDb25maWcoX2NvbmZpZ180KTtcbiAgICAgICAgY29uc3QgX2NvbmZpZ182ID0gcmVzb2x2ZUVuZHBvaW50Q29uZmlnKF9jb25maWdfNSk7XG4gICAgICAgIGNvbnN0IF9jb25maWdfNyA9IHJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZyhfY29uZmlnXzYpO1xuICAgICAgICBjb25zdCBfY29uZmlnXzggPSByZXNvbHZlUnVudGltZUV4dGVuc2lvbnMoX2NvbmZpZ183LCBjb25maWd1cmF0aW9uPy5leHRlbnNpb25zIHx8IFtdKTtcbiAgICAgICAgdGhpcy5jb25maWcgPSBfY29uZmlnXzg7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRVc2VyQWdlbnRQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldFJldHJ5UGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRDb250ZW50TGVuZ3RoUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRIb3N0SGVhZGVyUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZVN0YWNrLnVzZShnZXRMb2dnZXJQbHVnaW4odGhpcy5jb25maWcpKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldFJlY3Vyc2lvbkRldGVjdGlvblBsdWdpbih0aGlzLmNvbmZpZykpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVTdGFjay51c2UoZ2V0SHR0cEF1dGhTY2hlbWVFbmRwb2ludFJ1bGVTZXRQbHVnaW4odGhpcy5jb25maWcsIHtcbiAgICAgICAgICAgIGh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyOiBkZWZhdWx0UXVpY2tTaWdodEh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyLFxuICAgICAgICAgICAgaWRlbnRpdHlQcm92aWRlckNvbmZpZ1Byb3ZpZGVyOiBhc3luYyAoY29uZmlnKSA9PiBuZXcgRGVmYXVsdElkZW50aXR5UHJvdmlkZXJDb25maWcoe1xuICAgICAgICAgICAgICAgIFwiYXdzLmF1dGgjc2lndjRcIjogY29uZmlnLmNyZWRlbnRpYWxzLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlU3RhY2sudXNlKGdldEh0dHBTaWduaW5nUGx1Z2luKHRoaXMuY29uZmlnKSk7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgcGFja2FnZUluZm8gZnJvbSBcIi4uL3BhY2thZ2UuanNvblwiO1xuaW1wb3J0IHsgTk9ERV9BVVRIX1NDSEVNRV9QUkVGRVJFTkNFX09QVElPTlMsIGVtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24gYXMgYXdzQ2hlY2tWZXJzaW9uIH0gZnJvbSBcIkBhd3Mtc2RrL2NvcmVcIjtcbmltcG9ydCB7IGRlZmF1bHRQcm92aWRlciBhcyBjcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyIH0gZnJvbSBcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZVwiO1xuaW1wb3J0IHsgTk9ERV9BUFBfSURfQ09ORklHX09QVElPTlMsIGNyZWF0ZURlZmF1bHRVc2VyQWdlbnRQcm92aWRlciB9IGZyb20gXCJAYXdzLXNkay91dGlsLXVzZXItYWdlbnQtbm9kZVwiO1xuaW1wb3J0IHsgTk9ERV9SRUdJT05fQ09ORklHX0ZJTEVfT1BUSU9OUywgTk9ERV9SRUdJT05fQ09ORklHX09QVElPTlMsIE5PREVfVVNFX0RVQUxTVEFDS19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUywgTk9ERV9VU0VfRklQU19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUywgfSBmcm9tIFwiQHNtaXRoeS9jb25maWctcmVzb2x2ZXJcIjtcbmltcG9ydCB7IEhhc2ggfSBmcm9tIFwiQHNtaXRoeS9oYXNoLW5vZGVcIjtcbmltcG9ydCB7IE5PREVfTUFYX0FUVEVNUFRfQ09ORklHX09QVElPTlMsIE5PREVfUkVUUllfTU9ERV9DT05GSUdfT1BUSU9OUyB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtcmV0cnlcIjtcbmltcG9ydCB7IGxvYWRDb25maWcgYXMgbG9hZE5vZGVDb25maWcgfSBmcm9tIFwiQHNtaXRoeS9ub2RlLWNvbmZpZy1wcm92aWRlclwiO1xuaW1wb3J0IHsgTm9kZUh0dHBIYW5kbGVyIGFzIFJlcXVlc3RIYW5kbGVyLCBzdHJlYW1Db2xsZWN0b3IgfSBmcm9tIFwiQHNtaXRoeS9ub2RlLWh0dHAtaGFuZGxlclwiO1xuaW1wb3J0IHsgY2FsY3VsYXRlQm9keUxlbmd0aCB9IGZyb20gXCJAc21pdGh5L3V0aWwtYm9keS1sZW5ndGgtbm9kZVwiO1xuaW1wb3J0IHsgREVGQVVMVF9SRVRSWV9NT0RFIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1yZXRyeVwiO1xuaW1wb3J0IHsgZ2V0UnVudGltZUNvbmZpZyBhcyBnZXRTaGFyZWRSdW50aW1lQ29uZmlnIH0gZnJvbSBcIi4vcnVudGltZUNvbmZpZy5zaGFyZWRcIjtcbmltcG9ydCB7IGxvYWRDb25maWdzRm9yRGVmYXVsdE1vZGUgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyByZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvdXRpbC1kZWZhdWx0cy1tb2RlLW5vZGVcIjtcbmltcG9ydCB7IGVtaXRXYXJuaW5nSWZVbnN1cHBvcnRlZFZlcnNpb24gfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5leHBvcnQgY29uc3QgZ2V0UnVudGltZUNvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICBlbWl0V2FybmluZ0lmVW5zdXBwb3J0ZWRWZXJzaW9uKHByb2Nlc3MudmVyc2lvbik7XG4gICAgY29uc3QgZGVmYXVsdHNNb2RlID0gcmVzb2x2ZURlZmF1bHRzTW9kZUNvbmZpZyhjb25maWcpO1xuICAgIGNvbnN0IGRlZmF1bHRDb25maWdQcm92aWRlciA9ICgpID0+IGRlZmF1bHRzTW9kZSgpLnRoZW4obG9hZENvbmZpZ3NGb3JEZWZhdWx0TW9kZSk7XG4gICAgY29uc3QgY2xpZW50U2hhcmVkVmFsdWVzID0gZ2V0U2hhcmVkUnVudGltZUNvbmZpZyhjb25maWcpO1xuICAgIGF3c0NoZWNrVmVyc2lvbihwcm9jZXNzLnZlcnNpb24pO1xuICAgIGNvbnN0IGxvYWRlckNvbmZpZyA9IHtcbiAgICAgICAgcHJvZmlsZTogY29uZmlnPy5wcm9maWxlLFxuICAgICAgICBsb2dnZXI6IGNsaWVudFNoYXJlZFZhbHVlcy5sb2dnZXIsXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5jbGllbnRTaGFyZWRWYWx1ZXMsXG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgcnVudGltZTogXCJub2RlXCIsXG4gICAgICAgIGRlZmF1bHRzTW9kZSxcbiAgICAgICAgYXV0aFNjaGVtZVByZWZlcmVuY2U6IGNvbmZpZz8uYXV0aFNjaGVtZVByZWZlcmVuY2UgPz8gbG9hZE5vZGVDb25maWcoTk9ERV9BVVRIX1NDSEVNRV9QUkVGRVJFTkNFX09QVElPTlMsIGxvYWRlckNvbmZpZyksXG4gICAgICAgIGJvZHlMZW5ndGhDaGVja2VyOiBjb25maWc/LmJvZHlMZW5ndGhDaGVja2VyID8/IGNhbGN1bGF0ZUJvZHlMZW5ndGgsXG4gICAgICAgIGNyZWRlbnRpYWxEZWZhdWx0UHJvdmlkZXI6IGNvbmZpZz8uY3JlZGVudGlhbERlZmF1bHRQcm92aWRlciA/PyBjcmVkZW50aWFsRGVmYXVsdFByb3ZpZGVyLFxuICAgICAgICBkZWZhdWx0VXNlckFnZW50UHJvdmlkZXI6IGNvbmZpZz8uZGVmYXVsdFVzZXJBZ2VudFByb3ZpZGVyID8/XG4gICAgICAgICAgICBjcmVhdGVEZWZhdWx0VXNlckFnZW50UHJvdmlkZXIoeyBzZXJ2aWNlSWQ6IGNsaWVudFNoYXJlZFZhbHVlcy5zZXJ2aWNlSWQsIGNsaWVudFZlcnNpb246IHBhY2thZ2VJbmZvLnZlcnNpb24gfSksXG4gICAgICAgIG1heEF0dGVtcHRzOiBjb25maWc/Lm1heEF0dGVtcHRzID8/IGxvYWROb2RlQ29uZmlnKE5PREVfTUFYX0FUVEVNUFRfQ09ORklHX09QVElPTlMsIGNvbmZpZyksXG4gICAgICAgIHJlZ2lvbjogY29uZmlnPy5yZWdpb24gPz9cbiAgICAgICAgICAgIGxvYWROb2RlQ29uZmlnKE5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TLCB7IC4uLk5PREVfUkVHSU9OX0NPTkZJR19GSUxFX09QVElPTlMsIC4uLmxvYWRlckNvbmZpZyB9KSxcbiAgICAgICAgcmVxdWVzdEhhbmRsZXI6IFJlcXVlc3RIYW5kbGVyLmNyZWF0ZShjb25maWc/LnJlcXVlc3RIYW5kbGVyID8/IGRlZmF1bHRDb25maWdQcm92aWRlciksXG4gICAgICAgIHJldHJ5TW9kZTogY29uZmlnPy5yZXRyeU1vZGUgPz9cbiAgICAgICAgICAgIGxvYWROb2RlQ29uZmlnKHtcbiAgICAgICAgICAgICAgICAuLi5OT0RFX1JFVFJZX01PREVfQ09ORklHX09QVElPTlMsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogYXN5bmMgKCkgPT4gKGF3YWl0IGRlZmF1bHRDb25maWdQcm92aWRlcigpKS5yZXRyeU1vZGUgfHwgREVGQVVMVF9SRVRSWV9NT0RFLFxuICAgICAgICAgICAgfSwgY29uZmlnKSxcbiAgICAgICAgc2hhMjU2OiBjb25maWc/LnNoYTI1NiA/PyBIYXNoLmJpbmQobnVsbCwgXCJzaGEyNTZcIiksXG4gICAgICAgIHN0cmVhbUNvbGxlY3RvcjogY29uZmlnPy5zdHJlYW1Db2xsZWN0b3IgPz8gc3RyZWFtQ29sbGVjdG9yLFxuICAgICAgICB1c2VEdWFsc3RhY2tFbmRwb2ludDogY29uZmlnPy51c2VEdWFsc3RhY2tFbmRwb2ludCA/PyBsb2FkTm9kZUNvbmZpZyhOT0RFX1VTRV9EVUFMU1RBQ0tfRU5EUE9JTlRfQ09ORklHX09QVElPTlMsIGxvYWRlckNvbmZpZyksXG4gICAgICAgIHVzZUZpcHNFbmRwb2ludDogY29uZmlnPy51c2VGaXBzRW5kcG9pbnQgPz8gbG9hZE5vZGVDb25maWcoTk9ERV9VU0VfRklQU19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUywgbG9hZGVyQ29uZmlnKSxcbiAgICAgICAgdXNlckFnZW50QXBwSWQ6IGNvbmZpZz8udXNlckFnZW50QXBwSWQgPz8gbG9hZE5vZGVDb25maWcoTk9ERV9BUFBfSURfQ09ORklHX09QVElPTlMsIGxvYWRlckNvbmZpZyksXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBBd3NTZGtTaWdWNFNpZ25lciB9IGZyb20gXCJAYXdzLXNkay9jb3JlXCI7XG5pbXBvcnQgeyBOb09wTG9nZ2VyIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgcGFyc2VVcmwgfSBmcm9tIFwiQHNtaXRoeS91cmwtcGFyc2VyXCI7XG5pbXBvcnQgeyBmcm9tQmFzZTY0LCB0b0Jhc2U2NCB9IGZyb20gXCJAc21pdGh5L3V0aWwtYmFzZTY0XCI7XG5pbXBvcnQgeyBmcm9tVXRmOCwgdG9VdGY4IH0gZnJvbSBcIkBzbWl0aHkvdXRpbC11dGY4XCI7XG5pbXBvcnQgeyBkZWZhdWx0UXVpY2tTaWdodEh0dHBBdXRoU2NoZW1lUHJvdmlkZXIgfSBmcm9tIFwiLi9hdXRoL2h0dHBBdXRoU2NoZW1lUHJvdmlkZXJcIjtcbmltcG9ydCB7IGRlZmF1bHRFbmRwb2ludFJlc29sdmVyIH0gZnJvbSBcIi4vZW5kcG9pbnQvZW5kcG9pbnRSZXNvbHZlclwiO1xuZXhwb3J0IGNvbnN0IGdldFJ1bnRpbWVDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXBpVmVyc2lvbjogXCIyMDE4LTA0LTAxXCIsXG4gICAgICAgIGJhc2U2NERlY29kZXI6IGNvbmZpZz8uYmFzZTY0RGVjb2RlciA/PyBmcm9tQmFzZTY0LFxuICAgICAgICBiYXNlNjRFbmNvZGVyOiBjb25maWc/LmJhc2U2NEVuY29kZXIgPz8gdG9CYXNlNjQsXG4gICAgICAgIGRpc2FibGVIb3N0UHJlZml4OiBjb25maWc/LmRpc2FibGVIb3N0UHJlZml4ID8/IGZhbHNlLFxuICAgICAgICBlbmRwb2ludFByb3ZpZGVyOiBjb25maWc/LmVuZHBvaW50UHJvdmlkZXIgPz8gZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIsXG4gICAgICAgIGV4dGVuc2lvbnM6IGNvbmZpZz8uZXh0ZW5zaW9ucyA/PyBbXSxcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVQcm92aWRlcjogY29uZmlnPy5odHRwQXV0aFNjaGVtZVByb3ZpZGVyID8/IGRlZmF1bHRRdWlja1NpZ2h0SHR0cEF1dGhTY2hlbWVQcm92aWRlcixcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVzOiBjb25maWc/Lmh0dHBBdXRoU2NoZW1lcyA/PyBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2NoZW1lSWQ6IFwiYXdzLmF1dGgjc2lndjRcIixcbiAgICAgICAgICAgICAgICBpZGVudGl0eVByb3ZpZGVyOiAoaXBjKSA9PiBpcGMuZ2V0SWRlbnRpdHlQcm92aWRlcihcImF3cy5hdXRoI3NpZ3Y0XCIpLFxuICAgICAgICAgICAgICAgIHNpZ25lcjogbmV3IEF3c1Nka1NpZ1Y0U2lnbmVyKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBsb2dnZXI6IGNvbmZpZz8ubG9nZ2VyID8/IG5ldyBOb09wTG9nZ2VyKCksXG4gICAgICAgIHNlcnZpY2VJZDogY29uZmlnPy5zZXJ2aWNlSWQgPz8gXCJRdWlja1NpZ2h0XCIsXG4gICAgICAgIHVybFBhcnNlcjogY29uZmlnPy51cmxQYXJzZXIgPz8gcGFyc2VVcmwsXG4gICAgICAgIHV0ZjhEZWNvZGVyOiBjb25maWc/LnV0ZjhEZWNvZGVyID8/IGZyb21VdGY4LFxuICAgICAgICB1dGY4RW5jb2RlcjogY29uZmlnPy51dGY4RW5jb2RlciA/PyB0b1V0ZjgsXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgeyBnZXRBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uLCByZXNvbHZlQXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgfSBmcm9tIFwiQGF3cy1zZGsvcmVnaW9uLWNvbmZpZy1yZXNvbHZlclwiO1xuaW1wb3J0IHsgZ2V0SHR0cEhhbmRsZXJFeHRlbnNpb25Db25maWd1cmF0aW9uLCByZXNvbHZlSHR0cEhhbmRsZXJSdW50aW1lQ29uZmlnIH0gZnJvbSBcIkBzbWl0aHkvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24sIHJlc29sdmVEZWZhdWx0UnVudGltZUNvbmZpZyB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IGdldEh0dHBBdXRoRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiwgcmVzb2x2ZUh0dHBBdXRoUnVudGltZUNvbmZpZyB9IGZyb20gXCIuL2F1dGgvaHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uXCI7XG5leHBvcnQgY29uc3QgcmVzb2x2ZVJ1bnRpbWVFeHRlbnNpb25zID0gKHJ1bnRpbWVDb25maWcsIGV4dGVuc2lvbnMpID0+IHtcbiAgICBjb25zdCBleHRlbnNpb25Db25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbihnZXRBd3NSZWdpb25FeHRlbnNpb25Db25maWd1cmF0aW9uKHJ1bnRpbWVDb25maWcpLCBnZXREZWZhdWx0RXh0ZW5zaW9uQ29uZmlndXJhdGlvbihydW50aW1lQ29uZmlnKSwgZ2V0SHR0cEhhbmRsZXJFeHRlbnNpb25Db25maWd1cmF0aW9uKHJ1bnRpbWVDb25maWcpLCBnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24ocnVudGltZUNvbmZpZykpO1xuICAgIGV4dGVuc2lvbnMuZm9yRWFjaCgoZXh0ZW5zaW9uKSA9PiBleHRlbnNpb24uY29uZmlndXJlKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pKTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihydW50aW1lQ29uZmlnLCByZXNvbHZlQXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbihleHRlbnNpb25Db25maWd1cmF0aW9uKSwgcmVzb2x2ZURlZmF1bHRSdW50aW1lQ29uZmlnKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pLCByZXNvbHZlSHR0cEhhbmRsZXJSdW50aW1lQ29uZmlnKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pLCByZXNvbHZlSHR0cEF1dGhSdW50aW1lQ29uZmlnKGV4dGVuc2lvbkNvbmZpZ3VyYXRpb24pKTtcbn07XG4iLCJleHBvcnQgY29uc3QgZ2V0SHR0cEF1dGhFeHRlbnNpb25Db25maWd1cmF0aW9uID0gKHJ1bnRpbWVDb25maWcpID0+IHtcbiAgICBjb25zdCBfaHR0cEF1dGhTY2hlbWVzID0gcnVudGltZUNvbmZpZy5odHRwQXV0aFNjaGVtZXM7XG4gICAgbGV0IF9odHRwQXV0aFNjaGVtZVByb3ZpZGVyID0gcnVudGltZUNvbmZpZy5odHRwQXV0aFNjaGVtZVByb3ZpZGVyO1xuICAgIGxldCBfY3JlZGVudGlhbHMgPSBydW50aW1lQ29uZmlnLmNyZWRlbnRpYWxzO1xuICAgIHJldHVybiB7XG4gICAgICAgIHNldEh0dHBBdXRoU2NoZW1lKGh0dHBBdXRoU2NoZW1lKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IF9odHRwQXV0aFNjaGVtZXMuZmluZEluZGV4KChzY2hlbWUpID0+IHNjaGVtZS5zY2hlbWVJZCA9PT0gaHR0cEF1dGhTY2hlbWUuc2NoZW1lSWQpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIF9odHRwQXV0aFNjaGVtZXMucHVzaChodHRwQXV0aFNjaGVtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfaHR0cEF1dGhTY2hlbWVzLnNwbGljZShpbmRleCwgMSwgaHR0cEF1dGhTY2hlbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBodHRwQXV0aFNjaGVtZXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2h0dHBBdXRoU2NoZW1lcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0SHR0cEF1dGhTY2hlbWVQcm92aWRlcihodHRwQXV0aFNjaGVtZVByb3ZpZGVyKSB7XG4gICAgICAgICAgICBfaHR0cEF1dGhTY2hlbWVQcm92aWRlciA9IGh0dHBBdXRoU2NoZW1lUHJvdmlkZXI7XG4gICAgICAgIH0sXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lUHJvdmlkZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2h0dHBBdXRoU2NoZW1lUHJvdmlkZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHNldENyZWRlbnRpYWxzKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICBfY3JlZGVudGlhbHMgPSBjcmVkZW50aWFscztcbiAgICAgICAgfSxcbiAgICAgICAgY3JlZGVudGlhbHMoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NyZWRlbnRpYWxzO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVIdHRwQXV0aFJ1bnRpbWVDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaHR0cEF1dGhTY2hlbWVzOiBjb25maWcuaHR0cEF1dGhTY2hlbWVzKCksXG4gICAgICAgIGh0dHBBdXRoU2NoZW1lUHJvdmlkZXI6IGNvbmZpZy5odHRwQXV0aFNjaGVtZVByb3ZpZGVyKCksXG4gICAgICAgIGNyZWRlbnRpYWxzOiBjb25maWcuY3JlZGVudGlhbHMoKSxcbiAgICB9O1xufTtcbiIsImltcG9ydCB7IFNFTlNJVElWRV9TVFJJTkcgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBDYWxjdWxhdGVkRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2csIENvbHVtbkNvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2csIERhdGFMYWJlbE9wdGlvbnNGaWx0ZXJTZW5zaXRpdmVMb2csIE1lYXN1cmVGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZywgUGFyYW1ldGVyRGVjbGFyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2csIH0gZnJvbSBcIi4vbW9kZWxzXzBcIjtcbmltcG9ydCB7IENvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yRmlsdGVyU2Vuc2l0aXZlTG9nLCBDb25kaXRpb25hbEZvcm1hdHRpbmdJY29uRmlsdGVyU2Vuc2l0aXZlTG9nLCBHYXVnZUNoYXJ0VmlzdWFsRmlsdGVyU2Vuc2l0aXZlTG9nLCBIaXN0b2dyYW1WaXN1YWxGaWx0ZXJTZW5zaXRpdmVMb2csIEluc2lnaHRWaXN1YWxGaWx0ZXJTZW5zaXRpdmVMb2csIEtQSVZpc3VhbEZpbHRlclNlbnNpdGl2ZUxvZywgTGF5ZXJNYXBWaXN1YWxGaWx0ZXJTZW5zaXRpdmVMb2csIFVuYWdncmVnYXRlZEZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nLCBWaXN1YWxQYWxldHRlRmlsdGVyU2Vuc2l0aXZlTG9nLCB9IGZyb20gXCIuL21vZGVsc18xXCI7XG5pbXBvcnQgeyBRdWlja1NpZ2h0U2VydmljZUV4Y2VwdGlvbiBhcyBfX0Jhc2VFeGNlcHRpb24gfSBmcm9tIFwiLi9RdWlja1NpZ2h0U2VydmljZUV4Y2VwdGlvblwiO1xuZXhwb3J0IGNvbnN0IFBpdm90VGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmdTY29wZVJvbGUgPSB7XG4gICAgRklFTEQ6IFwiRklFTERcIixcbiAgICBGSUVMRF9UT1RBTDogXCJGSUVMRF9UT1RBTFwiLFxuICAgIEdSQU5EX1RPVEFMOiBcIkdSQU5EX1RPVEFMXCIsXG59O1xuZXhwb3J0IGNvbnN0IFBsdWdpblZpc3VhbEF4aXNOYW1lID0ge1xuICAgIEdST1VQX0JZOiBcIkdST1VQX0JZXCIsXG4gICAgVkFMVUU6IFwiVkFMVUVcIixcbn07XG5leHBvcnQgY29uc3QgUmFkYXJDaGFydEF4ZXNSYW5nZVNjYWxlID0ge1xuICAgIEFVVE86IFwiQVVUT1wiLFxuICAgIElOREVQRU5ERU5UOiBcIklOREVQRU5ERU5UXCIsXG4gICAgU0hBUkVEOiBcIlNIQVJFRFwiLFxufTtcbmV4cG9ydCBjb25zdCBSYWRhckNoYXJ0U2hhcGUgPSB7XG4gICAgQ0lSQ0xFOiBcIkNJUkNMRVwiLFxuICAgIFBPTFlHT046IFwiUE9MWUdPTlwiLFxufTtcbmV4cG9ydCBjb25zdCBUYWJsZUNlbGxJbWFnZVNjYWxpbmdDb25maWd1cmF0aW9uID0ge1xuICAgIERPX05PVF9TQ0FMRTogXCJET19OT1RfU0NBTEVcIixcbiAgICBGSVRfVE9fQ0VMTF9IRUlHSFQ6IFwiRklUX1RPX0NFTExfSEVJR0hUXCIsXG4gICAgRklUX1RPX0NFTExfV0lEVEg6IFwiRklUX1RPX0NFTExfV0lEVEhcIixcbn07XG5leHBvcnQgY29uc3QgVGFibGVGaWVsZEljb25TZXRUeXBlID0ge1xuICAgIExJTks6IFwiTElOS1wiLFxufTtcbmV4cG9ydCBjb25zdCBUcmFuc3Bvc2VkQ29sdW1uVHlwZSA9IHtcbiAgICBST1dfSEVBREVSX0NPTFVNTjogXCJST1dfSEVBREVSX0NPTFVNTlwiLFxuICAgIFZBTFVFX0NPTFVNTjogXCJWQUxVRV9DT0xVTU5cIixcbn07XG5leHBvcnQgY29uc3QgVGFibGVPcmllbnRhdGlvbiA9IHtcbiAgICBIT1JJWk9OVEFMOiBcIkhPUklaT05UQUxcIixcbiAgICBWRVJUSUNBTDogXCJWRVJUSUNBTFwiLFxufTtcbmV4cG9ydCBjb25zdCBXb3JkQ2xvdWRDbG91ZExheW91dCA9IHtcbiAgICBGTFVJRDogXCJGTFVJRFwiLFxuICAgIE5PUk1BTDogXCJOT1JNQUxcIixcbn07XG5leHBvcnQgY29uc3QgV29yZENsb3VkV29yZENhc2luZyA9IHtcbiAgICBFWElTVElOR19DQVNFOiBcIkVYSVNUSU5HX0NBU0VcIixcbiAgICBMT1dFUl9DQVNFOiBcIkxPV0VSX0NBU0VcIixcbn07XG5leHBvcnQgY29uc3QgV29yZENsb3VkV29yZE9yaWVudGF0aW9uID0ge1xuICAgIEhPUklaT05UQUw6IFwiSE9SSVpPTlRBTFwiLFxuICAgIEhPUklaT05UQUxfQU5EX1ZFUlRJQ0FMOiBcIkhPUklaT05UQUxfQU5EX1ZFUlRJQ0FMXCIsXG59O1xuZXhwb3J0IGNvbnN0IFdvcmRDbG91ZFdvcmRQYWRkaW5nID0ge1xuICAgIExBUkdFOiBcIkxBUkdFXCIsXG4gICAgTUVESVVNOiBcIk1FRElVTVwiLFxuICAgIE5PTkU6IFwiTk9ORVwiLFxuICAgIFNNQUxMOiBcIlNNQUxMXCIsXG59O1xuZXhwb3J0IGNvbnN0IFdvcmRDbG91ZFdvcmRTY2FsaW5nID0ge1xuICAgIEVNUEhBU0laRTogXCJFTVBIQVNJWkVcIixcbiAgICBOT1JNQUw6IFwiTk9STUFMXCIsXG59O1xuZXhwb3J0IGNvbnN0IEFuYWx5c2lzRmlsdGVyQXR0cmlidXRlID0ge1xuICAgIEFOQUxZU0lTX05BTUU6IFwiQU5BTFlTSVNfTkFNRVwiLFxuICAgIERJUkVDVF9RVUlDS1NJR0hUX09XTkVSOiBcIkRJUkVDVF9RVUlDS1NJR0hUX09XTkVSXCIsXG4gICAgRElSRUNUX1FVSUNLU0lHSFRfU09MRV9PV05FUjogXCJESVJFQ1RfUVVJQ0tTSUdIVF9TT0xFX09XTkVSXCIsXG4gICAgRElSRUNUX1FVSUNLU0lHSFRfVklFV0VSX09SX09XTkVSOiBcIkRJUkVDVF9RVUlDS1NJR0hUX1ZJRVdFUl9PUl9PV05FUlwiLFxuICAgIFFVSUNLU0lHSFRfT1dORVI6IFwiUVVJQ0tTSUdIVF9PV05FUlwiLFxuICAgIFFVSUNLU0lHSFRfVVNFUjogXCJRVUlDS1NJR0hUX1VTRVJcIixcbiAgICBRVUlDS1NJR0hUX1ZJRVdFUl9PUl9PV05FUjogXCJRVUlDS1NJR0hUX1ZJRVdFUl9PUl9PV05FUlwiLFxufTtcbmV4cG9ydCBjb25zdCBGaWx0ZXJPcGVyYXRvciA9IHtcbiAgICBTdHJpbmdFcXVhbHM6IFwiU3RyaW5nRXF1YWxzXCIsXG4gICAgU3RyaW5nTGlrZTogXCJTdHJpbmdMaWtlXCIsXG59O1xuZXhwb3J0IGNvbnN0IEFuY2hvclR5cGUgPSB7XG4gICAgVE9EQVk6IFwiVE9EQVlcIixcbn07XG5leHBvcnQgY29uc3QgQW5vbnltb3VzVXNlckRhc2hib2FyZEVtYmVkZGluZ0NvbmZpZ3VyYXRpb25EaXNhYmxlZEZlYXR1cmUgPSB7XG4gICAgU0hBUkVEX1ZJRVc6IFwiU0hBUkVEX1ZJRVdcIixcbn07XG5leHBvcnQgY29uc3QgQW5vbnltb3VzVXNlckRhc2hib2FyZEVtYmVkZGluZ0NvbmZpZ3VyYXRpb25FbmFibGVkRmVhdHVyZSA9IHtcbiAgICBTSEFSRURfVklFVzogXCJTSEFSRURfVklFV1wiLFxufTtcbmV4cG9ydCBjb25zdCBTbmFwc2hvdEZpbGVGb3JtYXRUeXBlID0ge1xuICAgIENTVjogXCJDU1ZcIixcbiAgICBFWENFTDogXCJFWENFTFwiLFxuICAgIFBERjogXCJQREZcIixcbn07XG5leHBvcnQgY29uc3QgU25hcHNob3RGaWxlU2hlZXRTZWxlY3Rpb25TY29wZSA9IHtcbiAgICBBTExfVklTVUFMUzogXCJBTExfVklTVUFMU1wiLFxuICAgIFNFTEVDVEVEX1ZJU1VBTFM6IFwiU0VMRUNURURfVklTVUFMU1wiLFxufTtcbmV4cG9ydCBjb25zdCBBc3NldEJ1bmRsZUV4cG9ydEpvYkFuYWx5c2lzUHJvcGVydHlUb092ZXJyaWRlID0ge1xuICAgIE5BTUU6IFwiTmFtZVwiLFxufTtcbmV4cG9ydCBjb25zdCBBc3NldEJ1bmRsZUV4cG9ydEpvYkRhc2hib2FyZFByb3BlcnR5VG9PdmVycmlkZSA9IHtcbiAgICBOQU1FOiBcIk5hbWVcIixcbn07XG5leHBvcnQgY29uc3QgQXNzZXRCdW5kbGVFeHBvcnRKb2JEYXRhU2V0UHJvcGVydHlUb092ZXJyaWRlID0ge1xuICAgIE5BTUU6IFwiTmFtZVwiLFxuICAgIFJFRlJFU0hfRkFJTFVSRV9FTUFJTF9BTEVSVF9TVEFUVVM6IFwiUmVmcmVzaEZhaWx1cmVFbWFpbEFsZXJ0U3RhdHVzXCIsXG59O1xuZXhwb3J0IGNvbnN0IEFzc2V0QnVuZGxlRXhwb3J0Sm9iRGF0YVNvdXJjZVByb3BlcnR5VG9PdmVycmlkZSA9IHtcbiAgICBDQVRBTE9HOiBcIkNhdGFsb2dcIixcbiAgICBDTFVTVEVSX0lEOiBcIkNsdXN0ZXJJZFwiLFxuICAgIERBVEFCQVNFOiBcIkRhdGFiYXNlXCIsXG4gICAgREFUQV9TRVRfTkFNRTogXCJEYXRhU2V0TmFtZVwiLFxuICAgIERJU0FCTEVfU1NMOiBcIkRpc2FibGVTc2xcIixcbiAgICBET01BSU46IFwiRG9tYWluXCIsXG4gICAgSE9TVDogXCJIb3N0XCIsXG4gICAgSU5TVEFOQ0VfSUQ6IFwiSW5zdGFuY2VJZFwiLFxuICAgIE1BTklGRVNUX0ZJTEVfTE9DQVRJT046IFwiTWFuaWZlc3RGaWxlTG9jYXRpb25cIixcbiAgICBOQU1FOiBcIk5hbWVcIixcbiAgICBQQVNTV09SRDogXCJQYXNzd29yZFwiLFxuICAgIFBPUlQ6IFwiUG9ydFwiLFxuICAgIFBST0RVQ1RfVFlQRTogXCJQcm9kdWN0VHlwZVwiLFxuICAgIFJPTEVfQVJOOiBcIlJvbGVBcm5cIixcbiAgICBTRUNSRVRfQVJOOiBcIlNlY3JldEFyblwiLFxuICAgIFVTRVJOQU1FOiBcIlVzZXJuYW1lXCIsXG4gICAgV0FSRUhPVVNFOiBcIldhcmVob3VzZVwiLFxuICAgIFdPUktfR1JPVVA6IFwiV29ya0dyb3VwXCIsXG59O1xuZXhwb3J0IGNvbnN0IEFzc2V0QnVuZGxlRXhwb3J0Sm9iRm9sZGVyUHJvcGVydHlUb092ZXJyaWRlID0ge1xuICAgIE5BTUU6IFwiTmFtZVwiLFxuICAgIFBBUkVOVF9GT0xERVJfQVJOOiBcIlBhcmVudEZvbGRlckFyblwiLFxufTtcbmV4cG9ydCBjb25zdCBBc3NldEJ1bmRsZUV4cG9ydEpvYlJlZnJlc2hTY2hlZHVsZVByb3BlcnR5VG9PdmVycmlkZSA9IHtcbiAgICBTVEFSVF9BRlRFUl9EQVRFX1RJTUU6IFwiU3RhcnRBZnRlckRhdGVUaW1lXCIsXG59O1xuZXhwb3J0IGNvbnN0IEFzc2V0QnVuZGxlRXhwb3J0Sm9iVGhlbWVQcm9wZXJ0eVRvT3ZlcnJpZGUgPSB7XG4gICAgTkFNRTogXCJOYW1lXCIsXG59O1xuZXhwb3J0IGNvbnN0IEFzc2V0QnVuZGxlRXhwb3J0Sm9iVlBDQ29ubmVjdGlvblByb3BlcnR5VG9PdmVycmlkZSA9IHtcbiAgICBETlNfUkVTT0xWRVJTOiBcIkRuc1Jlc29sdmVyc1wiLFxuICAgIE5BTUU6IFwiTmFtZVwiLFxuICAgIFJPTEVfQVJOOiBcIlJvbGVBcm5cIixcbn07XG5leHBvcnQgY29uc3QgQXNzZXRCdW5kbGVFeHBvcnRGb3JtYXQgPSB7XG4gICAgQ0xPVURGT1JNQVRJT05fSlNPTjogXCJDTE9VREZPUk1BVElPTl9KU09OXCIsXG4gICAgUVVJQ0tTSUdIVF9KU09OOiBcIlFVSUNLU0lHSFRfSlNPTlwiLFxufTtcbmV4cG9ydCBjb25zdCBBc3NldEJ1bmRsZUV4cG9ydEpvYlN0YXR1cyA9IHtcbiAgICBGQUlMRUQ6IFwiRkFJTEVEXCIsXG4gICAgSU5fUFJPR1JFU1M6IFwiSU5fUFJPR1JFU1NcIixcbiAgICBRVUVVRURfRk9SX0lNTUVESUFURV9FWEVDVVRJT046IFwiUVVFVUVEX0ZPUl9JTU1FRElBVEVfRVhFQ1VUSU9OXCIsXG4gICAgU1VDQ0VTU0ZVTDogXCJTVUNDRVNTRlVMXCIsXG59O1xuZXhwb3J0IGNvbnN0IEFzc2V0QnVuZGxlSW1wb3J0RmFpbHVyZUFjdGlvbiA9IHtcbiAgICBET19OT1RISU5HOiBcIkRPX05PVEhJTkdcIixcbiAgICBST0xMQkFDSzogXCJST0xMQkFDS1wiLFxufTtcbmV4cG9ydCBjb25zdCBSZWZyZXNoRmFpbHVyZUFsZXJ0U3RhdHVzID0ge1xuICAgIERJU0FCTEVEOiBcIkRJU0FCTEVEXCIsXG4gICAgRU5BQkxFRDogXCJFTkFCTEVEXCIsXG59O1xuZXhwb3J0IGNvbnN0IExvb2tiYWNrV2luZG93U2l6ZVVuaXQgPSB7XG4gICAgREFZOiBcIkRBWVwiLFxuICAgIEhPVVI6IFwiSE9VUlwiLFxuICAgIFdFRUs6IFwiV0VFS1wiLFxufTtcbmV4cG9ydCBjb25zdCBBdXRoZW50aWNhdGlvblR5cGUgPSB7XG4gICAgUEFTU1dPUkQ6IFwiUEFTU1dPUkRcIixcbiAgICBUT0tFTjogXCJUT0tFTlwiLFxuICAgIFg1MDk6IFwiWDUwOVwiLFxufTtcbmV4cG9ydCBjb25zdCBTdGFyYnVyc3RQcm9kdWN0VHlwZSA9IHtcbiAgICBFTlRFUlBSSVNFOiBcIkVOVEVSUFJJU0VcIixcbiAgICBHQUxBWFk6IFwiR0FMQVhZXCIsXG59O1xuZXhwb3J0IHZhciBEYXRhU291cmNlUGFyYW1ldGVycztcbihmdW5jdGlvbiAoRGF0YVNvdXJjZVBhcmFtZXRlcnMpIHtcbiAgICBEYXRhU291cmNlUGFyYW1ldGVycy52aXNpdCA9ICh2YWx1ZSwgdmlzaXRvcikgPT4ge1xuICAgICAgICBpZiAodmFsdWUuQW1hem9uRWxhc3RpY3NlYXJjaFBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLkFtYXpvbkVsYXN0aWNzZWFyY2hQYXJhbWV0ZXJzKHZhbHVlLkFtYXpvbkVsYXN0aWNzZWFyY2hQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLkF0aGVuYVBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLkF0aGVuYVBhcmFtZXRlcnModmFsdWUuQXRoZW5hUGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5BdXJvcmFQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5BdXJvcmFQYXJhbWV0ZXJzKHZhbHVlLkF1cm9yYVBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuQXVyb3JhUG9zdGdyZVNxbFBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLkF1cm9yYVBvc3RncmVTcWxQYXJhbWV0ZXJzKHZhbHVlLkF1cm9yYVBvc3RncmVTcWxQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLkF3c0lvdEFuYWx5dGljc1BhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLkF3c0lvdEFuYWx5dGljc1BhcmFtZXRlcnModmFsdWUuQXdzSW90QW5hbHl0aWNzUGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5KaXJhUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuSmlyYVBhcmFtZXRlcnModmFsdWUuSmlyYVBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuTWFyaWFEYlBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLk1hcmlhRGJQYXJhbWV0ZXJzKHZhbHVlLk1hcmlhRGJQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLk15U3FsUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuTXlTcWxQYXJhbWV0ZXJzKHZhbHVlLk15U3FsUGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5PcmFjbGVQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5PcmFjbGVQYXJhbWV0ZXJzKHZhbHVlLk9yYWNsZVBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuUG9zdGdyZVNxbFBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLlBvc3RncmVTcWxQYXJhbWV0ZXJzKHZhbHVlLlBvc3RncmVTcWxQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLlByZXN0b1BhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLlByZXN0b1BhcmFtZXRlcnModmFsdWUuUHJlc3RvUGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5SZHNQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5SZHNQYXJhbWV0ZXJzKHZhbHVlLlJkc1BhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuUmVkc2hpZnRQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5SZWRzaGlmdFBhcmFtZXRlcnModmFsdWUuUmVkc2hpZnRQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLlMzUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuUzNQYXJhbWV0ZXJzKHZhbHVlLlMzUGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5TZXJ2aWNlTm93UGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuU2VydmljZU5vd1BhcmFtZXRlcnModmFsdWUuU2VydmljZU5vd1BhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuU25vd2ZsYWtlUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuU25vd2ZsYWtlUGFyYW1ldGVycyh2YWx1ZS5Tbm93Zmxha2VQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLlNwYXJrUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuU3BhcmtQYXJhbWV0ZXJzKHZhbHVlLlNwYXJrUGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5TcWxTZXJ2ZXJQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5TcWxTZXJ2ZXJQYXJhbWV0ZXJzKHZhbHVlLlNxbFNlcnZlclBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuVGVyYWRhdGFQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5UZXJhZGF0YVBhcmFtZXRlcnModmFsdWUuVGVyYWRhdGFQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLlR3aXR0ZXJQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5Ud2l0dGVyUGFyYW1ldGVycyh2YWx1ZS5Ud2l0dGVyUGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5BbWF6b25PcGVuU2VhcmNoUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuQW1hem9uT3BlblNlYXJjaFBhcmFtZXRlcnModmFsdWUuQW1hem9uT3BlblNlYXJjaFBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuRXhhc29sUGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuRXhhc29sUGFyYW1ldGVycyh2YWx1ZS5FeGFzb2xQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLkRhdGFicmlja3NQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5EYXRhYnJpY2tzUGFyYW1ldGVycyh2YWx1ZS5EYXRhYnJpY2tzUGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5TdGFyYnVyc3RQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5TdGFyYnVyc3RQYXJhbWV0ZXJzKHZhbHVlLlN0YXJidXJzdFBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuVHJpbm9QYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5Ucmlub1BhcmFtZXRlcnModmFsdWUuVHJpbm9QYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHZhbHVlLkJpZ1F1ZXJ5UGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuQmlnUXVlcnlQYXJhbWV0ZXJzKHZhbHVlLkJpZ1F1ZXJ5UGFyYW1ldGVycyk7XG4gICAgICAgIGlmICh2YWx1ZS5JbXBhbGFQYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5JbXBhbGFQYXJhbWV0ZXJzKHZhbHVlLkltcGFsYVBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAodmFsdWUuQ3VzdG9tQ29ubmVjdGlvblBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLkN1c3RvbUNvbm5lY3Rpb25QYXJhbWV0ZXJzKHZhbHVlLkN1c3RvbUNvbm5lY3Rpb25QYXJhbWV0ZXJzKTtcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IuXyh2YWx1ZS4kdW5rbm93blswXSwgdmFsdWUuJHVua25vd25bMV0pO1xuICAgIH07XG59KShEYXRhU291cmNlUGFyYW1ldGVycyB8fCAoRGF0YVNvdXJjZVBhcmFtZXRlcnMgPSB7fSkpO1xuZXhwb3J0IGNvbnN0IEFzc2V0QnVuZGxlSW1wb3J0Sm9iU3RhdHVzID0ge1xuICAgIEZBSUxFRDogXCJGQUlMRURcIixcbiAgICBGQUlMRURfUk9MTEJBQ0tfQ09NUExFVEVEOiBcIkZBSUxFRF9ST0xMQkFDS19DT01QTEVURURcIixcbiAgICBGQUlMRURfUk9MTEJBQ0tfRVJST1I6IFwiRkFJTEVEX1JPTExCQUNLX0VSUk9SXCIsXG4gICAgRkFJTEVEX1JPTExCQUNLX0lOX1BST0dSRVNTOiBcIkZBSUxFRF9ST0xMQkFDS19JTl9QUk9HUkVTU1wiLFxuICAgIElOX1BST0dSRVNTOiBcIklOX1BST0dSRVNTXCIsXG4gICAgUVVFVUVEX0ZPUl9JTU1FRElBVEVfRVhFQ1VUSU9OOiBcIlFVRVVFRF9GT1JfSU1NRURJQVRFX0VYRUNVVElPTlwiLFxuICAgIFNVQ0NFU1NGVUw6IFwiU1VDQ0VTU0ZVTFwiLFxufTtcbmV4cG9ydCBjb25zdCBBc3NpZ25tZW50U3RhdHVzID0ge1xuICAgIERJU0FCTEVEOiBcIkRJU0FCTEVEXCIsXG4gICAgRFJBRlQ6IFwiRFJBRlRcIixcbiAgICBFTkFCTEVEOiBcIkVOQUJMRURcIixcbn07XG5leHBvcnQgY29uc3QgQXV0aGVudGljYXRpb25NZXRob2RPcHRpb24gPSB7XG4gICAgQUNUSVZFX0RJUkVDVE9SWTogXCJBQ1RJVkVfRElSRUNUT1JZXCIsXG4gICAgSUFNX0FORF9RVUlDS1NJR0hUOiBcIklBTV9BTkRfUVVJQ0tTSUdIVFwiLFxuICAgIElBTV9JREVOVElUWV9DRU5URVI6IFwiSUFNX0lERU5USVRZX0NFTlRFUlwiLFxuICAgIElBTV9PTkxZOiBcIklBTV9PTkxZXCIsXG59O1xuZXhwb3J0IGNvbnN0IFNlcnZpY2VUeXBlID0ge1xuICAgIEFUSEVOQTogXCJBVEhFTkFcIixcbiAgICBRQlVTSU5FU1M6IFwiUUJVU0lORVNTXCIsXG4gICAgUkVEU0hJRlQ6IFwiUkVEU0hJRlRcIixcbn07XG5leHBvcnQgY29uc3QgQXV0aG9yU3BlY2lmaWVkQWdncmVnYXRpb24gPSB7XG4gICAgQVZFUkFHRTogXCJBVkVSQUdFXCIsXG4gICAgQ09VTlQ6IFwiQ09VTlRcIixcbiAgICBESVNUSU5DVF9DT1VOVDogXCJESVNUSU5DVF9DT1VOVFwiLFxuICAgIE1BWDogXCJNQVhcIixcbiAgICBNRURJQU46IFwiTUVESUFOXCIsXG4gICAgTUlOOiBcIk1JTlwiLFxuICAgIFBFUkNFTlRJTEU6IFwiUEVSQ0VOVElMRVwiLFxuICAgIFNUREVWOiBcIlNUREVWXCIsXG4gICAgU1RERVZQOiBcIlNUREVWUFwiLFxuICAgIFNVTTogXCJTVU1cIixcbiAgICBWQVI6IFwiVkFSXCIsXG4gICAgVkFSUDogXCJWQVJQXCIsXG59O1xuZXhwb3J0IGNvbnN0IENvbnRyaWJ1dGlvbkFuYWx5c2lzRGlyZWN0aW9uID0ge1xuICAgIERFQ1JFQVNFOiBcIkRFQ1JFQVNFXCIsXG4gICAgSU5DUkVBU0U6IFwiSU5DUkVBU0VcIixcbiAgICBORVVUUkFMOiBcIk5FVVRSQUxcIixcbn07XG5leHBvcnQgY29uc3QgQ29udHJpYnV0aW9uQW5hbHlzaXNTb3J0VHlwZSA9IHtcbiAgICBBQlNPTFVURV9ESUZGRVJFTkNFOiBcIkFCU09MVVRFX0RJRkZFUkVOQ0VcIixcbiAgICBDT05UUklCVVRJT05fUEVSQ0VOVEFHRTogXCJDT05UUklCVVRJT05fUEVSQ0VOVEFHRVwiLFxuICAgIERFVklBVElPTl9GUk9NX0VYUEVDVEVEOiBcIkRFVklBVElPTl9GUk9NX0VYUEVDVEVEXCIsXG4gICAgUEVSQ0VOVEFHRV9ESUZGRVJFTkNFOiBcIlBFUkNFTlRBR0VfRElGRkVSRU5DRVwiLFxufTtcbmV4cG9ydCBjb25zdCBUb3BpY1NvcnREaXJlY3Rpb24gPSB7XG4gICAgQVNDRU5ESU5HOiBcIkFTQ0VORElOR1wiLFxuICAgIERFU0NFTkRJTkc6IFwiREVTQ0VORElOR1wiLFxufTtcbmV4cG9ydCBjb25zdCBDb25zdGFudFR5cGUgPSB7XG4gICAgQ09MTEVDVElWRTogXCJDT0xMRUNUSVZFXCIsXG4gICAgUkFOR0U6IFwiUkFOR0VcIixcbiAgICBTSU5HVUxBUjogXCJTSU5HVUxBUlwiLFxufTtcbmV4cG9ydCBjb25zdCBGaWx0ZXJDbGFzcyA9IHtcbiAgICBDT05ESVRJT05BTF9WQUxVRV9GSUxURVI6IFwiQ09ORElUSU9OQUxfVkFMVUVfRklMVEVSXCIsXG4gICAgRU5GT1JDRURfVkFMVUVfRklMVEVSOiBcIkVORk9SQ0VEX1ZBTFVFX0ZJTFRFUlwiLFxuICAgIE5BTUVEX1ZBTFVFX0ZJTFRFUjogXCJOQU1FRF9WQUxVRV9GSUxURVJcIixcbn07XG5leHBvcnQgY29uc3QgVG9waWNJUkZpbHRlclR5cGUgPSB7XG4gICAgQUNDRVBUX0FMTF9GSUxURVI6IFwiQUNDRVBUX0FMTF9GSUxURVJcIixcbiAgICBDQVRFR09SWV9GSUxURVI6IFwiQ0FURUdPUllfRklMVEVSXCIsXG4gICAgREFURV9SQU5HRV9GSUxURVI6IFwiREFURV9SQU5HRV9GSUxURVJcIixcbiAgICBFUVVBTFM6IFwiRVFVQUxTXCIsXG4gICAgTlVNRVJJQ19FUVVBTElUWV9GSUxURVI6IFwiTlVNRVJJQ19FUVVBTElUWV9GSUxURVJcIixcbiAgICBOVU1FUklDX1JBTkdFX0ZJTFRFUjogXCJOVU1FUklDX1JBTkdFX0ZJTFRFUlwiLFxuICAgIFJBTktfTElNSVRfRklMVEVSOiBcIlJBTktfTElNSVRfRklMVEVSXCIsXG4gICAgUkVMQVRJVkVfREFURV9GSUxURVI6IFwiUkVMQVRJVkVfREFURV9GSUxURVJcIixcbiAgICBUT1BfQk9UVE9NX0ZJTFRFUjogXCJUT1BfQk9UVE9NX0ZJTFRFUlwiLFxufTtcbmV4cG9ydCBjb25zdCBUb3BpY0lSRmlsdGVyRnVuY3Rpb24gPSB7XG4gICAgQ09OVEFJTlM6IFwiQ09OVEFJTlNcIixcbiAgICBDT05UQUlOU19TVFJJTkc6IFwiQ09OVEFJTlNfU1RSSU5HXCIsXG4gICAgRU5EU19XSVRIOiBcIkVORFNfV0lUSFwiLFxuICAgIEVYQUNUOiBcIkVYQUNUXCIsXG4gICAgTEFTVDogXCJMQVNUXCIsXG4gICAgTkVYVDogXCJORVhUXCIsXG4gICAgTk9XOiBcIk5PV1wiLFxuICAgIFBSRVZJT1VTOiBcIlBSRVZJT1VTXCIsXG4gICAgU1RBUlRTX1dJVEg6IFwiU1RBUlRTX1dJVEhcIixcbiAgICBUSElTOiBcIlRISVNcIixcbn07XG5leHBvcnQgY29uc3QgTnVsbEZpbHRlck9wdGlvbiA9IHtcbiAgICBBTExfVkFMVUVTOiBcIkFMTF9WQUxVRVNcIixcbiAgICBOT05fTlVMTFNfT05MWTogXCJOT05fTlVMTFNfT05MWVwiLFxuICAgIE5VTExTX09OTFk6IFwiTlVMTFNfT05MWVwiLFxufTtcbmV4cG9ydCBjb25zdCBEaXNwbGF5Rm9ybWF0ID0ge1xuICAgIEFVVE86IFwiQVVUT1wiLFxuICAgIENVUlJFTkNZOiBcIkNVUlJFTkNZXCIsXG4gICAgREFURTogXCJEQVRFXCIsXG4gICAgTlVNQkVSOiBcIk5VTUJFUlwiLFxuICAgIFBFUkNFTlQ6IFwiUEVSQ0VOVFwiLFxuICAgIFNUUklORzogXCJTVFJJTkdcIixcbn07XG5leHBvcnQgY29uc3QgVG9waWNOdW1lcmljU2VwYXJhdG9yU3ltYm9sID0ge1xuICAgIENPTU1BOiBcIkNPTU1BXCIsXG4gICAgRE9UOiBcIkRPVFwiLFxufTtcbmV4cG9ydCBjb25zdCBDb21wYXJpc29uTWV0aG9kVHlwZSA9IHtcbiAgICBESUZGOiBcIkRJRkZcIixcbiAgICBESUZGX0FTX1BFUkM6IFwiRElGRl9BU19QRVJDXCIsXG4gICAgTU9WSU5HX0FWRVJBR0U6IFwiTU9WSU5HX0FWRVJBR0VcIixcbiAgICBQRVJDRU5UX09GX1RPVEFMOiBcIlBFUkNFTlRfT0ZfVE9UQUxcIixcbiAgICBQRVJDX0RJRkY6IFwiUEVSQ19ESUZGXCIsXG4gICAgUE9QX0NVUlJFTlRfRElGRjogXCJQT1BfQ1VSUkVOVF9ESUZGXCIsXG4gICAgUE9QX0NVUlJFTlRfRElGRl9BU19QRVJDOiBcIlBPUF9DVVJSRU5UX0RJRkZfQVNfUEVSQ1wiLFxuICAgIFBPUF9PVkVSVElNRV9ESUZGOiBcIlBPUF9PVkVSVElNRV9ESUZGXCIsXG4gICAgUE9QX09WRVJUSU1FX0RJRkZfQVNfUEVSQzogXCJQT1BfT1ZFUlRJTUVfRElGRl9BU19QRVJDXCIsXG4gICAgUlVOTklOR19TVU06IFwiUlVOTklOR19TVU1cIixcbn07XG5leHBvcnQgY29uc3QgVmlzdWFsUm9sZSA9IHtcbiAgICBDT01QTElNRU5UQVJZOiBcIkNPTVBMSU1FTlRBUllcIixcbiAgICBGQUxMQkFDSzogXCJGQUxMQkFDS1wiLFxuICAgIEZSQUdNRU5UOiBcIkZSQUdNRU5UXCIsXG4gICAgTVVMVElfSU5URU5UOiBcIk1VTFRJX0lOVEVOVFwiLFxuICAgIFBSSU1BUlk6IFwiUFJJTUFSWVwiLFxufTtcbmV4cG9ydCBjb25zdCBSZXZpZXdlZEFuc3dlckVycm9yQ29kZSA9IHtcbiAgICBEQVRBU0VUX0RPRVNfTk9UX0VYSVNUOiBcIkRBVEFTRVRfRE9FU19OT1RfRVhJU1RcIixcbiAgICBEVVBMSUNBVEVEX0FOU1dFUjogXCJEVVBMSUNBVEVEX0FOU1dFUlwiLFxuICAgIElOVEVSTkFMX0VSUk9SOiBcIklOVEVSTkFMX0VSUk9SXCIsXG4gICAgSU5WQUxJRF9EQVRBOiBcIklOVkFMSURfREFUQVwiLFxuICAgIElOVkFMSURfREFUQVNFVF9BUk46IFwiSU5WQUxJRF9EQVRBU0VUX0FSTlwiLFxuICAgIE1JU1NJTkdfQU5TV0VSOiBcIk1JU1NJTkdfQU5TV0VSXCIsXG4gICAgTUlTU0lOR19SRVFVSVJFRF9GSUVMRFM6IFwiTUlTU0lOR19SRVFVSVJFRF9GSUVMRFNcIixcbn07XG5leHBvcnQgY2xhc3MgSW50ZXJuYWxGYWlsdXJlRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnRlcm5hbEZhaWx1cmVFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcInNlcnZlclwiO1xuICAgIE1lc3NhZ2U7XG4gICAgUmVxdWVzdElkO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnRlcm5hbEZhaWx1cmVFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJzZXJ2ZXJcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW50ZXJuYWxGYWlsdXJlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBvcHRzLlJlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZFBhcmFtZXRlclZhbHVlRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgUmVxdWVzdElkO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZFBhcmFtZXRlclZhbHVlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBvcHRzLlJlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgRXhjZXB0aW9uUmVzb3VyY2VUeXBlID0ge1xuICAgIEFDQ09VTlRfU0VUVElOR1M6IFwiQUNDT1VOVF9TRVRUSU5HU1wiLFxuICAgIERBVEFfU0VUOiBcIkRBVEFfU0VUXCIsXG4gICAgREFUQV9TT1VSQ0U6IFwiREFUQV9TT1VSQ0VcIixcbiAgICBHUk9VUDogXCJHUk9VUFwiLFxuICAgIElBTVBPTElDWV9BU1NJR05NRU5UOiBcIklBTVBPTElDWV9BU1NJR05NRU5UXCIsXG4gICAgSU5HRVNUSU9OOiBcIklOR0VTVElPTlwiLFxuICAgIE5BTUVTUEFDRTogXCJOQU1FU1BBQ0VcIixcbiAgICBVU0VSOiBcIlVTRVJcIixcbiAgICBWUENfQ09OTkVDVElPTjogXCJWUENfQ09OTkVDVElPTlwiLFxufTtcbmV4cG9ydCBjbGFzcyBSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIFJlc291cmNlVHlwZTtcbiAgICBSZXF1ZXN0SWQ7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlJlc291cmNlTm90Rm91bmRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVzb3VyY2VUeXBlID0gb3B0cy5SZXNvdXJjZVR5cGU7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFRocm90dGxpbmdFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIlRocm90dGxpbmdFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgUmVxdWVzdElkO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJUaHJvdHRsaW5nRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFRocm90dGxpbmdFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgICAgICB0aGlzLlJlcXVlc3RJZCA9IG9wdHMuUmVxdWVzdElkO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDb25mbGljdEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiQ29uZmxpY3RFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgUmVxdWVzdElkO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJDb25mbGljdEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDb25mbGljdEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IHZhciBJbWFnZVNvdXJjZTtcbihmdW5jdGlvbiAoSW1hZ2VTb3VyY2UpIHtcbiAgICBJbWFnZVNvdXJjZS52aXNpdCA9ICh2YWx1ZSwgdmlzaXRvcikgPT4ge1xuICAgICAgICBpZiAodmFsdWUuUHVibGljVXJsICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5QdWJsaWNVcmwodmFsdWUuUHVibGljVXJsKTtcbiAgICAgICAgaWYgKHZhbHVlLlMzVXJpICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5TM1VyaSh2YWx1ZS5TM1VyaSk7XG4gICAgICAgIHJldHVybiB2aXNpdG9yLl8odmFsdWUuJHVua25vd25bMF0sIHZhbHVlLiR1bmtub3duWzFdKTtcbiAgICB9O1xufSkoSW1hZ2VTb3VyY2UgfHwgKEltYWdlU291cmNlID0ge30pKTtcbmV4cG9ydCBjb25zdCBCcmFuZFN0YXR1cyA9IHtcbiAgICBDUkVBVEVfRkFJTEVEOiBcIkNSRUFURV9GQUlMRURcIixcbiAgICBDUkVBVEVfSU5fUFJPR1JFU1M6IFwiQ1JFQVRFX0lOX1BST0dSRVNTXCIsXG4gICAgQ1JFQVRFX1NVQ0NFRURFRDogXCJDUkVBVEVfU1VDQ0VFREVEXCIsXG4gICAgREVMRVRFX0ZBSUxFRDogXCJERUxFVEVfRkFJTEVEXCIsXG4gICAgREVMRVRFX0lOX1BST0dSRVNTOiBcIkRFTEVURV9JTl9QUk9HUkVTU1wiLFxufTtcbmV4cG9ydCBjb25zdCBQaXZvdFRhYmxlQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgVGV4dENvbmRpdGlvbmFsRm9ybWF0RmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5CYWNrZ3JvdW5kQ29sb3IgJiYgeyBCYWNrZ3JvdW5kQ29sb3I6IENvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5CYWNrZ3JvdW5kQ29sb3IpIH0pLFxuICAgIC4uLihvYmouVGV4dENvbG9yICYmIHsgVGV4dENvbG9yOiBDb25kaXRpb25hbEZvcm1hdHRpbmdDb2xvckZpbHRlclNlbnNpdGl2ZUxvZyhvYmouVGV4dENvbG9yKSB9KSxcbiAgICAuLi4ob2JqLkljb24gJiYgeyBJY29uOiBDb25kaXRpb25hbEZvcm1hdHRpbmdJY29uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5JY29uKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFBpdm90VGFibGVDZWxsQ29uZGl0aW9uYWxGb3JtYXR0aW5nRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5UZXh0Rm9ybWF0ICYmIHsgVGV4dEZvcm1hdDogVGV4dENvbmRpdGlvbmFsRm9ybWF0RmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5UZXh0Rm9ybWF0KSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFBpdm90VGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkNlbGwgJiYgeyBDZWxsOiBQaXZvdFRhYmxlQ2VsbENvbmRpdGlvbmFsRm9ybWF0dGluZ0ZpbHRlclNlbnNpdGl2ZUxvZyhvYmouQ2VsbCkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBQaXZvdFRhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5Db25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25zICYmIHtcbiAgICAgICAgQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uczogb2JqLkNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbnMubWFwKChpdGVtKSA9PiBQaXZvdFRhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFBpdm90VGFibGVWaXN1YWxGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkNvbmRpdGlvbmFsRm9ybWF0dGluZyAmJiB7XG4gICAgICAgIENvbmRpdGlvbmFsRm9ybWF0dGluZzogUGl2b3RUYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZ0ZpbHRlclNlbnNpdGl2ZUxvZyhvYmouQ29uZGl0aW9uYWxGb3JtYXR0aW5nKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFBsdWdpblZpc3VhbEZpZWxkV2VsbEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouTWVhc3VyZXMgJiYgeyBNZWFzdXJlczogb2JqLk1lYXN1cmVzLm1hcCgoaXRlbSkgPT4gTWVhc3VyZUZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbiAgICAuLi4ob2JqLlVuYWdncmVnYXRlZCAmJiB7IFVuYWdncmVnYXRlZDogb2JqLlVuYWdncmVnYXRlZC5tYXAoKGl0ZW0pID0+IFVuYWdncmVnYXRlZEZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFBsdWdpblZpc3VhbENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IFBsdWdpblZpc3VhbEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgUmFkYXJDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5WYWx1ZXMgJiYgeyBWYWx1ZXM6IG9iai5WYWx1ZXMubWFwKChpdGVtKSA9PiBNZWFzdXJlRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgUmFkYXJDaGFydEZpZWxkV2VsbHNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IFJhZGFyQ2hhcnRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5WaXN1YWxQYWxldHRlICYmIHsgVmlzdWFsUGFsZXR0ZTogVmlzdWFsUGFsZXR0ZUZpbHRlclNlbnNpdGl2ZUxvZyhvYmouVmlzdWFsUGFsZXR0ZSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBSYWRhckNoYXJ0VmlzdWFsRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG59KTtcbmV4cG9ydCBjb25zdCBTYW5rZXlEaWFncmFtQWdncmVnYXRlZEZpZWxkV2VsbHNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLldlaWdodCAmJiB7IFdlaWdodDogb2JqLldlaWdodC5tYXAoKGl0ZW0pID0+IE1lYXN1cmVGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBTYW5rZXlEaWFncmFtRmllbGRXZWxsc0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgU2Fua2V5RGlhZ3JhbUNoYXJ0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRGF0YUxhYmVscyAmJiB7IERhdGFMYWJlbHM6IERhdGFMYWJlbE9wdGlvbnNGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkRhdGFMYWJlbHMpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgU2Fua2V5RGlhZ3JhbVZpc3VhbEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgU2NhdHRlclBsb3RDYXRlZ29yaWNhbGx5QWdncmVnYXRlZEZpZWxkV2VsbHNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlhBeGlzICYmIHsgWEF4aXM6IG9iai5YQXhpcy5tYXAoKGl0ZW0pID0+IE1lYXN1cmVGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSkgfSksXG4gICAgLi4uKG9iai5ZQXhpcyAmJiB7IFlBeGlzOiBvYmouWUF4aXMubWFwKChpdGVtKSA9PiBNZWFzdXJlRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpIH0pLFxuICAgIC4uLihvYmouU2l6ZSAmJiB7IFNpemU6IG9iai5TaXplLm1hcCgoaXRlbSkgPT4gTWVhc3VyZUZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFNjYXR0ZXJQbG90VW5hZ2dyZWdhdGVkRmllbGRXZWxsc0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouU2l6ZSAmJiB7IFNpemU6IG9iai5TaXplLm1hcCgoaXRlbSkgPT4gTWVhc3VyZUZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFNjYXR0ZXJQbG90RmllbGRXZWxsc0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouU2NhdHRlclBsb3RDYXRlZ29yaWNhbGx5QWdncmVnYXRlZEZpZWxkV2VsbHMgJiYge1xuICAgICAgICBTY2F0dGVyUGxvdENhdGVnb3JpY2FsbHlBZ2dyZWdhdGVkRmllbGRXZWxsczogU2NhdHRlclBsb3RDYXRlZ29yaWNhbGx5QWdncmVnYXRlZEZpZWxkV2VsbHNGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlNjYXR0ZXJQbG90Q2F0ZWdvcmljYWxseUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFNjYXR0ZXJQbG90Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRmllbGRXZWxscyAmJiB7IEZpZWxkV2VsbHM6IFNjYXR0ZXJQbG90RmllbGRXZWxsc0ZpbHRlclNlbnNpdGl2ZUxvZyhvYmouRmllbGRXZWxscykgfSksXG4gICAgLi4uKG9iai5EYXRhTGFiZWxzICYmIHsgRGF0YUxhYmVsczogRGF0YUxhYmVsT3B0aW9uc0ZpbHRlclNlbnNpdGl2ZUxvZyhvYmouRGF0YUxhYmVscykgfSksXG4gICAgLi4uKG9iai5WaXN1YWxQYWxldHRlICYmIHsgVmlzdWFsUGFsZXR0ZTogVmlzdWFsUGFsZXR0ZUZpbHRlclNlbnNpdGl2ZUxvZyhvYmouVmlzdWFsUGFsZXR0ZSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBTY2F0dGVyUGxvdFZpc3VhbEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQ2hhcnRDb25maWd1cmF0aW9uICYmIHtcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiBTY2F0dGVyUGxvdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkNoYXJ0Q29uZmlndXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBUYWJsZUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5WYWx1ZXMgJiYgeyBWYWx1ZXM6IG9iai5WYWx1ZXMubWFwKChpdGVtKSA9PiBNZWFzdXJlRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgVGFibGVVbmFnZ3JlZ2F0ZWRGaWVsZFdlbGxzRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5WYWx1ZXMgJiYgeyBWYWx1ZXM6IG9iai5WYWx1ZXMubWFwKChpdGVtKSA9PiBVbmFnZ3JlZ2F0ZWRGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBUYWJsZUZpZWxkV2VsbHNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlRhYmxlVW5hZ2dyZWdhdGVkRmllbGRXZWxscyAmJiB7XG4gICAgICAgIFRhYmxlVW5hZ2dyZWdhdGVkRmllbGRXZWxsczogVGFibGVVbmFnZ3JlZ2F0ZWRGaWVsZFdlbGxzRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5UYWJsZVVuYWdncmVnYXRlZEZpZWxkV2VsbHMpLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgVGFibGVDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG59KTtcbmV4cG9ydCBjb25zdCBUYWJsZUNlbGxDb25kaXRpb25hbEZvcm1hdHRpbmdGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlRleHRGb3JtYXQgJiYgeyBUZXh0Rm9ybWF0OiBUZXh0Q29uZGl0aW9uYWxGb3JtYXRGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlRleHRGb3JtYXQpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgVGFibGVSb3dDb25kaXRpb25hbEZvcm1hdHRpbmdGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkJhY2tncm91bmRDb2xvciAmJiB7IEJhY2tncm91bmRDb2xvcjogQ29uZGl0aW9uYWxGb3JtYXR0aW5nQ29sb3JGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkJhY2tncm91bmRDb2xvcikgfSksXG4gICAgLi4uKG9iai5UZXh0Q29sb3IgJiYgeyBUZXh0Q29sb3I6IENvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5UZXh0Q29sb3IpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgVGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkNlbGwgJiYgeyBDZWxsOiBUYWJsZUNlbGxDb25kaXRpb25hbEZvcm1hdHRpbmdGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkNlbGwpIH0pLFxuICAgIC4uLihvYmouUm93ICYmIHsgUm93OiBUYWJsZVJvd0NvbmRpdGlvbmFsRm9ybWF0dGluZ0ZpbHRlclNlbnNpdGl2ZUxvZyhvYmouUm93KSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5Db25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25zICYmIHtcbiAgICAgICAgQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uczogb2JqLkNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbnMubWFwKChpdGVtKSA9PiBUYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBUYWJsZVZpc3VhbEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQ29uZGl0aW9uYWxGb3JtYXR0aW5nICYmIHtcbiAgICAgICAgQ29uZGl0aW9uYWxGb3JtYXR0aW5nOiBUYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZ0ZpbHRlclNlbnNpdGl2ZUxvZyhvYmouQ29uZGl0aW9uYWxGb3JtYXR0aW5nKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRyZWVNYXBBZ2dyZWdhdGVkRmllbGRXZWxsc0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouU2l6ZXMgJiYgeyBTaXplczogb2JqLlNpemVzLm1hcCgoaXRlbSkgPT4gTWVhc3VyZUZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbiAgICAuLi4ob2JqLkNvbG9ycyAmJiB7IENvbG9yczogb2JqLkNvbG9ycy5tYXAoKGl0ZW0pID0+IE1lYXN1cmVGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBUcmVlTWFwRmllbGRXZWxsc0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgVHJlZU1hcENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkRhdGFMYWJlbHMgJiYgeyBEYXRhTGFiZWxzOiBEYXRhTGFiZWxPcHRpb25zRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5EYXRhTGFiZWxzKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRyZWVNYXBWaXN1YWxGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IFdhdGVyZmFsbENoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlZhbHVlcyAmJiB7IFZhbHVlczogb2JqLlZhbHVlcy5tYXAoKGl0ZW0pID0+IE1lYXN1cmVGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBXYXRlcmZhbGxDaGFydEZpZWxkV2VsbHNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IFdhdGVyZmFsbENoYXJ0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRGF0YUxhYmVscyAmJiB7IERhdGFMYWJlbHM6IERhdGFMYWJlbE9wdGlvbnNGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkRhdGFMYWJlbHMpIH0pLFxuICAgIC4uLihvYmouVmlzdWFsUGFsZXR0ZSAmJiB7IFZpc3VhbFBhbGV0dGU6IFZpc3VhbFBhbGV0dGVGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlZpc3VhbFBhbGV0dGUpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgV2F0ZXJmYWxsVmlzdWFsRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG59KTtcbmV4cG9ydCBjb25zdCBXb3JkQ2xvdWRBZ2dyZWdhdGVkRmllbGRXZWxsc0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouU2l6ZSAmJiB7IFNpemU6IG9iai5TaXplLm1hcCgoaXRlbSkgPT4gTWVhc3VyZUZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFdvcmRDbG91ZEZpZWxkV2VsbHNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IFdvcmRDbG91ZENoYXJ0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgV29yZENsb3VkVmlzdWFsRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG59KTtcbmV4cG9ydCBjb25zdCBWaXN1YWxGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLktQSVZpc3VhbCAmJiB7IEtQSVZpc3VhbDogS1BJVmlzdWFsRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5LUElWaXN1YWwpIH0pLFxuICAgIC4uLihvYmouR2F1Z2VDaGFydFZpc3VhbCAmJiB7IEdhdWdlQ2hhcnRWaXN1YWw6IEdhdWdlQ2hhcnRWaXN1YWxGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkdhdWdlQ2hhcnRWaXN1YWwpIH0pLFxuICAgIC4uLihvYmouTGF5ZXJNYXBWaXN1YWwgJiYgeyBMYXllck1hcFZpc3VhbDogTGF5ZXJNYXBWaXN1YWxGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkxheWVyTWFwVmlzdWFsKSB9KSxcbiAgICAuLi4ob2JqLlNjYXR0ZXJQbG90VmlzdWFsICYmIHsgU2NhdHRlclBsb3RWaXN1YWw6IFNjYXR0ZXJQbG90VmlzdWFsRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5TY2F0dGVyUGxvdFZpc3VhbCkgfSksXG4gICAgLi4uKG9iai5IaXN0b2dyYW1WaXN1YWwgJiYgeyBIaXN0b2dyYW1WaXN1YWw6IEhpc3RvZ3JhbVZpc3VhbEZpbHRlclNlbnNpdGl2ZUxvZyhvYmouSGlzdG9ncmFtVmlzdWFsKSB9KSxcbiAgICAuLi4ob2JqLkluc2lnaHRWaXN1YWwgJiYgeyBJbnNpZ2h0VmlzdWFsOiBJbnNpZ2h0VmlzdWFsRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5JbnNpZ2h0VmlzdWFsKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFNoZWV0RGVmaW5pdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgQW5hbHlzaXNEZWZpbml0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5DYWxjdWxhdGVkRmllbGRzICYmIHtcbiAgICAgICAgQ2FsY3VsYXRlZEZpZWxkczogb2JqLkNhbGN1bGF0ZWRGaWVsZHMubWFwKChpdGVtKSA9PiBDYWxjdWxhdGVkRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpLFxuICAgIH0pLFxuICAgIC4uLihvYmouUGFyYW1ldGVyRGVjbGFyYXRpb25zICYmIHtcbiAgICAgICAgUGFyYW1ldGVyRGVjbGFyYXRpb25zOiBvYmouUGFyYW1ldGVyRGVjbGFyYXRpb25zLm1hcCgoaXRlbSkgPT4gUGFyYW1ldGVyRGVjbGFyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpLFxuICAgIH0pLFxuICAgIC4uLihvYmouQ29sdW1uQ29uZmlndXJhdGlvbnMgJiYge1xuICAgICAgICBDb2x1bW5Db25maWd1cmF0aW9uczogb2JqLkNvbHVtbkNvbmZpZ3VyYXRpb25zLm1hcCgoaXRlbSkgPT4gQ29sdW1uQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBTbmFwc2hvdEpvYlMzUmVzdWx0RmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5TM1VyaSAmJiB7IFMzVXJpOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgU25hcHNob3RKb2JSZXN1bHRGaWxlR3JvdXBGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlMzUmVzdWx0cyAmJiB7IFMzUmVzdWx0czogb2JqLlMzUmVzdWx0cy5tYXAoKGl0ZW0pID0+IFNuYXBzaG90Sm9iUzNSZXN1bHRGaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgQW5vbnltb3VzVXNlclNuYXBzaG90Sm9iUmVzdWx0RmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG59KTtcbmV4cG9ydCBjb25zdCBBc3NldEJ1bmRsZUltcG9ydEpvYkRhdGFTb3VyY2VDcmVkZW50aWFsUGFpckZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgQXNzZXRCdW5kbGVJbXBvcnRKb2JEYXRhU291cmNlQ3JlZGVudGlhbHNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkNyZWRlbnRpYWxQYWlyICYmIHsgQ3JlZGVudGlhbFBhaXI6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBBc3NldEJ1bmRsZUltcG9ydEpvYkRhdGFTb3VyY2VPdmVycmlkZVBhcmFtZXRlcnNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkRhdGFTb3VyY2VQYXJhbWV0ZXJzICYmIHsgRGF0YVNvdXJjZVBhcmFtZXRlcnM6IG9iai5EYXRhU291cmNlUGFyYW1ldGVycyB9KSxcbiAgICAuLi4ob2JqLkNyZWRlbnRpYWxzICYmIHsgQ3JlZGVudGlhbHM6IEFzc2V0QnVuZGxlSW1wb3J0Sm9iRGF0YVNvdXJjZUNyZWRlbnRpYWxzRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5DcmVkZW50aWFscykgfSksXG59KTtcbmV4cG9ydCBjb25zdCBBc3NldEJ1bmRsZUltcG9ydEpvYk92ZXJyaWRlUGFyYW1ldGVyc0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRGF0YVNvdXJjZXMgJiYge1xuICAgICAgICBEYXRhU291cmNlczogb2JqLkRhdGFTb3VyY2VzLm1hcCgoaXRlbSkgPT4gQXNzZXRCdW5kbGVJbXBvcnRKb2JEYXRhU291cmNlT3ZlcnJpZGVQYXJhbWV0ZXJzRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEFzc2V0QnVuZGxlSW1wb3J0U291cmNlRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5Cb2R5ICYmIHsgQm9keTogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEFzc2V0QnVuZGxlSW1wb3J0U291cmNlRGVzY3JpcHRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkJvZHkgJiYgeyBCb2R5OiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgVG9waWNJUk1ldHJpY0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRXhwcmVzc2lvbiAmJiB7IEV4cHJlc3Npb246IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBUb3BpY0lSRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5NZXRyaWNzICYmIHsgTWV0cmljczogb2JqLk1ldHJpY3MubWFwKChpdGVtKSA9PiBUb3BpY0lSTWV0cmljRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbn0pO1xuIiwiaW1wb3J0IHsgU0VOU0lUSVZFX1NUUklORyB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IENhbGN1bGF0ZWRGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZywgQ29sdW1uQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZywgUGFyYW1ldGVyRGVjbGFyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2csIH0gZnJvbSBcIi4vbW9kZWxzXzBcIjtcbmltcG9ydCB7IFF1aWNrU2lnaHRTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fQmFzZUV4Y2VwdGlvbiB9IGZyb20gXCIuL1F1aWNrU2lnaHRTZXJ2aWNlRXhjZXB0aW9uXCI7XG5leHBvcnQgY29uc3QgQnJhbmRWZXJzaW9uU3RhdHVzID0ge1xuICAgIENSRUFURV9GQUlMRUQ6IFwiQ1JFQVRFX0ZBSUxFRFwiLFxuICAgIENSRUFURV9JTl9QUk9HUkVTUzogXCJDUkVBVEVfSU5fUFJPR1JFU1NcIixcbiAgICBDUkVBVEVfU1VDQ0VFREVEOiBcIkNSRUFURV9TVUNDRUVERURcIixcbn07XG5leHBvcnQgY2xhc3MgUmVzb3VyY2VFeGlzdHNFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIlJlc291cmNlRXhpc3RzRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIFJlc291cmNlVHlwZTtcbiAgICBSZXF1ZXN0SWQ7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlJlc291cmNlRXhpc3RzRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFJlc291cmNlRXhpc3RzRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICAgICAgdGhpcy5SZXNvdXJjZVR5cGUgPSBvcHRzLlJlc291cmNlVHlwZTtcbiAgICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBvcHRzLlJlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgQ2FwYWJpbGl0eVN0YXRlID0ge1xuICAgIERFTlk6IFwiREVOWVwiLFxufTtcbmV4cG9ydCBjb25zdCBDb2x1bW5EYXRhVHlwZSA9IHtcbiAgICBEQVRFVElNRTogXCJEQVRFVElNRVwiLFxuICAgIERFQ0lNQUw6IFwiREVDSU1BTFwiLFxuICAgIElOVEVHRVI6IFwiSU5URUdFUlwiLFxuICAgIFNUUklORzogXCJTVFJJTkdcIixcbn07XG5leHBvcnQgY29uc3QgQ29sdW1uRGF0YVN1YlR5cGUgPSB7XG4gICAgRklYRUQ6IFwiRklYRURcIixcbiAgICBGTE9BVDogXCJGTE9BVFwiLFxufTtcbmV4cG9ydCBjb25zdCBDYXRlZ29yeUZpbHRlckZ1bmN0aW9uID0ge1xuICAgIENPTlRBSU5TOiBcIkNPTlRBSU5TXCIsXG4gICAgRVhBQ1Q6IFwiRVhBQ1RcIixcbn07XG5leHBvcnQgY29uc3QgQ2F0ZWdvcnlGaWx0ZXJUeXBlID0ge1xuICAgIENVU1RPTV9GSUxURVI6IFwiQ1VTVE9NX0ZJTFRFUlwiLFxuICAgIENVU1RPTV9GSUxURVJfTElTVDogXCJDVVNUT01fRklMVEVSX0xJU1RcIixcbiAgICBGSUxURVJfTElTVDogXCJGSUxURVJfTElTVFwiLFxufTtcbmV4cG9ydCBjb25zdCBDb2x1bW5EYXRhUm9sZSA9IHtcbiAgICBESU1FTlNJT046IFwiRElNRU5TSU9OXCIsXG4gICAgTUVBU1VSRTogXCJNRUFTVVJFXCIsXG59O1xuZXhwb3J0IGNvbnN0IEdlb1NwYXRpYWxDb3VudHJ5Q29kZSA9IHtcbiAgICBVUzogXCJVU1wiLFxufTtcbmV4cG9ydCBjb25zdCBDb2x1bW5PcmRlcmluZ1R5cGUgPSB7XG4gICAgR1JFQVRFUl9JU19CRVRURVI6IFwiR1JFQVRFUl9JU19CRVRURVJcIixcbiAgICBMRVNTRVJfSVNfQkVUVEVSOiBcIkxFU1NFUl9JU19CRVRURVJcIixcbiAgICBTUEVDSUZJRUQ6IFwiU1BFQ0lGSUVEXCIsXG59O1xuZXhwb3J0IGNvbnN0IEdlb1NwYXRpYWxEYXRhUm9sZSA9IHtcbiAgICBDSVRZOiBcIkNJVFlcIixcbiAgICBDT1VOVFJZOiBcIkNPVU5UUllcIixcbiAgICBDT1VOVFk6IFwiQ09VTlRZXCIsXG4gICAgTEFUSVRVREU6IFwiTEFUSVRVREVcIixcbiAgICBMT05HSVRVREU6IFwiTE9OR0lUVURFXCIsXG4gICAgUE9TVENPREU6IFwiUE9TVENPREVcIixcbiAgICBTVEFURTogXCJTVEFURVwiLFxufTtcbmV4cG9ydCBjb25zdCBDb2x1bW5UYWdOYW1lID0ge1xuICAgIENPTFVNTl9ERVNDUklQVElPTjogXCJDT0xVTU5fREVTQ1JJUFRJT05cIixcbiAgICBDT0xVTU5fR0VPR1JBUEhJQ19ST0xFOiBcIkNPTFVNTl9HRU9HUkFQSElDX1JPTEVcIixcbn07XG5leHBvcnQgY29uc3QgVW5kZWZpbmVkU3BlY2lmaWVkVmFsdWVUeXBlID0ge1xuICAgIExFQVNUOiBcIkxFQVNUXCIsXG4gICAgTU9TVDogXCJNT1NUXCIsXG59O1xuZXhwb3J0IGNsYXNzIENvbmN1cnJlbnRVcGRhdGluZ0V4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiQ29uY3VycmVudFVwZGF0aW5nRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJzZXJ2ZXJcIjtcbiAgICBNZXNzYWdlO1xuICAgIFJlcXVlc3RJZDtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQ29uY3VycmVudFVwZGF0aW5nRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwic2VydmVyXCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENvbmN1cnJlbnRVcGRhdGluZ0V4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJlc291cmNlVW5hdmFpbGFibGVFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIlJlc291cmNlVW5hdmFpbGFibGVFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcInNlcnZlclwiO1xuICAgIE1lc3NhZ2U7XG4gICAgUmVzb3VyY2VUeXBlO1xuICAgIFJlcXVlc3RJZDtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiUmVzb3VyY2VVbmF2YWlsYWJsZUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcInNlcnZlclwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBSZXNvdXJjZVVuYXZhaWxhYmxlRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICAgICAgdGhpcy5SZXNvdXJjZVR5cGUgPSBvcHRzLlJlc291cmNlVHlwZTtcbiAgICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBvcHRzLlJlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUHJlY29uZGl0aW9uTm90TWV0RXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJQcmVjb25kaXRpb25Ob3RNZXRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgUmVxdWVzdElkO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJQcmVjb25kaXRpb25Ob3RNZXRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgUHJlY29uZGl0aW9uTm90TWV0RXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBvcHRzLlJlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgVmFsaWRhdGlvblN0cmF0ZWd5TW9kZSA9IHtcbiAgICBMRU5JRU5UOiBcIkxFTklFTlRcIixcbiAgICBTVFJJQ1Q6IFwiU1RSSUNUXCIsXG59O1xuZXhwb3J0IGNsYXNzIExpbWl0RXhjZWVkZWRFeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIkxpbWl0RXhjZWVkZWRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgUmVzb3VyY2VUeXBlO1xuICAgIFJlcXVlc3RJZDtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiTGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICAgICAgdGhpcy5SZXNvdXJjZVR5cGUgPSBvcHRzLlJlc291cmNlVHlwZTtcbiAgICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBvcHRzLlJlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVW5zdXBwb3J0ZWRVc2VyRWRpdGlvbkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiVW5zdXBwb3J0ZWRVc2VyRWRpdGlvbkV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBSZXF1ZXN0SWQ7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlVuc3VwcG9ydGVkVXNlckVkaXRpb25FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgVW5zdXBwb3J0ZWRVc2VyRWRpdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludGVybmFsU2VydmVyRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJbnRlcm5hbFNlcnZlckV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwic2VydmVyXCI7XG4gICAgTWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiSW50ZXJuYWxTZXJ2ZXJFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJzZXJ2ZXJcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW50ZXJuYWxTZXJ2ZXJFeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkUmVxdWVzdEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW52YWxpZFJlcXVlc3RFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgUmVxdWVzdElkO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJbnZhbGlkUmVxdWVzdEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnZhbGlkUmVxdWVzdEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IERhc2hib2FyZFVJU3RhdGUgPSB7XG4gICAgQ09MTEFQU0VEOiBcIkNPTExBUFNFRFwiLFxuICAgIEVYUEFOREVEOiBcIkVYUEFOREVEXCIsXG59O1xuZXhwb3J0IGNvbnN0IERhdGFzZXRQYXJhbWV0ZXJWYWx1ZVR5cGUgPSB7XG4gICAgTVVMVElfVkFMVUVEOiBcIk1VTFRJX1ZBTFVFRFwiLFxuICAgIFNJTkdMRV9WQUxVRUQ6IFwiU0lOR0xFX1ZBTFVFRFwiLFxufTtcbmV4cG9ydCBjb25zdCBEYXRhU2V0SW1wb3J0TW9kZSA9IHtcbiAgICBESVJFQ1RfUVVFUlk6IFwiRElSRUNUX1FVRVJZXCIsXG4gICAgU1BJQ0U6IFwiU1BJQ0VcIixcbn07XG5leHBvcnQgdmFyIFRyYW5zZm9ybU9wZXJhdGlvbjtcbihmdW5jdGlvbiAoVHJhbnNmb3JtT3BlcmF0aW9uKSB7XG4gICAgVHJhbnNmb3JtT3BlcmF0aW9uLnZpc2l0ID0gKHZhbHVlLCB2aXNpdG9yKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZS5Qcm9qZWN0T3BlcmF0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5Qcm9qZWN0T3BlcmF0aW9uKHZhbHVlLlByb2plY3RPcGVyYXRpb24pO1xuICAgICAgICBpZiAodmFsdWUuRmlsdGVyT3BlcmF0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5GaWx0ZXJPcGVyYXRpb24odmFsdWUuRmlsdGVyT3BlcmF0aW9uKTtcbiAgICAgICAgaWYgKHZhbHVlLkNyZWF0ZUNvbHVtbnNPcGVyYXRpb24gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLkNyZWF0ZUNvbHVtbnNPcGVyYXRpb24odmFsdWUuQ3JlYXRlQ29sdW1uc09wZXJhdGlvbik7XG4gICAgICAgIGlmICh2YWx1ZS5SZW5hbWVDb2x1bW5PcGVyYXRpb24gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLlJlbmFtZUNvbHVtbk9wZXJhdGlvbih2YWx1ZS5SZW5hbWVDb2x1bW5PcGVyYXRpb24pO1xuICAgICAgICBpZiAodmFsdWUuQ2FzdENvbHVtblR5cGVPcGVyYXRpb24gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLkNhc3RDb2x1bW5UeXBlT3BlcmF0aW9uKHZhbHVlLkNhc3RDb2x1bW5UeXBlT3BlcmF0aW9uKTtcbiAgICAgICAgaWYgKHZhbHVlLlRhZ0NvbHVtbk9wZXJhdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuVGFnQ29sdW1uT3BlcmF0aW9uKHZhbHVlLlRhZ0NvbHVtbk9wZXJhdGlvbik7XG4gICAgICAgIGlmICh2YWx1ZS5VbnRhZ0NvbHVtbk9wZXJhdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuVW50YWdDb2x1bW5PcGVyYXRpb24odmFsdWUuVW50YWdDb2x1bW5PcGVyYXRpb24pO1xuICAgICAgICBpZiAodmFsdWUuT3ZlcnJpZGVEYXRhc2V0UGFyYW1ldGVyT3BlcmF0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5PdmVycmlkZURhdGFzZXRQYXJhbWV0ZXJPcGVyYXRpb24odmFsdWUuT3ZlcnJpZGVEYXRhc2V0UGFyYW1ldGVyT3BlcmF0aW9uKTtcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IuXyh2YWx1ZS4kdW5rbm93blswXSwgdmFsdWUuJHVua25vd25bMV0pO1xuICAgIH07XG59KShUcmFuc2Zvcm1PcGVyYXRpb24gfHwgKFRyYW5zZm9ybU9wZXJhdGlvbiA9IHt9KSk7XG5leHBvcnQgY29uc3QgSm9pblR5cGUgPSB7XG4gICAgSU5ORVI6IFwiSU5ORVJcIixcbiAgICBMRUZUOiBcIkxFRlRcIixcbiAgICBPVVRFUjogXCJPVVRFUlwiLFxuICAgIFJJR0hUOiBcIlJJR0hUXCIsXG59O1xuZXhwb3J0IGNvbnN0IElucHV0Q29sdW1uRGF0YVR5cGUgPSB7XG4gICAgQklUOiBcIkJJVFwiLFxuICAgIEJPT0xFQU46IFwiQk9PTEVBTlwiLFxuICAgIERBVEVUSU1FOiBcIkRBVEVUSU1FXCIsXG4gICAgREVDSU1BTDogXCJERUNJTUFMXCIsXG4gICAgSU5URUdFUjogXCJJTlRFR0VSXCIsXG4gICAgSlNPTjogXCJKU09OXCIsXG4gICAgU1RSSU5HOiBcIlNUUklOR1wiLFxufTtcbmV4cG9ydCBjb25zdCBGaWxlRm9ybWF0ID0ge1xuICAgIENMRjogXCJDTEZcIixcbiAgICBDU1Y6IFwiQ1NWXCIsXG4gICAgRUxGOiBcIkVMRlwiLFxuICAgIEpTT046IFwiSlNPTlwiLFxuICAgIFRTVjogXCJUU1ZcIixcbiAgICBYTFNYOiBcIlhMU1hcIixcbn07XG5leHBvcnQgY29uc3QgVGV4dFF1YWxpZmllciA9IHtcbiAgICBET1VCTEVfUVVPVEU6IFwiRE9VQkxFX1FVT1RFXCIsXG4gICAgU0lOR0xFX1FVT1RFOiBcIlNJTkdMRV9RVU9URVwiLFxufTtcbmV4cG9ydCB2YXIgUGh5c2ljYWxUYWJsZTtcbihmdW5jdGlvbiAoUGh5c2ljYWxUYWJsZSkge1xuICAgIFBoeXNpY2FsVGFibGUudmlzaXQgPSAodmFsdWUsIHZpc2l0b3IpID0+IHtcbiAgICAgICAgaWYgKHZhbHVlLlJlbGF0aW9uYWxUYWJsZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuUmVsYXRpb25hbFRhYmxlKHZhbHVlLlJlbGF0aW9uYWxUYWJsZSk7XG4gICAgICAgIGlmICh2YWx1ZS5DdXN0b21TcWwgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLkN1c3RvbVNxbCh2YWx1ZS5DdXN0b21TcWwpO1xuICAgICAgICBpZiAodmFsdWUuUzNTb3VyY2UgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLlMzU291cmNlKHZhbHVlLlMzU291cmNlKTtcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IuXyh2YWx1ZS4kdW5rbm93blswXSwgdmFsdWUuJHVua25vd25bMV0pO1xuICAgIH07XG59KShQaHlzaWNhbFRhYmxlIHx8IChQaHlzaWNhbFRhYmxlID0ge30pKTtcbmV4cG9ydCBjb25zdCBSb3dMZXZlbFBlcm1pc3Npb25Gb3JtYXRWZXJzaW9uID0ge1xuICAgIFZFUlNJT05fMTogXCJWRVJTSU9OXzFcIixcbiAgICBWRVJTSU9OXzI6IFwiVkVSU0lPTl8yXCIsXG59O1xuZXhwb3J0IGNvbnN0IFJvd0xldmVsUGVybWlzc2lvblBvbGljeSA9IHtcbiAgICBERU5ZX0FDQ0VTUzogXCJERU5ZX0FDQ0VTU1wiLFxuICAgIEdSQU5UX0FDQ0VTUzogXCJHUkFOVF9BQ0NFU1NcIixcbn07XG5leHBvcnQgY29uc3QgU3RhdHVzID0ge1xuICAgIERJU0FCTEVEOiBcIkRJU0FCTEVEXCIsXG4gICAgRU5BQkxFRDogXCJFTkFCTEVEXCIsXG59O1xuZXhwb3J0IGNvbnN0IERhdGFTZXRVc2VBcyA9IHtcbiAgICBSTFNfUlVMRVM6IFwiUkxTX1JVTEVTXCIsXG59O1xuZXhwb3J0IGNvbnN0IERhdGFTb3VyY2VUeXBlID0ge1xuICAgIEFET0JFX0FOQUxZVElDUzogXCJBRE9CRV9BTkFMWVRJQ1NcIixcbiAgICBBTUFaT05fRUxBU1RJQ1NFQVJDSDogXCJBTUFaT05fRUxBU1RJQ1NFQVJDSFwiLFxuICAgIEFNQVpPTl9PUEVOU0VBUkNIOiBcIkFNQVpPTl9PUEVOU0VBUkNIXCIsXG4gICAgQVRIRU5BOiBcIkFUSEVOQVwiLFxuICAgIEFVUk9SQTogXCJBVVJPUkFcIixcbiAgICBBVVJPUkFfUE9TVEdSRVNRTDogXCJBVVJPUkFfUE9TVEdSRVNRTFwiLFxuICAgIEFXU19JT1RfQU5BTFlUSUNTOiBcIkFXU19JT1RfQU5BTFlUSUNTXCIsXG4gICAgQklHUVVFUlk6IFwiQklHUVVFUllcIixcbiAgICBEQVRBQlJJQ0tTOiBcIkRBVEFCUklDS1NcIixcbiAgICBFWEFTT0w6IFwiRVhBU09MXCIsXG4gICAgR0lUSFVCOiBcIkdJVEhVQlwiLFxuICAgIEdPT0dMRVNIRUVUUzogXCJHT09HTEVTSEVFVFNcIixcbiAgICBKSVJBOiBcIkpJUkFcIixcbiAgICBNQVJJQURCOiBcIk1BUklBREJcIixcbiAgICBNWVNRTDogXCJNWVNRTFwiLFxuICAgIE9SQUNMRTogXCJPUkFDTEVcIixcbiAgICBQT1NUR1JFU1FMOiBcIlBPU1RHUkVTUUxcIixcbiAgICBQUkVTVE86IFwiUFJFU1RPXCIsXG4gICAgUkVEU0hJRlQ6IFwiUkVEU0hJRlRcIixcbiAgICBTMzogXCJTM1wiLFxuICAgIFNBTEVTRk9SQ0U6IFwiU0FMRVNGT1JDRVwiLFxuICAgIFNFUlZJQ0VOT1c6IFwiU0VSVklDRU5PV1wiLFxuICAgIFNOT1dGTEFLRTogXCJTTk9XRkxBS0VcIixcbiAgICBTUEFSSzogXCJTUEFSS1wiLFxuICAgIFNRTFNFUlZFUjogXCJTUUxTRVJWRVJcIixcbiAgICBTVEFSQlVSU1Q6IFwiU1RBUkJVUlNUXCIsXG4gICAgVEVSQURBVEE6IFwiVEVSQURBVEFcIixcbiAgICBUSU1FU1RSRUFNOiBcIlRJTUVTVFJFQU1cIixcbiAgICBUUklOTzogXCJUUklOT1wiLFxuICAgIFRXSVRURVI6IFwiVFdJVFRFUlwiLFxufTtcbmV4cG9ydCBjbGFzcyBDdXN0b21lck1hbmFnZWRLZXlVbmF2YWlsYWJsZUV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiQ3VzdG9tZXJNYW5hZ2VkS2V5VW5hdmFpbGFibGVFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgUmVxdWVzdElkO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJDdXN0b21lck1hbmFnZWRLZXlVbmF2YWlsYWJsZUV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDdXN0b21lck1hbmFnZWRLZXlVbmF2YWlsYWJsZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEZvbGRlclR5cGUgPSB7XG4gICAgUkVTVFJJQ1RFRDogXCJSRVNUUklDVEVEXCIsXG4gICAgU0hBUkVEOiBcIlNIQVJFRFwiLFxufTtcbmV4cG9ydCBjb25zdCBTaGFyaW5nTW9kZWwgPSB7XG4gICAgQUNDT1VOVDogXCJBQ0NPVU5UXCIsXG4gICAgTkFNRVNQQUNFOiBcIk5BTUVTUEFDRVwiLFxufTtcbmV4cG9ydCBjb25zdCBNZW1iZXJUeXBlID0ge1xuICAgIEFOQUxZU0lTOiBcIkFOQUxZU0lTXCIsXG4gICAgREFTSEJPQVJEOiBcIkRBU0hCT0FSRFwiLFxuICAgIERBVEFTRVQ6IFwiREFUQVNFVFwiLFxuICAgIERBVEFTT1VSQ0U6IFwiREFUQVNPVVJDRVwiLFxuICAgIFRPUElDOiBcIlRPUElDXCIsXG59O1xuZXhwb3J0IGNvbnN0IEluZ2VzdGlvblR5cGUgPSB7XG4gICAgRlVMTF9SRUZSRVNIOiBcIkZVTExfUkVGUkVTSFwiLFxuICAgIElOQ1JFTUVOVEFMX1JFRlJFU0g6IFwiSU5DUkVNRU5UQUxfUkVGUkVTSFwiLFxufTtcbmV4cG9ydCBjb25zdCBJbmdlc3Rpb25TdGF0dXMgPSB7XG4gICAgQ0FOQ0VMTEVEOiBcIkNBTkNFTExFRFwiLFxuICAgIENPTVBMRVRFRDogXCJDT01QTEVURURcIixcbiAgICBGQUlMRUQ6IFwiRkFJTEVEXCIsXG4gICAgSU5JVElBTElaRUQ6IFwiSU5JVElBTElaRURcIixcbiAgICBRVUVVRUQ6IFwiUVVFVUVEXCIsXG4gICAgUlVOTklORzogXCJSVU5OSU5HXCIsXG59O1xuZXhwb3J0IGNvbnN0IElkZW50aXR5U3RvcmUgPSB7XG4gICAgUVVJQ0tTSUdIVDogXCJRVUlDS1NJR0hUXCIsXG59O1xuZXhwb3J0IGNvbnN0IE5hbWVzcGFjZVN0YXR1cyA9IHtcbiAgICBDUkVBVEVEOiBcIkNSRUFURURcIixcbiAgICBDUkVBVElORzogXCJDUkVBVElOR1wiLFxuICAgIERFTEVUSU5HOiBcIkRFTEVUSU5HXCIsXG4gICAgTk9OX1JFVFJZQUJMRV9GQUlMVVJFOiBcIk5PTl9SRVRSWUFCTEVfRkFJTFVSRVwiLFxuICAgIFJFVFJZQUJMRV9GQUlMVVJFOiBcIlJFVFJZQUJMRV9GQUlMVVJFXCIsXG59O1xuZXhwb3J0IGNvbnN0IFJlZnJlc2hJbnRlcnZhbCA9IHtcbiAgICBEQUlMWTogXCJEQUlMWVwiLFxuICAgIEhPVVJMWTogXCJIT1VSTFlcIixcbiAgICBNSU5VVEUxNTogXCJNSU5VVEUxNVwiLFxuICAgIE1JTlVURTMwOiBcIk1JTlVURTMwXCIsXG4gICAgTU9OVEhMWTogXCJNT05USExZXCIsXG4gICAgV0VFS0xZOiBcIldFRUtMWVwiLFxufTtcbmV4cG9ydCBjb25zdCBEYXlPZldlZWsgPSB7XG4gICAgRlJJREFZOiBcIkZSSURBWVwiLFxuICAgIE1PTkRBWTogXCJNT05EQVlcIixcbiAgICBTQVRVUkRBWTogXCJTQVRVUkRBWVwiLFxuICAgIFNVTkRBWTogXCJTVU5EQVlcIixcbiAgICBUSFVSU0RBWTogXCJUSFVSU0RBWVwiLFxuICAgIFRVRVNEQVk6IFwiVFVFU0RBWVwiLFxuICAgIFdFRE5FU0RBWTogXCJXRURORVNEQVlcIixcbn07XG5leHBvcnQgY29uc3QgUm9sZSA9IHtcbiAgICBBRE1JTjogXCJBRE1JTlwiLFxuICAgIEFETUlOX1BSTzogXCJBRE1JTl9QUk9cIixcbiAgICBBVVRIT1I6IFwiQVVUSE9SXCIsXG4gICAgQVVUSE9SX1BSTzogXCJBVVRIT1JfUFJPXCIsXG4gICAgUkVBREVSOiBcIlJFQURFUlwiLFxuICAgIFJFQURFUl9QUk86IFwiUkVBREVSX1BST1wiLFxufTtcbmV4cG9ydCBjb25zdCBEZWZhdWx0QWdncmVnYXRpb24gPSB7XG4gICAgQVZFUkFHRTogXCJBVkVSQUdFXCIsXG4gICAgQ09VTlQ6IFwiQ09VTlRcIixcbiAgICBESVNUSU5DVF9DT1VOVDogXCJESVNUSU5DVF9DT1VOVFwiLFxuICAgIE1BWDogXCJNQVhcIixcbiAgICBNRURJQU46IFwiTUVESUFOXCIsXG4gICAgTUlOOiBcIk1JTlwiLFxuICAgIFNUREVWOiBcIlNUREVWXCIsXG4gICAgU1RERVZQOiBcIlNUREVWUFwiLFxuICAgIFNVTTogXCJTVU1cIixcbiAgICBWQVI6IFwiVkFSXCIsXG4gICAgVkFSUDogXCJWQVJQXCIsXG59O1xuZXhwb3J0IGNvbnN0IE5hbWVkRmlsdGVyVHlwZSA9IHtcbiAgICBDQVRFR09SWV9GSUxURVI6IFwiQ0FURUdPUllfRklMVEVSXCIsXG4gICAgREFURV9SQU5HRV9GSUxURVI6IFwiREFURV9SQU5HRV9GSUxURVJcIixcbiAgICBOVUxMX0ZJTFRFUjogXCJOVUxMX0ZJTFRFUlwiLFxuICAgIE5VTUVSSUNfRVFVQUxJVFlfRklMVEVSOiBcIk5VTUVSSUNfRVFVQUxJVFlfRklMVEVSXCIsXG4gICAgTlVNRVJJQ19SQU5HRV9GSUxURVI6IFwiTlVNRVJJQ19SQU5HRV9GSUxURVJcIixcbiAgICBSRUxBVElWRV9EQVRFX0ZJTFRFUjogXCJSRUxBVElWRV9EQVRFX0ZJTFRFUlwiLFxufTtcbmV4cG9ydCBjb25zdCBOdWxsRmlsdGVyVHlwZSA9IHtcbiAgICBBTExfVkFMVUVTOiBcIkFMTF9WQUxVRVNcIixcbiAgICBOT05fTlVMTFNfT05MWTogXCJOT05fTlVMTFNfT05MWVwiLFxuICAgIE5VTExTX09OTFk6IFwiTlVMTFNfT05MWVwiLFxufTtcbmV4cG9ydCBjb25zdCBOYW1lZEZpbHRlckFnZ1R5cGUgPSB7XG4gICAgQVZFUkFHRTogXCJBVkVSQUdFXCIsXG4gICAgQ09VTlQ6IFwiQ09VTlRcIixcbiAgICBESVNUSU5DVF9DT1VOVDogXCJESVNUSU5DVF9DT1VOVFwiLFxuICAgIE1BWDogXCJNQVhcIixcbiAgICBNRURJQU46IFwiTUVESUFOXCIsXG4gICAgTUlOOiBcIk1JTlwiLFxuICAgIE5PX0FHR1JFR0FUSU9OOiBcIk5PX0FHR1JFR0FUSU9OXCIsXG4gICAgU1RERVY6IFwiU1RERVZcIixcbiAgICBTVERFVlA6IFwiU1RERVZQXCIsXG4gICAgU1VNOiBcIlNVTVwiLFxuICAgIFZBUjogXCJWQVJcIixcbiAgICBWQVJQOiBcIlZBUlBcIixcbn07XG5leHBvcnQgY29uc3QgVG9waWNSZWxhdGl2ZURhdGVGaWx0ZXJGdW5jdGlvbiA9IHtcbiAgICBMQVNUOiBcIkxBU1RcIixcbiAgICBORVhUOiBcIk5FWFRcIixcbiAgICBOT1c6IFwiTk9XXCIsXG4gICAgUFJFVklPVVM6IFwiUFJFVklPVVNcIixcbiAgICBUSElTOiBcIlRISVNcIixcbn07XG5leHBvcnQgY29uc3QgTmFtZWRFbnRpdHlBZ2dUeXBlID0ge1xuICAgIEFWRVJBR0U6IFwiQVZFUkFHRVwiLFxuICAgIENPVU5UOiBcIkNPVU5UXCIsXG4gICAgQ1VTVE9NOiBcIkNVU1RPTVwiLFxuICAgIERJU1RJTkNUX0NPVU5UOiBcIkRJU1RJTkNUX0NPVU5UXCIsXG4gICAgTUFYOiBcIk1BWFwiLFxuICAgIE1FRElBTjogXCJNRURJQU5cIixcbiAgICBNSU46IFwiTUlOXCIsXG4gICAgUEVSQ0VOVElMRTogXCJQRVJDRU5USUxFXCIsXG4gICAgU1RERVY6IFwiU1RERVZcIixcbiAgICBTVERFVlA6IFwiU1RERVZQXCIsXG4gICAgU1VNOiBcIlNVTVwiLFxuICAgIFZBUjogXCJWQVJcIixcbiAgICBWQVJQOiBcIlZBUlBcIixcbn07XG5leHBvcnQgY29uc3QgUHJvcGVydHlSb2xlID0ge1xuICAgIElEOiBcIklEXCIsXG4gICAgUFJJTUFSWTogXCJQUklNQVJZXCIsXG59O1xuZXhwb3J0IGNvbnN0IFByb3BlcnR5VXNhZ2UgPSB7XG4gICAgRElNRU5TSU9OOiBcIkRJTUVOU0lPTlwiLFxuICAgIElOSEVSSVQ6IFwiSU5IRVJJVFwiLFxuICAgIE1FQVNVUkU6IFwiTUVBU1VSRVwiLFxufTtcbmV4cG9ydCBjb25zdCBUb3BpY1VzZXJFeHBlcmllbmNlVmVyc2lvbiA9IHtcbiAgICBMRUdBQ1k6IFwiTEVHQUNZXCIsXG4gICAgTkVXX1JFQURFUl9FWFBFUklFTkNFOiBcIk5FV19SRUFERVJfRVhQRVJJRU5DRVwiLFxufTtcbmV4cG9ydCBjb25zdCBUb3BpY1NjaGVkdWxlVHlwZSA9IHtcbiAgICBEQUlMWTogXCJEQUlMWVwiLFxuICAgIEhPVVJMWTogXCJIT1VSTFlcIixcbiAgICBNT05USExZOiBcIk1PTlRITFlcIixcbiAgICBXRUVLTFk6IFwiV0VFS0xZXCIsXG59O1xuZXhwb3J0IGNvbnN0IFZQQ0Nvbm5lY3Rpb25BdmFpbGFiaWxpdHlTdGF0dXMgPSB7XG4gICAgQVZBSUxBQkxFOiBcIkFWQUlMQUJMRVwiLFxuICAgIFBBUlRJQUxMWV9BVkFJTEFCTEU6IFwiUEFSVElBTExZX0FWQUlMQUJMRVwiLFxuICAgIFVOQVZBSUxBQkxFOiBcIlVOQVZBSUxBQkxFXCIsXG59O1xuZXhwb3J0IGNvbnN0IFZQQ0Nvbm5lY3Rpb25SZXNvdXJjZVN0YXR1cyA9IHtcbiAgICBDUkVBVElPTl9GQUlMRUQ6IFwiQ1JFQVRJT05fRkFJTEVEXCIsXG4gICAgQ1JFQVRJT05fSU5fUFJPR1JFU1M6IFwiQ1JFQVRJT05fSU5fUFJPR1JFU1NcIixcbiAgICBDUkVBVElPTl9TVUNDRVNTRlVMOiBcIkNSRUFUSU9OX1NVQ0NFU1NGVUxcIixcbiAgICBERUxFVEVEOiBcIkRFTEVURURcIixcbiAgICBERUxFVElPTl9GQUlMRUQ6IFwiREVMRVRJT05fRkFJTEVEXCIsXG4gICAgREVMRVRJT05fSU5fUFJPR1JFU1M6IFwiREVMRVRJT05fSU5fUFJPR1JFU1NcIixcbiAgICBVUERBVEVfRkFJTEVEOiBcIlVQREFURV9GQUlMRURcIixcbiAgICBVUERBVEVfSU5fUFJPR1JFU1M6IFwiVVBEQVRFX0lOX1BST0dSRVNTXCIsXG4gICAgVVBEQVRFX1NVQ0NFU1NGVUw6IFwiVVBEQVRFX1NVQ0NFU1NGVUxcIixcbn07XG5leHBvcnQgY29uc3QgRGFzaGJvYXJkRXJyb3JUeXBlID0ge1xuICAgIEFDQ0VTU19ERU5JRUQ6IFwiQUNDRVNTX0RFTklFRFwiLFxuICAgIENPTFVNTl9HRU9HUkFQSElDX1JPTEVfTUlTTUFUQ0g6IFwiQ09MVU1OX0dFT0dSQVBISUNfUk9MRV9NSVNNQVRDSFwiLFxuICAgIENPTFVNTl9SRVBMQUNFTUVOVF9NSVNTSU5HOiBcIkNPTFVNTl9SRVBMQUNFTUVOVF9NSVNTSU5HXCIsXG4gICAgQ09MVU1OX1RZUEVfTUlTTUFUQ0g6IFwiQ09MVU1OX1RZUEVfTUlTTUFUQ0hcIixcbiAgICBEQVRBX1NFVF9OT1RfRk9VTkQ6IFwiREFUQV9TRVRfTk9UX0ZPVU5EXCIsXG4gICAgSU5URVJOQUxfRkFJTFVSRTogXCJJTlRFUk5BTF9GQUlMVVJFXCIsXG4gICAgUEFSQU1FVEVSX05PVF9GT1VORDogXCJQQVJBTUVURVJfTk9UX0ZPVU5EXCIsXG4gICAgUEFSQU1FVEVSX1RZUEVfSU5WQUxJRDogXCJQQVJBTUVURVJfVFlQRV9JTlZBTElEXCIsXG4gICAgUEFSQU1FVEVSX1ZBTFVFX0lOQ09NUEFUSUJMRTogXCJQQVJBTUVURVJfVkFMVUVfSU5DT01QQVRJQkxFXCIsXG4gICAgU09VUkNFX05PVF9GT1VORDogXCJTT1VSQ0VfTk9UX0ZPVU5EXCIsXG59O1xuZXhwb3J0IGNvbnN0IERhc2hib2FyZEZpbHRlckF0dHJpYnV0ZSA9IHtcbiAgICBEQVNIQk9BUkRfTkFNRTogXCJEQVNIQk9BUkRfTkFNRVwiLFxuICAgIERJUkVDVF9RVUlDS1NJR0hUX09XTkVSOiBcIkRJUkVDVF9RVUlDS1NJR0hUX09XTkVSXCIsXG4gICAgRElSRUNUX1FVSUNLU0lHSFRfU09MRV9PV05FUjogXCJESVJFQ1RfUVVJQ0tTSUdIVF9TT0xFX09XTkVSXCIsXG4gICAgRElSRUNUX1FVSUNLU0lHSFRfVklFV0VSX09SX09XTkVSOiBcIkRJUkVDVF9RVUlDS1NJR0hUX1ZJRVdFUl9PUl9PV05FUlwiLFxuICAgIFFVSUNLU0lHSFRfT1dORVI6IFwiUVVJQ0tTSUdIVF9PV05FUlwiLFxuICAgIFFVSUNLU0lHSFRfVVNFUjogXCJRVUlDS1NJR0hUX1VTRVJcIixcbiAgICBRVUlDS1NJR0hUX1ZJRVdFUl9PUl9PV05FUjogXCJRVUlDS1NJR0hUX1ZJRVdFUl9PUl9PV05FUlwiLFxufTtcbmV4cG9ydCBjb25zdCBEYXNoYm9hcmRzUUFTdGF0dXMgPSB7XG4gICAgRElTQUJMRUQ6IFwiRElTQUJMRURcIixcbiAgICBFTkFCTEVEOiBcIkVOQUJMRURcIixcbn07XG5leHBvcnQgY29uc3QgRGF0YVNldEZpbHRlckF0dHJpYnV0ZSA9IHtcbiAgICBEQVRBU0VUX05BTUU6IFwiREFUQVNFVF9OQU1FXCIsXG4gICAgRElSRUNUX1FVSUNLU0lHSFRfT1dORVI6IFwiRElSRUNUX1FVSUNLU0lHSFRfT1dORVJcIixcbiAgICBESVJFQ1RfUVVJQ0tTSUdIVF9TT0xFX09XTkVSOiBcIkRJUkVDVF9RVUlDS1NJR0hUX1NPTEVfT1dORVJcIixcbiAgICBESVJFQ1RfUVVJQ0tTSUdIVF9WSUVXRVJfT1JfT1dORVI6IFwiRElSRUNUX1FVSUNLU0lHSFRfVklFV0VSX09SX09XTkVSXCIsXG4gICAgUVVJQ0tTSUdIVF9PV05FUjogXCJRVUlDS1NJR0hUX09XTkVSXCIsXG4gICAgUVVJQ0tTSUdIVF9WSUVXRVJfT1JfT1dORVI6IFwiUVVJQ0tTSUdIVF9WSUVXRVJfT1JfT1dORVJcIixcbn07XG5leHBvcnQgY29uc3QgRGF0YVNvdXJjZUVycm9ySW5mb1R5cGUgPSB7XG4gICAgQUNDRVNTX0RFTklFRDogXCJBQ0NFU1NfREVOSUVEXCIsXG4gICAgQ09ORkxJQ1Q6IFwiQ09ORkxJQ1RcIixcbiAgICBDT1BZX1NPVVJDRV9OT1RfRk9VTkQ6IFwiQ09QWV9TT1VSQ0VfTk9UX0ZPVU5EXCIsXG4gICAgRU5HSU5FX1ZFUlNJT05fTk9UX1NVUFBPUlRFRDogXCJFTkdJTkVfVkVSU0lPTl9OT1RfU1VQUE9SVEVEXCIsXG4gICAgR0VORVJJQ19TUUxfRkFJTFVSRTogXCJHRU5FUklDX1NRTF9GQUlMVVJFXCIsXG4gICAgVElNRU9VVDogXCJUSU1FT1VUXCIsXG4gICAgVU5LTk9XTjogXCJVTktOT1dOXCIsXG4gICAgVU5LTk9XTl9IT1NUOiBcIlVOS05PV05fSE9TVFwiLFxufTtcbmV4cG9ydCBjb25zdCBEYXRhU291cmNlRmlsdGVyQXR0cmlidXRlID0ge1xuICAgIERBVEFTT1VSQ0VfTkFNRTogXCJEQVRBU09VUkNFX05BTUVcIixcbiAgICBESVJFQ1RfUVVJQ0tTSUdIVF9PV05FUjogXCJESVJFQ1RfUVVJQ0tTSUdIVF9PV05FUlwiLFxuICAgIERJUkVDVF9RVUlDS1NJR0hUX1NPTEVfT1dORVI6IFwiRElSRUNUX1FVSUNLU0lHSFRfU09MRV9PV05FUlwiLFxuICAgIERJUkVDVF9RVUlDS1NJR0hUX1ZJRVdFUl9PUl9PV05FUjogXCJESVJFQ1RfUVVJQ0tTSUdIVF9WSUVXRVJfT1JfT1dORVJcIixcbn07XG5leHBvcnQgY29uc3QgQ2FsY3VsYXRlZENvbHVtbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRXhwcmVzc2lvbiAmJiB7IEV4cHJlc3Npb246IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBDb2x1bW5EZXNjcmlwdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouVGV4dCAmJiB7IFRleHQ6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBDb2x1bW5UYWdGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkNvbHVtbkRlc2NyaXB0aW9uICYmIHsgQ29sdW1uRGVzY3JpcHRpb246IENvbHVtbkRlc2NyaXB0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5Db2x1bW5EZXNjcmlwdGlvbikgfSksXG59KTtcbmV4cG9ydCBjb25zdCBEYXRlVGltZVBhcmFtZXRlckZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouVmFsdWVzICYmIHsgVmFsdWVzOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRGVjaW1hbFBhcmFtZXRlckZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouVmFsdWVzICYmIHsgVmFsdWVzOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgSW50ZWdlclBhcmFtZXRlckZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouVmFsdWVzICYmIHsgVmFsdWVzOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgU3RyaW5nUGFyYW1ldGVyRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5WYWx1ZXMgJiYgeyBWYWx1ZXM6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBfUGFyYW1ldGVyc0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouU3RyaW5nUGFyYW1ldGVycyAmJiB7XG4gICAgICAgIFN0cmluZ1BhcmFtZXRlcnM6IG9iai5TdHJpbmdQYXJhbWV0ZXJzLm1hcCgoaXRlbSkgPT4gU3RyaW5nUGFyYW1ldGVyRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLkludGVnZXJQYXJhbWV0ZXJzICYmIHtcbiAgICAgICAgSW50ZWdlclBhcmFtZXRlcnM6IG9iai5JbnRlZ2VyUGFyYW1ldGVycy5tYXAoKGl0ZW0pID0+IEludGVnZXJQYXJhbWV0ZXJGaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpLFxuICAgIH0pLFxuICAgIC4uLihvYmouRGVjaW1hbFBhcmFtZXRlcnMgJiYge1xuICAgICAgICBEZWNpbWFsUGFyYW1ldGVyczogb2JqLkRlY2ltYWxQYXJhbWV0ZXJzLm1hcCgoaXRlbSkgPT4gRGVjaW1hbFBhcmFtZXRlckZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSksXG4gICAgfSksXG4gICAgLi4uKG9iai5EYXRlVGltZVBhcmFtZXRlcnMgJiYge1xuICAgICAgICBEYXRlVGltZVBhcmFtZXRlcnM6IG9iai5EYXRlVGltZVBhcmFtZXRlcnMubWFwKChpdGVtKSA9PiBEYXRlVGltZVBhcmFtZXRlckZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBDcmVhdGVBbmFseXNpc1JlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlBhcmFtZXRlcnMgJiYgeyBQYXJhbWV0ZXJzOiBfUGFyYW1ldGVyc0ZpbHRlclNlbnNpdGl2ZUxvZyhvYmouUGFyYW1ldGVycykgfSksXG59KTtcbmV4cG9ydCBjb25zdCBDcmVhdGVDb2x1bW5zT3BlcmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5Db2x1bW5zICYmIHsgQ29sdW1uczogb2JqLkNvbHVtbnMubWFwKChpdGVtKSA9PiBDYWxjdWxhdGVkQ29sdW1uRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERhc2hib2FyZFZlcnNpb25EZWZpbml0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5DYWxjdWxhdGVkRmllbGRzICYmIHtcbiAgICAgICAgQ2FsY3VsYXRlZEZpZWxkczogb2JqLkNhbGN1bGF0ZWRGaWVsZHMubWFwKChpdGVtKSA9PiBDYWxjdWxhdGVkRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpLFxuICAgIH0pLFxuICAgIC4uLihvYmouUGFyYW1ldGVyRGVjbGFyYXRpb25zICYmIHtcbiAgICAgICAgUGFyYW1ldGVyRGVjbGFyYXRpb25zOiBvYmouUGFyYW1ldGVyRGVjbGFyYXRpb25zLm1hcCgoaXRlbSkgPT4gUGFyYW1ldGVyRGVjbGFyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpLFxuICAgIH0pLFxuICAgIC4uLihvYmouQ29sdW1uQ29uZmlndXJhdGlvbnMgJiYge1xuICAgICAgICBDb2x1bW5Db25maWd1cmF0aW9uczogb2JqLkNvbHVtbkNvbmZpZ3VyYXRpb25zLm1hcCgoaXRlbSkgPT4gQ29sdW1uQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBDcmVhdGVEYXNoYm9hcmRSZXF1ZXN0RmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5QYXJhbWV0ZXJzICYmIHsgUGFyYW1ldGVyczogX1BhcmFtZXRlcnNGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlBhcmFtZXRlcnMpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRmlsdGVyT3BlcmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5Db25kaXRpb25FeHByZXNzaW9uICYmIHsgQ29uZGl0aW9uRXhwcmVzc2lvbjogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRhZ0NvbHVtbk9wZXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouVGFncyAmJiB7IFRhZ3M6IG9iai5UYWdzLm1hcCgoaXRlbSkgPT4gQ29sdW1uVGFnRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRyYW5zZm9ybU9wZXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+IHtcbiAgICBpZiAob2JqLlByb2plY3RPcGVyYXRpb24gIT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHsgUHJvamVjdE9wZXJhdGlvbjogb2JqLlByb2plY3RPcGVyYXRpb24gfTtcbiAgICBpZiAob2JqLkZpbHRlck9wZXJhdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4geyBGaWx0ZXJPcGVyYXRpb246IEZpbHRlck9wZXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouRmlsdGVyT3BlcmF0aW9uKSB9O1xuICAgIGlmIChvYmouQ3JlYXRlQ29sdW1uc09wZXJhdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4geyBDcmVhdGVDb2x1bW5zT3BlcmF0aW9uOiBDcmVhdGVDb2x1bW5zT3BlcmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5DcmVhdGVDb2x1bW5zT3BlcmF0aW9uKSB9O1xuICAgIGlmIChvYmouUmVuYW1lQ29sdW1uT3BlcmF0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB7IFJlbmFtZUNvbHVtbk9wZXJhdGlvbjogb2JqLlJlbmFtZUNvbHVtbk9wZXJhdGlvbiB9O1xuICAgIGlmIChvYmouQ2FzdENvbHVtblR5cGVPcGVyYXRpb24gIT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHsgQ2FzdENvbHVtblR5cGVPcGVyYXRpb246IG9iai5DYXN0Q29sdW1uVHlwZU9wZXJhdGlvbiB9O1xuICAgIGlmIChvYmouVGFnQ29sdW1uT3BlcmF0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB7IFRhZ0NvbHVtbk9wZXJhdGlvbjogVGFnQ29sdW1uT3BlcmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5UYWdDb2x1bW5PcGVyYXRpb24pIH07XG4gICAgaWYgKG9iai5VbnRhZ0NvbHVtbk9wZXJhdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4geyBVbnRhZ0NvbHVtbk9wZXJhdGlvbjogb2JqLlVudGFnQ29sdW1uT3BlcmF0aW9uIH07XG4gICAgaWYgKG9iai5PdmVycmlkZURhdGFzZXRQYXJhbWV0ZXJPcGVyYXRpb24gIT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHsgT3ZlcnJpZGVEYXRhc2V0UGFyYW1ldGVyT3BlcmF0aW9uOiBvYmouT3ZlcnJpZGVEYXRhc2V0UGFyYW1ldGVyT3BlcmF0aW9uIH07XG4gICAgaWYgKG9iai4kdW5rbm93biAhPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4geyBbb2JqLiR1bmtub3duWzBdXTogXCJVTktOT1dOXCIgfTtcbn07XG5leHBvcnQgY29uc3QgTG9naWNhbFRhYmxlRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5EYXRhVHJhbnNmb3JtcyAmJiB7XG4gICAgICAgIERhdGFUcmFuc2Zvcm1zOiBvYmouRGF0YVRyYW5zZm9ybXMubWFwKChpdGVtKSA9PiBUcmFuc2Zvcm1PcGVyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgUm93TGV2ZWxQZXJtaXNzaW9uVGFnUnVsZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouTWF0Y2hBbGxWYWx1ZSAmJiB7IE1hdGNoQWxsVmFsdWU6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBSb3dMZXZlbFBlcm1pc3Npb25UYWdDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5UYWdSdWxlcyAmJiB7IFRhZ1J1bGVzOiBvYmouVGFnUnVsZXMubWFwKChpdGVtKSA9PiBSb3dMZXZlbFBlcm1pc3Npb25UYWdSdWxlRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IENyZWF0ZURhdGFTZXRSZXF1ZXN0RmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5QaHlzaWNhbFRhYmxlTWFwICYmIHtcbiAgICAgICAgUGh5c2ljYWxUYWJsZU1hcDogT2JqZWN0LmVudHJpZXMob2JqLlBoeXNpY2FsVGFibGVNYXApLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+ICgoYWNjW2tleV0gPSB2YWx1ZSksIGFjYyksIHt9KSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLkxvZ2ljYWxUYWJsZU1hcCAmJiB7XG4gICAgICAgIExvZ2ljYWxUYWJsZU1hcDogT2JqZWN0LmVudHJpZXMob2JqLkxvZ2ljYWxUYWJsZU1hcCkucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4gKChhY2Nba2V5XSA9IExvZ2ljYWxUYWJsZUZpbHRlclNlbnNpdGl2ZUxvZyh2YWx1ZSkpLCBhY2MpLCB7fSksXG4gICAgfSksXG4gICAgLi4uKG9iai5Sb3dMZXZlbFBlcm1pc3Npb25UYWdDb25maWd1cmF0aW9uICYmIHtcbiAgICAgICAgUm93TGV2ZWxQZXJtaXNzaW9uVGFnQ29uZmlndXJhdGlvbjogUm93TGV2ZWxQZXJtaXNzaW9uVGFnQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouUm93TGV2ZWxQZXJtaXNzaW9uVGFnQ29uZmlndXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBEYXRhU291cmNlQ3JlZGVudGlhbHNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkNyZWRlbnRpYWxQYWlyICYmIHsgQ3JlZGVudGlhbFBhaXI6IG9iai5DcmVkZW50aWFsUGFpciB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IENyZWF0ZURhdGFTb3VyY2VSZXF1ZXN0RmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5EYXRhU291cmNlUGFyYW1ldGVycyAmJiB7IERhdGFTb3VyY2VQYXJhbWV0ZXJzOiBvYmouRGF0YVNvdXJjZVBhcmFtZXRlcnMgfSksXG4gICAgLi4uKG9iai5DcmVkZW50aWFscyAmJiB7IENyZWRlbnRpYWxzOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgVGVtcGxhdGVWZXJzaW9uRGVmaW5pdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQ2FsY3VsYXRlZEZpZWxkcyAmJiB7XG4gICAgICAgIENhbGN1bGF0ZWRGaWVsZHM6IG9iai5DYWxjdWxhdGVkRmllbGRzLm1hcCgoaXRlbSkgPT4gQ2FsY3VsYXRlZEZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLlBhcmFtZXRlckRlY2xhcmF0aW9ucyAmJiB7XG4gICAgICAgIFBhcmFtZXRlckRlY2xhcmF0aW9uczogb2JqLlBhcmFtZXRlckRlY2xhcmF0aW9ucy5tYXAoKGl0ZW0pID0+IFBhcmFtZXRlckRlY2xhcmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLkNvbHVtbkNvbmZpZ3VyYXRpb25zICYmIHtcbiAgICAgICAgQ29sdW1uQ29uZmlndXJhdGlvbnM6IG9iai5Db2x1bW5Db25maWd1cmF0aW9ucy5tYXAoKGl0ZW0pID0+IENvbHVtbkNvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgQ3JlYXRlVGVtcGxhdGVSZXF1ZXN0RmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG59KTtcbmV4cG9ydCBjb25zdCBDdXN0b21JbnN0cnVjdGlvbnNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkN1c3RvbUluc3RydWN0aW9uc1N0cmluZyAmJiB7IEN1c3RvbUluc3RydWN0aW9uc1N0cmluZzogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFNlbWFudGljVHlwZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouVHJ1dGh5Q2VsbFZhbHVlICYmIHsgVHJ1dGh5Q2VsbFZhbHVlOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxuICAgIC4uLihvYmouVHJ1dGh5Q2VsbFZhbHVlU3lub255bXMgJiYgeyBUcnV0aHlDZWxsVmFsdWVTeW5vbnltczogU0VOU0lUSVZFX1NUUklORyB9KSxcbiAgICAuLi4ob2JqLkZhbHNleUNlbGxWYWx1ZSAmJiB7IEZhbHNleUNlbGxWYWx1ZTogU0VOU0lUSVZFX1NUUklORyB9KSxcbiAgICAuLi4ob2JqLkZhbHNleUNlbGxWYWx1ZVN5bm9ueW1zICYmIHsgRmFsc2V5Q2VsbFZhbHVlU3lub255bXM6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBUb3BpY0NhbGN1bGF0ZWRGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRXhwcmVzc2lvbiAmJiB7IEV4cHJlc3Npb246IFNFTlNJVElWRV9TVFJJTkcgfSksXG4gICAgLi4uKG9iai5TZW1hbnRpY1R5cGUgJiYgeyBTZW1hbnRpY1R5cGU6IFNlbWFudGljVHlwZUZpbHRlclNlbnNpdGl2ZUxvZyhvYmouU2VtYW50aWNUeXBlKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRvcGljQ29sdW1uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5TZW1hbnRpY1R5cGUgJiYgeyBTZW1hbnRpY1R5cGU6IFNlbWFudGljVHlwZUZpbHRlclNlbnNpdGl2ZUxvZyhvYmouU2VtYW50aWNUeXBlKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRvcGljQ2F0ZWdvcnlGaWx0ZXJDb25zdGFudEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgVG9waWNDYXRlZ29yeUZpbHRlckZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQ29uc3RhbnQgJiYgeyBDb25zdGFudDogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRvcGljUmFuZ2VGaWx0ZXJDb25zdGFudEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgVG9waWNEYXRlUmFuZ2VGaWx0ZXJGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkNvbnN0YW50ICYmIHsgQ29uc3RhbnQ6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBUb3BpY1Npbmd1bGFyRmlsdGVyQ29uc3RhbnRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IFRvcGljTnVsbEZpbHRlckZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQ29uc3RhbnQgJiYgeyBDb25zdGFudDogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRvcGljTnVtZXJpY0VxdWFsaXR5RmlsdGVyRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5Db25zdGFudCAmJiB7IENvbnN0YW50OiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgVG9waWNOdW1lcmljUmFuZ2VGaWx0ZXJGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkNvbnN0YW50ICYmIHsgQ29uc3RhbnQ6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBUb3BpY1JlbGF0aXZlRGF0ZUZpbHRlckZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQ29uc3RhbnQgJiYgeyBDb25zdGFudDogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRvcGljRmlsdGVyRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5DYXRlZ29yeUZpbHRlciAmJiB7IENhdGVnb3J5RmlsdGVyOiBUb3BpY0NhdGVnb3J5RmlsdGVyRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5DYXRlZ29yeUZpbHRlcikgfSksXG4gICAgLi4uKG9iai5OdW1lcmljRXF1YWxpdHlGaWx0ZXIgJiYge1xuICAgICAgICBOdW1lcmljRXF1YWxpdHlGaWx0ZXI6IFRvcGljTnVtZXJpY0VxdWFsaXR5RmlsdGVyRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5OdW1lcmljRXF1YWxpdHlGaWx0ZXIpLFxuICAgIH0pLFxuICAgIC4uLihvYmouTnVtZXJpY1JhbmdlRmlsdGVyICYmIHtcbiAgICAgICAgTnVtZXJpY1JhbmdlRmlsdGVyOiBUb3BpY051bWVyaWNSYW5nZUZpbHRlckZpbHRlclNlbnNpdGl2ZUxvZyhvYmouTnVtZXJpY1JhbmdlRmlsdGVyKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLkRhdGVSYW5nZUZpbHRlciAmJiB7IERhdGVSYW5nZUZpbHRlcjogVG9waWNEYXRlUmFuZ2VGaWx0ZXJGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkRhdGVSYW5nZUZpbHRlcikgfSksXG4gICAgLi4uKG9iai5SZWxhdGl2ZURhdGVGaWx0ZXIgJiYge1xuICAgICAgICBSZWxhdGl2ZURhdGVGaWx0ZXI6IFRvcGljUmVsYXRpdmVEYXRlRmlsdGVyRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5SZWxhdGl2ZURhdGVGaWx0ZXIpLFxuICAgIH0pLFxuICAgIC4uLihvYmouTnVsbEZpbHRlciAmJiB7IE51bGxGaWx0ZXI6IFRvcGljTnVsbEZpbHRlckZpbHRlclNlbnNpdGl2ZUxvZyhvYmouTnVsbEZpbHRlcikgfSksXG59KTtcbmV4cG9ydCBjb25zdCBEYXRhc2V0TWV0YWRhdGFGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkZpbHRlcnMgJiYgeyBGaWx0ZXJzOiBvYmouRmlsdGVycy5tYXAoKGl0ZW0pID0+IFRvcGljRmlsdGVyRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbiAgICAuLi4ob2JqLkNvbHVtbnMgJiYgeyBDb2x1bW5zOiBvYmouQ29sdW1ucy5tYXAoKGl0ZW0pID0+IFRvcGljQ29sdW1uRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbiAgICAuLi4ob2JqLkNhbGN1bGF0ZWRGaWVsZHMgJiYge1xuICAgICAgICBDYWxjdWxhdGVkRmllbGRzOiBvYmouQ2FsY3VsYXRlZEZpZWxkcy5tYXAoKGl0ZW0pID0+IFRvcGljQ2FsY3VsYXRlZEZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRvcGljRGV0YWlsc0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgQ3JlYXRlVG9waWNSZXF1ZXN0RmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5DdXN0b21JbnN0cnVjdGlvbnMgJiYgeyBDdXN0b21JbnN0cnVjdGlvbnM6IEN1c3RvbUluc3RydWN0aW9uc0ZpbHRlclNlbnNpdGl2ZUxvZyhvYmouQ3VzdG9tSW5zdHJ1Y3Rpb25zKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERhc2hib2FyZFZlcnNpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IERhc2hib2FyZEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgT3V0cHV0Q29sdW1uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5EZXNjcmlwdGlvbiAmJiB7IERlc2NyaXB0aW9uOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRGF0YVNldEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouUGh5c2ljYWxUYWJsZU1hcCAmJiB7XG4gICAgICAgIFBoeXNpY2FsVGFibGVNYXA6IE9iamVjdC5lbnRyaWVzKG9iai5QaHlzaWNhbFRhYmxlTWFwKS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiAoKGFjY1trZXldID0gdmFsdWUpLCBhY2MpLCB7fSksXG4gICAgfSksXG4gICAgLi4uKG9iai5Mb2dpY2FsVGFibGVNYXAgJiYge1xuICAgICAgICBMb2dpY2FsVGFibGVNYXA6IE9iamVjdC5lbnRyaWVzKG9iai5Mb2dpY2FsVGFibGVNYXApLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+ICgoYWNjW2tleV0gPSBMb2dpY2FsVGFibGVGaWx0ZXJTZW5zaXRpdmVMb2codmFsdWUpKSwgYWNjKSwge30pLFxuICAgIH0pLFxuICAgIC4uLihvYmouT3V0cHV0Q29sdW1ucyAmJiB7IE91dHB1dENvbHVtbnM6IG9iai5PdXRwdXRDb2x1bW5zLm1hcCgoaXRlbSkgPT4gT3V0cHV0Q29sdW1uRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbiAgICAuLi4ob2JqLlJvd0xldmVsUGVybWlzc2lvblRhZ0NvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBSb3dMZXZlbFBlcm1pc3Npb25UYWdDb25maWd1cmF0aW9uOiBSb3dMZXZlbFBlcm1pc3Npb25UYWdDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5Sb3dMZXZlbFBlcm1pc3Npb25UYWdDb25maWd1cmF0aW9uKSxcbiAgICB9KSxcbn0pO1xuIiwiaW1wb3J0IHsgU2VydmljZUV4Y2VwdGlvbiBhcyBfX1NlcnZpY2VFeGNlcHRpb24sIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuZXhwb3J0IHsgX19TZXJ2aWNlRXhjZXB0aW9uIH07XG5leHBvcnQgY2xhc3MgUXVpY2tTaWdodFNlcnZpY2VFeGNlcHRpb24gZXh0ZW5kcyBfX1NlcnZpY2VFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBRdWlja1NpZ2h0U2VydmljZUV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNFTlNJVElWRV9TVFJJTkcgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBRdWlja1NpZ2h0U2VydmljZUV4Y2VwdGlvbiBhcyBfX0Jhc2VFeGNlcHRpb24gfSBmcm9tIFwiLi9RdWlja1NpZ2h0U2VydmljZUV4Y2VwdGlvblwiO1xuZXhwb3J0IGNsYXNzIEFjY2Vzc0RlbmllZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiQWNjZXNzRGVuaWVkRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIFJlcXVlc3RJZDtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiQWNjZXNzRGVuaWVkRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEFjY2Vzc0RlbmllZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEVkaXRpb24gPSB7XG4gICAgRU5URVJQUklTRTogXCJFTlRFUlBSSVNFXCIsXG4gICAgRU5URVJQUklTRV9BTkRfUTogXCJFTlRFUlBSSVNFX0FORF9RXCIsXG4gICAgU1RBTkRBUkQ6IFwiU1RBTkRBUkRcIixcbn07XG5leHBvcnQgY29uc3QgRGFzaGJvYXJkQmVoYXZpb3IgPSB7XG4gICAgRElTQUJMRUQ6IFwiRElTQUJMRURcIixcbiAgICBFTkFCTEVEOiBcIkVOQUJMRURcIixcbn07XG5leHBvcnQgY29uc3QgQWdnVHlwZSA9IHtcbiAgICBBVkVSQUdFOiBcIkFWRVJBR0VcIixcbiAgICBDT0xVTU46IFwiQ09MVU1OXCIsXG4gICAgQ09VTlQ6IFwiQ09VTlRcIixcbiAgICBDVVNUT006IFwiQ1VTVE9NXCIsXG4gICAgRElTVElOQ1RfQ09VTlQ6IFwiRElTVElOQ1RfQ09VTlRcIixcbiAgICBNQVg6IFwiTUFYXCIsXG4gICAgTUVESUFOOiBcIk1FRElBTlwiLFxuICAgIE1JTjogXCJNSU5cIixcbiAgICBQRVJDRU5USUxFOiBcIlBFUkNFTlRJTEVcIixcbiAgICBQVERfQVZFUkFHRTogXCJQVERfQVZFUkFHRVwiLFxuICAgIFBURF9DT1VOVDogXCJQVERfQ09VTlRcIixcbiAgICBQVERfRElTVElOQ1RfQ09VTlQ6IFwiUFREX0RJU1RJTkNUX0NPVU5UXCIsXG4gICAgUFREX01BWDogXCJQVERfTUFYXCIsXG4gICAgUFREX01JTjogXCJQVERfTUlOXCIsXG4gICAgUFREX1NVTTogXCJQVERfU1VNXCIsXG4gICAgU1RERVY6IFwiU1RERVZcIixcbiAgICBTVERFVlA6IFwiU1RERVZQXCIsXG4gICAgU1VNOiBcIlNVTVwiLFxuICAgIFZBUjogXCJWQVJcIixcbiAgICBWQVJQOiBcIlZBUlBcIixcbn07XG5leHBvcnQgY29uc3QgVG9waWNUaW1lR3JhbnVsYXJpdHkgPSB7XG4gICAgREFZOiBcIkRBWVwiLFxuICAgIEhPVVI6IFwiSE9VUlwiLFxuICAgIE1JTlVURTogXCJNSU5VVEVcIixcbiAgICBNT05USDogXCJNT05USFwiLFxuICAgIFFVQVJURVI6IFwiUVVBUlRFUlwiLFxuICAgIFNFQ09ORDogXCJTRUNPTkRcIixcbiAgICBXRUVLOiBcIldFRUtcIixcbiAgICBZRUFSOiBcIllFQVJcIixcbn07XG5leHBvcnQgY29uc3QgU2ltcGxlQXR0cmlidXRlQWdncmVnYXRpb25GdW5jdGlvbiA9IHtcbiAgICBVTklRVUVfVkFMVUU6IFwiVU5JUVVFX1ZBTFVFXCIsXG59O1xuZXhwb3J0IGNvbnN0IENhdGVnb3JpY2FsQWdncmVnYXRpb25GdW5jdGlvbiA9IHtcbiAgICBDT1VOVDogXCJDT1VOVFwiLFxuICAgIERJU1RJTkNUX0NPVU5UOiBcIkRJU1RJTkNUX0NPVU5UXCIsXG59O1xuZXhwb3J0IGNvbnN0IERhdGVBZ2dyZWdhdGlvbkZ1bmN0aW9uID0ge1xuICAgIENPVU5UOiBcIkNPVU5UXCIsXG4gICAgRElTVElOQ1RfQ09VTlQ6IFwiRElTVElOQ1RfQ09VTlRcIixcbiAgICBNQVg6IFwiTUFYXCIsXG4gICAgTUlOOiBcIk1JTlwiLFxufTtcbmV4cG9ydCBjb25zdCBTaW1wbGVOdW1lcmljYWxBZ2dyZWdhdGlvbkZ1bmN0aW9uID0ge1xuICAgIEFWRVJBR0U6IFwiQVZFUkFHRVwiLFxuICAgIENPVU5UOiBcIkNPVU5UXCIsXG4gICAgRElTVElOQ1RfQ09VTlQ6IFwiRElTVElOQ1RfQ09VTlRcIixcbiAgICBNQVg6IFwiTUFYXCIsXG4gICAgTUVESUFOOiBcIk1FRElBTlwiLFxuICAgIE1JTjogXCJNSU5cIixcbiAgICBTVERFVjogXCJTVERFVlwiLFxuICAgIFNUREVWUDogXCJTVERFVlBcIixcbiAgICBTVU06IFwiU1VNXCIsXG4gICAgVkFSOiBcIlZBUlwiLFxuICAgIFZBUlA6IFwiVkFSUFwiLFxufTtcbmV4cG9ydCBjb25zdCBUaW1lR3JhbnVsYXJpdHkgPSB7XG4gICAgREFZOiBcIkRBWVwiLFxuICAgIEhPVVI6IFwiSE9VUlwiLFxuICAgIE1JTExJU0VDT05EOiBcIk1JTExJU0VDT05EXCIsXG4gICAgTUlOVVRFOiBcIk1JTlVURVwiLFxuICAgIE1PTlRIOiBcIk1PTlRIXCIsXG4gICAgUVVBUlRFUjogXCJRVUFSVEVSXCIsXG4gICAgU0VDT05EOiBcIlNFQ09ORFwiLFxuICAgIFdFRUs6IFwiV0VFS1wiLFxuICAgIFlFQVI6IFwiWUVBUlwiLFxufTtcbmV4cG9ydCBjb25zdCBTb3J0RGlyZWN0aW9uID0ge1xuICAgIEFTQzogXCJBU0NcIixcbiAgICBERVNDOiBcIkRFU0NcIixcbn07XG5leHBvcnQgY29uc3QgQW5hbHlzaXNFcnJvclR5cGUgPSB7XG4gICAgQUNDRVNTX0RFTklFRDogXCJBQ0NFU1NfREVOSUVEXCIsXG4gICAgQ09MVU1OX0dFT0dSQVBISUNfUk9MRV9NSVNNQVRDSDogXCJDT0xVTU5fR0VPR1JBUEhJQ19ST0xFX01JU01BVENIXCIsXG4gICAgQ09MVU1OX1JFUExBQ0VNRU5UX01JU1NJTkc6IFwiQ09MVU1OX1JFUExBQ0VNRU5UX01JU1NJTkdcIixcbiAgICBDT0xVTU5fVFlQRV9NSVNNQVRDSDogXCJDT0xVTU5fVFlQRV9NSVNNQVRDSFwiLFxuICAgIERBVEFfU0VUX05PVF9GT1VORDogXCJEQVRBX1NFVF9OT1RfRk9VTkRcIixcbiAgICBJTlRFUk5BTF9GQUlMVVJFOiBcIklOVEVSTkFMX0ZBSUxVUkVcIixcbiAgICBQQVJBTUVURVJfTk9UX0ZPVU5EOiBcIlBBUkFNRVRFUl9OT1RfRk9VTkRcIixcbiAgICBQQVJBTUVURVJfVFlQRV9JTlZBTElEOiBcIlBBUkFNRVRFUl9UWVBFX0lOVkFMSURcIixcbiAgICBQQVJBTUVURVJfVkFMVUVfSU5DT01QQVRJQkxFOiBcIlBBUkFNRVRFUl9WQUxVRV9JTkNPTVBBVElCTEVcIixcbiAgICBTT1VSQ0VfTk9UX0ZPVU5EOiBcIlNPVVJDRV9OT1RfRk9VTkRcIixcbn07XG5leHBvcnQgY29uc3QgU2VsZWN0QWxsVmFsdWVPcHRpb25zID0ge1xuICAgIEFMTF9WQUxVRVM6IFwiQUxMX1ZBTFVFU1wiLFxufTtcbmV4cG9ydCBjb25zdCBVUkxUYXJnZXRDb25maWd1cmF0aW9uID0ge1xuICAgIE5FV19UQUI6IFwiTkVXX1RBQlwiLFxuICAgIE5FV19XSU5ET1c6IFwiTkVXX1dJTkRPV1wiLFxuICAgIFNBTUVfVEFCOiBcIlNBTUVfVEFCXCIsXG59O1xuZXhwb3J0IGNvbnN0IFdpZGdldFN0YXR1cyA9IHtcbiAgICBESVNBQkxFRDogXCJESVNBQkxFRFwiLFxuICAgIEVOQUJMRUQ6IFwiRU5BQkxFRFwiLFxufTtcbmV4cG9ydCBjb25zdCBJbWFnZUN1c3RvbUFjdGlvblRyaWdnZXIgPSB7XG4gICAgQ0xJQ0s6IFwiQ0xJQ0tcIixcbiAgICBNRU5VOiBcIk1FTlVcIixcbn07XG5leHBvcnQgY29uc3QgU2hlZXRJbWFnZVNjYWxpbmdUeXBlID0ge1xuICAgIFNDQUxFX05PTkU6IFwiU0NBTEVfTk9ORVwiLFxuICAgIFNDQUxFX1RPX0NPTlRBSU5FUjogXCJTQ0FMRV9UT19DT05UQUlORVJcIixcbiAgICBTQ0FMRV9UT19IRUlHSFQ6IFwiU0NBTEVfVE9fSEVJR0hUXCIsXG4gICAgU0NBTEVfVE9fV0lEVEg6IFwiU0NBTEVfVE9fV0lEVEhcIixcbn07XG5leHBvcnQgY29uc3QgVmlzaWJpbGl0eSA9IHtcbiAgICBISURERU46IFwiSElEREVOXCIsXG4gICAgVklTSUJMRTogXCJWSVNJQkxFXCIsXG59O1xuZXhwb3J0IGNvbnN0IFJlc291cmNlU3RhdHVzID0ge1xuICAgIENSRUFUSU9OX0ZBSUxFRDogXCJDUkVBVElPTl9GQUlMRURcIixcbiAgICBDUkVBVElPTl9JTl9QUk9HUkVTUzogXCJDUkVBVElPTl9JTl9QUk9HUkVTU1wiLFxuICAgIENSRUFUSU9OX1NVQ0NFU1NGVUw6IFwiQ1JFQVRJT05fU1VDQ0VTU0ZVTFwiLFxuICAgIERFTEVURUQ6IFwiREVMRVRFRFwiLFxuICAgIFVQREFURV9GQUlMRUQ6IFwiVVBEQVRFX0ZBSUxFRFwiLFxuICAgIFVQREFURV9JTl9QUk9HUkVTUzogXCJVUERBVEVfSU5fUFJPR1JFU1NcIixcbiAgICBVUERBVEVfU1VDQ0VTU0ZVTDogXCJVUERBVEVfU1VDQ0VTU0ZVTFwiLFxufTtcbmV4cG9ydCBjb25zdCBSZXNpemVPcHRpb24gPSB7XG4gICAgRklYRUQ6IFwiRklYRURcIixcbiAgICBSRVNQT05TSVZFOiBcIlJFU1BPTlNJVkVcIixcbn07XG5leHBvcnQgY29uc3QgUGFwZXJPcmllbnRhdGlvbiA9IHtcbiAgICBMQU5EU0NBUEU6IFwiTEFORFNDQVBFXCIsXG4gICAgUE9SVFJBSVQ6IFwiUE9SVFJBSVRcIixcbn07XG5leHBvcnQgY29uc3QgUGFwZXJTaXplID0ge1xuICAgIEEwOiBcIkEwXCIsXG4gICAgQTE6IFwiQTFcIixcbiAgICBBMjogXCJBMlwiLFxuICAgIEEzOiBcIkEzXCIsXG4gICAgQTQ6IFwiQTRcIixcbiAgICBBNTogXCJBNVwiLFxuICAgIEpJU19CNDogXCJKSVNfQjRcIixcbiAgICBKSVNfQjU6IFwiSklTX0I1XCIsXG4gICAgVVNfTEVHQUw6IFwiVVNfTEVHQUxcIixcbiAgICBVU19MRVRURVI6IFwiVVNfTEVUVEVSXCIsXG4gICAgVVNfVEFCTE9JRF9MRURHRVI6IFwiVVNfVEFCTE9JRF9MRURHRVJcIixcbn07XG5leHBvcnQgY29uc3QgU2hlZXRDb250ZW50VHlwZSA9IHtcbiAgICBJTlRFUkFDVElWRTogXCJJTlRFUkFDVElWRVwiLFxuICAgIFBBR0lOQVRFRDogXCJQQUdJTkFURURcIixcbn07XG5leHBvcnQgY29uc3QgU3BlY2lhbFZhbHVlID0ge1xuICAgIEVNUFRZOiBcIkVNUFRZXCIsXG4gICAgTlVMTDogXCJOVUxMXCIsXG4gICAgT1RIRVI6IFwiT1RIRVJcIixcbn07XG5leHBvcnQgY29uc3QgTmVnYXRpdmVWYWx1ZURpc3BsYXlNb2RlID0ge1xuICAgIE5FR0FUSVZFOiBcIk5FR0FUSVZFXCIsXG4gICAgUE9TSVRJVkU6IFwiUE9TSVRJVkVcIixcbn07XG5leHBvcnQgY29uc3QgTnVtYmVyU2NhbGUgPSB7XG4gICAgQVVUTzogXCJBVVRPXCIsXG4gICAgQklMTElPTlM6IFwiQklMTElPTlNcIixcbiAgICBDUk9SRVM6IFwiQ1JPUkVTXCIsXG4gICAgTEFLSFM6IFwiTEFLSFNcIixcbiAgICBNSUxMSU9OUzogXCJNSUxMSU9OU1wiLFxuICAgIE5PTkU6IFwiTk9ORVwiLFxuICAgIFRIT1VTQU5EUzogXCJUSE9VU0FORFNcIixcbiAgICBUUklMTElPTlM6IFwiVFJJTExJT05TXCIsXG59O1xuZXhwb3J0IGNvbnN0IE51bWVyaWNTZXBhcmF0b3JTeW1ib2wgPSB7XG4gICAgQ09NTUE6IFwiQ09NTUFcIixcbiAgICBET1Q6IFwiRE9UXCIsXG4gICAgU1BBQ0U6IFwiU1BBQ0VcIixcbn07XG5leHBvcnQgY29uc3QgRGlnaXRHcm91cGluZ1N0eWxlID0ge1xuICAgIERFRkFVTFQ6IFwiREVGQVVMVFwiLFxuICAgIExBS0hTOiBcIkxBS0hTXCIsXG59O1xuZXhwb3J0IGNvbnN0IENvbHVtblJvbGUgPSB7XG4gICAgRElNRU5TSU9OOiBcIkRJTUVOU0lPTlwiLFxuICAgIE1FQVNVUkU6IFwiTUVBU1VSRVwiLFxufTtcbmV4cG9ydCBjb25zdCBDcm9zc0RhdGFzZXRUeXBlcyA9IHtcbiAgICBBTExfREFUQVNFVFM6IFwiQUxMX0RBVEFTRVRTXCIsXG4gICAgU0lOR0xFX0RBVEFTRVQ6IFwiU0lOR0xFX0RBVEFTRVRcIixcbn07XG5leHBvcnQgY29uc3QgQ2F0ZWdvcnlGaWx0ZXJNYXRjaE9wZXJhdG9yID0ge1xuICAgIENPTlRBSU5TOiBcIkNPTlRBSU5TXCIsXG4gICAgRE9FU19OT1RfQ09OVEFJTjogXCJET0VTX05PVF9DT05UQUlOXCIsXG4gICAgRE9FU19OT1RfRVFVQUw6IFwiRE9FU19OT1RfRVFVQUxcIixcbiAgICBFTkRTX1dJVEg6IFwiRU5EU19XSVRIXCIsXG4gICAgRVFVQUxTOiBcIkVRVUFMU1wiLFxuICAgIFNUQVJUU19XSVRIOiBcIlNUQVJUU19XSVRIXCIsXG59O1xuZXhwb3J0IGNvbnN0IEZpbHRlck51bGxPcHRpb24gPSB7XG4gICAgQUxMX1ZBTFVFUzogXCJBTExfVkFMVUVTXCIsXG4gICAgTk9OX05VTExTX09OTFk6IFwiTk9OX05VTExTX09OTFlcIixcbiAgICBOVUxMU19PTkxZOiBcIk5VTExTX09OTFlcIixcbn07XG5leHBvcnQgY29uc3QgQ2F0ZWdvcnlGaWx0ZXJTZWxlY3RBbGxPcHRpb25zID0ge1xuICAgIEZJTFRFUl9BTExfVkFMVUVTOiBcIkZJTFRFUl9BTExfVkFMVUVTXCIsXG59O1xuZXhwb3J0IGNvbnN0IENvbW1pdE1vZGUgPSB7XG4gICAgQVVUTzogXCJBVVRPXCIsXG4gICAgTUFOVUFMOiBcIk1BTlVBTFwiLFxufTtcbmV4cG9ydCBjb25zdCBGb250RGVjb3JhdGlvbiA9IHtcbiAgICBOT05FOiBcIk5PTkVcIixcbiAgICBVTkRFUkxJTkU6IFwiVU5ERVJMSU5FXCIsXG59O1xuZXhwb3J0IGNvbnN0IFJlbGF0aXZlRm9udFNpemUgPSB7XG4gICAgRVhUUkFfTEFSR0U6IFwiRVhUUkFfTEFSR0VcIixcbiAgICBFWFRSQV9TTUFMTDogXCJFWFRSQV9TTUFMTFwiLFxuICAgIExBUkdFOiBcIkxBUkdFXCIsXG4gICAgTUVESVVNOiBcIk1FRElVTVwiLFxuICAgIFNNQUxMOiBcIlNNQUxMXCIsXG59O1xuZXhwb3J0IGNvbnN0IEZvbnRTdHlsZSA9IHtcbiAgICBJVEFMSUM6IFwiSVRBTElDXCIsXG4gICAgTk9STUFMOiBcIk5PUk1BTFwiLFxufTtcbmV4cG9ydCBjb25zdCBGb250V2VpZ2h0TmFtZSA9IHtcbiAgICBCT0xEOiBcIkJPTERcIixcbiAgICBOT1JNQUw6IFwiTk9STUFMXCIsXG59O1xuZXhwb3J0IGNvbnN0IFNoZWV0Q29udHJvbERhdGVUaW1lUGlja2VyVHlwZSA9IHtcbiAgICBEQVRFX1JBTkdFOiBcIkRBVEVfUkFOR0VcIixcbiAgICBTSU5HTEVfVkFMVUVEOiBcIlNJTkdMRV9WQUxVRURcIixcbn07XG5leHBvcnQgY29uc3QgU2hlZXRDb250cm9sTGlzdFR5cGUgPSB7XG4gICAgTVVMVElfU0VMRUNUOiBcIk1VTFRJX1NFTEVDVFwiLFxuICAgIFNJTkdMRV9TRUxFQ1Q6IFwiU0lOR0xFX1NFTEVDVFwiLFxufTtcbmV4cG9ydCBjb25zdCBTaGVldENvbnRyb2xTbGlkZXJUeXBlID0ge1xuICAgIFJBTkdFOiBcIlJBTkdFXCIsXG4gICAgU0lOR0xFX1BPSU5UOiBcIlNJTkdMRV9QT0lOVFwiLFxufTtcbmV4cG9ydCBjb25zdCBOdW1lcmljRXF1YWxpdHlNYXRjaE9wZXJhdG9yID0ge1xuICAgIERPRVNfTk9UX0VRVUFMOiBcIkRPRVNfTk9UX0VRVUFMXCIsXG4gICAgRVFVQUxTOiBcIkVRVUFMU1wiLFxufTtcbmV4cG9ydCBjb25zdCBOdW1lcmljRmlsdGVyU2VsZWN0QWxsT3B0aW9ucyA9IHtcbiAgICBGSUxURVJfQUxMX1ZBTFVFUzogXCJGSUxURVJfQUxMX1ZBTFVFU1wiLFxufTtcbmV4cG9ydCBjb25zdCBBbmNob3JPcHRpb24gPSB7XG4gICAgTk9XOiBcIk5PV1wiLFxufTtcbmV4cG9ydCBjb25zdCBSZWxhdGl2ZURhdGVUeXBlID0ge1xuICAgIExBU1Q6IFwiTEFTVFwiLFxuICAgIE5FWFQ6IFwiTkVYVFwiLFxuICAgIE5PVzogXCJOT1dcIixcbiAgICBQUkVWSU9VUzogXCJQUkVWSU9VU1wiLFxuICAgIFRISVM6IFwiVEhJU1wiLFxufTtcbmV4cG9ydCBjb25zdCBGaWx0ZXJWaXN1YWxTY29wZSA9IHtcbiAgICBBTExfVklTVUFMUzogXCJBTExfVklTVUFMU1wiLFxuICAgIFNFTEVDVEVEX1ZJU1VBTFM6IFwiU0VMRUNURURfVklTVUFMU1wiLFxufTtcbmV4cG9ydCBjb25zdCBWaXN1YWxIaWdobGlnaHRUcmlnZ2VyID0ge1xuICAgIERBVEFfUE9JTlRfQ0xJQ0s6IFwiREFUQV9QT0lOVF9DTElDS1wiLFxuICAgIERBVEFfUE9JTlRfSE9WRVI6IFwiREFUQV9QT0lOVF9IT1ZFUlwiLFxuICAgIE5PTkU6IFwiTk9ORVwiLFxufTtcbmV4cG9ydCBjb25zdCBRQnVzaW5lc3NJbnNpZ2h0c1N0YXR1cyA9IHtcbiAgICBESVNBQkxFRDogXCJESVNBQkxFRFwiLFxuICAgIEVOQUJMRUQ6IFwiRU5BQkxFRFwiLFxufTtcbmV4cG9ydCBjb25zdCBEYXlPZlRoZVdlZWsgPSB7XG4gICAgRlJJREFZOiBcIkZSSURBWVwiLFxuICAgIE1PTkRBWTogXCJNT05EQVlcIixcbiAgICBTQVRVUkRBWTogXCJTQVRVUkRBWVwiLFxuICAgIFNVTkRBWTogXCJTVU5EQVlcIixcbiAgICBUSFVSU0RBWTogXCJUSFVSU0RBWVwiLFxuICAgIFRVRVNEQVk6IFwiVFVFU0RBWVwiLFxuICAgIFdFRE5FU0RBWTogXCJXRURORVNEQVlcIixcbn07XG5leHBvcnQgY29uc3QgVmFsdWVXaGVuVW5zZXRPcHRpb24gPSB7XG4gICAgTlVMTDogXCJOVUxMXCIsXG4gICAgUkVDT01NRU5ERURfVkFMVUU6IFwiUkVDT01NRU5ERURfVkFMVUVcIixcbn07XG5leHBvcnQgY29uc3QgUGFyYW1ldGVyVmFsdWVUeXBlID0ge1xuICAgIE1VTFRJX1ZBTFVFRDogXCJNVUxUSV9WQUxVRURcIixcbiAgICBTSU5HTEVfVkFMVUVEOiBcIlNJTkdMRV9WQUxVRURcIixcbn07XG5leHBvcnQgY29uc3QgUXVlcnlFeGVjdXRpb25Nb2RlID0ge1xuICAgIEFVVE86IFwiQVVUT1wiLFxuICAgIE1BTlVBTDogXCJNQU5VQUxcIixcbn07XG5leHBvcnQgY29uc3QgTGF5b3V0RWxlbWVudFR5cGUgPSB7XG4gICAgRklMVEVSX0NPTlRST0w6IFwiRklMVEVSX0NPTlRST0xcIixcbiAgICBJTUFHRTogXCJJTUFHRVwiLFxuICAgIFBBUkFNRVRFUl9DT05UUk9MOiBcIlBBUkFNRVRFUl9DT05UUk9MXCIsXG4gICAgVEVYVF9CT1g6IFwiVEVYVF9CT1hcIixcbiAgICBWSVNVQUw6IFwiVklTVUFMXCIsXG59O1xuZXhwb3J0IGNvbnN0IFNlY3Rpb25QYWdlQnJlYWtTdGF0dXMgPSB7XG4gICAgRElTQUJMRUQ6IFwiRElTQUJMRURcIixcbiAgICBFTkFCTEVEOiBcIkVOQUJMRURcIixcbn07XG5leHBvcnQgY29uc3QgU2VsZWN0ZWRGaWVsZE9wdGlvbnMgPSB7XG4gICAgQUxMX0ZJRUxEUzogXCJBTExfRklFTERTXCIsXG59O1xuZXhwb3J0IGNvbnN0IFRhcmdldFZpc3VhbE9wdGlvbnMgPSB7XG4gICAgQUxMX1ZJU1VBTFM6IFwiQUxMX1ZJU1VBTFNcIixcbn07XG5leHBvcnQgY29uc3QgVmlzdWFsQ3VzdG9tQWN0aW9uVHJpZ2dlciA9IHtcbiAgICBEQVRBX1BPSU5UX0NMSUNLOiBcIkRBVEFfUE9JTlRfQ0xJQ0tcIixcbiAgICBEQVRBX1BPSU5UX01FTlU6IFwiREFUQV9QT0lOVF9NRU5VXCIsXG59O1xuZXhwb3J0IGNvbnN0IEJhcnNBcnJhbmdlbWVudCA9IHtcbiAgICBDTFVTVEVSRUQ6IFwiQ0xVU1RFUkVEXCIsXG4gICAgU1RBQ0tFRDogXCJTVEFDS0VEXCIsXG4gICAgU1RBQ0tFRF9QRVJDRU5UOiBcIlNUQUNLRURfUEVSQ0VOVFwiLFxufTtcbmV4cG9ydCBjb25zdCBEYXRhTGFiZWxDb250ZW50ID0ge1xuICAgIFBFUkNFTlQ6IFwiUEVSQ0VOVFwiLFxuICAgIFZBTFVFOiBcIlZBTFVFXCIsXG4gICAgVkFMVUVfQU5EX1BFUkNFTlQ6IFwiVkFMVUVfQU5EX1BFUkNFTlRcIixcbn07XG5leHBvcnQgY29uc3QgRGF0YUxhYmVsT3ZlcmxhcCA9IHtcbiAgICBESVNBQkxFX09WRVJMQVA6IFwiRElTQUJMRV9PVkVSTEFQXCIsXG4gICAgRU5BQkxFX09WRVJMQVA6IFwiRU5BQkxFX09WRVJMQVBcIixcbn07XG5leHBvcnQgY29uc3QgRGF0YUxhYmVsUG9zaXRpb24gPSB7XG4gICAgQk9UVE9NOiBcIkJPVFRPTVwiLFxuICAgIElOU0lERTogXCJJTlNJREVcIixcbiAgICBMRUZUOiBcIkxFRlRcIixcbiAgICBPVVRTSURFOiBcIk9VVFNJREVcIixcbiAgICBSSUdIVDogXCJSSUdIVFwiLFxuICAgIFRPUDogXCJUT1BcIixcbn07XG5leHBvcnQgY29uc3QgQ3VzdG9tUGFyYW1ldGVyVmFsdWVzRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5TdHJpbmdWYWx1ZXMgJiYgeyBTdHJpbmdWYWx1ZXM6IFNFTlNJVElWRV9TVFJJTkcgfSksXG4gICAgLi4uKG9iai5JbnRlZ2VyVmFsdWVzICYmIHsgSW50ZWdlclZhbHVlczogU0VOU0lUSVZFX1NUUklORyB9KSxcbiAgICAuLi4ob2JqLkRlY2ltYWxWYWx1ZXMgJiYgeyBEZWNpbWFsVmFsdWVzOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxuICAgIC4uLihvYmouRGF0ZVRpbWVWYWx1ZXMgJiYgeyBEYXRlVGltZVZhbHVlczogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEN1c3RvbVZhbHVlc0NvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkN1c3RvbVZhbHVlcyAmJiB7IEN1c3RvbVZhbHVlczogQ3VzdG9tUGFyYW1ldGVyVmFsdWVzRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5DdXN0b21WYWx1ZXMpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRGVzdGluYXRpb25QYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkN1c3RvbVZhbHVlc0NvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBDdXN0b21WYWx1ZXNDb25maWd1cmF0aW9uOiBDdXN0b21WYWx1ZXNDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5DdXN0b21WYWx1ZXNDb25maWd1cmF0aW9uKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFNldFBhcmFtZXRlclZhbHVlQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouVmFsdWUgJiYgeyBWYWx1ZTogRGVzdGluYXRpb25QYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlZhbHVlKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEN1c3RvbUFjdGlvblNldFBhcmFtZXRlcnNPcGVyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlBhcmFtZXRlclZhbHVlQ29uZmlndXJhdGlvbnMgJiYge1xuICAgICAgICBQYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb25zOiBvYmouUGFyYW1ldGVyVmFsdWVDb25maWd1cmF0aW9ucy5tYXAoKGl0ZW0pID0+IFNldFBhcmFtZXRlclZhbHVlQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBJbWFnZUN1c3RvbUFjdGlvbk9wZXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouU2V0UGFyYW1ldGVyc09wZXJhdGlvbiAmJiB7XG4gICAgICAgIFNldFBhcmFtZXRlcnNPcGVyYXRpb246IEN1c3RvbUFjdGlvblNldFBhcmFtZXRlcnNPcGVyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlNldFBhcmFtZXRlcnNPcGVyYXRpb24pLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgSW1hZ2VDdXN0b21BY3Rpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IFNoZWV0SW1hZ2VGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IFNoZWV0RmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG59KTtcbmV4cG9ydCBjb25zdCBBbmFseXNpc0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgQ2FsY3VsYXRlZEZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5FeHByZXNzaW9uICYmIHsgRXhwcmVzc2lvbjogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEN1c3RvbUNvbG9yRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5GaWVsZFZhbHVlICYmIHsgRmllbGRWYWx1ZTogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IENvbG9yc0NvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkN1c3RvbUNvbG9ycyAmJiB7IEN1c3RvbUNvbG9yczogb2JqLkN1c3RvbUNvbG9ycy5tYXAoKGl0ZW0pID0+IEN1c3RvbUNvbG9yRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IE51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLk51bGxTdHJpbmcgJiYgeyBOdWxsU3RyaW5nOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgQ3VycmVuY3lEaXNwbGF5Rm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouUHJlZml4ICYmIHsgUHJlZml4OiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxuICAgIC4uLihvYmouU3VmZml4ICYmIHsgU3VmZml4OiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxuICAgIC4uLihvYmouTnVsbFZhbHVlRm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIE51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb246IE51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLk51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgTnVtYmVyRGlzcGxheUZvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlByZWZpeCAmJiB7IFByZWZpeDogU0VOU0lUSVZFX1NUUklORyB9KSxcbiAgICAuLi4ob2JqLlN1ZmZpeCAmJiB7IFN1ZmZpeDogU0VOU0lUSVZFX1NUUklORyB9KSxcbiAgICAuLi4ob2JqLk51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBOdWxsVmFsdWVGb3JtYXRDb25maWd1cmF0aW9uOiBOdWxsVmFsdWVGb3JtYXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5OdWxsVmFsdWVGb3JtYXRDb25maWd1cmF0aW9uKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFBlcmNlbnRhZ2VEaXNwbGF5Rm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouUHJlZml4ICYmIHsgUHJlZml4OiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxuICAgIC4uLihvYmouU3VmZml4ICYmIHsgU3VmZml4OiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxuICAgIC4uLihvYmouTnVsbFZhbHVlRm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIE51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb246IE51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLk51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgTnVtZXJpY0Zvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLk51bWJlckRpc3BsYXlGb3JtYXRDb25maWd1cmF0aW9uICYmIHtcbiAgICAgICAgTnVtYmVyRGlzcGxheUZvcm1hdENvbmZpZ3VyYXRpb246IE51bWJlckRpc3BsYXlGb3JtYXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5OdW1iZXJEaXNwbGF5Rm9ybWF0Q29uZmlndXJhdGlvbiksXG4gICAgfSksXG4gICAgLi4uKG9iai5DdXJyZW5jeURpc3BsYXlGb3JtYXRDb25maWd1cmF0aW9uICYmIHtcbiAgICAgICAgQ3VycmVuY3lEaXNwbGF5Rm9ybWF0Q29uZmlndXJhdGlvbjogQ3VycmVuY3lEaXNwbGF5Rm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouQ3VycmVuY3lEaXNwbGF5Rm9ybWF0Q29uZmlndXJhdGlvbiksXG4gICAgfSksXG4gICAgLi4uKG9iai5QZXJjZW50YWdlRGlzcGxheUZvcm1hdENvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBQZXJjZW50YWdlRGlzcGxheUZvcm1hdENvbmZpZ3VyYXRpb246IFBlcmNlbnRhZ2VEaXNwbGF5Rm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouUGVyY2VudGFnZURpc3BsYXlGb3JtYXRDb25maWd1cmF0aW9uKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERhdGVUaW1lRm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouTnVsbFZhbHVlRm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIE51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb246IE51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLk51bGxWYWx1ZUZvcm1hdENvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxuICAgIC4uLihvYmouTnVtZXJpY0Zvcm1hdENvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBOdW1lcmljRm9ybWF0Q29uZmlndXJhdGlvbjogTnVtZXJpY0Zvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLk51bWVyaWNGb3JtYXRDb25maWd1cmF0aW9uKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IE51bWJlckZvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkZvcm1hdENvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBGb3JtYXRDb25maWd1cmF0aW9uOiBOdW1lcmljRm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouRm9ybWF0Q29uZmlndXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBTdHJpbmdGb3JtYXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5OdWxsVmFsdWVGb3JtYXRDb25maWd1cmF0aW9uICYmIHtcbiAgICAgICAgTnVsbFZhbHVlRm9ybWF0Q29uZmlndXJhdGlvbjogTnVsbFZhbHVlRm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouTnVsbFZhbHVlRm9ybWF0Q29uZmlndXJhdGlvbiksXG4gICAgfSksXG4gICAgLi4uKG9iai5OdW1lcmljRm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIE51bWVyaWNGb3JtYXRDb25maWd1cmF0aW9uOiBOdW1lcmljRm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouTnVtZXJpY0Zvcm1hdENvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouU3RyaW5nRm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIFN0cmluZ0Zvcm1hdENvbmZpZ3VyYXRpb246IFN0cmluZ0Zvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlN0cmluZ0Zvcm1hdENvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxuICAgIC4uLihvYmouTnVtYmVyRm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIE51bWJlckZvcm1hdENvbmZpZ3VyYXRpb246IE51bWJlckZvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLk51bWJlckZvcm1hdENvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxuICAgIC4uLihvYmouRGF0ZVRpbWVGb3JtYXRDb25maWd1cmF0aW9uICYmIHtcbiAgICAgICAgRGF0ZVRpbWVGb3JtYXRDb25maWd1cmF0aW9uOiBEYXRlVGltZUZvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkRhdGVUaW1lRm9ybWF0Q29uZmlndXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBDb2x1bW5Db25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5Gb3JtYXRDb25maWd1cmF0aW9uICYmIHtcbiAgICAgICAgRm9ybWF0Q29uZmlndXJhdGlvbjogRm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouRm9ybWF0Q29uZmlndXJhdGlvbiksXG4gICAgfSksXG4gICAgLi4uKG9iai5Db2xvcnNDb25maWd1cmF0aW9uICYmIHtcbiAgICAgICAgQ29sb3JzQ29uZmlndXJhdGlvbjogQ29sb3JzQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouQ29sb3JzQ29uZmlndXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBSb2xsaW5nRGF0ZUNvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkV4cHJlc3Npb24gJiYgeyBFeHByZXNzaW9uOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgVGltZUVxdWFsaXR5RmlsdGVyRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5Sb2xsaW5nRGF0ZSAmJiB7IFJvbGxpbmdEYXRlOiBSb2xsaW5nRGF0ZUNvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlJvbGxpbmdEYXRlKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRpbWVSYW5nZUZpbHRlclZhbHVlRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5Sb2xsaW5nRGF0ZSAmJiB7IFJvbGxpbmdEYXRlOiBSb2xsaW5nRGF0ZUNvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlJvbGxpbmdEYXRlKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRpbWVSYW5nZUZpbHRlckZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouUmFuZ2VNaW5pbXVtVmFsdWUgJiYgeyBSYW5nZU1pbmltdW1WYWx1ZTogVGltZVJhbmdlRmlsdGVyVmFsdWVGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlJhbmdlTWluaW11bVZhbHVlKSB9KSxcbiAgICAuLi4ob2JqLlJhbmdlTWF4aW11bVZhbHVlICYmIHsgUmFuZ2VNYXhpbXVtVmFsdWU6IFRpbWVSYW5nZUZpbHRlclZhbHVlRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5SYW5nZU1heGltdW1WYWx1ZSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBGaWx0ZXJGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlRpbWVFcXVhbGl0eUZpbHRlciAmJiB7IFRpbWVFcXVhbGl0eUZpbHRlcjogVGltZUVxdWFsaXR5RmlsdGVyRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5UaW1lRXF1YWxpdHlGaWx0ZXIpIH0pLFxuICAgIC4uLihvYmouVGltZVJhbmdlRmlsdGVyICYmIHsgVGltZVJhbmdlRmlsdGVyOiBUaW1lUmFuZ2VGaWx0ZXJGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlRpbWVSYW5nZUZpbHRlcikgfSksXG59KTtcbmV4cG9ydCBjb25zdCBGaWx0ZXJHcm91cEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRmlsdGVycyAmJiB7IEZpbHRlcnM6IG9iai5GaWx0ZXJzLm1hcCgoaXRlbSkgPT4gRmlsdGVyRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERhdGVUaW1lRGVmYXVsdFZhbHVlc0ZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouU3RhdGljVmFsdWVzICYmIHsgU3RhdGljVmFsdWVzOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxuICAgIC4uLihvYmouUm9sbGluZ0RhdGUgJiYgeyBSb2xsaW5nRGF0ZTogUm9sbGluZ0RhdGVDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5Sb2xsaW5nRGF0ZSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBEYXRlVGltZVZhbHVlV2hlblVuc2V0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQ3VzdG9tVmFsdWUgJiYgeyBDdXN0b21WYWx1ZTogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERhdGVUaW1lUGFyYW1ldGVyRGVjbGFyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkRlZmF1bHRWYWx1ZXMgJiYgeyBEZWZhdWx0VmFsdWVzOiBEYXRlVGltZURlZmF1bHRWYWx1ZXNGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkRlZmF1bHRWYWx1ZXMpIH0pLFxuICAgIC4uLihvYmouVmFsdWVXaGVuVW5zZXQgJiYge1xuICAgICAgICBWYWx1ZVdoZW5VbnNldDogRGF0ZVRpbWVWYWx1ZVdoZW5VbnNldENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlZhbHVlV2hlblVuc2V0KSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERlY2ltYWxEZWZhdWx0VmFsdWVzRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5TdGF0aWNWYWx1ZXMgJiYgeyBTdGF0aWNWYWx1ZXM6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBEZWNpbWFsVmFsdWVXaGVuVW5zZXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5DdXN0b21WYWx1ZSAmJiB7IEN1c3RvbVZhbHVlOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRGVjaW1hbFBhcmFtZXRlckRlY2xhcmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5EZWZhdWx0VmFsdWVzICYmIHsgRGVmYXVsdFZhbHVlczogRGVjaW1hbERlZmF1bHRWYWx1ZXNGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkRlZmF1bHRWYWx1ZXMpIH0pLFxuICAgIC4uLihvYmouVmFsdWVXaGVuVW5zZXQgJiYge1xuICAgICAgICBWYWx1ZVdoZW5VbnNldDogRGVjaW1hbFZhbHVlV2hlblVuc2V0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouVmFsdWVXaGVuVW5zZXQpLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgSW50ZWdlckRlZmF1bHRWYWx1ZXNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlN0YXRpY1ZhbHVlcyAmJiB7IFN0YXRpY1ZhbHVlczogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEludGVnZXJWYWx1ZVdoZW5VbnNldENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkN1c3RvbVZhbHVlICYmIHsgQ3VzdG9tVmFsdWU6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBJbnRlZ2VyUGFyYW1ldGVyRGVjbGFyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkRlZmF1bHRWYWx1ZXMgJiYgeyBEZWZhdWx0VmFsdWVzOiBJbnRlZ2VyRGVmYXVsdFZhbHVlc0ZpbHRlclNlbnNpdGl2ZUxvZyhvYmouRGVmYXVsdFZhbHVlcykgfSksXG4gICAgLi4uKG9iai5WYWx1ZVdoZW5VbnNldCAmJiB7XG4gICAgICAgIFZhbHVlV2hlblVuc2V0OiBJbnRlZ2VyVmFsdWVXaGVuVW5zZXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5WYWx1ZVdoZW5VbnNldCksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBTdHJpbmdEZWZhdWx0VmFsdWVzRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5TdGF0aWNWYWx1ZXMgJiYgeyBTdGF0aWNWYWx1ZXM6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBTdHJpbmdWYWx1ZVdoZW5VbnNldENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkN1c3RvbVZhbHVlICYmIHsgQ3VzdG9tVmFsdWU6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBTdHJpbmdQYXJhbWV0ZXJEZWNsYXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRGVmYXVsdFZhbHVlcyAmJiB7IERlZmF1bHRWYWx1ZXM6IFN0cmluZ0RlZmF1bHRWYWx1ZXNGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkRlZmF1bHRWYWx1ZXMpIH0pLFxuICAgIC4uLihvYmouVmFsdWVXaGVuVW5zZXQgJiYge1xuICAgICAgICBWYWx1ZVdoZW5VbnNldDogU3RyaW5nVmFsdWVXaGVuVW5zZXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5WYWx1ZVdoZW5VbnNldCksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBQYXJhbWV0ZXJEZWNsYXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouU3RyaW5nUGFyYW1ldGVyRGVjbGFyYXRpb24gJiYge1xuICAgICAgICBTdHJpbmdQYXJhbWV0ZXJEZWNsYXJhdGlvbjogU3RyaW5nUGFyYW1ldGVyRGVjbGFyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlN0cmluZ1BhcmFtZXRlckRlY2xhcmF0aW9uKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLkRlY2ltYWxQYXJhbWV0ZXJEZWNsYXJhdGlvbiAmJiB7XG4gICAgICAgIERlY2ltYWxQYXJhbWV0ZXJEZWNsYXJhdGlvbjogRGVjaW1hbFBhcmFtZXRlckRlY2xhcmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5EZWNpbWFsUGFyYW1ldGVyRGVjbGFyYXRpb24pLFxuICAgIH0pLFxuICAgIC4uLihvYmouSW50ZWdlclBhcmFtZXRlckRlY2xhcmF0aW9uICYmIHtcbiAgICAgICAgSW50ZWdlclBhcmFtZXRlckRlY2xhcmF0aW9uOiBJbnRlZ2VyUGFyYW1ldGVyRGVjbGFyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkludGVnZXJQYXJhbWV0ZXJEZWNsYXJhdGlvbiksXG4gICAgfSksXG4gICAgLi4uKG9iai5EYXRlVGltZVBhcmFtZXRlckRlY2xhcmF0aW9uICYmIHtcbiAgICAgICAgRGF0ZVRpbWVQYXJhbWV0ZXJEZWNsYXJhdGlvbjogRGF0ZVRpbWVQYXJhbWV0ZXJEZWNsYXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouRGF0ZVRpbWVQYXJhbWV0ZXJEZWNsYXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBTaGVldEVsZW1lbnRSZW5kZXJpbmdSdWxlRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5FeHByZXNzaW9uICYmIHsgRXhwcmVzc2lvbjogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEZyZWVGb3JtTGF5b3V0RWxlbWVudEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouUmVuZGVyaW5nUnVsZXMgJiYge1xuICAgICAgICBSZW5kZXJpbmdSdWxlczogb2JqLlJlbmRlcmluZ1J1bGVzLm1hcCgoaXRlbSkgPT4gU2hlZXRFbGVtZW50UmVuZGVyaW5nUnVsZUZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBGcmVlRm9ybUxheW91dENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IEZyZWVGb3JtU2VjdGlvbkxheW91dENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IFNlY3Rpb25MYXlvdXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG59KTtcbmV4cG9ydCBjb25zdCBCb2R5U2VjdGlvbkNvbnRlbnRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IEJvZHlTZWN0aW9uQ29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgSGVhZGVyRm9vdGVyU2VjdGlvbkNvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IFNlY3Rpb25CYXNlZExheW91dENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IExheW91dENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IExheW91dEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgVmlzdWFsQ3VzdG9tQWN0aW9uT3BlcmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5TZXRQYXJhbWV0ZXJzT3BlcmF0aW9uICYmIHtcbiAgICAgICAgU2V0UGFyYW1ldGVyc09wZXJhdGlvbjogQ3VzdG9tQWN0aW9uU2V0UGFyYW1ldGVyc09wZXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouU2V0UGFyYW1ldGVyc09wZXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBWaXN1YWxDdXN0b21BY3Rpb25GaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IERhdGFQYXRoTGFiZWxUeXBlRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5GaWVsZFZhbHVlICYmIHsgRmllbGRWYWx1ZTogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERhdGFMYWJlbFR5cGVGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkRhdGFQYXRoTGFiZWxUeXBlICYmIHsgRGF0YVBhdGhMYWJlbFR5cGU6IERhdGFQYXRoTGFiZWxUeXBlRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5EYXRhUGF0aExhYmVsVHlwZSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBEYXRhTGFiZWxPcHRpb25zRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5EYXRhTGFiZWxUeXBlcyAmJiB7XG4gICAgICAgIERhdGFMYWJlbFR5cGVzOiBvYmouRGF0YUxhYmVsVHlwZXMubWFwKChpdGVtKSA9PiBEYXRhTGFiZWxUeXBlRmlsdGVyU2Vuc2l0aXZlTG9nKGl0ZW0pKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IENhdGVnb3JpY2FsRGltZW5zaW9uRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkZvcm1hdENvbmZpZ3VyYXRpb24gJiYge1xuICAgICAgICBGb3JtYXRDb25maWd1cmF0aW9uOiBTdHJpbmdGb3JtYXRDb25maWd1cmF0aW9uRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5Gb3JtYXRDb25maWd1cmF0aW9uKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERhdGVEaW1lbnNpb25GaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIEZvcm1hdENvbmZpZ3VyYXRpb246IERhdGVUaW1lRm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouRm9ybWF0Q29uZmlndXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBOdW1lcmljYWxEaW1lbnNpb25GaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgRGltZW5zaW9uRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkNhdGVnb3JpY2FsRGltZW5zaW9uRmllbGQgJiYge1xuICAgICAgICBDYXRlZ29yaWNhbERpbWVuc2lvbkZpZWxkOiBDYXRlZ29yaWNhbERpbWVuc2lvbkZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5DYXRlZ29yaWNhbERpbWVuc2lvbkZpZWxkKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLkRhdGVEaW1lbnNpb25GaWVsZCAmJiB7IERhdGVEaW1lbnNpb25GaWVsZDogRGF0ZURpbWVuc2lvbkZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5EYXRlRGltZW5zaW9uRmllbGQpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgQ2FsY3VsYXRlZE1lYXN1cmVGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRXhwcmVzc2lvbiAmJiB7IEV4cHJlc3Npb246IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBDYXRlZ29yaWNhbE1lYXN1cmVGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIEZvcm1hdENvbmZpZ3VyYXRpb246IFN0cmluZ0Zvcm1hdENvbmZpZ3VyYXRpb25GaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkZvcm1hdENvbmZpZ3VyYXRpb24pLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRGF0ZU1lYXN1cmVGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRm9ybWF0Q29uZmlndXJhdGlvbiAmJiB7XG4gICAgICAgIEZvcm1hdENvbmZpZ3VyYXRpb246IERhdGVUaW1lRm9ybWF0Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouRm9ybWF0Q29uZmlndXJhdGlvbiksXG4gICAgfSksXG59KTtcbmV4cG9ydCBjb25zdCBOdW1lcmljYWxNZWFzdXJlRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IE1lYXN1cmVGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQ2F0ZWdvcmljYWxNZWFzdXJlRmllbGQgJiYge1xuICAgICAgICBDYXRlZ29yaWNhbE1lYXN1cmVGaWVsZDogQ2F0ZWdvcmljYWxNZWFzdXJlRmllbGRGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLkNhdGVnb3JpY2FsTWVhc3VyZUZpZWxkKSxcbiAgICB9KSxcbiAgICAuLi4ob2JqLkRhdGVNZWFzdXJlRmllbGQgJiYgeyBEYXRlTWVhc3VyZUZpZWxkOiBEYXRlTWVhc3VyZUZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5EYXRlTWVhc3VyZUZpZWxkKSB9KSxcbiAgICAuLi4ob2JqLkNhbGN1bGF0ZWRNZWFzdXJlRmllbGQgJiYge1xuICAgICAgICBDYWxjdWxhdGVkTWVhc3VyZUZpZWxkOiBDYWxjdWxhdGVkTWVhc3VyZUZpZWxkRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5DYWxjdWxhdGVkTWVhc3VyZUZpZWxkKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEJhckNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlZhbHVlcyAmJiB7IFZhbHVlczogb2JqLlZhbHVlcy5tYXAoKGl0ZW0pID0+IE1lYXN1cmVGaWVsZEZpbHRlclNlbnNpdGl2ZUxvZyhpdGVtKSkgfSksXG59KTtcbmV4cG9ydCBjb25zdCBCYXJDaGFydEZpZWxkV2VsbHNGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuIiwiaW1wb3J0IHsgU0VOU0lUSVZFX1NUUklORyB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IEFzc2V0QnVuZGxlSW1wb3J0U291cmNlRGVzY3JpcHRpb25GaWx0ZXJTZW5zaXRpdmVMb2csIH0gZnJvbSBcIi4vbW9kZWxzXzJcIjtcbmltcG9ydCB7IF9QYXJhbWV0ZXJzRmlsdGVyU2Vuc2l0aXZlTG9nLCBDdXN0b21JbnN0cnVjdGlvbnNGaWx0ZXJTZW5zaXRpdmVMb2csIERhdGFTZXRGaWx0ZXJTZW5zaXRpdmVMb2csIH0gZnJvbSBcIi4vbW9kZWxzXzNcIjtcbmltcG9ydCB7IFF1aWNrU2lnaHRTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fQmFzZUV4Y2VwdGlvbiB9IGZyb20gXCIuL1F1aWNrU2lnaHRTZXJ2aWNlRXhjZXB0aW9uXCI7XG5leHBvcnQgY29uc3QgSW5jbHVkZUZvbGRlck1lbWJlcnMgPSB7XG4gICAgTk9ORTogXCJOT05FXCIsXG4gICAgT05FX0xFVkVMOiBcIk9ORV9MRVZFTFwiLFxuICAgIFJFQ1VSU0U6IFwiUkVDVVJTRVwiLFxufTtcbmV4cG9ydCBjb25zdCBTbmFwc2hvdEpvYlN0YXR1cyA9IHtcbiAgICBDT01QTEVURUQ6IFwiQ09NUExFVEVEXCIsXG4gICAgRkFJTEVEOiBcIkZBSUxFRFwiLFxuICAgIFFVRVVFRDogXCJRVUVVRURcIixcbiAgICBSVU5OSU5HOiBcIlJVTk5JTkdcIixcbn07XG5leHBvcnQgY2xhc3MgSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBSZXF1ZXN0SWQ7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIkludmFsaWROZXh0VG9rZW5FeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEluZ2VzdGlvbkVycm9yVHlwZSA9IHtcbiAgICBBQ0NPVU5UX0NBUEFDSVRZX0xJTUlUX0VYQ0VFREVEOiBcIkFDQ09VTlRfQ0FQQUNJVFlfTElNSVRfRVhDRUVERURcIixcbiAgICBDT05ORUNUSU9OX0ZBSUxVUkU6IFwiQ09OTkVDVElPTl9GQUlMVVJFXCIsXG4gICAgQ1VSU09SX05PVF9FTkFCTEVEOiBcIkNVUlNPUl9OT1RfRU5BQkxFRFwiLFxuICAgIENVU1RPTUVSX0VSUk9SOiBcIkNVU1RPTUVSX0VSUk9SXCIsXG4gICAgREFUQV9TRVRfREVMRVRFRDogXCJEQVRBX1NFVF9ERUxFVEVEXCIsXG4gICAgREFUQV9TRVRfTk9UX1NQSUNFOiBcIkRBVEFfU0VUX05PVF9TUElDRVwiLFxuICAgIERBVEFfU0VUX1NJWkVfTElNSVRfRVhDRUVERUQ6IFwiREFUQV9TRVRfU0laRV9MSU1JVF9FWENFRURFRFwiLFxuICAgIERBVEFfU09VUkNFX0FVVEhfRkFJTEVEOiBcIkRBVEFfU09VUkNFX0FVVEhfRkFJTEVEXCIsXG4gICAgREFUQV9TT1VSQ0VfQ09OTkVDVElPTl9GQUlMRUQ6IFwiREFUQV9TT1VSQ0VfQ09OTkVDVElPTl9GQUlMRURcIixcbiAgICBEQVRBX1NPVVJDRV9OT1RfRk9VTkQ6IFwiREFUQV9TT1VSQ0VfTk9UX0ZPVU5EXCIsXG4gICAgREFUQV9UT0xFUkFOQ0VfRVhDRVBUSU9OOiBcIkRBVEFfVE9MRVJBTkNFX0VYQ0VQVElPTlwiLFxuICAgIERVUExJQ0FURV9DT0xVTU5fTkFNRVNfRk9VTkQ6IFwiRFVQTElDQVRFX0NPTFVNTl9OQU1FU19GT1VORFwiLFxuICAgIEVMQVNUSUNTRUFSQ0hfQ1VSU09SX05PVF9FTkFCTEVEOiBcIkVMQVNUSUNTRUFSQ0hfQ1VSU09SX05PVF9FTkFCTEVEXCIsXG4gICAgRkFJTFVSRV9UT19BU1NVTUVfUk9MRTogXCJGQUlMVVJFX1RPX0FTU1VNRV9ST0xFXCIsXG4gICAgRkFJTFVSRV9UT19QUk9DRVNTX0pTT05fRklMRTogXCJGQUlMVVJFX1RPX1BST0NFU1NfSlNPTl9GSUxFXCIsXG4gICAgSUFNX1JPTEVfTk9UX0FWQUlMQUJMRTogXCJJQU1fUk9MRV9OT1RfQVZBSUxBQkxFXCIsXG4gICAgSU5HRVNUSU9OX0NBTkNFTEVEOiBcIklOR0VTVElPTl9DQU5DRUxFRFwiLFxuICAgIElOR0VTVElPTl9TVVBFUlNFREVEOiBcIklOR0VTVElPTl9TVVBFUlNFREVEXCIsXG4gICAgSU5URVJOQUxfU0VSVklDRV9FUlJPUjogXCJJTlRFUk5BTF9TRVJWSUNFX0VSUk9SXCIsXG4gICAgSU5WQUxJRF9EQVRBUFJFUF9TWU5UQVg6IFwiSU5WQUxJRF9EQVRBUFJFUF9TWU5UQVhcIixcbiAgICBJTlZBTElEX0RBVEFfU09VUkNFX0NPTkZJRzogXCJJTlZBTElEX0RBVEFfU09VUkNFX0NPTkZJR1wiLFxuICAgIElOVkFMSURfREFURV9GT1JNQVQ6IFwiSU5WQUxJRF9EQVRFX0ZPUk1BVFwiLFxuICAgIElPVF9EQVRBX1NFVF9GSUxFX0VNUFRZOiBcIklPVF9EQVRBX1NFVF9GSUxFX0VNUFRZXCIsXG4gICAgSU9UX0ZJTEVfTk9UX0ZPVU5EOiBcIklPVF9GSUxFX05PVF9GT1VORFwiLFxuICAgIE9BVVRIX1RPS0VOX0ZBSUxVUkU6IFwiT0FVVEhfVE9LRU5fRkFJTFVSRVwiLFxuICAgIFBBU1NXT1JEX0FVVEhFTlRJQ0FUSU9OX0ZBSUxVUkU6IFwiUEFTU1dPUkRfQVVUSEVOVElDQVRJT05fRkFJTFVSRVwiLFxuICAgIFBFUk1JU1NJT05fREVOSUVEOiBcIlBFUk1JU1NJT05fREVOSUVEXCIsXG4gICAgUEVSTUlTU0lPTl9OT1RfRk9VTkQ6IFwiUEVSTUlTU0lPTl9OT1RfRk9VTkRcIixcbiAgICBRVUVSWV9USU1FT1VUOiBcIlFVRVJZX1RJTUVPVVRcIixcbiAgICBSRUZSRVNIX1NVUFBSRVNTRURfQllfRURJVDogXCJSRUZSRVNIX1NVUFBSRVNTRURfQllfRURJVFwiLFxuICAgIFJPV19TSVpFX0xJTUlUX0VYQ0VFREVEOiBcIlJPV19TSVpFX0xJTUlUX0VYQ0VFREVEXCIsXG4gICAgUzNfRklMRV9JTkFDQ0VTU0lCTEU6IFwiUzNfRklMRV9JTkFDQ0VTU0lCTEVcIixcbiAgICBTM19NQU5JRkVTVF9FUlJPUjogXCJTM19NQU5JRkVTVF9FUlJPUlwiLFxuICAgIFMzX1VQTE9BREVEX0ZJTEVfREVMRVRFRDogXCJTM19VUExPQURFRF9GSUxFX0RFTEVURURcIixcbiAgICBTT1VSQ0VfQVBJX0xJTUlUX0VYQ0VFREVEX0ZBSUxVUkU6IFwiU09VUkNFX0FQSV9MSU1JVF9FWENFRURFRF9GQUlMVVJFXCIsXG4gICAgU09VUkNFX1JFU09VUkNFX0xJTUlUX0VYQ0VFREVEOiBcIlNPVVJDRV9SRVNPVVJDRV9MSU1JVF9FWENFRURFRFwiLFxuICAgIFNQSUNFX1RBQkxFX05PVF9GT1VORDogXCJTUElDRV9UQUJMRV9OT1RfRk9VTkRcIixcbiAgICBTUUxfRVhDRVBUSU9OOiBcIlNRTF9FWENFUFRJT05cIixcbiAgICBTUUxfSU5WQUxJRF9QQVJBTUVURVJfVkFMVUU6IFwiU1FMX0lOVkFMSURfUEFSQU1FVEVSX1ZBTFVFXCIsXG4gICAgU1FMX05VTUVSSUNfT1ZFUkZMT1c6IFwiU1FMX05VTUVSSUNfT1ZFUkZMT1dcIixcbiAgICBTUUxfU0NIRU1BX01JU01BVENIX0VSUk9SOiBcIlNRTF9TQ0hFTUFfTUlTTUFUQ0hfRVJST1JcIixcbiAgICBTUUxfVEFCTEVfTk9UX0ZPVU5EOiBcIlNRTF9UQUJMRV9OT1RfRk9VTkRcIixcbiAgICBTU0xfQ0VSVElGSUNBVEVfVkFMSURBVElPTl9GQUlMVVJFOiBcIlNTTF9DRVJUSUZJQ0FURV9WQUxJREFUSU9OX0ZBSUxVUkVcIixcbiAgICBVTlJFU09MVkFCTEVfSE9TVDogXCJVTlJFU09MVkFCTEVfSE9TVFwiLFxuICAgIFVOUk9VVEFCTEVfSE9TVDogXCJVTlJPVVRBQkxFX0hPU1RcIixcbn07XG5leHBvcnQgY29uc3QgSW5nZXN0aW9uUmVxdWVzdFNvdXJjZSA9IHtcbiAgICBNQU5VQUw6IFwiTUFOVUFMXCIsXG4gICAgU0NIRURVTEVEOiBcIlNDSEVEVUxFRFwiLFxufTtcbmV4cG9ydCBjb25zdCBJbmdlc3Rpb25SZXF1ZXN0VHlwZSA9IHtcbiAgICBFRElUOiBcIkVESVRcIixcbiAgICBGVUxMX1JFRlJFU0g6IFwiRlVMTF9SRUZSRVNIXCIsXG4gICAgSU5DUkVNRU5UQUxfUkVGUkVTSDogXCJJTkNSRU1FTlRBTF9SRUZSRVNIXCIsXG4gICAgSU5JVElBTF9JTkdFU1RJT046IFwiSU5JVElBTF9JTkdFU1RJT05cIixcbn07XG5leHBvcnQgY29uc3QgUURhdGFLZXlUeXBlID0ge1xuICAgIEFXU19PV05FRDogXCJBV1NfT1dORURcIixcbiAgICBDTUs6IFwiQ01LXCIsXG59O1xuZXhwb3J0IGNvbnN0IE5hbWVzcGFjZUVycm9yVHlwZSA9IHtcbiAgICBJTlRFUk5BTF9TRVJWSUNFX0VSUk9SOiBcIklOVEVSTkFMX1NFUlZJQ0VfRVJST1JcIixcbiAgICBQRVJNSVNTSU9OX0RFTklFRDogXCJQRVJNSVNTSU9OX0RFTklFRFwiLFxufTtcbmV4cG9ydCBjb25zdCBQZXJzb25hbGl6YXRpb25Nb2RlID0ge1xuICAgIERJU0FCTEVEOiBcIkRJU0FCTEVEXCIsXG4gICAgRU5BQkxFRDogXCJFTkFCTEVEXCIsXG59O1xuZXhwb3J0IGNvbnN0IFFTZWFyY2hTdGF0dXMgPSB7XG4gICAgRElTQUJMRUQ6IFwiRElTQUJMRURcIixcbiAgICBFTkFCTEVEOiBcIkVOQUJMRURcIixcbn07XG5leHBvcnQgY29uc3QgVGVtcGxhdGVFcnJvclR5cGUgPSB7XG4gICAgQUNDRVNTX0RFTklFRDogXCJBQ0NFU1NfREVOSUVEXCIsXG4gICAgREFUQV9TRVRfTk9UX0ZPVU5EOiBcIkRBVEFfU0VUX05PVF9GT1VORFwiLFxuICAgIElOVEVSTkFMX0ZBSUxVUkU6IFwiSU5URVJOQUxfRkFJTFVSRVwiLFxuICAgIFNPVVJDRV9OT1RfRk9VTkQ6IFwiU09VUkNFX05PVF9GT1VORFwiLFxufTtcbmV4cG9ydCBjb25zdCBUaGVtZVR5cGUgPSB7XG4gICAgQUxMOiBcIkFMTFwiLFxuICAgIENVU1RPTTogXCJDVVNUT01cIixcbiAgICBRVUlDS1NJR0hUOiBcIlFVSUNLU0lHSFRcIixcbn07XG5leHBvcnQgY29uc3QgVGhlbWVFcnJvclR5cGUgPSB7XG4gICAgSU5URVJOQUxfRkFJTFVSRTogXCJJTlRFUk5BTF9GQUlMVVJFXCIsXG59O1xuZXhwb3J0IGNvbnN0IFRvcGljUmVmcmVzaFN0YXR1cyA9IHtcbiAgICBDQU5DRUxMRUQ6IFwiQ0FOQ0VMTEVEXCIsXG4gICAgQ09NUExFVEVEOiBcIkNPTVBMRVRFRFwiLFxuICAgIEZBSUxFRDogXCJGQUlMRURcIixcbiAgICBJTklUSUFMSVpFRDogXCJJTklUSUFMSVpFRFwiLFxuICAgIFJVTk5JTkc6IFwiUlVOTklOR1wiLFxufTtcbmV4cG9ydCBjb25zdCBJZGVudGl0eVR5cGUgPSB7XG4gICAgSUFNOiBcIklBTVwiLFxuICAgIElBTV9JREVOVElUWV9DRU5URVI6IFwiSUFNX0lERU5USVRZX0NFTlRFUlwiLFxuICAgIFFVSUNLU0lHSFQ6IFwiUVVJQ0tTSUdIVFwiLFxufTtcbmV4cG9ydCBjb25zdCBVc2VyUm9sZSA9IHtcbiAgICBBRE1JTjogXCJBRE1JTlwiLFxuICAgIEFETUlOX1BSTzogXCJBRE1JTl9QUk9cIixcbiAgICBBVVRIT1I6IFwiQVVUSE9SXCIsXG4gICAgQVVUSE9SX1BSTzogXCJBVVRIT1JfUFJPXCIsXG4gICAgUkVBREVSOiBcIlJFQURFUlwiLFxuICAgIFJFQURFUl9QUk86IFwiUkVBREVSX1BST1wiLFxuICAgIFJFU1RSSUNURURfQVVUSE9SOiBcIlJFU1RSSUNURURfQVVUSE9SXCIsXG4gICAgUkVTVFJJQ1RFRF9SRUFERVI6IFwiUkVTVFJJQ1RFRF9SRUFERVJcIixcbn07XG5leHBvcnQgY29uc3QgTmV0d29ya0ludGVyZmFjZVN0YXR1cyA9IHtcbiAgICBBVFRBQ0hNRU5UX0ZBSUxFRF9ST0xMQkFDS19GQUlMRUQ6IFwiQVRUQUNITUVOVF9GQUlMRURfUk9MTEJBQ0tfRkFJTEVEXCIsXG4gICAgQVZBSUxBQkxFOiBcIkFWQUlMQUJMRVwiLFxuICAgIENSRUFUSU5HOiBcIkNSRUFUSU5HXCIsXG4gICAgQ1JFQVRJT05fRkFJTEVEOiBcIkNSRUFUSU9OX0ZBSUxFRFwiLFxuICAgIERFTEVURUQ6IFwiREVMRVRFRFwiLFxuICAgIERFTEVUSU5HOiBcIkRFTEVUSU5HXCIsXG4gICAgREVMRVRJT05fRkFJTEVEOiBcIkRFTEVUSU9OX0ZBSUxFRFwiLFxuICAgIERFTEVUSU9OX1NDSEVEVUxFRDogXCJERUxFVElPTl9TQ0hFRFVMRURcIixcbiAgICBVUERBVEVfRkFJTEVEOiBcIlVQREFURV9GQUlMRURcIixcbiAgICBVUERBVElORzogXCJVUERBVElOR1wiLFxufTtcbmV4cG9ydCBjbGFzcyBEb21haW5Ob3RXaGl0ZWxpc3RlZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiRG9tYWluTm90V2hpdGVsaXN0ZWRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgUmVxdWVzdElkO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJEb21haW5Ob3RXaGl0ZWxpc3RlZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBEb21haW5Ob3RXaGl0ZWxpc3RlZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEVtYmVkZGluZ0lkZW50aXR5VHlwZSA9IHtcbiAgICBBTk9OWU1PVVM6IFwiQU5PTllNT1VTXCIsXG4gICAgSUFNOiBcIklBTVwiLFxuICAgIFFVSUNLU0lHSFQ6IFwiUVVJQ0tTSUdIVFwiLFxufTtcbmV4cG9ydCBjb25zdCBGb2xkZXJGaWx0ZXJBdHRyaWJ1dGUgPSB7XG4gICAgRElSRUNUX1FVSUNLU0lHSFRfT1dORVI6IFwiRElSRUNUX1FVSUNLU0lHSFRfT1dORVJcIixcbiAgICBESVJFQ1RfUVVJQ0tTSUdIVF9TT0xFX09XTkVSOiBcIkRJUkVDVF9RVUlDS1NJR0hUX1NPTEVfT1dORVJcIixcbiAgICBESVJFQ1RfUVVJQ0tTSUdIVF9WSUVXRVJfT1JfT1dORVI6IFwiRElSRUNUX1FVSUNLU0lHSFRfVklFV0VSX09SX09XTkVSXCIsXG4gICAgRk9MREVSX05BTUU6IFwiRk9MREVSX05BTUVcIixcbiAgICBQQVJFTlRfRk9MREVSX0FSTjogXCJQQVJFTlRfRk9MREVSX0FSTlwiLFxuICAgIFFVSUNLU0lHSFRfT1dORVI6IFwiUVVJQ0tTSUdIVF9PV05FUlwiLFxuICAgIFFVSUNLU0lHSFRfVklFV0VSX09SX09XTkVSOiBcIlFVSUNLU0lHSFRfVklFV0VSX09SX09XTkVSXCIsXG59O1xuZXhwb3J0IGNvbnN0IEdlbmVyYXRlZEFuc3dlclN0YXR1cyA9IHtcbiAgICBBTlNXRVJfRE9XTkdSQURFOiBcIkFOU1dFUl9ET1dOR1JBREVcIixcbiAgICBBTlNXRVJfR0VORVJBVEVEOiBcIkFOU1dFUl9HRU5FUkFURURcIixcbiAgICBBTlNXRVJfUkVUUklFVkVEOiBcIkFOU1dFUl9SRVRSSUVWRURcIixcbn07XG5leHBvcnQgY2xhc3MgU2Vzc2lvbkxpZmV0aW1lSW5NaW51dGVzSW52YWxpZEV4Y2VwdGlvbiBleHRlbmRzIF9fQmFzZUV4Y2VwdGlvbiB7XG4gICAgbmFtZSA9IFwiU2Vzc2lvbkxpZmV0aW1lSW5NaW51dGVzSW52YWxpZEV4Y2VwdGlvblwiO1xuICAgICRmYXVsdCA9IFwiY2xpZW50XCI7XG4gICAgTWVzc2FnZTtcbiAgICBSZXF1ZXN0SWQ7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBuYW1lOiBcIlNlc3Npb25MaWZldGltZUluTWludXRlc0ludmFsaWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgU2Vzc2lvbkxpZmV0aW1lSW5NaW51dGVzSW52YWxpZEV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLk1lc3NhZ2UgPSBvcHRzLk1lc3NhZ2U7XG4gICAgICAgIHRoaXMuUmVxdWVzdElkID0gb3B0cy5SZXF1ZXN0SWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFVuc3VwcG9ydGVkUHJpY2luZ1BsYW5FeGNlcHRpb24gZXh0ZW5kcyBfX0Jhc2VFeGNlcHRpb24ge1xuICAgIG5hbWUgPSBcIlVuc3VwcG9ydGVkUHJpY2luZ1BsYW5FeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgUmVxdWVzdElkO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJVbnN1cHBvcnRlZFByaWNpbmdQbGFuRXhjZXB0aW9uXCIsXG4gICAgICAgICAgICAkZmF1bHQ6IFwiY2xpZW50XCIsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFVuc3VwcG9ydGVkUHJpY2luZ1BsYW5FeGNlcHRpb24ucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5NZXNzYWdlID0gb3B0cy5NZXNzYWdlO1xuICAgICAgICB0aGlzLlJlcXVlc3RJZCA9IG9wdHMuUmVxdWVzdElkO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBRdWlja1NpZ2h0VXNlck5vdEZvdW5kRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJRdWlja1NpZ2h0VXNlck5vdEZvdW5kRXhjZXB0aW9uXCI7XG4gICAgJGZhdWx0ID0gXCJjbGllbnRcIjtcbiAgICBNZXNzYWdlO1xuICAgIFJlcXVlc3RJZDtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6IFwiUXVpY2tTaWdodFVzZXJOb3RGb3VuZEV4Y2VwdGlvblwiLFxuICAgICAgICAgICAgJGZhdWx0OiBcImNsaWVudFwiLFxuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBRdWlja1NpZ2h0VXNlck5vdEZvdW5kRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBvcHRzLlJlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSWRlbnRpdHlUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uIGV4dGVuZHMgX19CYXNlRXhjZXB0aW9uIHtcbiAgICBuYW1lID0gXCJJZGVudGl0eVR5cGVOb3RTdXBwb3J0ZWRFeGNlcHRpb25cIjtcbiAgICAkZmF1bHQgPSBcImNsaWVudFwiO1xuICAgIE1lc3NhZ2U7XG4gICAgUmVxdWVzdElkO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgbmFtZTogXCJJZGVudGl0eVR5cGVOb3RTdXBwb3J0ZWRFeGNlcHRpb25cIixcbiAgICAgICAgICAgICRmYXVsdDogXCJjbGllbnRcIixcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgSWRlbnRpdHlUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMuTWVzc2FnZSA9IG9wdHMuTWVzc2FnZTtcbiAgICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBvcHRzLlJlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgR3JvdXBGaWx0ZXJBdHRyaWJ1dGUgPSB7XG4gICAgR1JPVVBfTkFNRTogXCJHUk9VUF9OQU1FXCIsXG59O1xuZXhwb3J0IGNvbnN0IEdyb3VwRmlsdGVyT3BlcmF0b3IgPSB7XG4gICAgU3RhcnRzV2l0aDogXCJTdGFydHNXaXRoXCIsXG59O1xuZXhwb3J0IGNvbnN0IEluY2x1ZGVHZW5lcmF0ZWRBbnN3ZXIgPSB7XG4gICAgRVhDTFVERTogXCJFWENMVURFXCIsXG4gICAgSU5DTFVERTogXCJJTkNMVURFXCIsXG59O1xuZXhwb3J0IGNvbnN0IEluY2x1ZGVRdWlja1NpZ2h0UUluZGV4ID0ge1xuICAgIEVYQ0xVREU6IFwiRVhDTFVERVwiLFxuICAgIElOQ0xVREU6IFwiSU5DTFVERVwiLFxufTtcbmV4cG9ydCBjb25zdCBRQVJlc3VsdFR5cGUgPSB7XG4gICAgREFTSEJPQVJEX1ZJU1VBTDogXCJEQVNIQk9BUkRfVklTVUFMXCIsXG4gICAgR0VORVJBVEVEX0FOU1dFUjogXCJHRU5FUkFURURfQU5TV0VSXCIsXG4gICAgTk9fQU5TV0VSOiBcIk5PX0FOU1dFUlwiLFxufTtcbmV4cG9ydCBjb25zdCBQdXJjaGFzZU1vZGUgPSB7XG4gICAgQVVUT19QVVJDSEFTRTogXCJBVVRPX1BVUkNIQVNFXCIsXG4gICAgTUFOVUFMOiBcIk1BTlVBTFwiLFxufTtcbmV4cG9ydCBjb25zdCBEZXNjcmliZUFuYWx5c2lzUmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IERlc2NyaWJlQW5hbHlzaXNEZWZpbml0aW9uUmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IERlc2NyaWJlQXNzZXRCdW5kbGVFeHBvcnRKb2JSZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRG93bmxvYWRVcmwgJiYgeyBEb3dubG9hZFVybDogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERlc2NyaWJlQXNzZXRCdW5kbGVJbXBvcnRKb2JSZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouQXNzZXRCdW5kbGVJbXBvcnRTb3VyY2UgJiYge1xuICAgICAgICBBc3NldEJ1bmRsZUltcG9ydFNvdXJjZTogQXNzZXRCdW5kbGVJbXBvcnRTb3VyY2VEZXNjcmlwdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyhvYmouQXNzZXRCdW5kbGVJbXBvcnRTb3VyY2UpLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgRGVzY3JpYmVEYXNoYm9hcmRSZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgRGVzY3JpYmVEYXNoYm9hcmREZWZpbml0aW9uUmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IFNuYXBzaG90Q29uZmlndXJhdGlvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouUGFyYW1ldGVycyAmJiB7IFBhcmFtZXRlcnM6IF9QYXJhbWV0ZXJzRmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5QYXJhbWV0ZXJzKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IERlc2NyaWJlRGFzaGJvYXJkU25hcHNob3RKb2JSZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgU25hcHNob3RKb2JSZXN1bHRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IERlc2NyaWJlRGFzaGJvYXJkU25hcHNob3RKb2JSZXN1bHRSZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgRGVzY3JpYmVEYXRhU2V0UmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkRhdGFTZXQgJiYgeyBEYXRhU2V0OiBEYXRhU2V0RmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5EYXRhU2V0KSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFRlbXBsYXRlVmVyc2lvbkZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgVGVtcGxhdGVGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbn0pO1xuZXhwb3J0IGNvbnN0IERlc2NyaWJlVGVtcGxhdGVSZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgRGVzY3JpYmVUZW1wbGF0ZURlZmluaXRpb25SZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxufSk7XG5leHBvcnQgY29uc3QgRGVzY3JpYmVUb3BpY1Jlc3BvbnNlRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5DdXN0b21JbnN0cnVjdGlvbnMgJiYgeyBDdXN0b21JbnN0cnVjdGlvbnM6IEN1c3RvbUluc3RydWN0aW9uc0ZpbHRlclNlbnNpdGl2ZUxvZyhvYmouQ3VzdG9tSW5zdHJ1Y3Rpb25zKSB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEdlbmVyYXRlZEFuc3dlclJlc3VsdEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouUXVlc3Rpb25UZXh0ICYmIHsgUXVlc3Rpb25UZXh0OiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxuICAgIC4uLihvYmouUmVzdGF0ZW1lbnQgJiYgeyBSZXN0YXRlbWVudDogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFNlc3Npb25UYWdGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlZhbHVlICYmIHsgVmFsdWU6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBHZW5lcmF0ZUVtYmVkVXJsRm9yQW5vbnltb3VzVXNlclJlcXVlc3RGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLlNlc3Npb25UYWdzICYmIHsgU2Vzc2lvblRhZ3M6IG9iai5TZXNzaW9uVGFncy5tYXAoKGl0ZW0pID0+IFNlc3Npb25UYWdGaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgR2VuZXJhdGVFbWJlZFVybEZvckFub255bW91c1VzZXJSZXNwb25zZUZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouRW1iZWRVcmwgJiYgeyBFbWJlZFVybDogU0VOU0lUSVZFX1NUUklORyB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IEdlbmVyYXRlRW1iZWRVcmxGb3JSZWdpc3RlcmVkVXNlclJlc3BvbnNlRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5FbWJlZFVybCAmJiB7IEVtYmVkVXJsOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgR2VuZXJhdGVFbWJlZFVybEZvclJlZ2lzdGVyZWRVc2VyV2l0aElkZW50aXR5UmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkVtYmVkVXJsICYmIHsgRW1iZWRVcmw6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBHZXREYXNoYm9hcmRFbWJlZFVybFJlc3BvbnNlRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5FbWJlZFVybCAmJiB7IEVtYmVkVXJsOiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgR2V0U2Vzc2lvbkVtYmVkVXJsUmVzcG9uc2VGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkVtYmVkVXJsICYmIHsgRW1iZWRVcmw6IFNFTlNJVElWRV9TVFJJTkcgfSksXG59KTtcbmV4cG9ydCBjb25zdCBQcmVkaWN0UUFSZXN1bHRzUmVxdWVzdEZpbHRlclNlbnNpdGl2ZUxvZyA9IChvYmopID0+ICh7XG4gICAgLi4ub2JqLFxuICAgIC4uLihvYmouUXVlcnlUZXh0ICYmIHsgUXVlcnlUZXh0OiBTRU5TSVRJVkVfU1RSSU5HIH0pLFxufSk7XG5leHBvcnQgY29uc3QgUUFSZXN1bHRGaWx0ZXJTZW5zaXRpdmVMb2cgPSAob2JqKSA9PiAoe1xuICAgIC4uLm9iaixcbiAgICAuLi4ob2JqLkdlbmVyYXRlZEFuc3dlciAmJiB7IEdlbmVyYXRlZEFuc3dlcjogR2VuZXJhdGVkQW5zd2VyUmVzdWx0RmlsdGVyU2Vuc2l0aXZlTG9nKG9iai5HZW5lcmF0ZWRBbnN3ZXIpIH0pLFxufSk7XG5leHBvcnQgY29uc3QgUHJlZGljdFFBUmVzdWx0c1Jlc3BvbnNlRmlsdGVyU2Vuc2l0aXZlTG9nID0gKG9iaikgPT4gKHtcbiAgICAuLi5vYmosXG4gICAgLi4uKG9iai5QcmltYXJ5UmVzdWx0ICYmIHsgUHJpbWFyeVJlc3VsdDogUUFSZXN1bHRGaWx0ZXJTZW5zaXRpdmVMb2cob2JqLlByaW1hcnlSZXN1bHQpIH0pLFxuICAgIC4uLihvYmouQWRkaXRpb25hbFJlc3VsdHMgJiYge1xuICAgICAgICBBZGRpdGlvbmFsUmVzdWx0czogb2JqLkFkZGl0aW9uYWxSZXN1bHRzLm1hcCgoaXRlbSkgPT4gUUFSZXN1bHRGaWx0ZXJTZW5zaXRpdmVMb2coaXRlbSkpLFxuICAgIH0pLFxufSk7XG4iLCJpbXBvcnQgeyBhd3NFeHBlY3RVbmlvbiBhcyBfX2V4cGVjdFVuaW9uLCBsb2FkUmVzdEpzb25FcnJvckNvZGUsIHBhcnNlSnNvbkJvZHkgYXMgcGFyc2VCb2R5LCBwYXJzZUpzb25FcnJvckJvZHkgYXMgcGFyc2VFcnJvckJvZHksIH0gZnJvbSBcIkBhd3Mtc2RrL2NvcmVcIjtcbmltcG9ydCB7IHJlcXVlc3RCdWlsZGVyIGFzIHJiIH0gZnJvbSBcIkBzbWl0aHkvY29yZVwiO1xuaW1wb3J0IHsgX2pzb24sIGNvbGxlY3RCb2R5LCBkZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24gYXMgX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24sIGV4cGVjdEJvb2xlYW4gYXMgX19leHBlY3RCb29sZWFuLCBleHBlY3RJbnQzMiBhcyBfX2V4cGVjdEludDMyLCBleHBlY3RMb25nIGFzIF9fZXhwZWN0TG9uZywgZXhwZWN0Tm9uTnVsbCBhcyBfX2V4cGVjdE5vbk51bGwsIGV4cGVjdE51bWJlciBhcyBfX2V4cGVjdE51bWJlciwgZXhwZWN0T2JqZWN0IGFzIF9fZXhwZWN0T2JqZWN0LCBleHBlY3RTdHJpbmcgYXMgX19leHBlY3RTdHJpbmcsIGxpbWl0ZWRQYXJzZURvdWJsZSBhcyBfX2xpbWl0ZWRQYXJzZURvdWJsZSwgbWFwLCBwYXJzZUVwb2NoVGltZXN0YW1wIGFzIF9fcGFyc2VFcG9jaFRpbWVzdGFtcCwgc2VyaWFsaXplRmxvYXQgYXMgX19zZXJpYWxpemVGbG9hdCwgdGFrZSwgd2l0aEJhc2VFeGNlcHRpb24sIH0gZnJvbSBcIkBzbWl0aHkvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgQWNjZXNzRGVuaWVkRXhjZXB0aW9uLCB9IGZyb20gXCIuLi9tb2RlbHMvbW9kZWxzXzBcIjtcbmltcG9ydCB7IENvbmZsaWN0RXhjZXB0aW9uLCBJbnRlcm5hbEZhaWx1cmVFeGNlcHRpb24sIEludmFsaWRQYXJhbWV0ZXJWYWx1ZUV4Y2VwdGlvbiwgUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvbiwgVGhyb3R0bGluZ0V4Y2VwdGlvbiwgfSBmcm9tIFwiLi4vbW9kZWxzL21vZGVsc18yXCI7XG5pbXBvcnQgeyBDb25jdXJyZW50VXBkYXRpbmdFeGNlcHRpb24sIEN1c3RvbWVyTWFuYWdlZEtleVVuYXZhaWxhYmxlRXhjZXB0aW9uLCBJbnRlcm5hbFNlcnZlckV4Y2VwdGlvbiwgSW52YWxpZFJlcXVlc3RFeGNlcHRpb24sIExpbWl0RXhjZWVkZWRFeGNlcHRpb24sIFByZWNvbmRpdGlvbk5vdE1ldEV4Y2VwdGlvbiwgUmVzb3VyY2VFeGlzdHNFeGNlcHRpb24sIFJlc291cmNlVW5hdmFpbGFibGVFeGNlcHRpb24sIFRyYW5zZm9ybU9wZXJhdGlvbiwgVW5zdXBwb3J0ZWRVc2VyRWRpdGlvbkV4Y2VwdGlvbiwgfSBmcm9tIFwiLi4vbW9kZWxzL21vZGVsc18zXCI7XG5pbXBvcnQgeyBEb21haW5Ob3RXaGl0ZWxpc3RlZEV4Y2VwdGlvbiwgSWRlbnRpdHlUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uLCBJbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uLCBRdWlja1NpZ2h0VXNlck5vdEZvdW5kRXhjZXB0aW9uLCBTZXNzaW9uTGlmZXRpbWVJbk1pbnV0ZXNJbnZhbGlkRXhjZXB0aW9uLCBVbnN1cHBvcnRlZFByaWNpbmdQbGFuRXhjZXB0aW9uLCB9IGZyb20gXCIuLi9tb2RlbHMvbW9kZWxzXzRcIjtcbmltcG9ydCB7IFF1aWNrU2lnaHRTZXJ2aWNlRXhjZXB0aW9uIGFzIF9fQmFzZUV4Y2VwdGlvbiB9IGZyb20gXCIuLi9tb2RlbHMvUXVpY2tTaWdodFNlcnZpY2VFeGNlcHRpb25cIjtcbmV4cG9ydCBjb25zdCBzZV9CYXRjaENyZWF0ZVRvcGljUmV2aWV3ZWRBbnN3ZXJDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdG9waWNzL3tUb3BpY0lkfS9iYXRjaC1jcmVhdGUtcmV2aWV3ZWQtYW5zd2Vyc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUb3BpY0lkXCIsICgpID0+IGlucHV0LlRvcGljSWQsIFwie1RvcGljSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBBbnN3ZXJzOiAoXykgPT4gc2VfQ3JlYXRlVG9waWNSZXZpZXdlZEFuc3dlcnMoXywgY29udGV4dCksXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0JhdGNoRGVsZXRlVG9waWNSZXZpZXdlZEFuc3dlckNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90b3BpY3Mve1RvcGljSWR9L2JhdGNoLWRlbGV0ZS1yZXZpZXdlZC1hbnN3ZXJzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRvcGljSWRcIiwgKCkgPT4gaW5wdXQuVG9waWNJZCwgXCJ7VG9waWNJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEFuc3dlcklkczogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DYW5jZWxJbmdlc3Rpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXRhLXNldHMve0RhdGFTZXRJZH0vaW5nZXN0aW9ucy97SW5nZXN0aW9uSWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhdGFTZXRJZFwiLCAoKSA9PiBpbnB1dC5EYXRhU2V0SWQsIFwie0RhdGFTZXRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkluZ2VzdGlvbklkXCIsICgpID0+IGlucHV0LkluZ2VzdGlvbklkLCBcIntJbmdlc3Rpb25JZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlQWNjb3VudEN1c3RvbWl6YXRpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vY3VzdG9taXphdGlvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX25dOiBbLCBpbnB1dFtfTl1dLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjY291bnRDdXN0b21pemF0aW9uOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFRhZ3M6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlQWNjb3VudFN1YnNjcmlwdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50L3tBd3NBY2NvdW50SWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjY291bnROYW1lOiBbXSxcbiAgICAgICAgQWN0aXZlRGlyZWN0b3J5TmFtZTogW10sXG4gICAgICAgIEFkbWluR3JvdXA6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgQWRtaW5Qcm9Hcm91cDogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBBdXRoZW50aWNhdGlvbk1ldGhvZDogW10sXG4gICAgICAgIEF1dGhvckdyb3VwOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIEF1dGhvclByb0dyb3VwOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIENvbnRhY3ROdW1iZXI6IFtdLFxuICAgICAgICBEaXJlY3RvcnlJZDogW10sXG4gICAgICAgIEVkaXRpb246IFtdLFxuICAgICAgICBFbWFpbEFkZHJlc3M6IFtdLFxuICAgICAgICBGaXJzdE5hbWU6IFtdLFxuICAgICAgICBJQU1JZGVudGl0eUNlbnRlckluc3RhbmNlQXJuOiBbXSxcbiAgICAgICAgTGFzdE5hbWU6IFtdLFxuICAgICAgICBOb3RpZmljYXRpb25FbWFpbDogW10sXG4gICAgICAgIFJlYWRlckdyb3VwOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFJlYWRlclByb0dyb3VwOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFJlYWxtOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlQW5hbHlzaXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vYW5hbHlzZXMve0FuYWx5c2lzSWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkFuYWx5c2lzSWRcIiwgKCkgPT4gaW5wdXQuQW5hbHlzaXNJZCwgXCJ7QW5hbHlzaXNJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIERlZmluaXRpb246IChfKSA9PiBzZV9BbmFseXNpc0RlZmluaXRpb24oXywgY29udGV4dCksXG4gICAgICAgIEZvbGRlckFybnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFBhcmFtZXRlcnM6IChfKSA9PiBzZV9fUGFyYW1ldGVycyhfLCBjb250ZXh0KSxcbiAgICAgICAgUGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgU291cmNlRW50aXR5OiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFRhZ3M6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVGhlbWVBcm46IFtdLFxuICAgICAgICBWYWxpZGF0aW9uU3RyYXRlZ3k6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlQnJhbmRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vYnJhbmRzL3tCcmFuZElkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJCcmFuZElkXCIsICgpID0+IGlucHV0LkJyYW5kSWQsIFwie0JyYW5kSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBCcmFuZERlZmluaXRpb246IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVGFnczogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVDdXN0b21QZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9jdXN0b20tcGVybWlzc2lvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2FwYWJpbGl0aWVzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIEN1c3RvbVBlcm1pc3Npb25zTmFtZTogW10sXG4gICAgICAgIFRhZ3M6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlRGFzaGJvYXJkQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2Rhc2hib2FyZHMve0Rhc2hib2FyZElkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXNoYm9hcmRJZFwiLCAoKSA9PiBpbnB1dC5EYXNoYm9hcmRJZCwgXCJ7RGFzaGJvYXJkSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBEYXNoYm9hcmRQdWJsaXNoT3B0aW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBEZWZpbml0aW9uOiAoXykgPT4gc2VfRGFzaGJvYXJkVmVyc2lvbkRlZmluaXRpb24oXywgY29udGV4dCksXG4gICAgICAgIEZvbGRlckFybnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgTGlua0VudGl0aWVzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIExpbmtTaGFyaW5nQ29uZmlndXJhdGlvbjogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgUGFyYW1ldGVyczogKF8pID0+IHNlX19QYXJhbWV0ZXJzKF8sIGNvbnRleHQpLFxuICAgICAgICBQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBTb3VyY2VFbnRpdHk6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVGFnczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBUaGVtZUFybjogW10sXG4gICAgICAgIFZhbGlkYXRpb25TdHJhdGVneTogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBWZXJzaW9uRGVzY3JpcHRpb246IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVEYXRhU2V0Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc2V0c1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBDb2x1bW5Hcm91cHM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgQ29sdW1uTGV2ZWxQZXJtaXNzaW9uUnVsZXM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgRGF0YVNldElkOiBbXSxcbiAgICAgICAgRGF0YVNldFVzYWdlQ29uZmlndXJhdGlvbjogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBEYXRhc2V0UGFyYW1ldGVyczogKF8pID0+IHNlX0RhdGFzZXRQYXJhbWV0ZXJMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBGaWVsZEZvbGRlcnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgRm9sZGVyQXJuczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBJbXBvcnRNb2RlOiBbXSxcbiAgICAgICAgTG9naWNhbFRhYmxlTWFwOiAoXykgPT4gc2VfTG9naWNhbFRhYmxlTWFwKF8sIGNvbnRleHQpLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgUGVyZm9ybWFuY2VDb25maWd1cmF0aW9uOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFBlcm1pc3Npb25zOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFBoeXNpY2FsVGFibGVNYXA6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgUm93TGV2ZWxQZXJtaXNzaW9uRGF0YVNldDogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBSb3dMZXZlbFBlcm1pc3Npb25UYWdDb25maWd1cmF0aW9uOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFRhZ3M6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVXNlQXM6IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVEYXRhU291cmNlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc291cmNlc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBDcmVkZW50aWFsczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBEYXRhU291cmNlSWQ6IFtdLFxuICAgICAgICBEYXRhU291cmNlUGFyYW1ldGVyczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBGb2xkZXJBcm5zOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBTc2xQcm9wZXJ0aWVzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFRhZ3M6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVHlwZTogW10sXG4gICAgICAgIFZwY0Nvbm5lY3Rpb25Qcm9wZXJ0aWVzOiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZUZvbGRlckNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9mb2xkZXJzL3tGb2xkZXJJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRm9sZGVySWRcIiwgKCkgPT4gaW5wdXQuRm9sZGVySWQsIFwie0ZvbGRlcklkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgRm9sZGVyVHlwZTogW10sXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBQYXJlbnRGb2xkZXJBcm46IFtdLFxuICAgICAgICBQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBTaGFyaW5nTW9kZWw6IFtdLFxuICAgICAgICBUYWdzOiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZUZvbGRlck1lbWJlcnNoaXBDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9mb2xkZXJzL3tGb2xkZXJJZH0vbWVtYmVycy97TWVtYmVyVHlwZX0ve01lbWJlcklkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJGb2xkZXJJZFwiLCAoKSA9PiBpbnB1dC5Gb2xkZXJJZCwgXCJ7Rm9sZGVySWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJNZW1iZXJJZFwiLCAoKSA9PiBpbnB1dC5NZW1iZXJJZCwgXCJ7TWVtYmVySWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJNZW1iZXJUeXBlXCIsICgpID0+IGlucHV0Lk1lbWJlclR5cGUsIFwie01lbWJlclR5cGV9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZUdyb3VwQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vZ3JvdXBzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIERlc2NyaXB0aW9uOiBbXSxcbiAgICAgICAgR3JvdXBOYW1lOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlR3JvdXBNZW1iZXJzaGlwQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS9ncm91cHMve0dyb3VwTmFtZX0vbWVtYmVycy97TWVtYmVyTmFtZX1cIik7XG4gICAgYi5wKFwiTWVtYmVyTmFtZVwiLCAoKSA9PiBpbnB1dC5NZW1iZXJOYW1lLCBcIntNZW1iZXJOYW1lfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiR3JvdXBOYW1lXCIsICgpID0+IGlucHV0Lkdyb3VwTmFtZSwgXCJ7R3JvdXBOYW1lfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVJQU1Qb2xpY3lBc3NpZ25tZW50Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vaWFtLXBvbGljeS1hc3NpZ25tZW50c1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBBc3NpZ25tZW50TmFtZTogW10sXG4gICAgICAgIEFzc2lnbm1lbnRTdGF0dXM6IFtdLFxuICAgICAgICBJZGVudGl0aWVzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFBvbGljeUFybjogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZUluZ2VzdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXRhLXNldHMve0RhdGFTZXRJZH0vaW5nZXN0aW9ucy97SW5nZXN0aW9uSWR9XCIpO1xuICAgIGIucChcIkRhdGFTZXRJZFwiLCAoKSA9PiBpbnB1dC5EYXRhU2V0SWQsIFwie0RhdGFTZXRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkluZ2VzdGlvbklkXCIsICgpID0+IGlucHV0LkluZ2VzdGlvbklkLCBcIntJbmdlc3Rpb25JZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEluZ2VzdGlvblR5cGU6IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZU5hbWVzcGFjZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBJZGVudGl0eVN0b3JlOiBbXSxcbiAgICAgICAgTmFtZXNwYWNlOiBbXSxcbiAgICAgICAgVGFnczogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVSZWZyZXNoU2NoZWR1bGVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzL3tEYXRhU2V0SWR9L3JlZnJlc2gtc2NoZWR1bGVzXCIpO1xuICAgIGIucChcIkRhdGFTZXRJZFwiLCAoKSA9PiBpbnB1dC5EYXRhU2V0SWQsIFwie0RhdGFTZXRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIFNjaGVkdWxlOiAoXykgPT4gc2VfUmVmcmVzaFNjaGVkdWxlKF8sIGNvbnRleHQpLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVSb2xlTWVtYmVyc2hpcENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vcm9sZXMve1JvbGV9L21lbWJlcnMve01lbWJlck5hbWV9XCIpO1xuICAgIGIucChcIk1lbWJlck5hbWVcIiwgKCkgPT4gaW5wdXQuTWVtYmVyTmFtZSwgXCJ7TWVtYmVyTmFtZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIlJvbGVcIiwgKCkgPT4gaW5wdXQuUm9sZSwgXCJ7Um9sZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZVRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RlbXBsYXRlcy97VGVtcGxhdGVJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVGVtcGxhdGVJZFwiLCAoKSA9PiBpbnB1dC5UZW1wbGF0ZUlkLCBcIntUZW1wbGF0ZUlkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGVmaW5pdGlvbjogKF8pID0+IHNlX1RlbXBsYXRlVmVyc2lvbkRlZmluaXRpb24oXywgY29udGV4dCksXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBTb3VyY2VFbnRpdHk6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVGFnczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBWYWxpZGF0aW9uU3RyYXRlZ3k6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVmVyc2lvbkRlc2NyaXB0aW9uOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlVGVtcGxhdGVBbGlhc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90ZW1wbGF0ZXMve1RlbXBsYXRlSWR9L2FsaWFzZXMve0FsaWFzTmFtZX1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVGVtcGxhdGVJZFwiLCAoKSA9PiBpbnB1dC5UZW1wbGF0ZUlkLCBcIntUZW1wbGF0ZUlkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQWxpYXNOYW1lXCIsICgpID0+IGlucHV0LkFsaWFzTmFtZSwgXCJ7QWxpYXNOYW1lfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgVGVtcGxhdGVWZXJzaW9uTnVtYmVyOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlVGhlbWVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGhlbWVzL3tUaGVtZUlkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUaGVtZUlkXCIsICgpID0+IGlucHV0LlRoZW1lSWQsIFwie1RoZW1lSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBCYXNlVGhlbWVJZDogW10sXG4gICAgICAgIENvbmZpZ3VyYXRpb246IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFBlcm1pc3Npb25zOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFRhZ3M6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVmVyc2lvbkRlc2NyaXB0aW9uOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlVGhlbWVBbGlhc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90aGVtZXMve1RoZW1lSWR9L2FsaWFzZXMve0FsaWFzTmFtZX1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVGhlbWVJZFwiLCAoKSA9PiBpbnB1dC5UaGVtZUlkLCBcIntUaGVtZUlkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQWxpYXNOYW1lXCIsICgpID0+IGlucHV0LkFsaWFzTmFtZSwgXCJ7QWxpYXNOYW1lfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgVGhlbWVWZXJzaW9uTnVtYmVyOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfQ3JlYXRlVG9waWNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdG9waWNzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEN1c3RvbUluc3RydWN0aW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBGb2xkZXJBcm5zOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFRhZ3M6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVG9waWM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVG9waWNJZDogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0NyZWF0ZVRvcGljUmVmcmVzaFNjaGVkdWxlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RvcGljcy97VG9waWNJZH0vc2NoZWR1bGVzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRvcGljSWRcIiwgKCkgPT4gaW5wdXQuVG9waWNJZCwgXCJ7VG9waWNJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIERhdGFzZXRBcm46IFtdLFxuICAgICAgICBEYXRhc2V0TmFtZTogW10sXG4gICAgICAgIFJlZnJlc2hTY2hlZHVsZTogKF8pID0+IHNlX1RvcGljUmVmcmVzaFNjaGVkdWxlKF8sIGNvbnRleHQpLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9DcmVhdGVWUENDb25uZWN0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3ZwYy1jb25uZWN0aW9uc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBEbnNSZXNvbHZlcnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFJvbGVBcm46IFtdLFxuICAgICAgICBTZWN1cml0eUdyb3VwSWRzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFN1Ym5ldElkczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBUYWdzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFZQQ0Nvbm5lY3Rpb25JZDogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZUFjY291bnRDdXN0b21pemF0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vY3VzdG9taXphdGlvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX25dOiBbLCBpbnB1dFtfTl1dLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlQWNjb3VudEN1c3RvbVBlcm1pc3Npb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9jdXN0b20tcGVybWlzc2lvblwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZUFjY291bnRTdWJzY3JpcHRpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50L3tBd3NBY2NvdW50SWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlQW5hbHlzaXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9hbmFseXNlcy97QW5hbHlzaXNJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQW5hbHlzaXNJZFwiLCAoKSA9PiBpbnB1dC5BbmFseXNpc0lkLCBcIntBbmFseXNpc0lkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX3J3aWRdOiBbKCkgPT4gaW5wdXQuUmVjb3ZlcnlXaW5kb3dJbkRheXMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX1JXSURdLnRvU3RyaW5nKCldLFxuICAgICAgICBbX2Zkd3JdOiBbKCkgPT4gaW5wdXQuRm9yY2VEZWxldGVXaXRob3V0UmVjb3ZlcnkgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX0ZEV1JdLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlQnJhbmRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9icmFuZHMve0JyYW5kSWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkJyYW5kSWRcIiwgKCkgPT4gaW5wdXQuQnJhbmRJZCwgXCJ7QnJhbmRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlQnJhbmRBc3NpZ25tZW50Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vYnJhbmRhc3NpZ25tZW50c1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZUN1c3RvbVBlcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vY3VzdG9tLXBlcm1pc3Npb25zL3tDdXN0b21QZXJtaXNzaW9uc05hbWV9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkN1c3RvbVBlcm1pc3Npb25zTmFtZVwiLCAoKSA9PiBpbnB1dC5DdXN0b21QZXJtaXNzaW9uc05hbWUsIFwie0N1c3RvbVBlcm1pc3Npb25zTmFtZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlRGFzaGJvYXJkQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGFzaGJvYXJkcy97RGFzaGJvYXJkSWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhc2hib2FyZElkXCIsICgpID0+IGlucHV0LkRhc2hib2FyZElkLCBcIntEYXNoYm9hcmRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW192bl06IFsoKSA9PiBpbnB1dC5WZXJzaW9uTnVtYmVyICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19WTl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVEYXRhU2V0Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzL3tEYXRhU2V0SWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhdGFTZXRJZFwiLCAoKSA9PiBpbnB1dC5EYXRhU2V0SWQsIFwie0RhdGFTZXRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlRGF0YVNldFJlZnJlc2hQcm9wZXJ0aWVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzL3tEYXRhU2V0SWR9L3JlZnJlc2gtcHJvcGVydGllc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXRhU2V0SWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNldElkLCBcIntEYXRhU2V0SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZURhdGFTb3VyY2VDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXRhLXNvdXJjZXMve0RhdGFTb3VyY2VJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YVNvdXJjZUlkXCIsICgpID0+IGlucHV0LkRhdGFTb3VyY2VJZCwgXCJ7RGF0YVNvdXJjZUlkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVEZWZhdWx0UUJ1c2luZXNzQXBwbGljYXRpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kZWZhdWx0LXFidXNpbmVzcy1hcHBsaWNhdGlvblwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbl06IFssIGlucHV0W19OXV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVGb2xkZXJDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9mb2xkZXJzL3tGb2xkZXJJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRm9sZGVySWRcIiwgKCkgPT4gaW5wdXQuRm9sZGVySWQsIFwie0ZvbGRlcklkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVGb2xkZXJNZW1iZXJzaGlwQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZm9sZGVycy97Rm9sZGVySWR9L21lbWJlcnMve01lbWJlclR5cGV9L3tNZW1iZXJJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRm9sZGVySWRcIiwgKCkgPT4gaW5wdXQuRm9sZGVySWQsIFwie0ZvbGRlcklkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTWVtYmVySWRcIiwgKCkgPT4gaW5wdXQuTWVtYmVySWQsIFwie01lbWJlcklkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTWVtYmVyVHlwZVwiLCAoKSA9PiBpbnB1dC5NZW1iZXJUeXBlLCBcIntNZW1iZXJUeXBlfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVHcm91cENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vZ3JvdXBzL3tHcm91cE5hbWV9XCIpO1xuICAgIGIucChcIkdyb3VwTmFtZVwiLCAoKSA9PiBpbnB1dC5Hcm91cE5hbWUsIFwie0dyb3VwTmFtZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlR3JvdXBNZW1iZXJzaGlwQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS9ncm91cHMve0dyb3VwTmFtZX0vbWVtYmVycy97TWVtYmVyTmFtZX1cIik7XG4gICAgYi5wKFwiTWVtYmVyTmFtZVwiLCAoKSA9PiBpbnB1dC5NZW1iZXJOYW1lLCBcIntNZW1iZXJOYW1lfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiR3JvdXBOYW1lXCIsICgpID0+IGlucHV0Lkdyb3VwTmFtZSwgXCJ7R3JvdXBOYW1lfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVJQU1Qb2xpY3lBc3NpZ25tZW50Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlL3tOYW1lc3BhY2V9L2lhbS1wb2xpY3ktYXNzaWdubWVudHMve0Fzc2lnbm1lbnROYW1lfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBc3NpZ25tZW50TmFtZVwiLCAoKSA9PiBpbnB1dC5Bc3NpZ25tZW50TmFtZSwgXCJ7QXNzaWdubWVudE5hbWV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZUlkZW50aXR5UHJvcGFnYXRpb25Db25maWdDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9pZGVudGl0eS1wcm9wYWdhdGlvbi1jb25maWcve1NlcnZpY2V9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlNlcnZpY2VcIiwgKCkgPT4gaW5wdXQuU2VydmljZSwgXCJ7U2VydmljZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlTmFtZXNwYWNlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZVJlZnJlc2hTY2hlZHVsZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc2V0cy97RGF0YVNldElkfS9yZWZyZXNoLXNjaGVkdWxlcy97U2NoZWR1bGVJZH1cIik7XG4gICAgYi5wKFwiRGF0YVNldElkXCIsICgpID0+IGlucHV0LkRhdGFTZXRJZCwgXCJ7RGF0YVNldElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiU2NoZWR1bGVJZFwiLCAoKSA9PiBpbnB1dC5TY2hlZHVsZUlkLCBcIntTY2hlZHVsZUlkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVSb2xlQ3VzdG9tUGVybWlzc2lvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vcm9sZXMve1JvbGV9L2N1c3RvbS1wZXJtaXNzaW9uXCIpO1xuICAgIGIucChcIlJvbGVcIiwgKCkgPT4gaW5wdXQuUm9sZSwgXCJ7Um9sZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlUm9sZU1lbWJlcnNoaXBDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L3JvbGVzL3tSb2xlfS9tZW1iZXJzL3tNZW1iZXJOYW1lfVwiKTtcbiAgICBiLnAoXCJNZW1iZXJOYW1lXCIsICgpID0+IGlucHV0Lk1lbWJlck5hbWUsIFwie01lbWJlck5hbWV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJSb2xlXCIsICgpID0+IGlucHV0LlJvbGUsIFwie1JvbGV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZVRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGVtcGxhdGVzL3tUZW1wbGF0ZUlkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUZW1wbGF0ZUlkXCIsICgpID0+IGlucHV0LlRlbXBsYXRlSWQsIFwie1RlbXBsYXRlSWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfdm5dOiBbKCkgPT4gaW5wdXQuVmVyc2lvbk51bWJlciAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfVk5dLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlVGVtcGxhdGVBbGlhc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RlbXBsYXRlcy97VGVtcGxhdGVJZH0vYWxpYXNlcy97QWxpYXNOYW1lfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUZW1wbGF0ZUlkXCIsICgpID0+IGlucHV0LlRlbXBsYXRlSWQsIFwie1RlbXBsYXRlSWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBbGlhc05hbWVcIiwgKCkgPT4gaW5wdXQuQWxpYXNOYW1lLCBcIntBbGlhc05hbWV9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZVRoZW1lQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGhlbWVzL3tUaGVtZUlkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUaGVtZUlkXCIsICgpID0+IGlucHV0LlRoZW1lSWQsIFwie1RoZW1lSWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfdm5dOiBbKCkgPT4gaW5wdXQuVmVyc2lvbk51bWJlciAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfVk5dLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlVGhlbWVBbGlhc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RoZW1lcy97VGhlbWVJZH0vYWxpYXNlcy97QWxpYXNOYW1lfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUaGVtZUlkXCIsICgpID0+IGlucHV0LlRoZW1lSWQsIFwie1RoZW1lSWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBbGlhc05hbWVcIiwgKCkgPT4gaW5wdXQuQWxpYXNOYW1lLCBcIntBbGlhc05hbWV9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZVRvcGljQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdG9waWNzL3tUb3BpY0lkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUb3BpY0lkXCIsICgpID0+IGlucHV0LlRvcGljSWQsIFwie1RvcGljSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJERUxFVEVcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0RlbGV0ZVRvcGljUmVmcmVzaFNjaGVkdWxlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdG9waWNzL3tUb3BpY0lkfS9zY2hlZHVsZXMve0RhdGFzZXRJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVG9waWNJZFwiLCAoKSA9PiBpbnB1dC5Ub3BpY0lkLCBcIntUb3BpY0lkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YXNldElkXCIsICgpID0+IGlucHV0LkRhdGFzZXRJZCwgXCJ7RGF0YXNldElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVVc2VyQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS91c2Vycy97VXNlck5hbWV9XCIpO1xuICAgIGIucChcIlVzZXJOYW1lXCIsICgpID0+IGlucHV0LlVzZXJOYW1lLCBcIntVc2VyTmFtZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlVXNlckJ5UHJpbmNpcGFsSWRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L3VzZXItcHJpbmNpcGFscy97UHJpbmNpcGFsSWR9XCIpO1xuICAgIGIucChcIlByaW5jaXBhbElkXCIsICgpID0+IGlucHV0LlByaW5jaXBhbElkLCBcIntQcmluY2lwYWxJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVsZXRlVXNlckN1c3RvbVBlcm1pc3Npb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L3VzZXJzL3tVc2VyTmFtZX0vY3VzdG9tLXBlcm1pc3Npb25cIik7XG4gICAgYi5wKFwiVXNlck5hbWVcIiwgKCkgPT4gaW5wdXQuVXNlck5hbWUsIFwie1VzZXJOYW1lfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZWxldGVWUENDb25uZWN0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdnBjLWNvbm5lY3Rpb25zL3tWUENDb25uZWN0aW9uSWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlZQQ0Nvbm5lY3Rpb25JZFwiLCAoKSA9PiBpbnB1dC5WUENDb25uZWN0aW9uSWQsIFwie1ZQQ0Nvbm5lY3Rpb25JZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkRFTEVURVwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVBY2NvdW50Q3VzdG9taXphdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2N1c3RvbWl6YXRpb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19uXTogWywgaW5wdXRbX05dXSxcbiAgICAgICAgW19yXTogWygpID0+IGlucHV0LlJlc29sdmVkICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlQWNjb3VudEN1c3RvbVBlcm1pc3Npb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9jdXN0b20tcGVybWlzc2lvblwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlQWNjb3VudFNldHRpbmdzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vc2V0dGluZ3NcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUFjY291bnRTdWJzY3JpcHRpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50L3tBd3NBY2NvdW50SWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVBbmFseXNpc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2FuYWx5c2VzL3tBbmFseXNpc0lkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBbmFseXNpc0lkXCIsICgpID0+IGlucHV0LkFuYWx5c2lzSWQsIFwie0FuYWx5c2lzSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlQW5hbHlzaXNEZWZpbml0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vYW5hbHlzZXMve0FuYWx5c2lzSWR9L2RlZmluaXRpb25cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQW5hbHlzaXNJZFwiLCAoKSA9PiBpbnB1dC5BbmFseXNpc0lkLCBcIntBbmFseXNpc0lkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUFuYWx5c2lzUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9hbmFseXNlcy97QW5hbHlzaXNJZH0vcGVybWlzc2lvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQW5hbHlzaXNJZFwiLCAoKSA9PiBpbnB1dC5BbmFseXNpc0lkLCBcIntBbmFseXNpc0lkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUFzc2V0QnVuZGxlRXhwb3J0Sm9iQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vYXNzZXQtYnVuZGxlLWV4cG9ydC1qb2JzL3tBc3NldEJ1bmRsZUV4cG9ydEpvYklkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBc3NldEJ1bmRsZUV4cG9ydEpvYklkXCIsICgpID0+IGlucHV0LkFzc2V0QnVuZGxlRXhwb3J0Sm9iSWQsIFwie0Fzc2V0QnVuZGxlRXhwb3J0Sm9iSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlQXNzZXRCdW5kbGVJbXBvcnRKb2JDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9hc3NldC1idW5kbGUtaW1wb3J0LWpvYnMve0Fzc2V0QnVuZGxlSW1wb3J0Sm9iSWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkFzc2V0QnVuZGxlSW1wb3J0Sm9iSWRcIiwgKCkgPT4gaW5wdXQuQXNzZXRCdW5kbGVJbXBvcnRKb2JJZCwgXCJ7QXNzZXRCdW5kbGVJbXBvcnRKb2JJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVCcmFuZENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2JyYW5kcy97QnJhbmRJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQnJhbmRJZFwiLCAoKSA9PiBpbnB1dC5CcmFuZElkLCBcIntCcmFuZElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX3ZJXTogWywgaW5wdXRbX1ZJXV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUJyYW5kQXNzaWdubWVudENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2JyYW5kYXNzaWdubWVudHNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUJyYW5kUHVibGlzaGVkVmVyc2lvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2JyYW5kcy97QnJhbmRJZH0vcHVibGlzaGVkdmVyc2lvblwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJCcmFuZElkXCIsICgpID0+IGlucHV0LkJyYW5kSWQsIFwie0JyYW5kSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlQ3VzdG9tUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9jdXN0b20tcGVybWlzc2lvbnMve0N1c3RvbVBlcm1pc3Npb25zTmFtZX1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQ3VzdG9tUGVybWlzc2lvbnNOYW1lXCIsICgpID0+IGlucHV0LkN1c3RvbVBlcm1pc3Npb25zTmFtZSwgXCJ7Q3VzdG9tUGVybWlzc2lvbnNOYW1lfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZURhc2hib2FyZENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2Rhc2hib2FyZHMve0Rhc2hib2FyZElkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXNoYm9hcmRJZFwiLCAoKSA9PiBpbnB1dC5EYXNoYm9hcmRJZCwgXCJ7RGFzaGJvYXJkSWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfdm5dOiBbKCkgPT4gaW5wdXQuVmVyc2lvbk51bWJlciAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfVk5dLnRvU3RyaW5nKCldLFxuICAgICAgICBbX2FuXTogWywgaW5wdXRbX0FOXV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZURhc2hib2FyZERlZmluaXRpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXNoYm9hcmRzL3tEYXNoYm9hcmRJZH0vZGVmaW5pdGlvblwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXNoYm9hcmRJZFwiLCAoKSA9PiBpbnB1dC5EYXNoYm9hcmRJZCwgXCJ7RGFzaGJvYXJkSWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfdm5dOiBbKCkgPT4gaW5wdXQuVmVyc2lvbk51bWJlciAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfVk5dLnRvU3RyaW5nKCldLFxuICAgICAgICBbX2FuXTogWywgaW5wdXRbX0FOXV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZURhc2hib2FyZFBlcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGFzaGJvYXJkcy97RGFzaGJvYXJkSWR9L3Blcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhc2hib2FyZElkXCIsICgpID0+IGlucHV0LkRhc2hib2FyZElkLCBcIntEYXNoYm9hcmRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVEYXNoYm9hcmRTbmFwc2hvdEpvYkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2Rhc2hib2FyZHMve0Rhc2hib2FyZElkfS9zbmFwc2hvdC1qb2JzL3tTbmFwc2hvdEpvYklkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXNoYm9hcmRJZFwiLCAoKSA9PiBpbnB1dC5EYXNoYm9hcmRJZCwgXCJ7RGFzaGJvYXJkSWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJTbmFwc2hvdEpvYklkXCIsICgpID0+IGlucHV0LlNuYXBzaG90Sm9iSWQsIFwie1NuYXBzaG90Sm9iSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlRGFzaGJvYXJkU25hcHNob3RKb2JSZXN1bHRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXNoYm9hcmRzL3tEYXNoYm9hcmRJZH0vc25hcHNob3Qtam9icy97U25hcHNob3RKb2JJZH0vcmVzdWx0XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhc2hib2FyZElkXCIsICgpID0+IGlucHV0LkRhc2hib2FyZElkLCBcIntEYXNoYm9hcmRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlNuYXBzaG90Sm9iSWRcIiwgKCkgPT4gaW5wdXQuU25hcHNob3RKb2JJZCwgXCJ7U25hcHNob3RKb2JJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVEYXNoYm9hcmRzUUFDb25maWd1cmF0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGFzaGJvYXJkcy1xYS1jb25maWd1cmF0aW9uXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVEYXRhU2V0Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzL3tEYXRhU2V0SWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhdGFTZXRJZFwiLCAoKSA9PiBpbnB1dC5EYXRhU2V0SWQsIFwie0RhdGFTZXRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVEYXRhU2V0UGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXRhLXNldHMve0RhdGFTZXRJZH0vcGVybWlzc2lvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YVNldElkXCIsICgpID0+IGlucHV0LkRhdGFTZXRJZCwgXCJ7RGF0YVNldElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZURhdGFTZXRSZWZyZXNoUHJvcGVydGllc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc2V0cy97RGF0YVNldElkfS9yZWZyZXNoLXByb3BlcnRpZXNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YVNldElkXCIsICgpID0+IGlucHV0LkRhdGFTZXRJZCwgXCJ7RGF0YVNldElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZURhdGFTb3VyY2VDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXRhLXNvdXJjZXMve0RhdGFTb3VyY2VJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YVNvdXJjZUlkXCIsICgpID0+IGlucHV0LkRhdGFTb3VyY2VJZCwgXCJ7RGF0YVNvdXJjZUlkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZURhdGFTb3VyY2VQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc291cmNlcy97RGF0YVNvdXJjZUlkfS9wZXJtaXNzaW9uc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXRhU291cmNlSWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNvdXJjZUlkLCBcIntEYXRhU291cmNlSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlRGVmYXVsdFFCdXNpbmVzc0FwcGxpY2F0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGVmYXVsdC1xYnVzaW5lc3MtYXBwbGljYXRpb25cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX25dOiBbLCBpbnB1dFtfTl1dLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVGb2xkZXJDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9mb2xkZXJzL3tGb2xkZXJJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRm9sZGVySWRcIiwgKCkgPT4gaW5wdXQuRm9sZGVySWQsIFwie0ZvbGRlcklkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUZvbGRlclBlcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZm9sZGVycy97Rm9sZGVySWR9L3Blcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkZvbGRlcklkXCIsICgpID0+IGlucHV0LkZvbGRlcklkLCBcIntGb2xkZXJJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19uXTogWywgaW5wdXRbX05dXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlRm9sZGVyUmVzb2x2ZWRQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2ZvbGRlcnMve0ZvbGRlcklkfS9yZXNvbHZlZC1wZXJtaXNzaW9uc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJGb2xkZXJJZFwiLCAoKSA9PiBpbnB1dC5Gb2xkZXJJZCwgXCJ7Rm9sZGVySWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbl06IFssIGlucHV0W19OXV0sXG4gICAgICAgIFtfbXJdOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUdyb3VwQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS9ncm91cHMve0dyb3VwTmFtZX1cIik7XG4gICAgYi5wKFwiR3JvdXBOYW1lXCIsICgpID0+IGlucHV0Lkdyb3VwTmFtZSwgXCJ7R3JvdXBOYW1lfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUdyb3VwTWVtYmVyc2hpcENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vZ3JvdXBzL3tHcm91cE5hbWV9L21lbWJlcnMve01lbWJlck5hbWV9XCIpO1xuICAgIGIucChcIk1lbWJlck5hbWVcIiwgKCkgPT4gaW5wdXQuTWVtYmVyTmFtZSwgXCJ7TWVtYmVyTmFtZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkdyb3VwTmFtZVwiLCAoKSA9PiBpbnB1dC5Hcm91cE5hbWUsIFwie0dyb3VwTmFtZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVJQU1Qb2xpY3lBc3NpZ25tZW50Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS9pYW0tcG9saWN5LWFzc2lnbm1lbnRzL3tBc3NpZ25tZW50TmFtZX1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQXNzaWdubWVudE5hbWVcIiwgKCkgPT4gaW5wdXQuQXNzaWdubWVudE5hbWUsIFwie0Fzc2lnbm1lbnROYW1lfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUluZ2VzdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc2V0cy97RGF0YVNldElkfS9pbmdlc3Rpb25zL3tJbmdlc3Rpb25JZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YVNldElkXCIsICgpID0+IGlucHV0LkRhdGFTZXRJZCwgXCJ7RGF0YVNldElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiSW5nZXN0aW9uSWRcIiwgKCkgPT4gaW5wdXQuSW5nZXN0aW9uSWQsIFwie0luZ2VzdGlvbklkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZUlwUmVzdHJpY3Rpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9pcC1yZXN0cmljdGlvblwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlS2V5UmVnaXN0cmF0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0va2V5LXJlZ2lzdHJhdGlvblwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfZGtvXTogWygpID0+IGlucHV0LkRlZmF1bHRLZXlPbmx5ICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19ES09dLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVOYW1lc3BhY2VDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVRUGVyc29uYWxpemF0aW9uQ29uZmlndXJhdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3EtcGVyc29uYWxpemF0aW9uLWNvbmZpZ3VyYXRpb25cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVF1aWNrU2lnaHRRU2VhcmNoQ29uZmlndXJhdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3F1aWNrc2lnaHQtcS1zZWFyY2gtY29uZmlndXJhdGlvblwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlUmVmcmVzaFNjaGVkdWxlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzL3tEYXRhU2V0SWR9L3JlZnJlc2gtc2NoZWR1bGVzL3tTY2hlZHVsZUlkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXRhU2V0SWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNldElkLCBcIntEYXRhU2V0SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJTY2hlZHVsZUlkXCIsICgpID0+IGlucHV0LlNjaGVkdWxlSWQsIFwie1NjaGVkdWxlSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlUm9sZUN1c3RvbVBlcm1pc3Npb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L3JvbGVzL3tSb2xlfS9jdXN0b20tcGVybWlzc2lvblwiKTtcbiAgICBiLnAoXCJSb2xlXCIsICgpID0+IGlucHV0LlJvbGUsIFwie1JvbGV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90ZW1wbGF0ZXMve1RlbXBsYXRlSWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRlbXBsYXRlSWRcIiwgKCkgPT4gaW5wdXQuVGVtcGxhdGVJZCwgXCJ7VGVtcGxhdGVJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW192bl06IFsoKSA9PiBpbnB1dC5WZXJzaW9uTnVtYmVyICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19WTl0udG9TdHJpbmcoKV0sXG4gICAgICAgIFtfYW5dOiBbLCBpbnB1dFtfQU5dXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlVGVtcGxhdGVBbGlhc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RlbXBsYXRlcy97VGVtcGxhdGVJZH0vYWxpYXNlcy97QWxpYXNOYW1lfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUZW1wbGF0ZUlkXCIsICgpID0+IGlucHV0LlRlbXBsYXRlSWQsIFwie1RlbXBsYXRlSWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBbGlhc05hbWVcIiwgKCkgPT4gaW5wdXQuQWxpYXNOYW1lLCBcIntBbGlhc05hbWV9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlVGVtcGxhdGVEZWZpbml0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGVtcGxhdGVzL3tUZW1wbGF0ZUlkfS9kZWZpbml0aW9uXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRlbXBsYXRlSWRcIiwgKCkgPT4gaW5wdXQuVGVtcGxhdGVJZCwgXCJ7VGVtcGxhdGVJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW192bl06IFsoKSA9PiBpbnB1dC5WZXJzaW9uTnVtYmVyICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19WTl0udG9TdHJpbmcoKV0sXG4gICAgICAgIFtfYW5dOiBbLCBpbnB1dFtfQU5dXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0Rlc2NyaWJlVGVtcGxhdGVQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RlbXBsYXRlcy97VGVtcGxhdGVJZH0vcGVybWlzc2lvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVGVtcGxhdGVJZFwiLCAoKSA9PiBpbnB1dC5UZW1wbGF0ZUlkLCBcIntUZW1wbGF0ZUlkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVRoZW1lQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGhlbWVzL3tUaGVtZUlkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUaGVtZUlkXCIsICgpID0+IGlucHV0LlRoZW1lSWQsIFwie1RoZW1lSWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfdm5dOiBbKCkgPT4gaW5wdXQuVmVyc2lvbk51bWJlciAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfVk5dLnRvU3RyaW5nKCldLFxuICAgICAgICBbX2FuXTogWywgaW5wdXRbX0FOXV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVRoZW1lQWxpYXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90aGVtZXMve1RoZW1lSWR9L2FsaWFzZXMve0FsaWFzTmFtZX1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVGhlbWVJZFwiLCAoKSA9PiBpbnB1dC5UaGVtZUlkLCBcIntUaGVtZUlkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQWxpYXNOYW1lXCIsICgpID0+IGlucHV0LkFsaWFzTmFtZSwgXCJ7QWxpYXNOYW1lfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVRoZW1lUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90aGVtZXMve1RoZW1lSWR9L3Blcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRoZW1lSWRcIiwgKCkgPT4gaW5wdXQuVGhlbWVJZCwgXCJ7VGhlbWVJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVUb3BpY0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RvcGljcy97VG9waWNJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVG9waWNJZFwiLCAoKSA9PiBpbnB1dC5Ub3BpY0lkLCBcIntUb3BpY0lkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVRvcGljUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90b3BpY3Mve1RvcGljSWR9L3Blcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRvcGljSWRcIiwgKCkgPT4gaW5wdXQuVG9waWNJZCwgXCJ7VG9waWNJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfRGVzY3JpYmVUb3BpY1JlZnJlc2hDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90b3BpY3Mve1RvcGljSWR9L3JlZnJlc2gve1JlZnJlc2hJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVG9waWNJZFwiLCAoKSA9PiBpbnB1dC5Ub3BpY0lkLCBcIntUb3BpY0lkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiUmVmcmVzaElkXCIsICgpID0+IGlucHV0LlJlZnJlc2hJZCwgXCJ7UmVmcmVzaElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVRvcGljUmVmcmVzaFNjaGVkdWxlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdG9waWNzL3tUb3BpY0lkfS9zY2hlZHVsZXMve0RhdGFzZXRJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVG9waWNJZFwiLCAoKSA9PiBpbnB1dC5Ub3BpY0lkLCBcIntUb3BpY0lkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YXNldElkXCIsICgpID0+IGlucHV0LkRhdGFzZXRJZCwgXCJ7RGF0YXNldElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVVzZXJDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L3VzZXJzL3tVc2VyTmFtZX1cIik7XG4gICAgYi5wKFwiVXNlck5hbWVcIiwgKCkgPT4gaW5wdXQuVXNlck5hbWUsIFwie1VzZXJOYW1lfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9EZXNjcmliZVZQQ0Nvbm5lY3Rpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS92cGMtY29ubmVjdGlvbnMve1ZQQ0Nvbm5lY3Rpb25JZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVlBDQ29ubmVjdGlvbklkXCIsICgpID0+IGlucHV0LlZQQ0Nvbm5lY3Rpb25JZCwgXCJ7VlBDQ29ubmVjdGlvbklkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZW5lcmF0ZUVtYmVkVXJsRm9yQW5vbnltb3VzVXNlckNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9lbWJlZC11cmwvYW5vbnltb3VzLXVzZXJcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWxsb3dlZERvbWFpbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgQXV0aG9yaXplZFJlc291cmNlQXJuczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBFeHBlcmllbmNlQ29uZmlndXJhdGlvbjogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBOYW1lc3BhY2U6IFtdLFxuICAgICAgICBTZXNzaW9uTGlmZXRpbWVJbk1pbnV0ZXM6IFtdLFxuICAgICAgICBTZXNzaW9uVGFnczogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZW5lcmF0ZUVtYmVkVXJsRm9yUmVnaXN0ZXJlZFVzZXJDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZW1iZWQtdXJsL3JlZ2lzdGVyZWQtdXNlclwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBBbGxvd2VkRG9tYWluczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBFeHBlcmllbmNlQ29uZmlndXJhdGlvbjogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBTZXNzaW9uTGlmZXRpbWVJbk1pbnV0ZXM6IFtdLFxuICAgICAgICBVc2VyQXJuOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2VuZXJhdGVFbWJlZFVybEZvclJlZ2lzdGVyZWRVc2VyV2l0aElkZW50aXR5Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2VtYmVkLXVybC9yZWdpc3RlcmVkLXVzZXItd2l0aC1pZGVudGl0eVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBBbGxvd2VkRG9tYWluczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBFeHBlcmllbmNlQ29uZmlndXJhdGlvbjogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBTZXNzaW9uTGlmZXRpbWVJbk1pbnV0ZXM6IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9HZXREYXNoYm9hcmRFbWJlZFVybENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2Rhc2hib2FyZHMve0Rhc2hib2FyZElkfS9lbWJlZC11cmxcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGFzaGJvYXJkSWRcIiwgKCkgPT4gaW5wdXQuRGFzaGJvYXJkSWQsIFwie0Rhc2hib2FyZElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX2N0XTogWywgX19leHBlY3ROb25OdWxsKGlucHV0W19JVF0sIGBJZGVudGl0eVR5cGVgKV0sXG4gICAgICAgIFtfc2xdOiBbKCkgPT4gaW5wdXQuU2Vzc2lvbkxpZmV0aW1lSW5NaW51dGVzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19TTElNXS50b1N0cmluZygpXSxcbiAgICAgICAgW191cmRdOiBbKCkgPT4gaW5wdXQuVW5kb1JlZG9EaXNhYmxlZCAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfVVJEXS50b1N0cmluZygpXSxcbiAgICAgICAgW19yZF06IFsoKSA9PiBpbnB1dC5SZXNldERpc2FibGVkICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19SRF0udG9TdHJpbmcoKV0sXG4gICAgICAgIFtfc3BlXTogWygpID0+IGlucHV0LlN0YXRlUGVyc2lzdGVuY2VFbmFibGVkICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19TUEVdLnRvU3RyaW5nKCldLFxuICAgICAgICBbX3VhXTogWywgaW5wdXRbX1VBXV0sXG4gICAgICAgIFtfbl06IFssIGlucHV0W19OXV0sXG4gICAgICAgIFtfYWRpXTogWygpID0+IGlucHV0LkFkZGl0aW9uYWxEYXNoYm9hcmRJZHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX0FESV0gfHwgW11dLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfR2V0U2Vzc2lvbkVtYmVkVXJsQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vc2Vzc2lvbi1lbWJlZC11cmxcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX2VwXTogWywgaW5wdXRbX0VQXV0sXG4gICAgICAgIFtfc2xdOiBbKCkgPT4gaW5wdXQuU2Vzc2lvbkxpZmV0aW1lSW5NaW51dGVzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19TTElNXS50b1N0cmluZygpXSxcbiAgICAgICAgW191YV06IFssIGlucHV0W19VQV1dLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdEFuYWx5c2VzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vYW5hbHlzZXNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgICAgIFtfbXJdOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdEFzc2V0QnVuZGxlRXhwb3J0Sm9ic0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2Fzc2V0LWJ1bmRsZS1leHBvcnQtam9ic1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0QXNzZXRCdW5kbGVJbXBvcnRKb2JzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vYXNzZXQtYnVuZGxlLWltcG9ydC1qb2JzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RCcmFuZHNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9icmFuZHNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdEN1c3RvbVBlcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vY3VzdG9tLXBlcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3REYXNoYm9hcmRzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGFzaGJvYXJkc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0RGFzaGJvYXJkVmVyc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXNoYm9hcmRzL3tEYXNoYm9hcmRJZH0vdmVyc2lvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGFzaGJvYXJkSWRcIiwgKCkgPT4gaW5wdXQuRGFzaGJvYXJkSWQsIFwie0Rhc2hib2FyZElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgICAgIFtfbXJdOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdERhdGFTZXRzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3REYXRhU291cmNlc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc291cmNlc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0Rm9sZGVyTWVtYmVyc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2ZvbGRlcnMve0ZvbGRlcklkfS9tZW1iZXJzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkZvbGRlcklkXCIsICgpID0+IGlucHV0LkZvbGRlcklkLCBcIntGb2xkZXJJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RGb2xkZXJzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZm9sZGVyc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0Rm9sZGVyc0ZvclJlc291cmNlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vcmVzb3VyY2Uve1Jlc291cmNlQXJufS9mb2xkZXJzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlJlc291cmNlQXJuXCIsICgpID0+IGlucHV0LlJlc291cmNlQXJuLCBcIntSZXNvdXJjZUFybn1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RHcm91cE1lbWJlcnNoaXBzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS9ncm91cHMve0dyb3VwTmFtZX0vbWVtYmVyc1wiKTtcbiAgICBiLnAoXCJHcm91cE5hbWVcIiwgKCkgPT4gaW5wdXQuR3JvdXBOYW1lLCBcIntHcm91cE5hbWV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0R3JvdXBzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS9ncm91cHNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgICAgIFtfbXJdOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdElBTVBvbGljeUFzc2lnbm1lbnRzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS92Mi9pYW0tcG9saWN5LWFzc2lnbm1lbnRzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19hc106IFssIGlucHV0W19BU11dLFxuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgICAgIFtfbXJdOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdElBTVBvbGljeUFzc2lnbm1lbnRzRm9yVXNlckNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vdXNlcnMve1VzZXJOYW1lfS9pYW0tcG9saWN5LWFzc2lnbm1lbnRzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlVzZXJOYW1lXCIsICgpID0+IGlucHV0LlVzZXJOYW1lLCBcIntVc2VyTmFtZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RJZGVudGl0eVByb3BhZ2F0aW9uQ29uZmlnc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2lkZW50aXR5LXByb3BhZ2F0aW9uLWNvbmZpZ1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbXJdOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0SW5nZXN0aW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc2V0cy97RGF0YVNldElkfS9pbmdlc3Rpb25zXCIpO1xuICAgIGIucChcIkRhdGFTZXRJZFwiLCAoKSA9PiBpbnB1dC5EYXRhU2V0SWQsIFwie0RhdGFTZXRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3ROYW1lc3BhY2VzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl06IFsoKSA9PiBpbnB1dC5NYXhSZXN1bHRzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19NUl0udG9TdHJpbmcoKV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiR0VUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9MaXN0UmVmcmVzaFNjaGVkdWxlc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc2V0cy97RGF0YVNldElkfS9yZWZyZXNoLXNjaGVkdWxlc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXRhU2V0SWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNldElkLCBcIntEYXRhU2V0SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RSb2xlTWVtYmVyc2hpcHNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L3JvbGVzL3tSb2xlfS9tZW1iZXJzXCIpO1xuICAgIGIucChcIlJvbGVcIiwgKCkgPT4gaW5wdXQuUm9sZSwgXCJ7Um9sZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RUYWdzRm9yUmVzb3VyY2VDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9yZXNvdXJjZXMve1Jlc291cmNlQXJufS90YWdzXCIpO1xuICAgIGIucChcIlJlc291cmNlQXJuXCIsICgpID0+IGlucHV0LlJlc291cmNlQXJuLCBcIntSZXNvdXJjZUFybn1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdFRlbXBsYXRlQWxpYXNlc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RlbXBsYXRlcy97VGVtcGxhdGVJZH0vYWxpYXNlc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUZW1wbGF0ZUlkXCIsICgpID0+IGlucHV0LlRlbXBsYXRlSWQsIFwie1RlbXBsYXRlSWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl9dOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdFRlbXBsYXRlc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RlbXBsYXRlc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbnRdOiBbLCBpbnB1dFtfTlRdXSxcbiAgICAgICAgW19tcl9dOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdFRlbXBsYXRlVmVyc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90ZW1wbGF0ZXMve1RlbXBsYXRlSWR9L3ZlcnNpb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRlbXBsYXRlSWRcIiwgKCkgPT4gaW5wdXQuVGVtcGxhdGVJZCwgXCJ7VGVtcGxhdGVJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RUaGVtZUFsaWFzZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90aGVtZXMve1RoZW1lSWR9L2FsaWFzZXNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVGhlbWVJZFwiLCAoKSA9PiBpbnB1dC5UaGVtZUlkLCBcIntUaGVtZUlkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgICAgIFtfbXJfXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RUaGVtZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90aGVtZXNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgICAgIFtfbXJdOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgICAgICBbX3RdOiBbLCBpbnB1dFtfVF1dLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdFRoZW1lVmVyc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90aGVtZXMve1RoZW1lSWR9L3ZlcnNpb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRoZW1lSWRcIiwgKCkgPT4gaW5wdXQuVGhlbWVJZCwgXCJ7VGhlbWVJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RUb3BpY1JlZnJlc2hTY2hlZHVsZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90b3BpY3Mve1RvcGljSWR9L3NjaGVkdWxlc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUb3BpY0lkXCIsICgpID0+IGlucHV0LlRvcGljSWQsIFwie1RvcGljSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RUb3BpY1Jldmlld2VkQW5zd2Vyc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RvcGljcy97VG9waWNJZH0vcmV2aWV3ZWQtYW5zd2Vyc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUb3BpY0lkXCIsICgpID0+IGlucHV0LlRvcGljSWQsIFwie1RvcGljSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RUb3BpY3NDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90b3BpY3NcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgICAgIFtfbXJdOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdFVzZXJHcm91cHNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L3VzZXJzL3tVc2VyTmFtZX0vZ3JvdXBzXCIpO1xuICAgIGIucChcIlVzZXJOYW1lXCIsICgpID0+IGlucHV0LlVzZXJOYW1lLCBcIntVc2VyTmFtZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX0xpc3RVc2Vyc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vdXNlcnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgICAgIFtfbXJdOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIkdFVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfTGlzdFZQQ0Nvbm5lY3Rpb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdnBjLWNvbm5lY3Rpb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gbWFwKHtcbiAgICAgICAgW19udF06IFssIGlucHV0W19OVF1dLFxuICAgICAgICBbX21yXTogWygpID0+IGlucHV0Lk1heFJlc3VsdHMgIT09IHZvaWQgMCwgKCkgPT4gaW5wdXRbX01SXS50b1N0cmluZygpXSxcbiAgICB9KTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJHRVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1ByZWRpY3RRQVJlc3VsdHNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vcWEvcHJlZGljdFwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBJbmNsdWRlR2VuZXJhdGVkQW5zd2VyOiBbXSxcbiAgICAgICAgSW5jbHVkZVF1aWNrU2lnaHRRSW5kZXg6IFtdLFxuICAgICAgICBNYXhUb3BpY3NUb0NvbnNpZGVyOiBbXSxcbiAgICAgICAgUXVlcnlUZXh0OiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfUHV0RGF0YVNldFJlZnJlc2hQcm9wZXJ0aWVzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc2V0cy97RGF0YVNldElkfS9yZWZyZXNoLXByb3BlcnRpZXNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YVNldElkXCIsICgpID0+IGlucHV0LkRhdGFTZXRJZCwgXCJ7RGF0YVNldElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGF0YVNldFJlZnJlc2hQcm9wZXJ0aWVzOiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfUmVnaXN0ZXJVc2VyQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vdXNlcnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ3VzdG9tRmVkZXJhdGlvblByb3ZpZGVyVXJsOiBbXSxcbiAgICAgICAgQ3VzdG9tUGVybWlzc2lvbnNOYW1lOiBbXSxcbiAgICAgICAgRW1haWw6IFtdLFxuICAgICAgICBFeHRlcm5hbExvZ2luRmVkZXJhdGlvblByb3ZpZGVyVHlwZTogW10sXG4gICAgICAgIEV4dGVybmFsTG9naW5JZDogW10sXG4gICAgICAgIElhbUFybjogW10sXG4gICAgICAgIElkZW50aXR5VHlwZTogW10sXG4gICAgICAgIFNlc3Npb25OYW1lOiBbXSxcbiAgICAgICAgVGFnczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBVc2VyTmFtZTogW10sXG4gICAgICAgIFVzZXJSb2xlOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfUmVzdG9yZUFuYWx5c2lzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vcmVzdG9yZS9hbmFseXNlcy97QW5hbHlzaXNJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQW5hbHlzaXNJZFwiLCAoKSA9PiBpbnB1dC5BbmFseXNpc0lkLCBcIntBbmFseXNpc0lkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX3J0Zl06IFsoKSA9PiBpbnB1dC5SZXN0b3JlVG9Gb2xkZXJzICE9PSB2b2lkIDAsICgpID0+IGlucHV0W19SVEZdLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1NlYXJjaEFuYWx5c2VzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3NlYXJjaC9hbmFseXNlc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBGaWx0ZXJzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIE1heFJlc3VsdHM6IFtdLFxuICAgICAgICBOZXh0VG9rZW46IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TZWFyY2hEYXNoYm9hcmRzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3NlYXJjaC9kYXNoYm9hcmRzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEZpbHRlcnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgTWF4UmVzdWx0czogW10sXG4gICAgICAgIE5leHRUb2tlbjogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1NlYXJjaERhdGFTZXRzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3NlYXJjaC9kYXRhLXNldHNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgRmlsdGVyczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBNYXhSZXN1bHRzOiBbXSxcbiAgICAgICAgTmV4dFRva2VuOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU2VhcmNoRGF0YVNvdXJjZXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vc2VhcmNoL2RhdGEtc291cmNlc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBGaWx0ZXJzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIE1heFJlc3VsdHM6IFtdLFxuICAgICAgICBOZXh0VG9rZW46IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TZWFyY2hGb2xkZXJzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3NlYXJjaC9mb2xkZXJzXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEZpbHRlcnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgTWF4UmVzdWx0czogW10sXG4gICAgICAgIE5leHRUb2tlbjogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1NlYXJjaEdyb3Vwc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L2dyb3Vwcy1zZWFyY2hcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX250XTogWywgaW5wdXRbX05UXV0sXG4gICAgICAgIFtfbXJdOiBbKCkgPT4gaW5wdXQuTWF4UmVzdWx0cyAhPT0gdm9pZCAwLCAoKSA9PiBpbnB1dFtfTVJdLnRvU3RyaW5nKCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEZpbHRlcnM6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU2VhcmNoVG9waWNzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3NlYXJjaC90b3BpY3NcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgRmlsdGVyczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBNYXhSZXN1bHRzOiBbXSxcbiAgICAgICAgTmV4dFRva2VuOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU3RhcnRBc3NldEJ1bmRsZUV4cG9ydEpvYkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9hc3NldC1idW5kbGUtZXhwb3J0LWpvYnMvZXhwb3J0XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEFzc2V0QnVuZGxlRXhwb3J0Sm9iSWQ6IFtdLFxuICAgICAgICBDbG91ZEZvcm1hdGlvbk92ZXJyaWRlUHJvcGVydHlDb25maWd1cmF0aW9uOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIEV4cG9ydEZvcm1hdDogW10sXG4gICAgICAgIEluY2x1ZGVBbGxEZXBlbmRlbmNpZXM6IFtdLFxuICAgICAgICBJbmNsdWRlRm9sZGVyTWVtYmVyczogW10sXG4gICAgICAgIEluY2x1ZGVGb2xkZXJNZW1iZXJzaGlwczogW10sXG4gICAgICAgIEluY2x1ZGVQZXJtaXNzaW9uczogW10sXG4gICAgICAgIEluY2x1ZGVUYWdzOiBbXSxcbiAgICAgICAgUmVzb3VyY2VBcm5zOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFZhbGlkYXRpb25TdHJhdGVneTogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TdGFydEFzc2V0QnVuZGxlSW1wb3J0Sm9iQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2Fzc2V0LWJ1bmRsZS1pbXBvcnQtam9icy9pbXBvcnRcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgQXNzZXRCdW5kbGVJbXBvcnRKb2JJZDogW10sXG4gICAgICAgIEFzc2V0QnVuZGxlSW1wb3J0U291cmNlOiAoXykgPT4gc2VfQXNzZXRCdW5kbGVJbXBvcnRTb3VyY2UoXywgY29udGV4dCksXG4gICAgICAgIEZhaWx1cmVBY3Rpb246IFtdLFxuICAgICAgICBPdmVycmlkZVBhcmFtZXRlcnM6IChfKSA9PiBzZV9Bc3NldEJ1bmRsZUltcG9ydEpvYk92ZXJyaWRlUGFyYW1ldGVycyhfLCBjb250ZXh0KSxcbiAgICAgICAgT3ZlcnJpZGVQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBPdmVycmlkZVRhZ3M6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgT3ZlcnJpZGVWYWxpZGF0aW9uU3RyYXRlZ3k6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfU3RhcnREYXNoYm9hcmRTbmFwc2hvdEpvYkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXNoYm9hcmRzL3tEYXNoYm9hcmRJZH0vc25hcHNob3Qtam9ic1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXNoYm9hcmRJZFwiLCAoKSA9PiBpbnB1dC5EYXNoYm9hcmRJZCwgXCJ7RGFzaGJvYXJkSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBTbmFwc2hvdENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9TbmFwc2hvdENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFNuYXBzaG90Sm9iSWQ6IFtdLFxuICAgICAgICBVc2VyQ29uZmlndXJhdGlvbjogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9TdGFydERhc2hib2FyZFNuYXBzaG90Sm9iU2NoZWR1bGVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXNoYm9hcmRzL3tEYXNoYm9hcmRJZH0vc2NoZWR1bGVzL3tTY2hlZHVsZUlkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXNoYm9hcmRJZFwiLCAoKSA9PiBpbnB1dC5EYXNoYm9hcmRJZCwgXCJ7RGFzaGJvYXJkSWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJTY2hlZHVsZUlkXCIsICgpID0+IGlucHV0LlNjaGVkdWxlSWQsIFwie1NjaGVkdWxlSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9UYWdSZXNvdXJjZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9yZXNvdXJjZXMve1Jlc291cmNlQXJufS90YWdzXCIpO1xuICAgIGIucChcIlJlc291cmNlQXJuXCIsICgpID0+IGlucHV0LlJlc291cmNlQXJuLCBcIntSZXNvdXJjZUFybn1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIFRhZ3M6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUE9TVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVW50YWdSZXNvdXJjZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL3Jlc291cmNlcy97UmVzb3VyY2VBcm59L3RhZ3NcIik7XG4gICAgYi5wKFwiUmVzb3VyY2VBcm5cIiwgKCkgPT4gaW5wdXQuUmVzb3VyY2VBcm4sIFwie1Jlc291cmNlQXJufVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX2tdOiBbX19leHBlY3ROb25OdWxsKGlucHV0LlRhZ0tleXMsIGBUYWdLZXlzYCkgIT0gbnVsbCwgKCkgPT4gaW5wdXRbX1RLXSB8fCBbXV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYi5tKFwiREVMRVRFXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVBY2NvdW50Q3VzdG9taXphdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9jdXN0b21pemF0aW9uc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBjb25zdCBxdWVyeSA9IG1hcCh7XG4gICAgICAgIFtfbl06IFssIGlucHV0W19OXV0sXG4gICAgfSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWNjb3VudEN1c3RvbWl6YXRpb246IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykucShxdWVyeSkuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVBY2NvdW50Q3VzdG9tUGVybWlzc2lvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9jdXN0b20tcGVybWlzc2lvblwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBDdXN0b21QZXJtaXNzaW9uc05hbWU6IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZUFjY291bnRTZXR0aW5nc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9zZXR0aW5nc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBEZWZhdWx0TmFtZXNwYWNlOiBbXSxcbiAgICAgICAgTm90aWZpY2F0aW9uRW1haWw6IFtdLFxuICAgICAgICBUZXJtaW5hdGlvblByb3RlY3Rpb25FbmFibGVkOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVBbmFseXNpc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9hbmFseXNlcy97QW5hbHlzaXNJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQW5hbHlzaXNJZFwiLCAoKSA9PiBpbnB1dC5BbmFseXNpc0lkLCBcIntBbmFseXNpc0lkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGVmaW5pdGlvbjogKF8pID0+IHNlX0FuYWx5c2lzRGVmaW5pdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFBhcmFtZXRlcnM6IChfKSA9PiBzZV9fUGFyYW1ldGVycyhfLCBjb250ZXh0KSxcbiAgICAgICAgU291cmNlRW50aXR5OiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFRoZW1lQXJuOiBbXSxcbiAgICAgICAgVmFsaWRhdGlvblN0cmF0ZWd5OiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlQW5hbHlzaXNQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9hbmFseXNlcy97QW5hbHlzaXNJZH0vcGVybWlzc2lvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQW5hbHlzaXNJZFwiLCAoKSA9PiBpbnB1dC5BbmFseXNpc0lkLCBcIntBbmFseXNpc0lkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgR3JhbnRQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBSZXZva2VQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZUFwcGxpY2F0aW9uV2l0aFRva2VuRXhjaGFuZ2VHcmFudENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2FwcGxpY2F0aW9uLXdpdGgtdG9rZW4tZXhjaGFuZ2UtZ3JhbnRcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX25dOiBbLCBfX2V4cGVjdE5vbk51bGwoaW5wdXRbX05dLCBgTmFtZXNwYWNlYCldLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLnEocXVlcnkpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlQnJhbmRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vYnJhbmRzL3tCcmFuZElkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJCcmFuZElkXCIsICgpID0+IGlucHV0LkJyYW5kSWQsIFwie0JyYW5kSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBCcmFuZERlZmluaXRpb246IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVCcmFuZEFzc2lnbm1lbnRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vYnJhbmRhc3NpZ25tZW50c1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBCcmFuZEFybjogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlQnJhbmRQdWJsaXNoZWRWZXJzaW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2JyYW5kcy97QnJhbmRJZH0vcHVibGlzaGVkdmVyc2lvblwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJCcmFuZElkXCIsICgpID0+IGlucHV0LkJyYW5kSWQsIFwie0JyYW5kSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBWZXJzaW9uSWQ6IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZUN1c3RvbVBlcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2N1c3RvbS1wZXJtaXNzaW9ucy97Q3VzdG9tUGVybWlzc2lvbnNOYW1lfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJDdXN0b21QZXJtaXNzaW9uc05hbWVcIiwgKCkgPT4gaW5wdXQuQ3VzdG9tUGVybWlzc2lvbnNOYW1lLCBcIntDdXN0b21QZXJtaXNzaW9uc05hbWV9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBDYXBhYmlsaXRpZXM6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVEYXNoYm9hcmRDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGFzaGJvYXJkcy97RGFzaGJvYXJkSWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhc2hib2FyZElkXCIsICgpID0+IGlucHV0LkRhc2hib2FyZElkLCBcIntEYXNoYm9hcmRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIERhc2hib2FyZFB1Ymxpc2hPcHRpb25zOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIERlZmluaXRpb246IChfKSA9PiBzZV9EYXNoYm9hcmRWZXJzaW9uRGVmaW5pdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFBhcmFtZXRlcnM6IChfKSA9PiBzZV9fUGFyYW1ldGVycyhfLCBjb250ZXh0KSxcbiAgICAgICAgU291cmNlRW50aXR5OiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFRoZW1lQXJuOiBbXSxcbiAgICAgICAgVmFsaWRhdGlvblN0cmF0ZWd5OiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFZlcnNpb25EZXNjcmlwdGlvbjogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlRGFzaGJvYXJkTGlua3NDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGFzaGJvYXJkcy97RGFzaGJvYXJkSWR9L2xpbmtlZC1lbnRpdGllc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXNoYm9hcmRJZFwiLCAoKSA9PiBpbnB1dC5EYXNoYm9hcmRJZCwgXCJ7RGFzaGJvYXJkSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBMaW5rRW50aXRpZXM6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVEYXNoYm9hcmRQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXNoYm9hcmRzL3tEYXNoYm9hcmRJZH0vcGVybWlzc2lvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGFzaGJvYXJkSWRcIiwgKCkgPT4gaW5wdXQuRGFzaGJvYXJkSWQsIFwie0Rhc2hib2FyZElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgR3JhbnRMaW5rUGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgR3JhbnRQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBSZXZva2VMaW5rUGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgUmV2b2tlUGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVEYXNoYm9hcmRQdWJsaXNoZWRWZXJzaW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGFzaGJvYXJkcy97RGFzaGJvYXJkSWR9L3ZlcnNpb25zL3tWZXJzaW9uTnVtYmVyfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXNoYm9hcmRJZFwiLCAoKSA9PiBpbnB1dC5EYXNoYm9hcmRJZCwgXCJ7RGFzaGJvYXJkSWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJWZXJzaW9uTnVtYmVyXCIsICgpID0+IGlucHV0LlZlcnNpb25OdW1iZXIudG9TdHJpbmcoKSwgXCJ7VmVyc2lvbk51bWJlcn1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlRGFzaGJvYXJkc1FBQ29uZmlndXJhdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXNoYm9hcmRzLXFhLWNvbmZpZ3VyYXRpb25cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGFzaGJvYXJkc1FBU3RhdHVzOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVEYXRhU2V0Q29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc2V0cy97RGF0YVNldElkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXRhU2V0SWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNldElkLCBcIntEYXRhU2V0SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBDb2x1bW5Hcm91cHM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgQ29sdW1uTGV2ZWxQZXJtaXNzaW9uUnVsZXM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgRGF0YVNldFVzYWdlQ29uZmlndXJhdGlvbjogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBEYXRhc2V0UGFyYW1ldGVyczogKF8pID0+IHNlX0RhdGFzZXRQYXJhbWV0ZXJMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBGaWVsZEZvbGRlcnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgSW1wb3J0TW9kZTogW10sXG4gICAgICAgIExvZ2ljYWxUYWJsZU1hcDogKF8pID0+IHNlX0xvZ2ljYWxUYWJsZU1hcChfLCBjb250ZXh0KSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFBlcmZvcm1hbmNlQ29uZmlndXJhdGlvbjogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBQaHlzaWNhbFRhYmxlTWFwOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFJvd0xldmVsUGVybWlzc2lvbkRhdGFTZXQ6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgUm93TGV2ZWxQZXJtaXNzaW9uVGFnQ29uZmlndXJhdGlvbjogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZURhdGFTZXRQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXRhLXNldHMve0RhdGFTZXRJZH0vcGVybWlzc2lvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YVNldElkXCIsICgpID0+IGlucHV0LkRhdGFTZXRJZCwgXCJ7RGF0YVNldElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgR3JhbnRQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBSZXZva2VQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVEYXRhU291cmNlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2RhdGEtc291cmNlcy97RGF0YVNvdXJjZUlkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJEYXRhU291cmNlSWRcIiwgKCkgPT4gaW5wdXQuRGF0YVNvdXJjZUlkLCBcIntEYXRhU291cmNlSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBDcmVkZW50aWFsczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBEYXRhU291cmNlUGFyYW1ldGVyczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgU3NsUHJvcGVydGllczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBWcGNDb25uZWN0aW9uUHJvcGVydGllczogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZURhdGFTb3VyY2VQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9kYXRhLXNvdXJjZXMve0RhdGFTb3VyY2VJZH0vcGVybWlzc2lvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRGF0YVNvdXJjZUlkXCIsICgpID0+IGlucHV0LkRhdGFTb3VyY2VJZCwgXCJ7RGF0YVNvdXJjZUlkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgR3JhbnRQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBSZXZva2VQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVEZWZhdWx0UUJ1c2luZXNzQXBwbGljYXRpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGVmYXVsdC1xYnVzaW5lc3MtYXBwbGljYXRpb25cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgY29uc3QgcXVlcnkgPSBtYXAoe1xuICAgICAgICBbX25dOiBbLCBpbnB1dFtfTl1dLFxuICAgIH0pO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEFwcGxpY2F0aW9uSWQ6IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5xKHF1ZXJ5KS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZUZvbGRlckNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9mb2xkZXJzL3tGb2xkZXJJZH1cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiRm9sZGVySWRcIiwgKCkgPT4gaW5wdXQuRm9sZGVySWQsIFwie0ZvbGRlcklkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgTmFtZTogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlRm9sZGVyUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZm9sZGVycy97Rm9sZGVySWR9L3Blcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkZvbGRlcklkXCIsICgpID0+IGlucHV0LkZvbGRlcklkLCBcIntGb2xkZXJJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEdyYW50UGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgUmV2b2tlUGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVHcm91cENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L2dyb3Vwcy97R3JvdXBOYW1lfVwiKTtcbiAgICBiLnAoXCJHcm91cE5hbWVcIiwgKCkgPT4gaW5wdXQuR3JvdXBOYW1lLCBcIntHcm91cE5hbWV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBEZXNjcmlwdGlvbjogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlSUFNUG9saWN5QXNzaWdubWVudENvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L2lhbS1wb2xpY3ktYXNzaWdubWVudHMve0Fzc2lnbm1lbnROYW1lfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBc3NpZ25tZW50TmFtZVwiLCAoKSA9PiBpbnB1dC5Bc3NpZ25tZW50TmFtZSwgXCJ7QXNzaWdubWVudE5hbWV9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJOYW1lc3BhY2VcIiwgKCkgPT4gaW5wdXQuTmFtZXNwYWNlLCBcIntOYW1lc3BhY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBBc3NpZ25tZW50U3RhdHVzOiBbXSxcbiAgICAgICAgSWRlbnRpdGllczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBQb2xpY3lBcm46IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZUlkZW50aXR5UHJvcGFnYXRpb25Db25maWdDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vaWRlbnRpdHktcHJvcGFnYXRpb24tY29uZmlnL3tTZXJ2aWNlfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJTZXJ2aWNlXCIsICgpID0+IGlucHV0LlNlcnZpY2UsIFwie1NlcnZpY2V9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBBdXRob3JpemVkVGFyZ2V0czogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVJcFJlc3RyaWN0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L2lwLXJlc3RyaWN0aW9uXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEVuYWJsZWQ6IFtdLFxuICAgICAgICBJcFJlc3RyaWN0aW9uUnVsZU1hcDogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBWcGNFbmRwb2ludElkUmVzdHJpY3Rpb25SdWxlTWFwOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFZwY0lkUmVzdHJpY3Rpb25SdWxlTWFwOiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBPU1RcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZUtleVJlZ2lzdHJhdGlvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9rZXktcmVnaXN0cmF0aW9uXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEtleVJlZ2lzdHJhdGlvbjogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVQdWJsaWNTaGFyaW5nU2V0dGluZ3NDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vcHVibGljLXNoYXJpbmctc2V0dGluZ3NcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgUHVibGljU2hhcmluZ0VuYWJsZWQ6IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZVFQZXJzb25hbGl6YXRpb25Db25maWd1cmF0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3EtcGVyc29uYWxpemF0aW9uLWNvbmZpZ3VyYXRpb25cIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgUGVyc29uYWxpemF0aW9uTW9kZTogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlUXVpY2tTaWdodFFTZWFyY2hDb25maWd1cmF0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3F1aWNrc2lnaHQtcS1zZWFyY2gtY29uZmlndXJhdGlvblwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBRU2VhcmNoU3RhdHVzOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVSZWZyZXNoU2NoZWR1bGVDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vZGF0YS1zZXRzL3tEYXRhU2V0SWR9L3JlZnJlc2gtc2NoZWR1bGVzXCIpO1xuICAgIGIucChcIkRhdGFTZXRJZFwiLCAoKSA9PiBpbnB1dC5EYXRhU2V0SWQsIFwie0RhdGFTZXRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIFNjaGVkdWxlOiAoXykgPT4gc2VfUmVmcmVzaFNjaGVkdWxlKF8sIGNvbnRleHQpLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZVJvbGVDdXN0b21QZXJtaXNzaW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L25hbWVzcGFjZXMve05hbWVzcGFjZX0vcm9sZXMve1JvbGV9L2N1c3RvbS1wZXJtaXNzaW9uXCIpO1xuICAgIGIucChcIlJvbGVcIiwgKCkgPT4gaW5wdXQuUm9sZSwgXCJ7Um9sZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEN1c3RvbVBlcm1pc3Npb25zTmFtZTogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlU1BJQ0VDYXBhY2l0eUNvbmZpZ3VyYXRpb25Db21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vc3BpY2UtY2FwYWNpdHktY29uZmlndXJhdGlvblwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBQdXJjaGFzZU1vZGU6IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQT1NUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVUZW1wbGF0ZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90ZW1wbGF0ZXMve1RlbXBsYXRlSWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRlbXBsYXRlSWRcIiwgKCkgPT4gaW5wdXQuVGVtcGxhdGVJZCwgXCJ7VGVtcGxhdGVJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIERlZmluaXRpb246IChfKSA9PiBzZV9UZW1wbGF0ZVZlcnNpb25EZWZpbml0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgU291cmNlRW50aXR5OiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFZhbGlkYXRpb25TdHJhdGVneTogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBWZXJzaW9uRGVzY3JpcHRpb246IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZVRlbXBsYXRlQWxpYXNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGVtcGxhdGVzL3tUZW1wbGF0ZUlkfS9hbGlhc2VzL3tBbGlhc05hbWV9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRlbXBsYXRlSWRcIiwgKCkgPT4gaW5wdXQuVGVtcGxhdGVJZCwgXCJ7VGVtcGxhdGVJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkFsaWFzTmFtZVwiLCAoKSA9PiBpbnB1dC5BbGlhc05hbWUsIFwie0FsaWFzTmFtZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIFRlbXBsYXRlVmVyc2lvbk51bWJlcjogW10sXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlVGVtcGxhdGVQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90ZW1wbGF0ZXMve1RlbXBsYXRlSWR9L3Blcm1pc3Npb25zXCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRlbXBsYXRlSWRcIiwgKCkgPT4gaW5wdXQuVGVtcGxhdGVJZCwgXCJ7VGVtcGxhdGVJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEdyYW50UGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgUmV2b2tlUGVybWlzc2lvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVUaGVtZUNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS90aGVtZXMve1RoZW1lSWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRoZW1lSWRcIiwgKCkgPT4gaW5wdXQuVGhlbWVJZCwgXCJ7VGhlbWVJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEJhc2VUaGVtZUlkOiBbXSxcbiAgICAgICAgQ29uZmlndXJhdGlvbjogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgVmVyc2lvbkRlc2NyaXB0aW9uOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVUaGVtZUFsaWFzQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RoZW1lcy97VGhlbWVJZH0vYWxpYXNlcy97QWxpYXNOYW1lfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUaGVtZUlkXCIsICgpID0+IGlucHV0LlRoZW1lSWQsIFwie1RoZW1lSWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJBbGlhc05hbWVcIiwgKCkgPT4gaW5wdXQuQWxpYXNOYW1lLCBcIntBbGlhc05hbWV9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBUaGVtZVZlcnNpb25OdW1iZXI6IFtdLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZVRoZW1lUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdGhlbWVzL3tUaGVtZUlkfS9wZXJtaXNzaW9uc1wiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUaGVtZUlkXCIsICgpID0+IGlucHV0LlRoZW1lSWQsIFwie1RoZW1lSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBHcmFudFBlcm1pc3Npb25zOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFJldm9rZVBlcm1pc3Npb25zOiAoXykgPT4gX2pzb24oXyksXG4gICAgfSkpO1xuICAgIGIubShcIlBVVFwiKS5oKGhlYWRlcnMpLmIoYm9keSk7XG4gICAgcmV0dXJuIGIuYnVpbGQoKTtcbn07XG5leHBvcnQgY29uc3Qgc2VfVXBkYXRlVG9waWNDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vdG9waWNzL3tUb3BpY0lkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJUb3BpY0lkXCIsICgpID0+IGlucHV0LlRvcGljSWQsIFwie1RvcGljSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBDdXN0b21JbnN0cnVjdGlvbnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgVG9waWM6IChfKSA9PiBfanNvbihfKSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVUb3BpY1Blcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RvcGljcy97VG9waWNJZH0vcGVybWlzc2lvbnNcIik7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiVG9waWNJZFwiLCAoKSA9PiBpbnB1dC5Ub3BpY0lkLCBcIntUb3BpY0lkfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgR3JhbnRQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgICAgICBSZXZva2VQZXJtaXNzaW9uczogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZVRvcGljUmVmcmVzaFNjaGVkdWxlQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3RvcGljcy97VG9waWNJZH0vc2NoZWR1bGVzL3tEYXRhc2V0SWR9XCIpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIlRvcGljSWRcIiwgKCkgPT4gaW5wdXQuVG9waWNJZCwgXCJ7VG9waWNJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIkRhdGFzZXRJZFwiLCAoKSA9PiBpbnB1dC5EYXRhc2V0SWQsIFwie0RhdGFzZXRJZH1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIFJlZnJlc2hTY2hlZHVsZTogKF8pID0+IHNlX1RvcGljUmVmcmVzaFNjaGVkdWxlKF8sIGNvbnRleHQpLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IHNlX1VwZGF0ZVVzZXJDb21tYW5kID0gYXN5bmMgKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgYiA9IHJiKGlucHV0LCBjb250ZXh0KTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGIuYnAoXCIvYWNjb3VudHMve0F3c0FjY291bnRJZH0vbmFtZXNwYWNlcy97TmFtZXNwYWNlfS91c2Vycy97VXNlck5hbWV9XCIpO1xuICAgIGIucChcIlVzZXJOYW1lXCIsICgpID0+IGlucHV0LlVzZXJOYW1lLCBcIntVc2VyTmFtZX1cIiwgZmFsc2UpO1xuICAgIGIucChcIkF3c0FjY291bnRJZFwiLCAoKSA9PiBpbnB1dC5Bd3NBY2NvdW50SWQsIFwie0F3c0FjY291bnRJZH1cIiwgZmFsc2UpO1xuICAgIGIucChcIk5hbWVzcGFjZVwiLCAoKSA9PiBpbnB1dC5OYW1lc3BhY2UsIFwie05hbWVzcGFjZX1cIiwgZmFsc2UpO1xuICAgIGxldCBib2R5O1xuICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh0YWtlKGlucHV0LCB7XG4gICAgICAgIEN1c3RvbUZlZGVyYXRpb25Qcm92aWRlclVybDogW10sXG4gICAgICAgIEN1c3RvbVBlcm1pc3Npb25zTmFtZTogW10sXG4gICAgICAgIEVtYWlsOiBbXSxcbiAgICAgICAgRXh0ZXJuYWxMb2dpbkZlZGVyYXRpb25Qcm92aWRlclR5cGU6IFtdLFxuICAgICAgICBFeHRlcm5hbExvZ2luSWQ6IFtdLFxuICAgICAgICBSb2xlOiBbXSxcbiAgICAgICAgVW5hcHBseUN1c3RvbVBlcm1pc3Npb25zOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVVc2VyQ3VzdG9tUGVybWlzc2lvbkNvbW1hbmQgPSBhc3luYyAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBiID0gcmIoaW5wdXQsIGNvbnRleHQpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgYi5icChcIi9hY2NvdW50cy97QXdzQWNjb3VudElkfS9uYW1lc3BhY2VzL3tOYW1lc3BhY2V9L3VzZXJzL3tVc2VyTmFtZX0vY3VzdG9tLXBlcm1pc3Npb25cIik7XG4gICAgYi5wKFwiVXNlck5hbWVcIiwgKCkgPT4gaW5wdXQuVXNlck5hbWUsIFwie1VzZXJOYW1lfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiQXdzQWNjb3VudElkXCIsICgpID0+IGlucHV0LkF3c0FjY291bnRJZCwgXCJ7QXdzQWNjb3VudElkfVwiLCBmYWxzZSk7XG4gICAgYi5wKFwiTmFtZXNwYWNlXCIsICgpID0+IGlucHV0Lk5hbWVzcGFjZSwgXCJ7TmFtZXNwYWNlfVwiLCBmYWxzZSk7XG4gICAgbGV0IGJvZHk7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ3VzdG9tUGVybWlzc2lvbnNOYW1lOiBbXSxcbiAgICB9KSk7XG4gICAgYi5tKFwiUFVUXCIpLmgoaGVhZGVycykuYihib2R5KTtcbiAgICByZXR1cm4gYi5idWlsZCgpO1xufTtcbmV4cG9ydCBjb25zdCBzZV9VcGRhdGVWUENDb25uZWN0aW9uQ29tbWFuZCA9IGFzeW5jIChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGIgPSByYihpbnB1dCwgY29udGV4dCk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICBiLmJwKFwiL2FjY291bnRzL3tBd3NBY2NvdW50SWR9L3ZwYy1jb25uZWN0aW9ucy97VlBDQ29ubmVjdGlvbklkfVwiKTtcbiAgICBiLnAoXCJBd3NBY2NvdW50SWRcIiwgKCkgPT4gaW5wdXQuQXdzQWNjb3VudElkLCBcIntBd3NBY2NvdW50SWR9XCIsIGZhbHNlKTtcbiAgICBiLnAoXCJWUENDb25uZWN0aW9uSWRcIiwgKCkgPT4gaW5wdXQuVlBDQ29ubmVjdGlvbklkLCBcIntWUENDb25uZWN0aW9uSWR9XCIsIGZhbHNlKTtcbiAgICBsZXQgYm9keTtcbiAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkodGFrZShpbnB1dCwge1xuICAgICAgICBEbnNSZXNvbHZlcnM6IChfKSA9PiBfanNvbihfKSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFJvbGVBcm46IFtdLFxuICAgICAgICBTZWN1cml0eUdyb3VwSWRzOiAoXykgPT4gX2pzb24oXyksXG4gICAgICAgIFN1Ym5ldElkczogKF8pID0+IF9qc29uKF8pLFxuICAgIH0pKTtcbiAgICBiLm0oXCJQVVRcIikuaChoZWFkZXJzKS5iKGJvZHkpO1xuICAgIHJldHVybiBiLmJ1aWxkKCk7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0JhdGNoQ3JlYXRlVG9waWNSZXZpZXdlZEFuc3dlckNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEludmFsaWRBbnN3ZXJzOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3VjY2VlZGVkQW5zd2VyczogX2pzb24sXG4gICAgICAgIFRvcGljQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9waWNJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9CYXRjaERlbGV0ZVRvcGljUmV2aWV3ZWRBbnN3ZXJDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBJbnZhbGlkQW5zd2VyczogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN1Y2NlZWRlZEFuc3dlcnM6IF9qc29uLFxuICAgICAgICBUb3BpY0FybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRvcGljSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfQ2FuY2VsSW5nZXN0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgSW5nZXN0aW9uSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlQWNjb3VudEN1c3RvbWl6YXRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBY2NvdW50Q3VzdG9taXphdGlvbjogX2pzb24sXG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEF3c0FjY291bnRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE5hbWVzcGFjZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVBY2NvdW50U3Vic2NyaXB0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU2lnbnVwUmVzcG9uc2U6IF9qc29uLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlQW5hbHlzaXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBbmFseXNpc0lkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRpb25TdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlQnJhbmRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBCcmFuZERlZmluaXRpb246IF9qc29uLFxuICAgICAgICBCcmFuZERldGFpbDogKF8pID0+IGRlX0JyYW5kRGV0YWlsKF8sIGNvbnRleHQpLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVDdXN0b21QZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN0YXR1czogX19leHBlY3RJbnQzMixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlRGFzaGJvYXJkQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRpb25TdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXNoYm9hcmRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZlcnNpb25Bcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlRGF0YVNldENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERhdGFTZXRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEluZ2VzdGlvbkFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEluZ2VzdGlvbklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZURhdGFTb3VyY2VDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGlvblN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERhdGFTb3VyY2VJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVGb2xkZXJDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBGb2xkZXJJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVGb2xkZXJNZW1iZXJzaGlwQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRm9sZGVyTWVtYmVyOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdEludDMyLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVHcm91cENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEdyb3VwOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZUdyb3VwTWVtYmVyc2hpcENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEdyb3VwTWVtYmVyOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZUlBTVBvbGljeUFzc2lnbm1lbnRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBc3NpZ25tZW50SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBc3NpZ25tZW50TmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEFzc2lnbm1lbnRTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJZGVudGl0aWVzOiBfanNvbixcbiAgICAgICAgUG9saWN5QXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZUluZ2VzdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEluZ2VzdGlvbklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgSW5nZXN0aW9uU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZU5hbWVzcGFjZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENhcGFjaXR5UmVnaW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRpb25TdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJZGVudGl0eVN0b3JlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVSZWZyZXNoU2NoZWR1bGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTY2hlZHVsZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZVJvbGVNZW1iZXJzaGlwQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0NyZWF0ZVRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRpb25TdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmVyc2lvbkFybjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVUZW1wbGF0ZUFsaWFzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGVtcGxhdGVBbGlhczogX2pzb24sXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVUaGVtZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0aW9uU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZlcnNpb25Bcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlVGhlbWVBbGlhc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRoZW1lQWxpYXM6IF9qc29uLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlVG9waWNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZWZyZXNoQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9waWNJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9DcmVhdGVUb3BpY1JlZnJlc2hTY2hlZHVsZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERhdGFzZXRBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb3BpY0FybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRvcGljSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfQ3JlYXRlVlBDQ29ubmVjdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEF2YWlsYWJpbGl0eVN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0aW9uU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVlBDQ29ubmVjdGlvbklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUFjY291bnRDdXN0b21pemF0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUFjY291bnRDdXN0b21QZXJtaXNzaW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdEludDMyLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVBY2NvdW50U3Vic2NyaXB0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUFuYWx5c2lzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQW5hbHlzaXNJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERlbGV0aW9uVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUJyYW5kQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlQnJhbmRBc3NpZ25tZW50Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlQ3VzdG9tUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0SW50MzIsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZURhc2hib2FyZENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERhc2hib2FyZElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZURhdGFTZXRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXRhU2V0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlRGF0YVNldFJlZnJlc2hQcm9wZXJ0aWVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZURhdGFTb3VyY2VDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXRhU291cmNlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlRGVmYXVsdFFCdXNpbmVzc0FwcGxpY2F0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUZvbGRlckNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEZvbGRlcklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUZvbGRlck1lbWJlcnNoaXBDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0SW50MzIsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUdyb3VwQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZUdyb3VwTWVtYmVyc2hpcENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVJQU1Qb2xpY3lBc3NpZ25tZW50Q29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXNzaWdubWVudE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlSWRlbnRpdHlQcm9wYWdhdGlvbkNvbmZpZ0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVOYW1lc3BhY2VDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlUmVmcmVzaFNjaGVkdWxlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU2NoZWR1bGVJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVSb2xlQ3VzdG9tUGVybWlzc2lvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN0YXR1czogX19leHBlY3RJbnQzMixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlUm9sZU1lbWJlcnNoaXBDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZVRlbXBsYXRlQWxpYXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBbGlhc05hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZVRoZW1lQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVUaGVtZUFsaWFzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQWxpYXNOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZWxldGVUb3BpY0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRvcGljSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlVG9waWNSZWZyZXNoU2NoZWR1bGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXRhc2V0QXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9waWNBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb3BpY0lkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0RlbGV0ZVVzZXJDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlVXNlckJ5UHJpbmNpcGFsSWRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlVXNlckN1c3RvbVBlcm1pc3Npb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVsZXRlVlBDQ29ubmVjdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEF2YWlsYWJpbGl0eVN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERlbGV0aW9uU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVlBDQ29ubmVjdGlvbklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlQWNjb3VudEN1c3RvbWl6YXRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBY2NvdW50Q3VzdG9taXphdGlvbjogX2pzb24sXG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEF3c0FjY291bnRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE5hbWVzcGFjZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUFjY291bnRDdXN0b21QZXJtaXNzaW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQ3VzdG9tUGVybWlzc2lvbnNOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdEludDMyLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUFjY291bnRTZXR0aW5nc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFjY291bnRTZXR0aW5nczogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUFjY291bnRTdWJzY3JpcHRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBY2NvdW50SW5mbzogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUFuYWx5c2lzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQW5hbHlzaXM6IChfKSA9PiBkZV9BbmFseXNpcyhfLCBjb250ZXh0KSxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlQW5hbHlzaXNEZWZpbml0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQW5hbHlzaXNJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERlZmluaXRpb246IChfKSA9PiBkZV9BbmFseXNpc0RlZmluaXRpb24oXywgY29udGV4dCksXG4gICAgICAgIEVycm9yczogX2pzb24sXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXNvdXJjZVN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRoZW1lQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlQW5hbHlzaXNQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFuYWx5c2lzQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQW5hbHlzaXNJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFBlcm1pc3Npb25zOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlQXNzZXRCdW5kbGVFeHBvcnRKb2JDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBc3NldEJ1bmRsZUV4cG9ydEpvYklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXdzQWNjb3VudElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ2xvdWRGb3JtYXRpb25PdmVycmlkZVByb3BlcnR5Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEb3dubG9hZFVybDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEVycm9yczogX2pzb24sXG4gICAgICAgIEV4cG9ydEZvcm1hdDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEluY2x1ZGVBbGxEZXBlbmRlbmNpZXM6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgSW5jbHVkZUZvbGRlck1lbWJlcnM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbmNsdWRlRm9sZGVyTWVtYmVyc2hpcHM6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgSW5jbHVkZVBlcm1pc3Npb25zOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIEluY2x1ZGVUYWdzOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIEpvYlN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlc291cmNlQXJuczogX2pzb24sXG4gICAgICAgIFZhbGlkYXRpb25TdHJhdGVneTogX2pzb24sXG4gICAgICAgIFdhcm5pbmdzOiBfanNvbixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlQXNzZXRCdW5kbGVJbXBvcnRKb2JDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBc3NldEJ1bmRsZUltcG9ydEpvYklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXNzZXRCdW5kbGVJbXBvcnRTb3VyY2U6IF9qc29uLFxuICAgICAgICBBd3NBY2NvdW50SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRXJyb3JzOiBfanNvbixcbiAgICAgICAgRmFpbHVyZUFjdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEpvYlN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE92ZXJyaWRlUGFyYW1ldGVyczogKF8pID0+IGRlX0Fzc2V0QnVuZGxlSW1wb3J0Sm9iT3ZlcnJpZGVQYXJhbWV0ZXJzKF8sIGNvbnRleHQpLFxuICAgICAgICBPdmVycmlkZVBlcm1pc3Npb25zOiBfanNvbixcbiAgICAgICAgT3ZlcnJpZGVUYWdzOiBfanNvbixcbiAgICAgICAgT3ZlcnJpZGVWYWxpZGF0aW9uU3RyYXRlZ3k6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSb2xsYmFja0Vycm9yczogX2pzb24sXG4gICAgICAgIFdhcm5pbmdzOiBfanNvbixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlQnJhbmRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBCcmFuZERlZmluaXRpb246IF9qc29uLFxuICAgICAgICBCcmFuZERldGFpbDogKF8pID0+IGRlX0JyYW5kRGV0YWlsKF8sIGNvbnRleHQpLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUJyYW5kQXNzaWdubWVudENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEJyYW5kQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVCcmFuZFB1Ymxpc2hlZFZlcnNpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBCcmFuZERlZmluaXRpb246IF9qc29uLFxuICAgICAgICBCcmFuZERldGFpbDogKF8pID0+IGRlX0JyYW5kRGV0YWlsKF8sIGNvbnRleHQpLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUN1c3RvbVBlcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQ3VzdG9tUGVybWlzc2lvbnM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0SW50MzIsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlRGFzaGJvYXJkQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRGFzaGJvYXJkOiAoXykgPT4gZGVfRGFzaGJvYXJkKF8sIGNvbnRleHQpLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVEYXNoYm9hcmREZWZpbml0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRGFzaGJvYXJkSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXNoYm9hcmRQdWJsaXNoT3B0aW9uczogX2pzb24sXG4gICAgICAgIERlZmluaXRpb246IChfKSA9PiBkZV9EYXNoYm9hcmRWZXJzaW9uRGVmaW5pdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgRXJyb3JzOiBfanNvbixcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlc291cmNlU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVEYXNoYm9hcmRQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERhc2hib2FyZEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERhc2hib2FyZElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGlua1NoYXJpbmdDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgUGVybWlzc2lvbnM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVEYXNoYm9hcmRTbmFwc2hvdEpvYkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEF3c0FjY291bnRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEYXNoYm9hcmRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEpvYlN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExhc3RVcGRhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU25hcHNob3RDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfU25hcHNob3RDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBTbmFwc2hvdEpvYklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdEludDMyLFxuICAgICAgICBVc2VyQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlRGFzaGJvYXJkU25hcHNob3RKb2JSZXN1bHRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRXJyb3JJbmZvOiBfanNvbixcbiAgICAgICAgSm9iU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGFzdFVwZGF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXN1bHQ6IF9qc29uLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVEYXNoYm9hcmRzUUFDb25maWd1cmF0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRGFzaGJvYXJkc1FBU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlRGF0YVNldENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERhdGFTZXQ6IChfKSA9PiBkZV9EYXRhU2V0KF8sIGNvbnRleHQpLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVEYXRhU2V0UGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXRhU2V0QXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGF0YVNldElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUGVybWlzc2lvbnM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVEYXRhU2V0UmVmcmVzaFByb3BlcnRpZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXRhU2V0UmVmcmVzaFByb3BlcnRpZXM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVEYXRhU291cmNlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRGF0YVNvdXJjZTogKF8pID0+IGRlX0RhdGFTb3VyY2UoXywgY29udGV4dCksXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZURhdGFTb3VyY2VQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERhdGFTb3VyY2VBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXRhU291cmNlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBQZXJtaXNzaW9uczogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZURlZmF1bHRRQnVzaW5lc3NBcHBsaWNhdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFwcGxpY2F0aW9uSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVGb2xkZXJDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBGb2xkZXI6IChfKSA9PiBkZV9Gb2xkZXIoXywgY29udGV4dCksXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUZvbGRlclBlcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRm9sZGVySWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBQZXJtaXNzaW9uczogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUZvbGRlclJlc29sdmVkUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBGb2xkZXJJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFBlcm1pc3Npb25zOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlR3JvdXBDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBHcm91cDogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUdyb3VwTWVtYmVyc2hpcENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEdyb3VwTWVtYmVyOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlSUFNUG9saWN5QXNzaWdubWVudENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIElBTVBvbGljeUFzc2lnbm1lbnQ6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVJbmdlc3Rpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBJbmdlc3Rpb246IChfKSA9PiBkZV9Jbmdlc3Rpb24oXywgY29udGV4dCksXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZUlwUmVzdHJpY3Rpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBd3NBY2NvdW50SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBFbmFibGVkOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIElwUmVzdHJpY3Rpb25SdWxlTWFwOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVnBjRW5kcG9pbnRJZFJlc3RyaWN0aW9uUnVsZU1hcDogX2pzb24sXG4gICAgICAgIFZwY0lkUmVzdHJpY3Rpb25SdWxlTWFwOiBfanNvbixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlS2V5UmVnaXN0cmF0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXdzQWNjb3VudElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgS2V5UmVnaXN0cmF0aW9uOiBfanNvbixcbiAgICAgICAgUURhdGFLZXk6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0SW50MzIsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlTmFtZXNwYWNlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTmFtZXNwYWNlOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlUVBlcnNvbmFsaXphdGlvbkNvbmZpZ3VyYXRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBQZXJzb25hbGl6YXRpb25Nb2RlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlUXVpY2tTaWdodFFTZWFyY2hDb25maWd1cmF0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUVNlYXJjaFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZVJlZnJlc2hTY2hlZHVsZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlZnJlc2hTY2hlZHVsZTogKF8pID0+IGRlX1JlZnJlc2hTY2hlZHVsZShfLCBjb250ZXh0KSxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlUm9sZUN1c3RvbVBlcm1pc3Npb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBDdXN0b21QZXJtaXNzaW9uc05hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0SW50MzIsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlVGVtcGxhdGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZTogKF8pID0+IGRlX1RlbXBsYXRlKF8sIGNvbnRleHQpLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVUZW1wbGF0ZUFsaWFzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGVtcGxhdGVBbGlhczogX2pzb24sXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZVRlbXBsYXRlRGVmaW5pdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERlZmluaXRpb246IChfKSA9PiBkZV9UZW1wbGF0ZVZlcnNpb25EZWZpbml0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBFcnJvcnM6IF9qc29uLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVzb3VyY2VTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVUZW1wbGF0ZVBlcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUGVybWlzc2lvbnM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZUFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRlbXBsYXRlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVUaGVtZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRoZW1lOiAoXykgPT4gZGVfVGhlbWUoXywgY29udGV4dCksXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZVRoZW1lQWxpYXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaGVtZUFsaWFzOiBfanNvbixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlVGhlbWVQZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFBlcm1pc3Npb25zOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaGVtZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0Rlc2NyaWJlVG9waWNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDdXN0b21JbnN0cnVjdGlvbnM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb3BpYzogX2pzb24sXG4gICAgICAgIFRvcGljSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVUb3BpY1Blcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUGVybWlzc2lvbnM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb3BpY0FybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRvcGljSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVUb3BpY1JlZnJlc2hDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZWZyZXNoRGV0YWlsczogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZVRvcGljUmVmcmVzaFNjaGVkdWxlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRGF0YXNldEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlZnJlc2hTY2hlZHVsZTogKF8pID0+IGRlX1RvcGljUmVmcmVzaFNjaGVkdWxlKF8sIGNvbnRleHQpLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb3BpY0FybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRvcGljSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfRGVzY3JpYmVVc2VyQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVXNlcjogX2pzb24sXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9EZXNjcmliZVZQQ0Nvbm5lY3Rpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIFZQQ0Nvbm5lY3Rpb246IChfKSA9PiBkZV9WUENDb25uZWN0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZW5lcmF0ZUVtYmVkVXJsRm9yQW5vbnltb3VzVXNlckNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFub255bW91c1VzZXJBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBFbWJlZFVybDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZW5lcmF0ZUVtYmVkVXJsRm9yUmVnaXN0ZXJlZFVzZXJDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBFbWJlZFVybDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZW5lcmF0ZUVtYmVkVXJsRm9yUmVnaXN0ZXJlZFVzZXJXaXRoSWRlbnRpdHlDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBFbWJlZFVybDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9HZXREYXNoYm9hcmRFbWJlZFVybENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEVtYmVkVXJsOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0dldFNlc3Npb25FbWJlZFVybENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEVtYmVkVXJsOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RBbmFseXNlc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFuYWx5c2lzU3VtbWFyeUxpc3Q6IChfKSA9PiBkZV9BbmFseXNpc1N1bW1hcnlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdEFzc2V0QnVuZGxlRXhwb3J0Sm9ic0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFzc2V0QnVuZGxlRXhwb3J0Sm9iU3VtbWFyeUxpc3Q6IChfKSA9PiBkZV9Bc3NldEJ1bmRsZUV4cG9ydEpvYlN1bW1hcnlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdEFzc2V0QnVuZGxlSW1wb3J0Sm9ic0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFzc2V0QnVuZGxlSW1wb3J0Sm9iU3VtbWFyeUxpc3Q6IChfKSA9PiBkZV9Bc3NldEJ1bmRsZUltcG9ydEpvYlN1bW1hcnlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdEJyYW5kc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEJyYW5kczogKF8pID0+IGRlX0JyYW5kU3VtbWFyeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RDdXN0b21QZXJtaXNzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEN1c3RvbVBlcm1pc3Npb25zTGlzdDogX2pzb24sXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0RGFzaGJvYXJkc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERhc2hib2FyZFN1bW1hcnlMaXN0OiAoXykgPT4gZGVfRGFzaGJvYXJkU3VtbWFyeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0RGFzaGJvYXJkVmVyc2lvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXNoYm9hcmRWZXJzaW9uU3VtbWFyeUxpc3Q6IChfKSA9PiBkZV9EYXNoYm9hcmRWZXJzaW9uU3VtbWFyeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0RGF0YVNldHNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXRhU2V0U3VtbWFyaWVzOiAoXykgPT4gZGVfRGF0YVNldFN1bW1hcnlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdERhdGFTb3VyY2VzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRGF0YVNvdXJjZXM6IChfKSA9PiBkZV9EYXRhU291cmNlTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RGb2xkZXJNZW1iZXJzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRm9sZGVyTWVtYmVyTGlzdDogX2pzb24sXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0Rm9sZGVyc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEZvbGRlclN1bW1hcnlMaXN0OiAoXykgPT4gZGVfRm9sZGVyU3VtbWFyeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0Rm9sZGVyc0ZvclJlc291cmNlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRm9sZGVyczogX2pzb24sXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0R3JvdXBNZW1iZXJzaGlwc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEdyb3VwTWVtYmVyTGlzdDogX2pzb24sXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0R3JvdXBzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgR3JvdXBMaXN0OiBfanNvbixcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RJQU1Qb2xpY3lBc3NpZ25tZW50c0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIElBTVBvbGljeUFzc2lnbm1lbnRzOiBfanNvbixcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RJQU1Qb2xpY3lBc3NpZ25tZW50c0ZvclVzZXJDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBY3RpdmVBc3NpZ25tZW50czogX2pzb24sXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0SWRlbnRpdHlQcm9wYWdhdGlvbkNvbmZpZ3NDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTZXJ2aWNlczogX2pzb24sXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0SW5nZXN0aW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEluZ2VzdGlvbnM6IChfKSA9PiBkZV9Jbmdlc3Rpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdE5hbWVzcGFjZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBOYW1lc3BhY2VzOiBfanNvbixcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RSZWZyZXNoU2NoZWR1bGVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVmcmVzaFNjaGVkdWxlczogKF8pID0+IGRlX1JlZnJlc2hTY2hlZHVsZXMoXywgY29udGV4dCksXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0Um9sZU1lbWJlcnNoaXBzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTWVtYmVyc0xpc3Q6IF9qc29uLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFRhZ3NGb3JSZXNvdXJjZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRhZ3M6IF9qc29uLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFRlbXBsYXRlQWxpYXNlc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRlbXBsYXRlQWxpYXNMaXN0OiBfanNvbixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RUZW1wbGF0ZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZVN1bW1hcnlMaXN0OiAoXykgPT4gZGVfVGVtcGxhdGVTdW1tYXJ5TGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RUZW1wbGF0ZVZlcnNpb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGVtcGxhdGVWZXJzaW9uU3VtbWFyeUxpc3Q6IChfKSA9PiBkZV9UZW1wbGF0ZVZlcnNpb25TdW1tYXJ5TGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX0xpc3RUaGVtZUFsaWFzZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaGVtZUFsaWFzTGlzdDogX2pzb24sXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0VGhlbWVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVTdW1tYXJ5TGlzdDogKF8pID0+IGRlX1RoZW1lU3VtbWFyeUxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0VGhlbWVWZXJzaW9uc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRoZW1lVmVyc2lvblN1bW1hcnlMaXN0OiAoXykgPT4gZGVfVGhlbWVWZXJzaW9uU3VtbWFyeUxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0VG9waWNSZWZyZXNoU2NoZWR1bGVzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVmcmVzaFNjaGVkdWxlczogKF8pID0+IGRlX1RvcGljUmVmcmVzaFNjaGVkdWxlU3VtbWFyaWVzKF8sIGNvbnRleHQpLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb3BpY0FybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRvcGljSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFRvcGljUmV2aWV3ZWRBbnN3ZXJzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQW5zd2VyczogKF8pID0+IGRlX1RvcGljUmV2aWV3ZWRBbnN3ZXJzKF8sIGNvbnRleHQpLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb3BpY0FybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRvcGljSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfTGlzdFRvcGljc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRvcGljc1N1bW1hcmllczogX2pzb24sXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0VXNlckdyb3Vwc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEdyb3VwTGlzdDogX2pzb24sXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0VXNlcnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBVc2VyTGlzdDogX2pzb24sXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9MaXN0VlBDQ29ubmVjdGlvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWUENDb25uZWN0aW9uU3VtbWFyaWVzOiAoXykgPT4gZGVfVlBDQ29ubmVjdGlvblN1bW1hcnlMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfUHJlZGljdFFBUmVzdWx0c0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFkZGl0aW9uYWxSZXN1bHRzOiBfanNvbixcbiAgICAgICAgUHJpbWFyeVJlc3VsdDogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9QdXREYXRhU2V0UmVmcmVzaFByb3BlcnRpZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfUmVnaXN0ZXJVc2VyQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVXNlcjogX2pzb24sXG4gICAgICAgIFVzZXJJbnZpdGF0aW9uVXJsOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1Jlc3RvcmVBbmFseXNpc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFuYWx5c2lzSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXN0b3JhdGlvbkZhaWxlZEZvbGRlckFybnM6IF9qc29uLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfU2VhcmNoQW5hbHlzZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBbmFseXNpc1N1bW1hcnlMaXN0OiAoXykgPT4gZGVfQW5hbHlzaXNTdW1tYXJ5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1NlYXJjaERhc2hib2FyZHNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXNoYm9hcmRTdW1tYXJ5TGlzdDogKF8pID0+IGRlX0Rhc2hib2FyZFN1bW1hcnlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfU2VhcmNoRGF0YVNldHNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXRhU2V0U3VtbWFyaWVzOiAoXykgPT4gZGVfRGF0YVNldFN1bW1hcnlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfU2VhcmNoRGF0YVNvdXJjZXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXRhU291cmNlU3VtbWFyaWVzOiAoXykgPT4gZGVfRGF0YVNvdXJjZVN1bW1hcnlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfU2VhcmNoRm9sZGVyc0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEZvbGRlclN1bW1hcnlMaXN0OiAoXykgPT4gZGVfRm9sZGVyU3VtbWFyeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIE5leHRUb2tlbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TZWFyY2hHcm91cHNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBHcm91cExpc3Q6IF9qc29uLFxuICAgICAgICBOZXh0VG9rZW46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfU2VhcmNoVG9waWNzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTmV4dFRva2VuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9waWNTdW1tYXJ5TGlzdDogX2pzb24sXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TdGFydEFzc2V0QnVuZGxlRXhwb3J0Sm9iQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXNzZXRCdW5kbGVFeHBvcnRKb2JJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TdGFydEFzc2V0QnVuZGxlSW1wb3J0Sm9iQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXNzZXRCdW5kbGVJbXBvcnRKb2JJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TdGFydERhc2hib2FyZFNuYXBzaG90Sm9iQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU25hcHNob3RKb2JJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9TdGFydERhc2hib2FyZFNuYXBzaG90Sm9iU2NoZWR1bGVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVGFnUmVzb3VyY2VDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVW50YWdSZXNvdXJjZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVBY2NvdW50Q3VzdG9taXphdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFjY291bnRDdXN0b21pemF0aW9uOiBfanNvbixcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXdzQWNjb3VudElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTmFtZXNwYWNlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZUFjY291bnRDdXN0b21QZXJtaXNzaW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdEludDMyLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVBY2NvdW50U2V0dGluZ3NDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlQW5hbHlzaXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBbmFseXNpc0lkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVXBkYXRlU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZUFuYWx5c2lzUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBbmFseXNpc0FybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEFuYWx5c2lzSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBQZXJtaXNzaW9uczogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVBcHBsaWNhdGlvbldpdGhUb2tlbkV4Y2hhbmdlR3JhbnRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlQnJhbmRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBCcmFuZERlZmluaXRpb246IF9qc29uLFxuICAgICAgICBCcmFuZERldGFpbDogKF8pID0+IGRlX0JyYW5kRGV0YWlsKF8sIGNvbnRleHQpLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVCcmFuZEFzc2lnbm1lbnRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBCcmFuZEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZUJyYW5kUHVibGlzaGVkVmVyc2lvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZlcnNpb25JZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZUN1c3RvbVBlcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdEludDMyLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVEYXNoYm9hcmRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGlvblN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERhc2hib2FyZElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdEludDMyLFxuICAgICAgICBWZXJzaW9uQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlRGFzaGJvYXJkTGlua3NDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXNoYm9hcmRBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMaW5rRW50aXRpZXM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlRGFzaGJvYXJkUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXNoYm9hcmRBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXNoYm9hcmRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExpbmtTaGFyaW5nQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIFBlcm1pc3Npb25zOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZURhc2hib2FyZFB1Ymxpc2hlZFZlcnNpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXNoYm9hcmRBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXNoYm9hcmRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVEYXNoYm9hcmRzUUFDb25maWd1cmF0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRGFzaGJvYXJkc1FBU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZURhdGFTZXRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXRhU2V0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbmdlc3Rpb25Bcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbmdlc3Rpb25JZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVEYXRhU2V0UGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBEYXRhU2V0QXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGF0YVNldElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZURhdGFTb3VyY2VDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXRhU291cmNlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBVcGRhdGVTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlRGF0YVNvdXJjZVBlcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgRGF0YVNvdXJjZUFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERhdGFTb3VyY2VJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVEZWZhdWx0UUJ1c2luZXNzQXBwbGljYXRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlRm9sZGVyQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRm9sZGVySWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlRm9sZGVyUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBGb2xkZXJJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFBlcm1pc3Npb25zOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdEludDMyLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVHcm91cENvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEdyb3VwOiBfanNvbixcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZUlBTVBvbGljeUFzc2lnbm1lbnRDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBc3NpZ25tZW50SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBc3NpZ25tZW50TmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEFzc2lnbm1lbnRTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJZGVudGl0aWVzOiBfanNvbixcbiAgICAgICAgUG9saWN5QXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZUlkZW50aXR5UHJvcGFnYXRpb25Db25maWdDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlSXBSZXN0cmljdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEF3c0FjY291bnRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVLZXlSZWdpc3RyYXRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBGYWlsZWRLZXlSZWdpc3RyYXRpb246IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdWNjZXNzZnVsS2V5UmVnaXN0cmF0aW9uOiBfanNvbixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlUHVibGljU2hhcmluZ1NldHRpbmdzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZVFQZXJzb25hbGl6YXRpb25Db25maWd1cmF0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUGVyc29uYWxpemF0aW9uTW9kZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVRdWlja1NpZ2h0UVNlYXJjaENvbmZpZ3VyYXRpb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBRU2VhcmNoU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZVJlZnJlc2hTY2hlZHVsZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNjaGVkdWxlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlUm9sZUN1c3RvbVBlcm1pc3Npb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0SW50MzIsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZVNQSUNFQ2FwYWNpdHlDb25maWd1cmF0aW9uQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZVRlbXBsYXRlQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRpb25TdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmVyc2lvbkFybjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVUZW1wbGF0ZUFsaWFzQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGVtcGxhdGVBbGlhczogX2pzb24sXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVUZW1wbGF0ZVBlcm1pc3Npb25zQ29tbWFuZCA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBpZiAob3V0cHV0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiBvdXRwdXQuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbW1hbmRFcnJvcihvdXRwdXQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShvdXRwdXQpLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBfX2V4cGVjdE5vbk51bGwoX19leHBlY3RPYmplY3QoYXdhaXQgcGFyc2VCb2R5KG91dHB1dC5ib2R5LCBjb250ZXh0KSksIFwiYm9keVwiKTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgUGVybWlzc2lvbnM6IF9qc29uLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZUFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRlbXBsYXRlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlVGhlbWVDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGlvblN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRoZW1lSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWZXJzaW9uQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZVRoZW1lQWxpYXNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaGVtZUFsaWFzOiBfanNvbixcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZVRoZW1lUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBQZXJtaXNzaW9uczogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRoZW1lQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVUb3BpY0NvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlZnJlc2hBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb3BpY0lkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIG1hcChjb250ZW50cywge1xuICAgICAgICBTdGF0dXM6IFssIG91dHB1dC5zdGF0dXNDb2RlXSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGRlX1VwZGF0ZVRvcGljUGVybWlzc2lvbnNDb21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBQZXJtaXNzaW9uczogX2pzb24sXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRvcGljQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9waWNJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmV4cG9ydCBjb25zdCBkZV9VcGRhdGVUb3BpY1JlZnJlc2hTY2hlZHVsZUNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIERhdGFzZXRBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb3BpY0FybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRvcGljSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlVXNlckNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFVzZXI6IF9qc29uLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlVXNlckN1c3RvbVBlcm1pc3Npb25Db21tYW5kID0gYXN5bmMgKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuc3RhdHVzQ29kZSAhPT0gMjAwICYmIG91dHB1dC5zdGF0dXNDb2RlID49IDMwMCkge1xuICAgICAgICByZXR1cm4gZGVfQ29tbWFuZEVycm9yKG91dHB1dCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKG91dHB1dCksXG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IF9fZXhwZWN0Tm9uTnVsbChfX2V4cGVjdE9iamVjdChhd2FpdCBwYXJzZUJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpKSwgXCJib2R5XCIpO1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgbWFwKGNvbnRlbnRzLCB7XG4gICAgICAgIFN0YXR1czogWywgb3V0cHV0LnN0YXR1c0NvZGVdLFxuICAgIH0pO1xuICAgIHJldHVybiBjb250ZW50cztcbn07XG5leHBvcnQgY29uc3QgZGVfVXBkYXRlVlBDQ29ubmVjdGlvbkNvbW1hbmQgPSBhc3luYyAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG91dHB1dC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgb3V0cHV0LnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgIHJldHVybiBkZV9Db21tYW5kRXJyb3Iob3V0cHV0LCBjb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEob3V0cHV0KSxcbiAgICB9KTtcbiAgICBjb25zdCBkYXRhID0gX19leHBlY3ROb25OdWxsKF9fZXhwZWN0T2JqZWN0KGF3YWl0IHBhcnNlQm9keShvdXRwdXQuYm9keSwgY29udGV4dCkpLCBcImJvZHlcIik7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEF2YWlsYWJpbGl0eVN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFVwZGF0ZVN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZQQ0Nvbm5lY3Rpb25JZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBtYXAoY29udGVudHMsIHtcbiAgICAgICAgU3RhdHVzOiBbLCBvdXRwdXQuc3RhdHVzQ29kZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xufTtcbmNvbnN0IGRlX0NvbW1hbmRFcnJvciA9IGFzeW5jIChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBwYXJzZWRPdXRwdXQgPSB7XG4gICAgICAgIC4uLm91dHB1dCxcbiAgICAgICAgYm9keTogYXdhaXQgcGFyc2VFcnJvckJvZHkob3V0cHV0LmJvZHksIGNvbnRleHQpLFxuICAgIH07XG4gICAgY29uc3QgZXJyb3JDb2RlID0gbG9hZFJlc3RKc29uRXJyb3JDb2RlKG91dHB1dCwgcGFyc2VkT3V0cHV0LmJvZHkpO1xuICAgIHN3aXRjaCAoZXJyb3JDb2RlKSB7XG4gICAgICAgIGNhc2UgXCJBY2Nlc3NEZW5pZWRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MucXVpY2tzaWdodCNBY2Nlc3NEZW5pZWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0FjY2Vzc0RlbmllZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiSW50ZXJuYWxGYWlsdXJlRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnF1aWNrc2lnaHQjSW50ZXJuYWxGYWlsdXJlRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnRlcm5hbEZhaWx1cmVFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludmFsaWRQYXJhbWV0ZXJWYWx1ZUV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5xdWlja3NpZ2h0I0ludmFsaWRQYXJhbWV0ZXJWYWx1ZUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZFBhcmFtZXRlclZhbHVlRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJSZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnF1aWNrc2lnaHQjUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfUmVzb3VyY2VOb3RGb3VuZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiVGhyb3R0bGluZ0V4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5xdWlja3NpZ2h0I1Rocm90dGxpbmdFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1Rocm90dGxpbmdFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNvbmZsaWN0RXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnF1aWNrc2lnaHQjQ29uZmxpY3RFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0NvbmZsaWN0RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJSZXNvdXJjZUV4aXN0c0V4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5xdWlja3NpZ2h0I1Jlc291cmNlRXhpc3RzRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9SZXNvdXJjZUV4aXN0c0V4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiUmVzb3VyY2VVbmF2YWlsYWJsZUV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5xdWlja3NpZ2h0I1Jlc291cmNlVW5hdmFpbGFibGVFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1Jlc291cmNlVW5hdmFpbGFibGVFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlByZWNvbmRpdGlvbk5vdE1ldEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5xdWlja3NpZ2h0I1ByZWNvbmRpdGlvbk5vdE1ldEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfUHJlY29uZGl0aW9uTm90TWV0RXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnF1aWNrc2lnaHQjTGltaXRFeGNlZWRlZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfTGltaXRFeGNlZWRlZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiVW5zdXBwb3J0ZWRVc2VyRWRpdGlvbkV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5xdWlja3NpZ2h0I1Vuc3VwcG9ydGVkVXNlckVkaXRpb25FeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1Vuc3VwcG9ydGVkVXNlckVkaXRpb25FeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkludGVybmFsU2VydmVyRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnF1aWNrc2lnaHQjSW50ZXJuYWxTZXJ2ZXJFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX0ludGVybmFsU2VydmVyRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkUmVxdWVzdEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5xdWlja3NpZ2h0I0ludmFsaWRSZXF1ZXN0RXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9JbnZhbGlkUmVxdWVzdEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiQ3VzdG9tZXJNYW5hZ2VkS2V5VW5hdmFpbGFibGVFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MucXVpY2tzaWdodCNDdXN0b21lck1hbmFnZWRLZXlVbmF2YWlsYWJsZUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfQ3VzdG9tZXJNYW5hZ2VkS2V5VW5hdmFpbGFibGVFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIkNvbmN1cnJlbnRVcGRhdGluZ0V4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5xdWlja3NpZ2h0I0NvbmN1cnJlbnRVcGRhdGluZ0V4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfQ29uY3VycmVudFVwZGF0aW5nRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJJbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnF1aWNrc2lnaHQjSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiU2Vzc2lvbkxpZmV0aW1lSW5NaW51dGVzSW52YWxpZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5xdWlja3NpZ2h0I1Nlc3Npb25MaWZldGltZUluTWludXRlc0ludmFsaWRFeGNlcHRpb25cIjpcbiAgICAgICAgICAgIHRocm93IGF3YWl0IGRlX1Nlc3Npb25MaWZldGltZUluTWludXRlc0ludmFsaWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIlVuc3VwcG9ydGVkUHJpY2luZ1BsYW5FeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MucXVpY2tzaWdodCNVbnN1cHBvcnRlZFByaWNpbmdQbGFuRXhjZXB0aW9uXCI6XG4gICAgICAgICAgICB0aHJvdyBhd2FpdCBkZV9VbnN1cHBvcnRlZFByaWNpbmdQbGFuRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGNhc2UgXCJRdWlja1NpZ2h0VXNlck5vdEZvdW5kRXhjZXB0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJjb20uYW1hem9uYXdzLnF1aWNrc2lnaHQjUXVpY2tTaWdodFVzZXJOb3RGb3VuZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfUXVpY2tTaWdodFVzZXJOb3RGb3VuZEV4Y2VwdGlvblJlcyhwYXJzZWRPdXRwdXQsIGNvbnRleHQpO1xuICAgICAgICBjYXNlIFwiRG9tYWluTm90V2hpdGVsaXN0ZWRFeGNlcHRpb25cIjpcbiAgICAgICAgY2FzZSBcImNvbS5hbWF6b25hd3MucXVpY2tzaWdodCNEb21haW5Ob3RXaGl0ZWxpc3RlZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfRG9tYWluTm90V2hpdGVsaXN0ZWRFeGNlcHRpb25SZXMocGFyc2VkT3V0cHV0LCBjb250ZXh0KTtcbiAgICAgICAgY2FzZSBcIklkZW50aXR5VHlwZU5vdFN1cHBvcnRlZEV4Y2VwdGlvblwiOlxuICAgICAgICBjYXNlIFwiY29tLmFtYXpvbmF3cy5xdWlja3NpZ2h0I0lkZW50aXR5VHlwZU5vdFN1cHBvcnRlZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgdGhyb3cgYXdhaXQgZGVfSWRlbnRpdHlUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uUmVzKHBhcnNlZE91dHB1dCwgY29udGV4dCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRCb2R5ID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dEZWZhdWx0RXJyb3Ioe1xuICAgICAgICAgICAgICAgIG91dHB1dCxcbiAgICAgICAgICAgICAgICBwYXJzZWRCb2R5LFxuICAgICAgICAgICAgICAgIGVycm9yQ29kZSxcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn07XG5jb25zdCB0aHJvd0RlZmF1bHRFcnJvciA9IHdpdGhCYXNlRXhjZXB0aW9uKF9fQmFzZUV4Y2VwdGlvbik7XG5jb25zdCBkZV9BY2Nlc3NEZW5pZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTWVzc2FnZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQWNjZXNzRGVuaWVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9Db25jdXJyZW50VXBkYXRpbmdFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTWVzc2FnZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQ29uY3VycmVudFVwZGF0aW5nRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9Db25mbGljdEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBDb25mbGljdEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59O1xuY29uc3QgZGVfQ3VzdG9tZXJNYW5hZ2VkS2V5VW5hdmFpbGFibGVFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTWVzc2FnZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgQ3VzdG9tZXJNYW5hZ2VkS2V5VW5hdmFpbGFibGVFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgcGFyc2VkT3V0cHV0LmJvZHkpO1xufTtcbmNvbnN0IGRlX0RvbWFpbk5vdFdoaXRlbGlzdGVkRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHt9KTtcbiAgICBjb25zdCBkYXRhID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE1lc3NhZ2U6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IERvbWFpbk5vdFdoaXRlbGlzdGVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9JZGVudGl0eVR5cGVOb3RTdXBwb3J0ZWRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTWVzc2FnZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSWRlbnRpdHlUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9JbnRlcm5hbEZhaWx1cmVFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTWVzc2FnZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW50ZXJuYWxGYWlsdXJlRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9JbnRlcm5hbFNlcnZlckV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnRlcm5hbFNlcnZlckV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59O1xuY29uc3QgZGVfSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkUGFyYW1ldGVyVmFsdWVFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTWVzc2FnZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgSW52YWxpZFBhcmFtZXRlclZhbHVlRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9JbnZhbGlkUmVxdWVzdEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBJbnZhbGlkUmVxdWVzdEV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59O1xuY29uc3QgZGVfTGltaXRFeGNlZWRlZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVzb3VyY2VUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9QcmVjb25kaXRpb25Ob3RNZXRFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTWVzc2FnZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgUHJlY29uZGl0aW9uTm90TWV0RXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9RdWlja1NpZ2h0VXNlck5vdEZvdW5kRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHt9KTtcbiAgICBjb25zdCBkYXRhID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE1lc3NhZ2U6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFF1aWNrU2lnaHRVc2VyTm90Rm91bmRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgcGFyc2VkT3V0cHV0LmJvZHkpO1xufTtcbmNvbnN0IGRlX1Jlc291cmNlRXhpc3RzRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHt9KTtcbiAgICBjb25zdCBkYXRhID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE1lc3NhZ2U6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXNvdXJjZVR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFJlc291cmNlRXhpc3RzRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9SZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHt9KTtcbiAgICBjb25zdCBkYXRhID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE1lc3NhZ2U6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXNvdXJjZVR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFJlc291cmNlTm90Rm91bmRFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgcGFyc2VkT3V0cHV0LmJvZHkpO1xufTtcbmNvbnN0IGRlX1Jlc291cmNlVW5hdmFpbGFibGVFeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTWVzc2FnZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlc291cmNlVHlwZTogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgUmVzb3VyY2VVbmF2YWlsYWJsZUV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59O1xuY29uc3QgZGVfU2Vzc2lvbkxpZmV0aW1lSW5NaW51dGVzSW52YWxpZEV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBTZXNzaW9uTGlmZXRpbWVJbk1pbnV0ZXNJbnZhbGlkRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBkZV9UaHJvdHRsaW5nRXhjZXB0aW9uUmVzID0gYXN5bmMgKHBhcnNlZE91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnRzID0gbWFwKHt9KTtcbiAgICBjb25zdCBkYXRhID0gcGFyc2VkT3V0cHV0LmJvZHk7XG4gICAgY29uc3QgZG9jID0gdGFrZShkYXRhLCB7XG4gICAgICAgIE1lc3NhZ2U6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZXF1ZXN0SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24oY29udGVudHMsIGRvYyk7XG4gICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IFRocm90dGxpbmdFeGNlcHRpb24oe1xuICAgICAgICAkbWV0YWRhdGE6IGRlc2VyaWFsaXplTWV0YWRhdGEocGFyc2VkT3V0cHV0KSxcbiAgICAgICAgLi4uY29udGVudHMsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGVTZXJ2aWNlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgcGFyc2VkT3V0cHV0LmJvZHkpO1xufTtcbmNvbnN0IGRlX1Vuc3VwcG9ydGVkUHJpY2luZ1BsYW5FeGNlcHRpb25SZXMgPSBhc3luYyAocGFyc2VkT3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgY29udGVudHMgPSBtYXAoe30pO1xuICAgIGNvbnN0IGRhdGEgPSBwYXJzZWRPdXRwdXQuYm9keTtcbiAgICBjb25zdCBkb2MgPSB0YWtlKGRhdGEsIHtcbiAgICAgICAgTWVzc2FnZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlcXVlc3RJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihjb250ZW50cywgZG9jKTtcbiAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgVW5zdXBwb3J0ZWRQcmljaW5nUGxhbkV4Y2VwdGlvbih7XG4gICAgICAgICRtZXRhZGF0YTogZGVzZXJpYWxpemVNZXRhZGF0YShwYXJzZWRPdXRwdXQpLFxuICAgICAgICAuLi5jb250ZW50cyxcbiAgICB9KTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZVNlcnZpY2VFeGNlcHRpb24oZXhjZXB0aW9uLCBwYXJzZWRPdXRwdXQuYm9keSk7XG59O1xuY29uc3QgZGVfVW5zdXBwb3J0ZWRVc2VyRWRpdGlvbkV4Y2VwdGlvblJlcyA9IGFzeW5jIChwYXJzZWRPdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBjb250ZW50cyA9IG1hcCh7fSk7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlZE91dHB1dC5ib2R5O1xuICAgIGNvbnN0IGRvYyA9IHRha2UoZGF0YSwge1xuICAgICAgICBNZXNzYWdlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRlbnRzLCBkb2MpO1xuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IG5ldyBVbnN1cHBvcnRlZFVzZXJFZGl0aW9uRXhjZXB0aW9uKHtcbiAgICAgICAgJG1ldGFkYXRhOiBkZXNlcmlhbGl6ZU1ldGFkYXRhKHBhcnNlZE91dHB1dCksXG4gICAgICAgIC4uLmNvbnRlbnRzLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2RlY29yYXRlU2VydmljZUV4Y2VwdGlvbihleGNlcHRpb24sIHBhcnNlZE91dHB1dC5ib2R5KTtcbn07XG5jb25zdCBzZV9BZ2dyZWdhdGlvbkZ1bmN0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQXR0cmlidXRlQWdncmVnYXRpb25GdW5jdGlvbjogX2pzb24sXG4gICAgICAgIENhdGVnb3JpY2FsQWdncmVnYXRpb25GdW5jdGlvbjogW10sXG4gICAgICAgIERhdGVBZ2dyZWdhdGlvbkZ1bmN0aW9uOiBbXSxcbiAgICAgICAgTnVtZXJpY2FsQWdncmVnYXRpb25GdW5jdGlvbjogKF8pID0+IHNlX051bWVyaWNhbEFnZ3JlZ2F0aW9uRnVuY3Rpb24oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQWdncmVnYXRpb25Tb3J0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFnZ3JlZ2F0aW9uRnVuY3Rpb246IChfKSA9PiBzZV9BZ2dyZWdhdGlvbkZ1bmN0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBTb3J0RGlyZWN0aW9uOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9BZ2dyZWdhdGlvblNvcnRDb25maWd1cmF0aW9uTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9BZ2dyZWdhdGlvblNvcnRDb25maWd1cmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9BbmFseXNpc0RlZmluaXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBbmFseXNpc0RlZmF1bHRzOiBfanNvbixcbiAgICAgICAgQ2FsY3VsYXRlZEZpZWxkczogX2pzb24sXG4gICAgICAgIENvbHVtbkNvbmZpZ3VyYXRpb25zOiBfanNvbixcbiAgICAgICAgRGF0YVNldElkZW50aWZpZXJEZWNsYXJhdGlvbnM6IF9qc29uLFxuICAgICAgICBGaWx0ZXJHcm91cHM6IChfKSA9PiBzZV9GaWx0ZXJHcm91cExpc3QoXywgY29udGV4dCksXG4gICAgICAgIE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBQYXJhbWV0ZXJEZWNsYXJhdGlvbnM6IChfKSA9PiBzZV9QYXJhbWV0ZXJEZWNsYXJhdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFF1ZXJ5RXhlY3V0aW9uT3B0aW9uczogX2pzb24sXG4gICAgICAgIFNoZWV0czogKF8pID0+IHNlX1NoZWV0RGVmaW5pdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFN0YXRpY0ZpbGVzOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9BcmNBeGlzQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFJhbmdlOiAoXykgPT4gc2VfQXJjQXhpc0Rpc3BsYXlSYW5nZShfLCBjb250ZXh0KSxcbiAgICAgICAgUmVzZXJ2ZVJhbmdlOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9BcmNBeGlzRGlzcGxheVJhbmdlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgTWF4OiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgICAgICBNaW46IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQXJjQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFyY0FuZ2xlOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgICAgICBBcmNUaGlja25lc3M6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0Fzc2V0QnVuZGxlSW1wb3J0Sm9iT3ZlcnJpZGVQYXJhbWV0ZXJzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQW5hbHlzZXM6IF9qc29uLFxuICAgICAgICBEYXNoYm9hcmRzOiBfanNvbixcbiAgICAgICAgRGF0YVNldHM6IF9qc29uLFxuICAgICAgICBEYXRhU291cmNlczogX2pzb24sXG4gICAgICAgIEZvbGRlcnM6IF9qc29uLFxuICAgICAgICBSZWZyZXNoU2NoZWR1bGVzOiAoXykgPT4gc2VfQXNzZXRCdW5kbGVJbXBvcnRKb2JSZWZyZXNoU2NoZWR1bGVPdmVycmlkZVBhcmFtZXRlcnNMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBSZXNvdXJjZUlkT3ZlcnJpZGVDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgVGhlbWVzOiBfanNvbixcbiAgICAgICAgVlBDQ29ubmVjdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0Fzc2V0QnVuZGxlSW1wb3J0Sm9iUmVmcmVzaFNjaGVkdWxlT3ZlcnJpZGVQYXJhbWV0ZXJzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGF0YVNldElkOiBbXSxcbiAgICAgICAgU2NoZWR1bGVJZDogW10sXG4gICAgICAgIFN0YXJ0QWZ0ZXJEYXRlVGltZTogKF8pID0+IF8uZ2V0VGltZSgpIC8gMV8wMDAsXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQXNzZXRCdW5kbGVJbXBvcnRKb2JSZWZyZXNoU2NoZWR1bGVPdmVycmlkZVBhcmFtZXRlcnNMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0Fzc2V0QnVuZGxlSW1wb3J0Sm9iUmVmcmVzaFNjaGVkdWxlT3ZlcnJpZGVQYXJhbWV0ZXJzKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Bc3NldEJ1bmRsZUltcG9ydFNvdXJjZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEJvZHk6IGNvbnRleHQuYmFzZTY0RW5jb2RlcixcbiAgICAgICAgUzNVcmk6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0F4aXNEYXRhT3B0aW9ucyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERhdGVBeGlzT3B0aW9uczogX2pzb24sXG4gICAgICAgIE51bWVyaWNBeGlzT3B0aW9uczogKF8pID0+IHNlX051bWVyaWNBeGlzT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9BeGlzRGlzcGxheU1pbk1heFJhbmdlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgTWF4aW11bTogX19zZXJpYWxpemVGbG9hdCxcbiAgICAgICAgTWluaW11bTogX19zZXJpYWxpemVGbG9hdCxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9BeGlzRGlzcGxheU9wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBeGlzTGluZVZpc2liaWxpdHk6IFtdLFxuICAgICAgICBBeGlzT2Zmc2V0OiBbXSxcbiAgICAgICAgRGF0YU9wdGlvbnM6IChfKSA9PiBzZV9BeGlzRGF0YU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIEdyaWRMaW5lVmlzaWJpbGl0eTogW10sXG4gICAgICAgIFNjcm9sbGJhck9wdGlvbnM6IChfKSA9PiBzZV9TY3JvbGxCYXJPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBUaWNrTGFiZWxPcHRpb25zOiAoXykgPT4gc2VfQXhpc1RpY2tMYWJlbE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQXhpc0Rpc3BsYXlSYW5nZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERhdGFEcml2ZW46IF9qc29uLFxuICAgICAgICBNaW5NYXg6IChfKSA9PiBzZV9BeGlzRGlzcGxheU1pbk1heFJhbmdlKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0F4aXNMaW5lYXJTY2FsZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFN0ZXBDb3VudDogW10sXG4gICAgICAgIFN0ZXBTaXplOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0F4aXNMb2dhcml0aG1pY1NjYWxlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQmFzZTogX19zZXJpYWxpemVGbG9hdCxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9BeGlzU2NhbGUgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBMaW5lYXI6IChfKSA9PiBzZV9BeGlzTGluZWFyU2NhbGUoXywgY29udGV4dCksXG4gICAgICAgIExvZ2FyaXRobWljOiAoXykgPT4gc2VfQXhpc0xvZ2FyaXRobWljU2NhbGUoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQXhpc1RpY2tMYWJlbE9wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBSb3RhdGlvbkFuZ2xlOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0JhckNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeTogX2pzb24sXG4gICAgICAgIENvbG9yczogX2pzb24sXG4gICAgICAgIFNtYWxsTXVsdGlwbGVzOiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gc2VfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9CYXJDaGFydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCYXJzQXJyYW5nZW1lbnQ6IFtdLFxuICAgICAgICBDYXRlZ29yeUF4aXM6IChfKSA9PiBzZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIENhdGVnb3J5TGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgQ29sb3JMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBDb250cmlidXRpb25BbmFseXNpc0RlZmF1bHRzOiBfanNvbixcbiAgICAgICAgRGF0YUxhYmVsczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBzZV9CYXJDaGFydEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIExlZ2VuZDogX2pzb24sXG4gICAgICAgIE9yaWVudGF0aW9uOiBbXSxcbiAgICAgICAgUmVmZXJlbmNlTGluZXM6IChfKSA9PiBzZV9SZWZlcmVuY2VMaW5lTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU21hbGxNdWx0aXBsZXNPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9CYXJDaGFydFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUb29sdGlwOiAoXykgPT4gc2VfVG9vbHRpcE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFZhbHVlQXhpczogKF8pID0+IHNlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmFsdWVMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBWaXN1YWxQYWxldHRlOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9CYXJDaGFydEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCYXJDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfQmFyQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9CYXJDaGFydFNvcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlJdGVtc0xpbWl0OiBfanNvbixcbiAgICAgICAgQ2F0ZWdvcnlTb3J0OiAoXykgPT4gc2VfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgICAgIENvbG9ySXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIENvbG9yU29ydDogKF8pID0+IHNlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTbWFsbE11bHRpcGxlc0xpbWl0Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIFNtYWxsTXVsdGlwbGVzU29ydDogKF8pID0+IHNlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0JhckNoYXJ0VmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX0JhckNoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IFtdLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQmluV2lkdGhPcHRpb25zID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQmluQ291bnRMaW1pdDogW10sXG4gICAgICAgIFZhbHVlOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0JvZHlTZWN0aW9uQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbnRlbnQ6IF9qc29uLFxuICAgICAgICBQYWdlQnJlYWtDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgUmVwZWF0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX0JvZHlTZWN0aW9uUmVwZWF0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgU2VjdGlvbklkOiBbXSxcbiAgICAgICAgU3R5bGU6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0JvZHlTZWN0aW9uQ29uZmlndXJhdGlvbkxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfQm9keVNlY3Rpb25Db25maWd1cmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Cb2R5U2VjdGlvbkR5bmFtaWNDYXRlZ29yeURpbWVuc2lvbkNvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBMaW1pdDogW10sXG4gICAgICAgIFNvcnRCeU1ldHJpY3M6IChfKSA9PiBzZV9Cb2R5U2VjdGlvbkR5bmFtaWNEaW1lbnNpb25Tb3J0Q29uZmlndXJhdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQm9keVNlY3Rpb25EeW5hbWljRGltZW5zaW9uU29ydENvbmZpZ3VyYXRpb25MaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0NvbHVtblNvcnQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0JvZHlTZWN0aW9uRHluYW1pY051bWVyaWNEaW1lbnNpb25Db25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgTGltaXQ6IFtdLFxuICAgICAgICBTb3J0QnlNZXRyaWNzOiAoXykgPT4gc2VfQm9keVNlY3Rpb25EeW5hbWljRGltZW5zaW9uU29ydENvbmZpZ3VyYXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0JvZHlTZWN0aW9uUmVwZWF0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERpbWVuc2lvbkNvbmZpZ3VyYXRpb25zOiAoXykgPT4gc2VfQm9keVNlY3Rpb25SZXBlYXREaW1lbnNpb25Db25maWd1cmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTm9uUmVwZWF0aW5nVmlzdWFsczogX2pzb24sXG4gICAgICAgIFBhZ2VCcmVha0NvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0JvZHlTZWN0aW9uUmVwZWF0RGltZW5zaW9uQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIER5bmFtaWNDYXRlZ29yeURpbWVuc2lvbkNvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9Cb2R5U2VjdGlvbkR5bmFtaWNDYXRlZ29yeURpbWVuc2lvbkNvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIER5bmFtaWNOdW1lcmljRGltZW5zaW9uQ29uZmlndXJhdGlvbjogKF8pID0+IHNlX0JvZHlTZWN0aW9uRHluYW1pY051bWVyaWNEaW1lbnNpb25Db25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0JvZHlTZWN0aW9uUmVwZWF0RGltZW5zaW9uQ29uZmlndXJhdGlvbkxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfQm9keVNlY3Rpb25SZXBlYXREaW1lbnNpb25Db25maWd1cmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Cb3hQbG90QWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBHcm91cEJ5OiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gc2VfQm94UGxvdE1lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQm94UGxvdENoYXJ0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEJveFBsb3RPcHRpb25zOiBfanNvbixcbiAgICAgICAgQ2F0ZWdvcnlBeGlzOiAoXykgPT4gc2VfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBDYXRlZ29yeUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBzZV9Cb3hQbG90RmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgTGVnZW5kOiBfanNvbixcbiAgICAgICAgUHJpbWFyeVlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBzZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFByaW1hcnlZQXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFJlZmVyZW5jZUxpbmVzOiAoXykgPT4gc2VfUmVmZXJlbmNlTGluZUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFNvcnRDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfQm94UGxvdFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUb29sdGlwOiAoXykgPT4gc2VfVG9vbHRpcE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFZpc3VhbFBhbGV0dGU6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0JveFBsb3RGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQm94UGxvdEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfQm94UGxvdEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0JveFBsb3RNZWFzdXJlRmllbGRMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX01lYXN1cmVGaWVsZChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQm94UGxvdFNvcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlTb3J0OiAoXykgPT4gc2VfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgICAgIFBhZ2luYXRpb25Db25maWd1cmF0aW9uOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Cb3hQbG90VmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX0JveFBsb3RDaGFydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gc2VfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbENvbnRlbnRBbHRUZXh0OiBbXSxcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0NhdGVnb3J5RmlsdGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIERlZmF1bHRGaWx0ZXJDb250cm9sQ29uZmlndXJhdGlvbjogKF8pID0+IHNlX0RlZmF1bHRGaWx0ZXJDb250cm9sQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgRmlsdGVySWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0NhdGVnb3J5SW5uZXJGaWx0ZXIgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgRGVmYXVsdEZpbHRlckNvbnRyb2xDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfRGVmYXVsdEZpbHRlckNvbnRyb2xDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0NvbG9yU2NhbGUgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2xvckZpbGxUeXBlOiBbXSxcbiAgICAgICAgQ29sb3JzOiAoXykgPT4gc2VfQ29sb3JTY2FsZUNvbG9yTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTnVsbFZhbHVlQ29sb3I6IChfKSA9PiBzZV9EYXRhQ29sb3IoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQ29sb3JTY2FsZUNvbG9yTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9EYXRhQ29sb3IoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0NvbHVtbkhpZXJhcmNoeSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERhdGVUaW1lSGllcmFyY2h5OiAoXykgPT4gc2VfRGF0ZVRpbWVIaWVyYXJjaHkoXywgY29udGV4dCksXG4gICAgICAgIEV4cGxpY2l0SGllcmFyY2h5OiAoXykgPT4gc2VfRXhwbGljaXRIaWVyYXJjaHkoXywgY29udGV4dCksXG4gICAgICAgIFByZWRlZmluZWRIaWVyYXJjaHk6IChfKSA9PiBzZV9QcmVkZWZpbmVkSGllcmFyY2h5KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0NvbHVtbkhpZXJhcmNoeUxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfQ29sdW1uSGllcmFyY2h5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Db2x1bW5Tb3J0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWdncmVnYXRpb25GdW5jdGlvbjogKF8pID0+IHNlX0FnZ3JlZ2F0aW9uRnVuY3Rpb24oXywgY29udGV4dCksXG4gICAgICAgIERpcmVjdGlvbjogW10sXG4gICAgICAgIFNvcnRCeTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQ29sdW1uVG9vbHRpcEl0ZW0gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBZ2dyZWdhdGlvbjogKF8pID0+IHNlX0FnZ3JlZ2F0aW9uRnVuY3Rpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIExhYmVsOiBbXSxcbiAgICAgICAgVG9vbHRpcFRhcmdldDogW10sXG4gICAgICAgIFZpc2liaWxpdHk6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0NvbWJvQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEJhclZhbHVlczogKF8pID0+IHNlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgICAgIENhdGVnb3J5OiBfanNvbixcbiAgICAgICAgQ29sb3JzOiBfanNvbixcbiAgICAgICAgTGluZVZhbHVlczogKF8pID0+IHNlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQ29tYm9DaGFydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCYXJEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgQmFyc0FycmFuZ2VtZW50OiBbXSxcbiAgICAgICAgQ2F0ZWdvcnlBeGlzOiAoXykgPT4gc2VfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBDYXRlZ29yeUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIENvbG9yTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IHNlX0NvbWJvQ2hhcnRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBMaW5lRGF0YUxhYmVsczogX2pzb24sXG4gICAgICAgIFByaW1hcnlZQXhpc0Rpc3BsYXlPcHRpb25zOiAoXykgPT4gc2VfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBQcmltYXJ5WUF4aXNMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBSZWZlcmVuY2VMaW5lczogKF8pID0+IHNlX1JlZmVyZW5jZUxpbmVMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTZWNvbmRhcnlZQXhpc0Rpc3BsYXlPcHRpb25zOiAoXykgPT4gc2VfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBTZWNvbmRhcnlZQXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFNpbmdsZUF4aXNPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9Db21ib0NoYXJ0U29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBzZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQ29tYm9DaGFydEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb21ib0NoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBzZV9Db21ib0NoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQ29tYm9DaGFydFNvcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlJdGVtc0xpbWl0OiBfanNvbixcbiAgICAgICAgQ2F0ZWdvcnlTb3J0OiAoXykgPT4gc2VfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgICAgIENvbG9ySXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIENvbG9yU29ydDogKF8pID0+IHNlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0NvbWJvQ2hhcnRWaXN1YWwgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gc2VfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfQ29tYm9DaGFydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gc2VfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbENvbnRlbnRBbHRUZXh0OiBbXSxcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0NvbXB1dGF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRm9yZWNhc3Q6IChfKSA9PiBzZV9Gb3JlY2FzdENvbXB1dGF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBHcm93dGhSYXRlOiAoXykgPT4gc2VfR3Jvd3RoUmF0ZUNvbXB1dGF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBNYXhpbXVtTWluaW11bTogKF8pID0+IHNlX01heGltdW1NaW5pbXVtQ29tcHV0YXRpb24oXywgY29udGV4dCksXG4gICAgICAgIE1ldHJpY0NvbXBhcmlzb246IChfKSA9PiBzZV9NZXRyaWNDb21wYXJpc29uQ29tcHV0YXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFBlcmlvZE92ZXJQZXJpb2Q6IChfKSA9PiBzZV9QZXJpb2RPdmVyUGVyaW9kQ29tcHV0YXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFBlcmlvZFRvRGF0ZTogKF8pID0+IHNlX1BlcmlvZFRvRGF0ZUNvbXB1dGF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUb3BCb3R0b21Nb3ZlcnM6IChfKSA9PiBzZV9Ub3BCb3R0b21Nb3ZlcnNDb21wdXRhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9wQm90dG9tUmFua2VkOiAoXykgPT4gc2VfVG9wQm90dG9tUmFua2VkQ29tcHV0YXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRvdGFsQWdncmVnYXRpb246IChfKSA9PiBzZV9Ub3RhbEFnZ3JlZ2F0aW9uQ29tcHV0YXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFVuaXF1ZVZhbHVlczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfQ29tcHV0YXRpb25MaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0NvbXB1dGF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEdyYWRpZW50OiAoXykgPT4gc2VfQ29uZGl0aW9uYWxGb3JtYXR0aW5nR3JhZGllbnRDb2xvcihfLCBjb250ZXh0KSxcbiAgICAgICAgU29saWQ6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0dyYWRpZW50Q29sb3IgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2xvcjogKF8pID0+IHNlX0dyYWRpZW50Q29sb3IoXywgY29udGV4dCksXG4gICAgICAgIEV4cHJlc3Npb246IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0NyZWF0ZVRvcGljUmV2aWV3ZWRBbnN3ZXIgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBbnN3ZXJJZDogW10sXG4gICAgICAgIERhdGFzZXRBcm46IFtdLFxuICAgICAgICBNaXI6IF9qc29uLFxuICAgICAgICBQcmltYXJ5VmlzdWFsOiAoXykgPT4gc2VfVG9waWNWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIFF1ZXN0aW9uOiBbXSxcbiAgICAgICAgVGVtcGxhdGU6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0NyZWF0ZVRvcGljUmV2aWV3ZWRBbnN3ZXJzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0NyZWF0ZVRvcGljUmV2aWV3ZWRBbnN3ZXIoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0N1c3RvbUFjdGlvblNldFBhcmFtZXRlcnNPcGVyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBQYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb25zOiAoXykgPT4gc2VfU2V0UGFyYW1ldGVyVmFsdWVDb25maWd1cmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9DdXN0b21Db250ZW50VmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIERhdGFTZXRJZGVudGlmaWVyOiBbXSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbENvbnRlbnRBbHRUZXh0OiBbXSxcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0N1c3RvbVBhcmFtZXRlclZhbHVlcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERhdGVUaW1lVmFsdWVzOiAoXykgPT4gc2VfRGF0ZVRpbWVEZWZhdWx0VmFsdWVMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBEZWNpbWFsVmFsdWVzOiAoXykgPT4gc2VfRGVjaW1hbERlZmF1bHRWYWx1ZUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIEludGVnZXJWYWx1ZXM6IF9qc29uLFxuICAgICAgICBTdHJpbmdWYWx1ZXM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0N1c3RvbVZhbHVlc0NvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDdXN0b21WYWx1ZXM6IChfKSA9PiBzZV9DdXN0b21QYXJhbWV0ZXJWYWx1ZXMoXywgY29udGV4dCksXG4gICAgICAgIEluY2x1ZGVOdWxsVmFsdWU6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0Rhc2hib2FyZFZlcnNpb25EZWZpbml0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQW5hbHlzaXNEZWZhdWx0czogX2pzb24sXG4gICAgICAgIENhbGN1bGF0ZWRGaWVsZHM6IF9qc29uLFxuICAgICAgICBDb2x1bW5Db25maWd1cmF0aW9uczogX2pzb24sXG4gICAgICAgIERhdGFTZXRJZGVudGlmaWVyRGVjbGFyYXRpb25zOiBfanNvbixcbiAgICAgICAgRmlsdGVyR3JvdXBzOiAoXykgPT4gc2VfRmlsdGVyR3JvdXBMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBPcHRpb25zOiBfanNvbixcbiAgICAgICAgUGFyYW1ldGVyRGVjbGFyYXRpb25zOiAoXykgPT4gc2VfUGFyYW1ldGVyRGVjbGFyYXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTaGVldHM6IChfKSA9PiBzZV9TaGVldERlZmluaXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdGF0aWNGaWxlczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRGF0YUNvbG9yID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29sb3I6IFtdLFxuICAgICAgICBEYXRhVmFsdWU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRGF0YXNldFBhcmFtZXRlciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERhdGVUaW1lRGF0YXNldFBhcmFtZXRlcjogKF8pID0+IHNlX0RhdGVUaW1lRGF0YXNldFBhcmFtZXRlcihfLCBjb250ZXh0KSxcbiAgICAgICAgRGVjaW1hbERhdGFzZXRQYXJhbWV0ZXI6IChfKSA9PiBzZV9EZWNpbWFsRGF0YXNldFBhcmFtZXRlcihfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZWdlckRhdGFzZXRQYXJhbWV0ZXI6IF9qc29uLFxuICAgICAgICBTdHJpbmdEYXRhc2V0UGFyYW1ldGVyOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EYXRhc2V0UGFyYW1ldGVyTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9EYXRhc2V0UGFyYW1ldGVyKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EYXRlVGltZURhdGFzZXRQYXJhbWV0ZXIgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEZWZhdWx0VmFsdWVzOiAoXykgPT4gc2VfRGF0ZVRpbWVEYXRhc2V0UGFyYW1ldGVyRGVmYXVsdFZhbHVlcyhfLCBjb250ZXh0KSxcbiAgICAgICAgSWQ6IFtdLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgVGltZUdyYW51bGFyaXR5OiBbXSxcbiAgICAgICAgVmFsdWVUeXBlOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EYXRlVGltZURhdGFzZXRQYXJhbWV0ZXJEZWZhdWx0VmFsdWVzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgU3RhdGljVmFsdWVzOiAoXykgPT4gc2VfRGF0ZVRpbWVEYXRhc2V0UGFyYW1ldGVyVmFsdWVMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0RhdGVUaW1lRGF0YXNldFBhcmFtZXRlclZhbHVlTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBlbnRyeS5nZXRUaW1lKCkgLyAxXzAwMDtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EYXRlVGltZURlZmF1bHRWYWx1ZUxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZW50cnkuZ2V0VGltZSgpIC8gMV8wMDA7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRGF0ZVRpbWVEZWZhdWx0VmFsdWVzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRHluYW1pY1ZhbHVlOiBfanNvbixcbiAgICAgICAgUm9sbGluZ0RhdGU6IF9qc29uLFxuICAgICAgICBTdGF0aWNWYWx1ZXM6IChfKSA9PiBzZV9EYXRlVGltZURlZmF1bHRWYWx1ZUxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRGF0ZVRpbWVIaWVyYXJjaHkgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEcmlsbERvd25GaWx0ZXJzOiAoXykgPT4gc2VfRHJpbGxEb3duRmlsdGVyTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgSGllcmFyY2h5SWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0RhdGVUaW1lUGFyYW1ldGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFZhbHVlczogKF8pID0+IHNlX1NlbnNpdGl2ZVRpbWVzdGFtcExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRGF0ZVRpbWVQYXJhbWV0ZXJEZWNsYXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERlZmF1bHRWYWx1ZXM6IChfKSA9PiBzZV9EYXRlVGltZURlZmF1bHRWYWx1ZXMoXywgY29udGV4dCksXG4gICAgICAgIE1hcHBlZERhdGFTZXRQYXJhbWV0ZXJzOiBfanNvbixcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFRpbWVHcmFudWxhcml0eTogW10sXG4gICAgICAgIFZhbHVlV2hlblVuc2V0OiAoXykgPT4gc2VfRGF0ZVRpbWVWYWx1ZVdoZW5VbnNldENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRGF0ZVRpbWVQYXJhbWV0ZXJMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0RhdGVUaW1lUGFyYW1ldGVyKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EYXRlVGltZVZhbHVlV2hlblVuc2V0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEN1c3RvbVZhbHVlOiAoXykgPT4gXy5nZXRUaW1lKCkgLyAxXzAwMCxcbiAgICAgICAgVmFsdWVXaGVuVW5zZXRPcHRpb246IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0RlY2ltYWxEYXRhc2V0UGFyYW1ldGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGVmYXVsdFZhbHVlczogKF8pID0+IHNlX0RlY2ltYWxEYXRhc2V0UGFyYW1ldGVyRGVmYXVsdFZhbHVlcyhfLCBjb250ZXh0KSxcbiAgICAgICAgSWQ6IFtdLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgVmFsdWVUeXBlOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EZWNpbWFsRGF0YXNldFBhcmFtZXRlckRlZmF1bHRWYWx1ZXMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBTdGF0aWNWYWx1ZXM6IChfKSA9PiBzZV9EZWNpbWFsRGF0YXNldFBhcmFtZXRlclZhbHVlTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EZWNpbWFsRGF0YXNldFBhcmFtZXRlclZhbHVlTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX3NlcmlhbGl6ZUZsb2F0KGVudHJ5KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EZWNpbWFsRGVmYXVsdFZhbHVlTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX3NlcmlhbGl6ZUZsb2F0KGVudHJ5KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EZWNpbWFsRGVmYXVsdFZhbHVlcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIER5bmFtaWNWYWx1ZTogX2pzb24sXG4gICAgICAgIFN0YXRpY1ZhbHVlczogKF8pID0+IHNlX0RlY2ltYWxEZWZhdWx0VmFsdWVMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0RlY2ltYWxQYXJhbWV0ZXIgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gc2VfU2Vuc2l0aXZlRG91YmxlTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EZWNpbWFsUGFyYW1ldGVyRGVjbGFyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEZWZhdWx0VmFsdWVzOiAoXykgPT4gc2VfRGVjaW1hbERlZmF1bHRWYWx1ZXMoXywgY29udGV4dCksXG4gICAgICAgIE1hcHBlZERhdGFTZXRQYXJhbWV0ZXJzOiBfanNvbixcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFBhcmFtZXRlclZhbHVlVHlwZTogW10sXG4gICAgICAgIFZhbHVlV2hlblVuc2V0OiAoXykgPT4gc2VfRGVjaW1hbFZhbHVlV2hlblVuc2V0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EZWNpbWFsUGFyYW1ldGVyTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9EZWNpbWFsUGFyYW1ldGVyKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EZWNpbWFsVmFsdWVXaGVuVW5zZXRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ3VzdG9tVmFsdWU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgICAgIFZhbHVlV2hlblVuc2V0T3B0aW9uOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EZWZhdWx0RmlsdGVyQ29udHJvbENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb250cm9sT3B0aW9uczogKF8pID0+IHNlX0RlZmF1bHRGaWx0ZXJDb250cm9sT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVGl0bGU6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0RlZmF1bHRGaWx0ZXJDb250cm9sT3B0aW9ucyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERlZmF1bHREYXRlVGltZVBpY2tlck9wdGlvbnM6IF9qc29uLFxuICAgICAgICBEZWZhdWx0RHJvcGRvd25PcHRpb25zOiBfanNvbixcbiAgICAgICAgRGVmYXVsdExpc3RPcHRpb25zOiBfanNvbixcbiAgICAgICAgRGVmYXVsdFJlbGF0aXZlRGF0ZVRpbWVPcHRpb25zOiBfanNvbixcbiAgICAgICAgRGVmYXVsdFNsaWRlck9wdGlvbnM6IChfKSA9PiBzZV9EZWZhdWx0U2xpZGVyQ29udHJvbE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIERlZmF1bHRUZXh0QXJlYU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBEZWZhdWx0VGV4dEZpZWxkT3B0aW9uczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRGVmYXVsdFNsaWRlckNvbnRyb2xPcHRpb25zID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGlzcGxheU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBNYXhpbXVtVmFsdWU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgICAgIE1pbmltdW1WYWx1ZTogX19zZXJpYWxpemVGbG9hdCxcbiAgICAgICAgU3RlcFNpemU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgICAgIFR5cGU6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0Rlc3RpbmF0aW9uUGFyYW1ldGVyVmFsdWVDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ3VzdG9tVmFsdWVzQ29uZmlndXJhdGlvbjogKF8pID0+IHNlX0N1c3RvbVZhbHVlc0NvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFNlbGVjdEFsbFZhbHVlT3B0aW9uczogW10sXG4gICAgICAgIFNvdXJjZUNvbHVtbjogX2pzb24sXG4gICAgICAgIFNvdXJjZUZpZWxkOiBbXSxcbiAgICAgICAgU291cmNlUGFyYW1ldGVyTmFtZTogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRHJpbGxEb3duRmlsdGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlGaWx0ZXI6IF9qc29uLFxuICAgICAgICBOdW1lcmljRXF1YWxpdHlGaWx0ZXI6IChfKSA9PiBzZV9OdW1lcmljRXF1YWxpdHlEcmlsbERvd25GaWx0ZXIoXywgY29udGV4dCksXG4gICAgICAgIFRpbWVSYW5nZUZpbHRlcjogKF8pID0+IHNlX1RpbWVSYW5nZURyaWxsRG93bkZpbHRlcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9EcmlsbERvd25GaWx0ZXJMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0RyaWxsRG93bkZpbHRlcihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRW1wdHlWaXN1YWwgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gc2VfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgRGF0YVNldElkZW50aWZpZXI6IFtdLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRXhwbGljaXRIaWVyYXJjaHkgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2x1bW5zOiBfanNvbixcbiAgICAgICAgRHJpbGxEb3duRmlsdGVyczogKF8pID0+IHNlX0RyaWxsRG93bkZpbHRlckxpc3QoXywgY29udGV4dCksXG4gICAgICAgIEhpZXJhcmNoeUlkOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWVsZEJhc2VkVG9vbHRpcCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFnZ3JlZ2F0aW9uVmlzaWJpbGl0eTogW10sXG4gICAgICAgIFRvb2x0aXBGaWVsZHM6IChfKSA9PiBzZV9Ub29sdGlwSXRlbUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFRvb2x0aXBUaXRsZVR5cGU6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0ZpZWxkU29ydE9wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2x1bW5Tb3J0OiAoXykgPT4gc2VfQ29sdW1uU29ydChfLCBjb250ZXh0KSxcbiAgICAgICAgRmllbGRTb3J0OiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9GaWVsZFNvcnRPcHRpb25zKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWxsZWRNYXBBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEdlb3NwYXRpYWw6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9GaWxsZWRNYXBNZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0ZpbGxlZE1hcENvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbnM6IChfKSA9PiBzZV9GaWxsZWRNYXBDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0ZpbGxlZE1hcENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFNoYXBlOiAoXykgPT4gc2VfRmlsbGVkTWFwU2hhcGVDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRmlsbGVkTWFwQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9GaWxsZWRNYXBDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0ZpbGxlZE1hcENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gc2VfRmlsbGVkTWFwRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgTGVnZW5kOiBfanNvbixcbiAgICAgICAgTWFwU3R5bGVPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9GaWxsZWRNYXBTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9vbHRpcDogKF8pID0+IHNlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBXaW5kb3dPcHRpb25zOiAoXykgPT4gc2VfR2Vvc3BhdGlhbFdpbmRvd09wdGlvbnMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRmlsbGVkTWFwRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEZpbGxlZE1hcEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfRmlsbGVkTWFwQWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRmlsbGVkTWFwTWVhc3VyZUZpZWxkTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0ZpbGxlZE1hcFNoYXBlQ29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRmllbGRJZDogW10sXG4gICAgICAgIEZvcm1hdDogKF8pID0+IHNlX1NoYXBlQ29uZGl0aW9uYWxGb3JtYXQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRmlsbGVkTWFwU29ydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeVNvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWxsZWRNYXBWaXN1YWwgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gc2VfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfRmlsbGVkTWFwQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmc6IChfKSA9PiBzZV9GaWxsZWRNYXBDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxDb250ZW50QWx0VGV4dDogW10sXG4gICAgICAgIFZpc3VhbElkOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWx0ZXIgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeUZpbHRlcjogKF8pID0+IHNlX0NhdGVnb3J5RmlsdGVyKF8sIGNvbnRleHQpLFxuICAgICAgICBOZXN0ZWRGaWx0ZXI6IChfKSA9PiBzZV9OZXN0ZWRGaWx0ZXIoXywgY29udGV4dCksXG4gICAgICAgIE51bWVyaWNFcXVhbGl0eUZpbHRlcjogKF8pID0+IHNlX051bWVyaWNFcXVhbGl0eUZpbHRlcihfLCBjb250ZXh0KSxcbiAgICAgICAgTnVtZXJpY1JhbmdlRmlsdGVyOiAoXykgPT4gc2VfTnVtZXJpY1JhbmdlRmlsdGVyKF8sIGNvbnRleHQpLFxuICAgICAgICBSZWxhdGl2ZURhdGVzRmlsdGVyOiAoXykgPT4gc2VfUmVsYXRpdmVEYXRlc0ZpbHRlcihfLCBjb250ZXh0KSxcbiAgICAgICAgVGltZUVxdWFsaXR5RmlsdGVyOiAoXykgPT4gc2VfVGltZUVxdWFsaXR5RmlsdGVyKF8sIGNvbnRleHQpLFxuICAgICAgICBUaW1lUmFuZ2VGaWx0ZXI6IChfKSA9PiBzZV9UaW1lUmFuZ2VGaWx0ZXIoXywgY29udGV4dCksXG4gICAgICAgIFRvcEJvdHRvbUZpbHRlcjogKF8pID0+IHNlX1RvcEJvdHRvbUZpbHRlcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWx0ZXJDb250cm9sID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ3Jvc3NTaGVldDogX2pzb24sXG4gICAgICAgIERhdGVUaW1lUGlja2VyOiBfanNvbixcbiAgICAgICAgRHJvcGRvd246IF9qc29uLFxuICAgICAgICBMaXN0OiBfanNvbixcbiAgICAgICAgUmVsYXRpdmVEYXRlVGltZTogX2pzb24sXG4gICAgICAgIFNsaWRlcjogKF8pID0+IHNlX0ZpbHRlclNsaWRlckNvbnRyb2woXywgY29udGV4dCksXG4gICAgICAgIFRleHRBcmVhOiBfanNvbixcbiAgICAgICAgVGV4dEZpZWxkOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWx0ZXJDb250cm9sTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9GaWx0ZXJDb250cm9sKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWx0ZXJHcm91cCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENyb3NzRGF0YXNldDogW10sXG4gICAgICAgIEZpbHRlckdyb3VwSWQ6IFtdLFxuICAgICAgICBGaWx0ZXJzOiAoXykgPT4gc2VfRmlsdGVyTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU2NvcGVDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgU3RhdHVzOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWx0ZXJHcm91cExpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfRmlsdGVyR3JvdXAoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0ZpbHRlckxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfRmlsdGVyKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GaWx0ZXJTbGlkZXJDb250cm9sID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGlzcGxheU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBGaWx0ZXJDb250cm9sSWQ6IFtdLFxuICAgICAgICBNYXhpbXVtVmFsdWU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgICAgIE1pbmltdW1WYWx1ZTogX19zZXJpYWxpemVGbG9hdCxcbiAgICAgICAgU291cmNlRmlsdGVySWQ6IFtdLFxuICAgICAgICBTdGVwU2l6ZTogX19zZXJpYWxpemVGbG9hdCxcbiAgICAgICAgVGl0bGU6IFtdLFxuICAgICAgICBUeXBlOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Gb3JlY2FzdENvbXB1dGF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29tcHV0YXRpb25JZDogW10sXG4gICAgICAgIEN1c3RvbVNlYXNvbmFsaXR5VmFsdWU6IFtdLFxuICAgICAgICBMb3dlckJvdW5kYXJ5OiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgUGVyaW9kc0JhY2t3YXJkOiBbXSxcbiAgICAgICAgUGVyaW9kc0ZvcndhcmQ6IFtdLFxuICAgICAgICBQcmVkaWN0aW9uSW50ZXJ2YWw6IFtdLFxuICAgICAgICBTZWFzb25hbGl0eTogW10sXG4gICAgICAgIFRpbWU6IF9qc29uLFxuICAgICAgICBVcHBlckJvdW5kYXJ5OiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgICAgICBWYWx1ZTogKF8pID0+IHNlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Gb3JlY2FzdENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGb3JlY2FzdFByb3BlcnRpZXM6IChfKSA9PiBzZV9UaW1lQmFzZWRGb3JlY2FzdFByb3BlcnRpZXMoXywgY29udGV4dCksXG4gICAgICAgIFNjZW5hcmlvOiAoXykgPT4gc2VfRm9yZWNhc3RTY2VuYXJpbyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Gb3JlY2FzdENvbmZpZ3VyYXRpb25MaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0ZvcmVjYXN0Q29uZmlndXJhdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRm9yZWNhc3RTY2VuYXJpbyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFdoYXRJZlBvaW50U2NlbmFyaW86IChfKSA9PiBzZV9XaGF0SWZQb2ludFNjZW5hcmlvKF8sIGNvbnRleHQpLFxuICAgICAgICBXaGF0SWZSYW5nZVNjZW5hcmlvOiAoXykgPT4gc2VfV2hhdElmUmFuZ2VTY2VuYXJpbyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9GdW5uZWxDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnk6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9GdW5uZWxDaGFydE1lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRnVubmVsQ2hhcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBEYXRhTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IHNlX0Z1bm5lbENoYXJ0RmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9GdW5uZWxDaGFydFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUb29sdGlwOiAoXykgPT4gc2VfVG9vbHRpcE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFZhbHVlTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRnVubmVsQ2hhcnRGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRnVubmVsQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IHNlX0Z1bm5lbENoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRnVubmVsQ2hhcnRNZWFzdXJlRmllbGRMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX01lYXN1cmVGaWVsZChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfRnVubmVsQ2hhcnRTb3J0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENhdGVnb3J5SXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIENhdGVnb3J5U29ydDogKF8pID0+IHNlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0Z1bm5lbENoYXJ0VmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX0Z1bm5lbENoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IFtdLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2F1Z2VDaGFydEFyY0NvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEZvcmVncm91bmRDb2xvcjogKF8pID0+IHNlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dhdWdlQ2hhcnRDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25zOiAoXykgPT4gc2VfR2F1Z2VDaGFydENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2F1Z2VDaGFydENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFyYzogKF8pID0+IHNlX0dhdWdlQ2hhcnRBcmNDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgICAgIFByaW1hcnlWYWx1ZTogKF8pID0+IHNlX0dhdWdlQ2hhcnRQcmltYXJ5VmFsdWVDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2F1Z2VDaGFydENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbkxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfR2F1Z2VDaGFydENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2F1Z2VDaGFydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2xvckNvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IHNlX0dhdWdlQ2hhcnRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBHYXVnZUNoYXJ0T3B0aW9uczogKF8pID0+IHNlX0dhdWdlQ2hhcnRPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBUb29sdGlwT3B0aW9uczogKF8pID0+IHNlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBWaXN1YWxQYWxldHRlOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HYXVnZUNoYXJ0RmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFRhcmdldFZhbHVlczogKF8pID0+IHNlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgICAgIFZhbHVlczogKF8pID0+IHNlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2F1Z2VDaGFydE9wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBcmM6IChfKSA9PiBzZV9BcmNDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBBcmNBeGlzOiAoXykgPT4gc2VfQXJjQXhpc0NvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbXBhcmlzb246IF9qc29uLFxuICAgICAgICBQcmltYXJ5VmFsdWVEaXNwbGF5VHlwZTogW10sXG4gICAgICAgIFByaW1hcnlWYWx1ZUZvbnRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HYXVnZUNoYXJ0UHJpbWFyeVZhbHVlQ29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgSWNvbjogX2pzb24sXG4gICAgICAgIFRleHRDb2xvcjogKF8pID0+IHNlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dhdWdlQ2hhcnRWaXN1YWwgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gc2VfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfR2F1Z2VDaGFydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbmRpdGlvbmFsRm9ybWF0dGluZzogKF8pID0+IHNlX0dhdWdlQ2hhcnRDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxDb250ZW50QWx0VGV4dDogW10sXG4gICAgICAgIFZpc3VhbElkOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HZW9zcGF0aWFsQ2F0ZWdvcmljYWxDb2xvciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENhdGVnb3J5RGF0YUNvbG9yczogX2pzb24sXG4gICAgICAgIERlZmF1bHRPcGFjaXR5OiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgICAgICBOdWxsRGF0YVNldHRpbmdzOiAoXykgPT4gc2VfR2Vvc3BhdGlhbE51bGxEYXRhU2V0dGluZ3MoXywgY29udGV4dCksXG4gICAgICAgIE51bGxEYXRhVmlzaWJpbGl0eTogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2Vvc3BhdGlhbENpcmNsZVJhZGl1cyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFJhZGl1czogX19zZXJpYWxpemVGbG9hdCxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HZW9zcGF0aWFsQ2lyY2xlU3ltYm9sU3R5bGUgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDaXJjbGVSYWRpdXM6IChfKSA9PiBzZV9HZW9zcGF0aWFsQ2lyY2xlUmFkaXVzKF8sIGNvbnRleHQpLFxuICAgICAgICBGaWxsQ29sb3I6IChfKSA9PiBzZV9HZW9zcGF0aWFsQ29sb3IoXywgY29udGV4dCksXG4gICAgICAgIFN0cm9rZUNvbG9yOiAoXykgPT4gc2VfR2Vvc3BhdGlhbENvbG9yKF8sIGNvbnRleHQpLFxuICAgICAgICBTdHJva2VXaWR0aDogKF8pID0+IHNlX0dlb3NwYXRpYWxMaW5lV2lkdGgoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2Vvc3BhdGlhbENvbG9yID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcmljYWw6IChfKSA9PiBzZV9HZW9zcGF0aWFsQ2F0ZWdvcmljYWxDb2xvcihfLCBjb250ZXh0KSxcbiAgICAgICAgR3JhZGllbnQ6IChfKSA9PiBzZV9HZW9zcGF0aWFsR3JhZGllbnRDb2xvcihfLCBjb250ZXh0KSxcbiAgICAgICAgU29saWQ6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dlb3NwYXRpYWxDb29yZGluYXRlQm91bmRzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRWFzdDogX19zZXJpYWxpemVGbG9hdCxcbiAgICAgICAgTm9ydGg6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgICAgIFNvdXRoOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgICAgICBXZXN0OiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dlb3NwYXRpYWxHcmFkaWVudENvbG9yID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGVmYXVsdE9wYWNpdHk6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgICAgIE51bGxEYXRhU2V0dGluZ3M6IChfKSA9PiBzZV9HZW9zcGF0aWFsTnVsbERhdGFTZXR0aW5ncyhfLCBjb250ZXh0KSxcbiAgICAgICAgTnVsbERhdGFWaXNpYmlsaXR5OiBbXSxcbiAgICAgICAgU3RlcENvbG9yczogKF8pID0+IHNlX0dlb3NwYXRpYWxHcmFkaWVudFN0ZXBDb2xvckxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2Vvc3BhdGlhbEdyYWRpZW50U3RlcENvbG9yID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29sb3I6IFtdLFxuICAgICAgICBEYXRhVmFsdWU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2Vvc3BhdGlhbEdyYWRpZW50U3RlcENvbG9yTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9HZW9zcGF0aWFsR3JhZGllbnRTdGVwQ29sb3IoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dlb3NwYXRpYWxMYXllckNvbG9yRmllbGQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2xvckRpbWVuc2lvbnNGaWVsZHM6IF9qc29uLFxuICAgICAgICBDb2xvclZhbHVlc0ZpZWxkczogKF8pID0+IHNlX0dlb3NwYXRpYWxMYXllck1lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2Vvc3BhdGlhbExheWVyRGVmaW5pdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIExpbmVMYXllcjogKF8pID0+IHNlX0dlb3NwYXRpYWxMaW5lTGF5ZXIoXywgY29udGV4dCksXG4gICAgICAgIFBvaW50TGF5ZXI6IChfKSA9PiBzZV9HZW9zcGF0aWFsUG9pbnRMYXllcihfLCBjb250ZXh0KSxcbiAgICAgICAgUG9seWdvbkxheWVyOiAoXykgPT4gc2VfR2Vvc3BhdGlhbFBvbHlnb25MYXllcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HZW9zcGF0aWFsTGF5ZXJJdGVtID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX0xheWVyQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgRGF0YVNvdXJjZTogX2pzb24sXG4gICAgICAgIEpvaW5EZWZpbml0aW9uOiAoXykgPT4gc2VfR2Vvc3BhdGlhbExheWVySm9pbkRlZmluaXRpb24oXywgY29udGV4dCksXG4gICAgICAgIExhYmVsOiBbXSxcbiAgICAgICAgTGF5ZXJEZWZpbml0aW9uOiAoXykgPT4gc2VfR2Vvc3BhdGlhbExheWVyRGVmaW5pdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgTGF5ZXJJZDogW10sXG4gICAgICAgIExheWVyVHlwZTogW10sXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBzZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmlzaWJpbGl0eTogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2Vvc3BhdGlhbExheWVySm9pbkRlZmluaXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2xvckZpZWxkOiAoXykgPT4gc2VfR2Vvc3BhdGlhbExheWVyQ29sb3JGaWVsZChfLCBjb250ZXh0KSxcbiAgICAgICAgRGF0YXNldEtleUZpZWxkOiBfanNvbixcbiAgICAgICAgU2hhcGVLZXlGaWVsZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2Vvc3BhdGlhbExheWVyTWFwQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIExlZ2VuZDogX2pzb24sXG4gICAgICAgIE1hcExheWVyczogKF8pID0+IHNlX0dlb3NwYXRpYWxNYXBMYXllckxpc3QoXywgY29udGV4dCksXG4gICAgICAgIE1hcFN0YXRlOiAoXykgPT4gc2VfR2Vvc3BhdGlhbE1hcFN0YXRlKF8sIGNvbnRleHQpLFxuICAgICAgICBNYXBTdHlsZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2Vvc3BhdGlhbExheWVyTWVhc3VyZUZpZWxkTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dlb3NwYXRpYWxMaW5lTGF5ZXIgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBTdHlsZTogKF8pID0+IHNlX0dlb3NwYXRpYWxMaW5lU3R5bGUoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2Vvc3BhdGlhbExpbmVTdHlsZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIExpbmVTeW1ib2xTdHlsZTogKF8pID0+IHNlX0dlb3NwYXRpYWxMaW5lU3ltYm9sU3R5bGUoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2Vvc3BhdGlhbExpbmVTeW1ib2xTdHlsZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEZpbGxDb2xvcjogKF8pID0+IHNlX0dlb3NwYXRpYWxDb2xvcihfLCBjb250ZXh0KSxcbiAgICAgICAgTGluZVdpZHRoOiAoXykgPT4gc2VfR2Vvc3BhdGlhbExpbmVXaWR0aChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HZW9zcGF0aWFsTGluZVdpZHRoID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgTGluZVdpZHRoOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dlb3NwYXRpYWxNYXBBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbG9yczogX2pzb24sXG4gICAgICAgIEdlb3NwYXRpYWw6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dlb3NwYXRpYWxNYXBDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IHNlX0dlb3NwYXRpYWxNYXBGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBNYXBTdHlsZU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBQb2ludFN0eWxlT3B0aW9uczogX2pzb24sXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBzZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgICAgIFdpbmRvd09wdGlvbnM6IChfKSA9PiBzZV9HZW9zcGF0aWFsV2luZG93T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HZW9zcGF0aWFsTWFwRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEdlb3NwYXRpYWxNYXBBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IHNlX0dlb3NwYXRpYWxNYXBBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HZW9zcGF0aWFsTWFwTGF5ZXJMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0dlb3NwYXRpYWxMYXllckl0ZW0oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dlb3NwYXRpYWxNYXBTdGF0ZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEJvdW5kczogKF8pID0+IHNlX0dlb3NwYXRpYWxDb29yZGluYXRlQm91bmRzKF8sIGNvbnRleHQpLFxuICAgICAgICBNYXBOYXZpZ2F0aW9uOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HZW9zcGF0aWFsTWFwVmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX0dlb3NwYXRpYWxNYXBDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW5IaWVyYXJjaGllczogKF8pID0+IHNlX0NvbHVtbkhpZXJhcmNoeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxDb250ZW50QWx0VGV4dDogW10sXG4gICAgICAgIFZpc3VhbElkOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HZW9zcGF0aWFsTnVsbERhdGFTZXR0aW5ncyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFN5bWJvbFN0eWxlOiAoXykgPT4gc2VfR2Vvc3BhdGlhbE51bGxTeW1ib2xTdHlsZShfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HZW9zcGF0aWFsTnVsbFN5bWJvbFN0eWxlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRmlsbENvbG9yOiBbXSxcbiAgICAgICAgU3Ryb2tlQ29sb3I6IFtdLFxuICAgICAgICBTdHJva2VXaWR0aDogX19zZXJpYWxpemVGbG9hdCxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HZW9zcGF0aWFsUG9pbnRMYXllciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFN0eWxlOiAoXykgPT4gc2VfR2Vvc3BhdGlhbFBvaW50U3R5bGUoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2Vvc3BhdGlhbFBvaW50U3R5bGUgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDaXJjbGVTeW1ib2xTdHlsZTogKF8pID0+IHNlX0dlb3NwYXRpYWxDaXJjbGVTeW1ib2xTdHlsZShfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9HZW9zcGF0aWFsUG9seWdvbkxheWVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgU3R5bGU6IChfKSA9PiBzZV9HZW9zcGF0aWFsUG9seWdvblN0eWxlKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dlb3NwYXRpYWxQb2x5Z29uU3R5bGUgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBQb2x5Z29uU3ltYm9sU3R5bGU6IChfKSA9PiBzZV9HZW9zcGF0aWFsUG9seWdvblN5bWJvbFN0eWxlKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dlb3NwYXRpYWxQb2x5Z29uU3ltYm9sU3R5bGUgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGaWxsQ29sb3I6IChfKSA9PiBzZV9HZW9zcGF0aWFsQ29sb3IoXywgY29udGV4dCksXG4gICAgICAgIFN0cm9rZUNvbG9yOiAoXykgPT4gc2VfR2Vvc3BhdGlhbENvbG9yKF8sIGNvbnRleHQpLFxuICAgICAgICBTdHJva2VXaWR0aDogKF8pID0+IHNlX0dlb3NwYXRpYWxMaW5lV2lkdGgoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR2Vvc3BhdGlhbFdpbmRvd09wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCb3VuZHM6IChfKSA9PiBzZV9HZW9zcGF0aWFsQ29vcmRpbmF0ZUJvdW5kcyhfLCBjb250ZXh0KSxcbiAgICAgICAgTWFwWm9vbU1vZGU6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dyYWRpZW50Q29sb3IgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBTdG9wczogKF8pID0+IHNlX0dyYWRpZW50U3RvcExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfR3JhZGllbnRTdG9wID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29sb3I6IFtdLFxuICAgICAgICBEYXRhVmFsdWU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgICAgIEdyYWRpZW50T2Zmc2V0OiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0dyYWRpZW50U3RvcExpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfR3JhZGllbnRTdG9wKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Hcm93dGhSYXRlQ29tcHV0YXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb21wdXRhdGlvbklkOiBbXSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFBlcmlvZFNpemU6IFtdLFxuICAgICAgICBUaW1lOiBfanNvbixcbiAgICAgICAgVmFsdWU6IChfKSA9PiBzZV9NZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfSGVhdE1hcEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29sdW1uczogX2pzb24sXG4gICAgICAgIFJvd3M6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9IZWF0TWFwTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9IZWF0TWFwQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbG9yU2NhbGU6IChfKSA9PiBzZV9Db2xvclNjYWxlKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW5BeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBzZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIERhdGFMYWJlbHM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gc2VfSGVhdE1hcEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIExlZ2VuZDogX2pzb24sXG4gICAgICAgIFJvd0F4aXNEaXNwbGF5T3B0aW9uczogKF8pID0+IHNlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgUm93TGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9IZWF0TWFwU29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBzZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9IZWF0TWFwRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEhlYXRNYXBBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IHNlX0hlYXRNYXBBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9IZWF0TWFwTWVhc3VyZUZpZWxkTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0hlYXRNYXBTb3J0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEhlYXRNYXBDb2x1bW5JdGVtc0xpbWl0Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIEhlYXRNYXBDb2x1bW5Tb3J0OiAoXykgPT4gc2VfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgICAgIEhlYXRNYXBSb3dJdGVtc0xpbWl0Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIEhlYXRNYXBSb3dTb3J0OiAoXykgPT4gc2VfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfSGVhdE1hcFZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBzZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9IZWF0TWFwQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IFtdLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfSGlzdG9ncmFtQWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9IaXN0b2dyYW1NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0hpc3RvZ3JhbUJpbk9wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCaW5Db3VudDogX2pzb24sXG4gICAgICAgIEJpbldpZHRoOiAoXykgPT4gc2VfQmluV2lkdGhPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBTZWxlY3RlZEJpblR5cGU6IFtdLFxuICAgICAgICBTdGFydFZhbHVlOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0hpc3RvZ3JhbUNvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCaW5PcHRpb25zOiAoXykgPT4gc2VfSGlzdG9ncmFtQmluT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgRGF0YUxhYmVsczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBzZV9IaXN0b2dyYW1GaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBUb29sdGlwOiAoXykgPT4gc2VfVG9vbHRpcE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFZpc3VhbFBhbGV0dGU6IF9qc29uLFxuICAgICAgICBYQXhpc0Rpc3BsYXlPcHRpb25zOiAoXykgPT4gc2VfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBYQXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBzZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfSGlzdG9ncmFtRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEhpc3RvZ3JhbUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfSGlzdG9ncmFtQWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfSGlzdG9ncmFtTWVhc3VyZUZpZWxkTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0hpc3RvZ3JhbVZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBzZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9IaXN0b2dyYW1Db25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IFtdLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfSW1hZ2VDdXN0b21BY3Rpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3Rpb25PcGVyYXRpb25zOiAoXykgPT4gc2VfSW1hZ2VDdXN0b21BY3Rpb25PcGVyYXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDdXN0b21BY3Rpb25JZDogW10sXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBTdGF0dXM6IFtdLFxuICAgICAgICBUcmlnZ2VyOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9JbWFnZUN1c3RvbUFjdGlvbkxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfSW1hZ2VDdXN0b21BY3Rpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX0ltYWdlQ3VzdG9tQWN0aW9uT3BlcmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgTmF2aWdhdGlvbk9wZXJhdGlvbjogX2pzb24sXG4gICAgICAgIFNldFBhcmFtZXRlcnNPcGVyYXRpb246IChfKSA9PiBzZV9DdXN0b21BY3Rpb25TZXRQYXJhbWV0ZXJzT3BlcmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBVUkxPcGVyYXRpb246IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0ltYWdlQ3VzdG9tQWN0aW9uT3BlcmF0aW9uTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9JbWFnZUN1c3RvbUFjdGlvbk9wZXJhdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfSW5uZXJGaWx0ZXIgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeUlubmVyRmlsdGVyOiAoXykgPT4gc2VfQ2F0ZWdvcnlJbm5lckZpbHRlcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9JbnNpZ2h0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbXB1dGF0aW9uczogKF8pID0+IHNlX0NvbXB1dGF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ3VzdG9tTmFycmF0aXZlOiBfanNvbixcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9JbnNpZ2h0VmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIERhdGFTZXRJZGVudGlmaWVyOiBbXSxcbiAgICAgICAgSW5zaWdodENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9JbnNpZ2h0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbENvbnRlbnRBbHRUZXh0OiBbXSxcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0tQSUFjdHVhbFZhbHVlQ29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgSWNvbjogX2pzb24sXG4gICAgICAgIFRleHRDb2xvcjogKF8pID0+IHNlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0tQSUNvbXBhcmlzb25WYWx1ZUNvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEljb246IF9qc29uLFxuICAgICAgICBUZXh0Q29sb3I6IChfKSA9PiBzZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9LUElDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25zOiAoXykgPT4gc2VfS1BJQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9LUElDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3R1YWxWYWx1ZTogKF8pID0+IHNlX0tQSUFjdHVhbFZhbHVlQ29uZGl0aW9uYWxGb3JtYXR0aW5nKF8sIGNvbnRleHQpLFxuICAgICAgICBDb21wYXJpc29uVmFsdWU6IChfKSA9PiBzZV9LUElDb21wYXJpc29uVmFsdWVDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgICAgIFByaW1hcnlWYWx1ZTogKF8pID0+IHNlX0tQSVByaW1hcnlWYWx1ZUNvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICAgICAgUHJvZ3Jlc3NCYXI6IChfKSA9PiBzZV9LUElQcm9ncmVzc0JhckNvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9LUElDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25MaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0tQSUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfS1BJQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBzZV9LUElGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBLUElPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9LUElTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9LUElGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgVGFyZ2V0VmFsdWVzOiAoXykgPT4gc2VfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgVHJlbmRHcm91cHM6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0tQSVByaW1hcnlWYWx1ZUNvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEljb246IF9qc29uLFxuICAgICAgICBUZXh0Q29sb3I6IChfKSA9PiBzZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9LUElQcm9ncmVzc0JhckNvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEZvcmVncm91bmRDb2xvcjogKF8pID0+IHNlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0tQSVNvcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgVHJlbmRHcm91cFNvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9LUElWaXN1YWwgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gc2VfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfS1BJQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmc6IChfKSA9PiBzZV9LUElDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxDb250ZW50QWx0VGV4dDogW10sXG4gICAgICAgIFZpc3VhbElkOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9MYXllckN1c3RvbUFjdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbk9wZXJhdGlvbnM6IChfKSA9PiBzZV9MYXllckN1c3RvbUFjdGlvbk9wZXJhdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIEN1c3RvbUFjdGlvbklkOiBbXSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFN0YXR1czogW10sXG4gICAgICAgIFRyaWdnZXI6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0xheWVyQ3VzdG9tQWN0aW9uTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9MYXllckN1c3RvbUFjdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTGF5ZXJDdXN0b21BY3Rpb25PcGVyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGaWx0ZXJPcGVyYXRpb246IF9qc29uLFxuICAgICAgICBOYXZpZ2F0aW9uT3BlcmF0aW9uOiBfanNvbixcbiAgICAgICAgU2V0UGFyYW1ldGVyc09wZXJhdGlvbjogKF8pID0+IHNlX0N1c3RvbUFjdGlvblNldFBhcmFtZXRlcnNPcGVyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFVSTE9wZXJhdGlvbjogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTGF5ZXJDdXN0b21BY3Rpb25PcGVyYXRpb25MaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX0xheWVyQ3VzdG9tQWN0aW9uT3BlcmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9MYXllck1hcFZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX0dlb3NwYXRpYWxMYXllck1hcENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIERhdGFTZXRJZGVudGlmaWVyOiBbXSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbENvbnRlbnRBbHRUZXh0OiBbXSxcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0xheW91dCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9MYXlvdXRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0xheW91dENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGcmVlRm9ybUxheW91dDogX2pzb24sXG4gICAgICAgIEdyaWRMYXlvdXQ6IF9qc29uLFxuICAgICAgICBTZWN0aW9uQmFzZWRMYXlvdXQ6IChfKSA9PiBzZV9TZWN0aW9uQmFzZWRMYXlvdXRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0xheW91dExpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfTGF5b3V0KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9MaW5lQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENhdGVnb3J5OiBfanNvbixcbiAgICAgICAgQ29sb3JzOiBfanNvbixcbiAgICAgICAgU21hbGxNdWx0aXBsZXM6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBzZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0xpbmVDaGFydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb250cmlidXRpb25BbmFseXNpc0RlZmF1bHRzOiBfanNvbixcbiAgICAgICAgRGF0YUxhYmVsczogX2pzb24sXG4gICAgICAgIERlZmF1bHRTZXJpZXNTZXR0aW5nczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBzZV9MaW5lQ2hhcnRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBGb3JlY2FzdENvbmZpZ3VyYXRpb25zOiAoXykgPT4gc2VfRm9yZWNhc3RDb25maWd1cmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgTGVnZW5kOiBfanNvbixcbiAgICAgICAgUHJpbWFyeVlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBzZV9MaW5lU2VyaWVzQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBQcmltYXJ5WUF4aXNMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBSZWZlcmVuY2VMaW5lczogKF8pID0+IHNlX1JlZmVyZW5jZUxpbmVMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTZWNvbmRhcnlZQXhpc0Rpc3BsYXlPcHRpb25zOiAoXykgPT4gc2VfTGluZVNlcmllc0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgU2Vjb25kYXJ5WUF4aXNMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBTZXJpZXM6IF9qc29uLFxuICAgICAgICBTaW5nbGVBeGlzT3B0aW9uczogX2pzb24sXG4gICAgICAgIFNtYWxsTXVsdGlwbGVzT3B0aW9uczogX2pzb24sXG4gICAgICAgIFNvcnRDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfTGluZUNoYXJ0U29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBzZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVHlwZTogW10sXG4gICAgICAgIFZpc3VhbFBhbGV0dGU6IF9qc29uLFxuICAgICAgICBYQXhpc0Rpc3BsYXlPcHRpb25zOiAoXykgPT4gc2VfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBYQXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTGluZUNoYXJ0RmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIExpbmVDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfTGluZUNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTGluZUNoYXJ0U29ydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeUl0ZW1zTGltaXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgQ2F0ZWdvcnlTb3J0OiAoXykgPT4gc2VfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgICAgIENvbG9ySXRlbXNMaW1pdENvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBTbWFsbE11bHRpcGxlc0xpbWl0Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIFNtYWxsTXVsdGlwbGVzU29ydDogKF8pID0+IHNlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0xpbmVDaGFydFZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBzZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9MaW5lQ2hhcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW5IaWVyYXJjaGllczogKF8pID0+IHNlX0NvbHVtbkhpZXJhcmNoeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxDb250ZW50QWx0VGV4dDogW10sXG4gICAgICAgIFZpc3VhbElkOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9MaW5lU2VyaWVzQXhpc0Rpc3BsYXlPcHRpb25zID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQXhpc09wdGlvbnM6IChfKSA9PiBzZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIE1pc3NpbmdEYXRhQ29uZmlndXJhdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0xvZ2ljYWxUYWJsZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFsaWFzOiBbXSxcbiAgICAgICAgRGF0YVRyYW5zZm9ybXM6IChfKSA9PiBzZV9UcmFuc2Zvcm1PcGVyYXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTb3VyY2U6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX0xvZ2ljYWxUYWJsZU1hcCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhpbnB1dCkucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH1cbiAgICAgICAgYWNjW2tleV0gPSBzZV9Mb2dpY2FsVGFibGUodmFsdWUsIGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbn07XG5jb25zdCBzZV9NYXhpbXVtTWluaW11bUNvbXB1dGF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29tcHV0YXRpb25JZDogW10sXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBUaW1lOiBfanNvbixcbiAgICAgICAgVHlwZTogW10sXG4gICAgICAgIFZhbHVlOiAoXykgPT4gc2VfTWVhc3VyZUZpZWxkKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX01lYXN1cmVGaWVsZCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENhbGN1bGF0ZWRNZWFzdXJlRmllbGQ6IF9qc29uLFxuICAgICAgICBDYXRlZ29yaWNhbE1lYXN1cmVGaWVsZDogX2pzb24sXG4gICAgICAgIERhdGVNZWFzdXJlRmllbGQ6IF9qc29uLFxuICAgICAgICBOdW1lcmljYWxNZWFzdXJlRmllbGQ6IChfKSA9PiBzZV9OdW1lcmljYWxNZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTWVhc3VyZUZpZWxkTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX01ldHJpY0NvbXBhcmlzb25Db21wdXRhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbXB1dGF0aW9uSWQ6IFtdLFxuICAgICAgICBGcm9tVmFsdWU6IChfKSA9PiBzZV9NZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBUYXJnZXRWYWx1ZTogKF8pID0+IHNlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICAgICAgVGltZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTmVzdGVkRmlsdGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgRmlsdGVySWQ6IFtdLFxuICAgICAgICBJbmNsdWRlSW5uZXJTZXQ6IFtdLFxuICAgICAgICBJbm5lckZpbHRlcjogKF8pID0+IHNlX0lubmVyRmlsdGVyKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX05ld0RlZmF1bHRWYWx1ZXMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEYXRlVGltZVN0YXRpY1ZhbHVlczogKF8pID0+IHNlX0RhdGVUaW1lRGF0YXNldFBhcmFtZXRlclZhbHVlTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgRGVjaW1hbFN0YXRpY1ZhbHVlczogKF8pID0+IHNlX0RlY2ltYWxEYXRhc2V0UGFyYW1ldGVyVmFsdWVMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlZ2VyU3RhdGljVmFsdWVzOiBfanNvbixcbiAgICAgICAgU3RyaW5nU3RhdGljVmFsdWVzOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9OdW1lcmljYWxBZ2dyZWdhdGlvbkZ1bmN0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgUGVyY2VudGlsZUFnZ3JlZ2F0aW9uOiAoXykgPT4gc2VfUGVyY2VudGlsZUFnZ3JlZ2F0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBTaW1wbGVOdW1lcmljYWxBZ2dyZWdhdGlvbjogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfTnVtZXJpY2FsTWVhc3VyZUZpZWxkID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWdncmVnYXRpb25GdW5jdGlvbjogKF8pID0+IHNlX051bWVyaWNhbEFnZ3JlZ2F0aW9uRnVuY3Rpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIEZpZWxkSWQ6IFtdLFxuICAgICAgICBGb3JtYXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9OdW1lcmljQXhpc09wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBSYW5nZTogKF8pID0+IHNlX0F4aXNEaXNwbGF5UmFuZ2UoXywgY29udGV4dCksXG4gICAgICAgIFNjYWxlOiAoXykgPT4gc2VfQXhpc1NjYWxlKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX051bWVyaWNFcXVhbGl0eURyaWxsRG93bkZpbHRlciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIFZhbHVlOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX051bWVyaWNFcXVhbGl0eUZpbHRlciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFnZ3JlZ2F0aW9uRnVuY3Rpb246IChfKSA9PiBzZV9BZ2dyZWdhdGlvbkZ1bmN0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBEZWZhdWx0RmlsdGVyQ29udHJvbENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9EZWZhdWx0RmlsdGVyQ29udHJvbENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIEZpbHRlcklkOiBbXSxcbiAgICAgICAgTWF0Y2hPcGVyYXRvcjogW10sXG4gICAgICAgIE51bGxPcHRpb246IFtdLFxuICAgICAgICBQYXJhbWV0ZXJOYW1lOiBbXSxcbiAgICAgICAgU2VsZWN0QWxsT3B0aW9uczogW10sXG4gICAgICAgIFZhbHVlOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX051bWVyaWNSYW5nZUZpbHRlciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFnZ3JlZ2F0aW9uRnVuY3Rpb246IChfKSA9PiBzZV9BZ2dyZWdhdGlvbkZ1bmN0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBEZWZhdWx0RmlsdGVyQ29udHJvbENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9EZWZhdWx0RmlsdGVyQ29udHJvbENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIEZpbHRlcklkOiBbXSxcbiAgICAgICAgSW5jbHVkZU1heGltdW06IFtdLFxuICAgICAgICBJbmNsdWRlTWluaW11bTogW10sXG4gICAgICAgIE51bGxPcHRpb246IFtdLFxuICAgICAgICBSYW5nZU1heGltdW06IChfKSA9PiBzZV9OdW1lcmljUmFuZ2VGaWx0ZXJWYWx1ZShfLCBjb250ZXh0KSxcbiAgICAgICAgUmFuZ2VNaW5pbXVtOiAoXykgPT4gc2VfTnVtZXJpY1JhbmdlRmlsdGVyVmFsdWUoXywgY29udGV4dCksXG4gICAgICAgIFNlbGVjdEFsbE9wdGlvbnM6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX051bWVyaWNSYW5nZUZpbHRlclZhbHVlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgUGFyYW1ldGVyOiBbXSxcbiAgICAgICAgU3RhdGljVmFsdWU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfT3ZlcnJpZGVEYXRhc2V0UGFyYW1ldGVyT3BlcmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgTmV3RGVmYXVsdFZhbHVlczogKF8pID0+IHNlX05ld0RlZmF1bHRWYWx1ZXMoXywgY29udGV4dCksXG4gICAgICAgIE5ld1BhcmFtZXRlck5hbWU6IFtdLFxuICAgICAgICBQYXJhbWV0ZXJOYW1lOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QYXJhbWV0ZXJDb250cm9sID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGF0ZVRpbWVQaWNrZXI6IF9qc29uLFxuICAgICAgICBEcm9wZG93bjogX2pzb24sXG4gICAgICAgIExpc3Q6IF9qc29uLFxuICAgICAgICBTbGlkZXI6IChfKSA9PiBzZV9QYXJhbWV0ZXJTbGlkZXJDb250cm9sKF8sIGNvbnRleHQpLFxuICAgICAgICBUZXh0QXJlYTogX2pzb24sXG4gICAgICAgIFRleHRGaWVsZDogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGFyYW1ldGVyQ29udHJvbExpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfUGFyYW1ldGVyQ29udHJvbChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGFyYW1ldGVyRGVjbGFyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEYXRlVGltZVBhcmFtZXRlckRlY2xhcmF0aW9uOiAoXykgPT4gc2VfRGF0ZVRpbWVQYXJhbWV0ZXJEZWNsYXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgRGVjaW1hbFBhcmFtZXRlckRlY2xhcmF0aW9uOiAoXykgPT4gc2VfRGVjaW1hbFBhcmFtZXRlckRlY2xhcmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlZ2VyUGFyYW1ldGVyRGVjbGFyYXRpb246IF9qc29uLFxuICAgICAgICBTdHJpbmdQYXJhbWV0ZXJEZWNsYXJhdGlvbjogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGFyYW1ldGVyRGVjbGFyYXRpb25MaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX1BhcmFtZXRlckRlY2xhcmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9fUGFyYW1ldGVycyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERhdGVUaW1lUGFyYW1ldGVyczogKF8pID0+IHNlX0RhdGVUaW1lUGFyYW1ldGVyTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgRGVjaW1hbFBhcmFtZXRlcnM6IChfKSA9PiBzZV9EZWNpbWFsUGFyYW1ldGVyTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZWdlclBhcmFtZXRlcnM6IF9qc29uLFxuICAgICAgICBTdHJpbmdQYXJhbWV0ZXJzOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QYXJhbWV0ZXJTbGlkZXJDb250cm9sID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRGlzcGxheU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBNYXhpbXVtVmFsdWU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgICAgIE1pbmltdW1WYWx1ZTogX19zZXJpYWxpemVGbG9hdCxcbiAgICAgICAgUGFyYW1ldGVyQ29udHJvbElkOiBbXSxcbiAgICAgICAgU291cmNlUGFyYW1ldGVyTmFtZTogW10sXG4gICAgICAgIFN0ZXBTaXplOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgICAgICBUaXRsZTogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGVyY2VudGlsZUFnZ3JlZ2F0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgUGVyY2VudGlsZVZhbHVlOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1BlcmNlbnRWaXNpYmxlUmFuZ2UgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGcm9tOiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgICAgICBUbzogX19zZXJpYWxpemVGbG9hdCxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QZXJpb2RPdmVyUGVyaW9kQ29tcHV0YXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb21wdXRhdGlvbklkOiBbXSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFRpbWU6IF9qc29uLFxuICAgICAgICBWYWx1ZTogKF8pID0+IHNlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QZXJpb2RUb0RhdGVDb21wdXRhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbXB1dGF0aW9uSWQ6IFtdLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgUGVyaW9kVGltZUdyYW51bGFyaXR5OiBbXSxcbiAgICAgICAgVGltZTogX2pzb24sXG4gICAgICAgIFZhbHVlOiAoXykgPT4gc2VfTWVhc3VyZUZpZWxkKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1BpZUNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeTogX2pzb24sXG4gICAgICAgIFNtYWxsTXVsdGlwbGVzOiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gc2VfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QaWVDaGFydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIENvbnRyaWJ1dGlvbkFuYWx5c2lzRGVmYXVsdHM6IF9qc29uLFxuICAgICAgICBEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgRG9udXRPcHRpb25zOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IHNlX1BpZUNoYXJ0RmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgTGVnZW5kOiBfanNvbixcbiAgICAgICAgU21hbGxNdWx0aXBsZXNPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9QaWVDaGFydFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUb29sdGlwOiAoXykgPT4gc2VfVG9vbHRpcE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFZhbHVlTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGllQ2hhcnRGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgUGllQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IHNlX1BpZUNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGllQ2hhcnRTb3J0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENhdGVnb3J5SXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIENhdGVnb3J5U29ydDogKF8pID0+IHNlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTbWFsbE11bHRpcGxlc0xpbWl0Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIFNtYWxsTXVsdGlwbGVzU29ydDogKF8pID0+IHNlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1BpZUNoYXJ0VmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX1BpZUNoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IFtdLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGl2b3RGaWVsZFNvcnRPcHRpb25zID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRmllbGRJZDogW10sXG4gICAgICAgIFNvcnRCeTogKF8pID0+IHNlX1Bpdm90VGFibGVTb3J0QnkoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGl2b3RGaWVsZFNvcnRPcHRpb25zTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9QaXZvdEZpZWxkU29ydE9wdGlvbnMoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX1Bpdm90TWVhc3VyZUZpZWxkTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX1Bpdm90VGFibGVBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbHVtbnM6IF9qc29uLFxuICAgICAgICBSb3dzOiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gc2VfUGl2b3RNZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1Bpdm90VGFibGVDZWxsQ29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRmllbGRJZDogW10sXG4gICAgICAgIFNjb3BlOiBfanNvbixcbiAgICAgICAgU2NvcGVzOiBfanNvbixcbiAgICAgICAgVGV4dEZvcm1hdDogKF8pID0+IHNlX1RleHRDb25kaXRpb25hbEZvcm1hdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QaXZvdFRhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uczogKF8pID0+IHNlX1Bpdm90VGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1Bpdm90VGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDZWxsOiAoXykgPT4gc2VfUGl2b3RUYWJsZUNlbGxDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGl2b3RUYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbkxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfUGl2b3RUYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGl2b3RUYWJsZUNvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGaWVsZE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gc2VfUGl2b3RUYWJsZUZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIFBhZ2luYXRlZFJlcG9ydE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX1Bpdm90VGFibGVTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVGFibGVPcHRpb25zOiBfanNvbixcbiAgICAgICAgVG90YWxPcHRpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QaXZvdFRhYmxlRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFBpdm90VGFibGVBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IHNlX1Bpdm90VGFibGVBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QaXZvdFRhYmxlU29ydEJ5ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29sdW1uOiAoXykgPT4gc2VfQ29sdW1uU29ydChfLCBjb250ZXh0KSxcbiAgICAgICAgRGF0YVBhdGg6IF9qc29uLFxuICAgICAgICBGaWVsZDogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGl2b3RUYWJsZVNvcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgRmllbGRTb3J0T3B0aW9uczogKF8pID0+IHNlX1Bpdm90RmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGl2b3RUYWJsZVZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBzZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9QaXZvdFRhYmxlQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29uZGl0aW9uYWxGb3JtYXR0aW5nOiAoXykgPT4gc2VfUGl2b3RUYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbENvbnRlbnRBbHRUZXh0OiBbXSxcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1BsdWdpblZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBzZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9QbHVnaW5WaXN1YWxDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBQbHVnaW5Bcm46IFtdLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IFtdLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGx1Z2luVmlzdWFsQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBzZV9QbHVnaW5WaXN1YWxGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX1BsdWdpblZpc3VhbFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBWaXN1YWxPcHRpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QbHVnaW5WaXN1YWxGaWVsZFdlbGwgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBeGlzTmFtZTogW10sXG4gICAgICAgIERpbWVuc2lvbnM6IF9qc29uLFxuICAgICAgICBNZWFzdXJlczogKF8pID0+IHNlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgICAgIFVuYWdncmVnYXRlZDogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUGx1Z2luVmlzdWFsRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9QbHVnaW5WaXN1YWxGaWVsZFdlbGwoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX1BsdWdpblZpc3VhbFNvcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgUGx1Z2luVmlzdWFsVGFibGVRdWVyeVNvcnQ6IChfKSA9PiBzZV9QbHVnaW5WaXN1YWxUYWJsZVF1ZXJ5U29ydChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9QbHVnaW5WaXN1YWxUYWJsZVF1ZXJ5U29ydCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEl0ZW1zTGltaXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgUm93U29ydDogKF8pID0+IHNlX1Jvd1NvcnRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1ByZWRlZmluZWRIaWVyYXJjaHkgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2x1bW5zOiBfanNvbixcbiAgICAgICAgRHJpbGxEb3duRmlsdGVyczogKF8pID0+IHNlX0RyaWxsRG93bkZpbHRlckxpc3QoXywgY29udGV4dCksXG4gICAgICAgIEhpZXJhcmNoeUlkOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9SYWRhckNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeTogX2pzb24sXG4gICAgICAgIENvbG9yOiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gc2VfUmFkYXJDaGFydFZhbHVlc0ZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9SYWRhckNoYXJ0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFsdGVybmF0ZUJhbmRDb2xvcnNWaXNpYmlsaXR5OiBbXSxcbiAgICAgICAgQWx0ZXJuYXRlQmFuZEV2ZW5Db2xvcjogW10sXG4gICAgICAgIEFsdGVybmF0ZUJhbmRPZGRDb2xvcjogW10sXG4gICAgICAgIEF4ZXNSYW5nZVNjYWxlOiBbXSxcbiAgICAgICAgQmFzZVNlcmllc1NldHRpbmdzOiBfanNvbixcbiAgICAgICAgQ2F0ZWdvcnlBeGlzOiAoXykgPT4gc2VfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBDYXRlZ29yeUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIENvbG9yQXhpczogKF8pID0+IHNlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sb3JMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gc2VfUmFkYXJDaGFydEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIExlZ2VuZDogX2pzb24sXG4gICAgICAgIFNoYXBlOiBbXSxcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9SYWRhckNoYXJ0U29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFN0YXJ0QW5nbGU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgICAgIFZpc3VhbFBhbGV0dGU6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1JhZGFyQ2hhcnRGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgUmFkYXJDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfUmFkYXJDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1JhZGFyQ2hhcnRTb3J0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENhdGVnb3J5SXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIENhdGVnb3J5U29ydDogKF8pID0+IHNlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDb2xvckl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBDb2xvclNvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9SYWRhckNoYXJ0VmFsdWVzRmllbGRMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX01lYXN1cmVGaWVsZChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUmFkYXJDaGFydFZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBzZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9SYWRhckNoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IFtdLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUmVmZXJlbmNlTGluZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERhdGFDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfUmVmZXJlbmNlTGluZURhdGFDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBMYWJlbENvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBTdGF0dXM6IFtdLFxuICAgICAgICBTdHlsZUNvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1JlZmVyZW5jZUxpbmVEYXRhQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEF4aXNCaW5kaW5nOiBbXSxcbiAgICAgICAgRHluYW1pY0NvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9SZWZlcmVuY2VMaW5lRHluYW1pY0RhdGFDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBTZXJpZXNUeXBlOiBbXSxcbiAgICAgICAgU3RhdGljQ29uZmlndXJhdGlvbjogKF8pID0+IHNlX1JlZmVyZW5jZUxpbmVTdGF0aWNEYXRhQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9SZWZlcmVuY2VMaW5lRHluYW1pY0RhdGFDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2FsY3VsYXRpb246IChfKSA9PiBzZV9OdW1lcmljYWxBZ2dyZWdhdGlvbkZ1bmN0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBNZWFzdXJlQWdncmVnYXRpb25GdW5jdGlvbjogKF8pID0+IHNlX0FnZ3JlZ2F0aW9uRnVuY3Rpb24oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUmVmZXJlbmNlTGluZUxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfUmVmZXJlbmNlTGluZShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUmVmZXJlbmNlTGluZVN0YXRpY0RhdGFDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgVmFsdWU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfUmVmcmVzaFNjaGVkdWxlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQXJuOiBbXSxcbiAgICAgICAgUmVmcmVzaFR5cGU6IFtdLFxuICAgICAgICBTY2hlZHVsZUZyZXF1ZW5jeTogX2pzb24sXG4gICAgICAgIFNjaGVkdWxlSWQ6IFtdLFxuICAgICAgICBTdGFydEFmdGVyRGF0ZVRpbWU6IChfKSA9PiBfLmdldFRpbWUoKSAvIDFfMDAwLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1JlbGF0aXZlRGF0ZXNGaWx0ZXIgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBbmNob3JEYXRlQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIERlZmF1bHRGaWx0ZXJDb250cm9sQ29uZmlndXJhdGlvbjogKF8pID0+IHNlX0RlZmF1bHRGaWx0ZXJDb250cm9sQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgRXhjbHVkZVBlcmlvZENvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBGaWx0ZXJJZDogW10sXG4gICAgICAgIE1pbmltdW1HcmFudWxhcml0eTogW10sXG4gICAgICAgIE51bGxPcHRpb246IFtdLFxuICAgICAgICBQYXJhbWV0ZXJOYW1lOiBbXSxcbiAgICAgICAgUmVsYXRpdmVEYXRlVHlwZTogW10sXG4gICAgICAgIFJlbGF0aXZlRGF0ZVZhbHVlOiBbXSxcbiAgICAgICAgVGltZUdyYW51bGFyaXR5OiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Sb3dTb3J0TGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9GaWVsZFNvcnRPcHRpb25zKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9TYW5rZXlEaWFncmFtQWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEZXN0aW5hdGlvbjogX2pzb24sXG4gICAgICAgIFNvdXJjZTogX2pzb24sXG4gICAgICAgIFdlaWdodDogKF8pID0+IHNlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfU2Fua2V5RGlhZ3JhbUNoYXJ0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERhdGFMYWJlbHM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gc2VfU2Fua2V5RGlhZ3JhbUZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIFNvcnRDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfU2Fua2V5RGlhZ3JhbVNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1NhbmtleURpYWdyYW1GaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgU2Fua2V5RGlhZ3JhbUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfU2Fua2V5RGlhZ3JhbUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1NhbmtleURpYWdyYW1Tb3J0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERlc3RpbmF0aW9uSXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIFNvdXJjZUl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBXZWlnaHRTb3J0OiAoXykgPT4gc2VfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfU2Fua2V5RGlhZ3JhbVZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBzZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9TYW5rZXlEaWFncmFtQ2hhcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IFtdLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfU2NhdHRlclBsb3RDYXRlZ29yaWNhbGx5QWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeTogX2pzb24sXG4gICAgICAgIExhYmVsOiBfanNvbixcbiAgICAgICAgU2l6ZTogKF8pID0+IHNlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgICAgIFhBeGlzOiAoXykgPT4gc2VfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgWUF4aXM6IChfKSA9PiBzZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1NjYXR0ZXJQbG90Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIERhdGFMYWJlbHM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gc2VfU2NhdHRlclBsb3RGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBzZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgICAgIFhBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBzZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFhBeGlzTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgWUF4aXNEaXNwbGF5T3B0aW9uczogKF8pID0+IHNlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgWUF4aXNMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1NjYXR0ZXJQbG90RmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFNjYXR0ZXJQbG90Q2F0ZWdvcmljYWxseUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfU2NhdHRlclBsb3RDYXRlZ29yaWNhbGx5QWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIFNjYXR0ZXJQbG90VW5hZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IHNlX1NjYXR0ZXJQbG90VW5hZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9TY2F0dGVyUGxvdFVuYWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeTogX2pzb24sXG4gICAgICAgIExhYmVsOiBfanNvbixcbiAgICAgICAgU2l6ZTogKF8pID0+IHNlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgICAgIFhBeGlzOiBfanNvbixcbiAgICAgICAgWUF4aXM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1NjYXR0ZXJQbG90VmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX1NjYXR0ZXJQbG90Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBzZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IFtdLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfU2Nyb2xsQmFyT3B0aW9ucyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFZpc2liaWxpdHk6IFtdLFxuICAgICAgICBWaXNpYmxlUmFuZ2U6IChfKSA9PiBzZV9WaXNpYmxlUmFuZ2VPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1NlY3Rpb25CYXNlZExheW91dENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCb2R5U2VjdGlvbnM6IChfKSA9PiBzZV9Cb2R5U2VjdGlvbkNvbmZpZ3VyYXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDYW52YXNTaXplT3B0aW9uczogX2pzb24sXG4gICAgICAgIEZvb3RlclNlY3Rpb25zOiBfanNvbixcbiAgICAgICAgSGVhZGVyU2VjdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1NlbnNpdGl2ZURvdWJsZUxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gX19zZXJpYWxpemVGbG9hdChlbnRyeSk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfU2Vuc2l0aXZlVGltZXN0YW1wTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBlbnRyeS5nZXRUaW1lKCkgLyAxXzAwMDtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9TZXRQYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEZXN0aW5hdGlvblBhcmFtZXRlck5hbWU6IFtdLFxuICAgICAgICBWYWx1ZTogKF8pID0+IHNlX0Rlc3RpbmF0aW9uUGFyYW1ldGVyVmFsdWVDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1NldFBhcmFtZXRlclZhbHVlQ29uZmlndXJhdGlvbkxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfU2V0UGFyYW1ldGVyVmFsdWVDb25maWd1cmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9TaGFwZUNvbmRpdGlvbmFsRm9ybWF0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQmFja2dyb3VuZENvbG9yOiAoXykgPT4gc2VfQ29uZGl0aW9uYWxGb3JtYXR0aW5nQ29sb3IoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfU2hlZXREZWZpbml0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29udGVudFR5cGU6IFtdLFxuICAgICAgICBDdXN0b21BY3Rpb25EZWZhdWx0czogX2pzb24sXG4gICAgICAgIERlc2NyaXB0aW9uOiBbXSxcbiAgICAgICAgRmlsdGVyQ29udHJvbHM6IChfKSA9PiBzZV9GaWx0ZXJDb250cm9sTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgSW1hZ2VzOiAoXykgPT4gc2VfU2hlZXRJbWFnZUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIExheW91dHM6IChfKSA9PiBzZV9MYXlvdXRMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgUGFyYW1ldGVyQ29udHJvbHM6IChfKSA9PiBzZV9QYXJhbWV0ZXJDb250cm9sTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU2hlZXRDb250cm9sTGF5b3V0czogX2pzb24sXG4gICAgICAgIFNoZWV0SWQ6IFtdLFxuICAgICAgICBUZXh0Qm94ZXM6IF9qc29uLFxuICAgICAgICBUaXRsZTogW10sXG4gICAgICAgIFZpc3VhbHM6IChfKSA9PiBzZV9WaXN1YWxMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1NoZWV0RGVmaW5pdGlvbkxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfU2hlZXREZWZpbml0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9TaGVldEltYWdlID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX0ltYWdlQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgSW1hZ2VDb250ZW50QWx0VGV4dDogW10sXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIFNjYWxpbmc6IF9qc29uLFxuICAgICAgICBTaGVldEltYWdlSWQ6IFtdLFxuICAgICAgICBTb3VyY2U6IF9qc29uLFxuICAgICAgICBUb29sdGlwOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9TaGVldEltYWdlTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9TaGVldEltYWdlKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbn07XG5jb25zdCBzZV9TbmFwc2hvdENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEZXN0aW5hdGlvbkNvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBGaWxlR3JvdXBzOiBfanNvbixcbiAgICAgICAgUGFyYW1ldGVyczogKF8pID0+IHNlX19QYXJhbWV0ZXJzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RhYmxlQWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBHcm91cEJ5OiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gc2VfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UYWJsZUNlbGxDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGaWVsZElkOiBbXSxcbiAgICAgICAgVGV4dEZvcm1hdDogKF8pID0+IHNlX1RleHRDb25kaXRpb25hbEZvcm1hdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbnM6IChfKSA9PiBzZV9UYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDZWxsOiAoXykgPT4gc2VfVGFibGVDZWxsQ29uZGl0aW9uYWxGb3JtYXR0aW5nKF8sIGNvbnRleHQpLFxuICAgICAgICBSb3c6IChfKSA9PiBzZV9UYWJsZVJvd0NvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbkxpc3QgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gaW5wdXRcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gc2VfVGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RhYmxlQ29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEZpZWxkT3B0aW9uczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBzZV9UYWJsZUZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIFBhZ2luYXRlZFJlcG9ydE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX1RhYmxlU29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRhYmxlSW5saW5lVmlzdWFsaXphdGlvbnM6IF9qc29uLFxuICAgICAgICBUYWJsZU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBUb3RhbE9wdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RhYmxlRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFRhYmxlQWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBzZV9UYWJsZUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBUYWJsZVVuYWdncmVnYXRlZEZpZWxkV2VsbHM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RhYmxlUm93Q29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQmFja2dyb3VuZENvbG9yOiAoXykgPT4gc2VfQ29uZGl0aW9uYWxGb3JtYXR0aW5nQ29sb3IoXywgY29udGV4dCksXG4gICAgICAgIFRleHRDb2xvcjogKF8pID0+IHNlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RhYmxlU29ydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBQYWdpbmF0aW9uQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIFJvd1NvcnQ6IChfKSA9PiBzZV9Sb3dTb3J0TGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UYWJsZVZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBzZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9UYWJsZUNvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbmRpdGlvbmFsRm9ybWF0dGluZzogKF8pID0+IHNlX1RhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nKF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IFtdLFxuICAgICAgICBWaXN1YWxJZDogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVGVtcGxhdGVWZXJzaW9uRGVmaW5pdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFuYWx5c2lzRGVmYXVsdHM6IF9qc29uLFxuICAgICAgICBDYWxjdWxhdGVkRmllbGRzOiBfanNvbixcbiAgICAgICAgQ29sdW1uQ29uZmlndXJhdGlvbnM6IF9qc29uLFxuICAgICAgICBEYXRhU2V0Q29uZmlndXJhdGlvbnM6IF9qc29uLFxuICAgICAgICBGaWx0ZXJHcm91cHM6IChfKSA9PiBzZV9GaWx0ZXJHcm91cExpc3QoXywgY29udGV4dCksXG4gICAgICAgIE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBQYXJhbWV0ZXJEZWNsYXJhdGlvbnM6IChfKSA9PiBzZV9QYXJhbWV0ZXJEZWNsYXJhdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFF1ZXJ5RXhlY3V0aW9uT3B0aW9uczogX2pzb24sXG4gICAgICAgIFNoZWV0czogKF8pID0+IHNlX1NoZWV0RGVmaW5pdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFN0YXRpY0ZpbGVzOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UZXh0Q29uZGl0aW9uYWxGb3JtYXQgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCYWNrZ3JvdW5kQ29sb3I6IChfKSA9PiBzZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICAgICAgSWNvbjogX2pzb24sXG4gICAgICAgIFRleHRDb2xvcjogKF8pID0+IHNlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RpbWVCYXNlZEZvcmVjYXN0UHJvcGVydGllcyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIExvd2VyQm91bmRhcnk6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgICAgIFBlcmlvZHNCYWNrd2FyZDogW10sXG4gICAgICAgIFBlcmlvZHNGb3J3YXJkOiBbXSxcbiAgICAgICAgUHJlZGljdGlvbkludGVydmFsOiBbXSxcbiAgICAgICAgU2Vhc29uYWxpdHk6IFtdLFxuICAgICAgICBVcHBlckJvdW5kYXJ5OiBfX3NlcmlhbGl6ZUZsb2F0LFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RpbWVFcXVhbGl0eUZpbHRlciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIERlZmF1bHRGaWx0ZXJDb250cm9sQ29uZmlndXJhdGlvbjogKF8pID0+IHNlX0RlZmF1bHRGaWx0ZXJDb250cm9sQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgRmlsdGVySWQ6IFtdLFxuICAgICAgICBQYXJhbWV0ZXJOYW1lOiBbXSxcbiAgICAgICAgUm9sbGluZ0RhdGU6IF9qc29uLFxuICAgICAgICBUaW1lR3JhbnVsYXJpdHk6IFtdLFxuICAgICAgICBWYWx1ZTogKF8pID0+IF8uZ2V0VGltZSgpIC8gMV8wMDAsXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVGltZVJhbmdlRHJpbGxEb3duRmlsdGVyID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgUmFuZ2VNYXhpbXVtOiAoXykgPT4gXy5nZXRUaW1lKCkgLyAxXzAwMCxcbiAgICAgICAgUmFuZ2VNaW5pbXVtOiAoXykgPT4gXy5nZXRUaW1lKCkgLyAxXzAwMCxcbiAgICAgICAgVGltZUdyYW51bGFyaXR5OiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UaW1lUmFuZ2VGaWx0ZXIgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBEZWZhdWx0RmlsdGVyQ29udHJvbENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9EZWZhdWx0RmlsdGVyQ29udHJvbENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIEV4Y2x1ZGVQZXJpb2RDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgRmlsdGVySWQ6IFtdLFxuICAgICAgICBJbmNsdWRlTWF4aW11bTogW10sXG4gICAgICAgIEluY2x1ZGVNaW5pbXVtOiBbXSxcbiAgICAgICAgTnVsbE9wdGlvbjogW10sXG4gICAgICAgIFJhbmdlTWF4aW11bVZhbHVlOiAoXykgPT4gc2VfVGltZVJhbmdlRmlsdGVyVmFsdWUoXywgY29udGV4dCksXG4gICAgICAgIFJhbmdlTWluaW11bVZhbHVlOiAoXykgPT4gc2VfVGltZVJhbmdlRmlsdGVyVmFsdWUoXywgY29udGV4dCksXG4gICAgICAgIFRpbWVHcmFudWxhcml0eTogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVGltZVJhbmdlRmlsdGVyVmFsdWUgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBQYXJhbWV0ZXI6IFtdLFxuICAgICAgICBSb2xsaW5nRGF0ZTogX2pzb24sXG4gICAgICAgIFN0YXRpY1ZhbHVlOiAoXykgPT4gXy5nZXRUaW1lKCkgLyAxXzAwMCxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Ub29sdGlwSXRlbSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbHVtblRvb2x0aXBJdGVtOiAoXykgPT4gc2VfQ29sdW1uVG9vbHRpcEl0ZW0oXywgY29udGV4dCksXG4gICAgICAgIEZpZWxkVG9vbHRpcEl0ZW06IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1Rvb2x0aXBJdGVtTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9Ub29sdGlwSXRlbShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVG9vbHRpcE9wdGlvbnMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBGaWVsZEJhc2VkVG9vbHRpcDogKF8pID0+IHNlX0ZpZWxkQmFzZWRUb29sdGlwKF8sIGNvbnRleHQpLFxuICAgICAgICBTZWxlY3RlZFRvb2x0aXBUeXBlOiBbXSxcbiAgICAgICAgVG9vbHRpcFZpc2liaWxpdHk6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RvcEJvdHRvbUZpbHRlciA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFnZ3JlZ2F0aW9uU29ydENvbmZpZ3VyYXRpb25zOiAoXykgPT4gc2VfQWdncmVnYXRpb25Tb3J0Q29uZmlndXJhdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIERlZmF1bHRGaWx0ZXJDb250cm9sQ29uZmlndXJhdGlvbjogKF8pID0+IHNlX0RlZmF1bHRGaWx0ZXJDb250cm9sQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgRmlsdGVySWQ6IFtdLFxuICAgICAgICBMaW1pdDogW10sXG4gICAgICAgIFBhcmFtZXRlck5hbWU6IFtdLFxuICAgICAgICBUaW1lR3JhbnVsYXJpdHk6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RvcEJvdHRvbU1vdmVyc0NvbXB1dGF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnk6IF9qc29uLFxuICAgICAgICBDb21wdXRhdGlvbklkOiBbXSxcbiAgICAgICAgTW92ZXJTaXplOiBbXSxcbiAgICAgICAgTmFtZTogW10sXG4gICAgICAgIFNvcnRPcmRlcjogW10sXG4gICAgICAgIFRpbWU6IF9qc29uLFxuICAgICAgICBUeXBlOiBbXSxcbiAgICAgICAgVmFsdWU6IChfKSA9PiBzZV9NZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVG9wQm90dG9tUmFua2VkQ29tcHV0YXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeTogX2pzb24sXG4gICAgICAgIENvbXB1dGF0aW9uSWQ6IFtdLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgUmVzdWx0U2l6ZTogW10sXG4gICAgICAgIFR5cGU6IFtdLFxuICAgICAgICBWYWx1ZTogKF8pID0+IHNlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Ub3BpY1JlZnJlc2hTY2hlZHVsZSA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEJhc2VkT25TcGljZVNjaGVkdWxlOiBbXSxcbiAgICAgICAgSXNFbmFibGVkOiBbXSxcbiAgICAgICAgUmVwZWF0QXQ6IFtdLFxuICAgICAgICBTdGFydGluZ0F0OiAoXykgPT4gXy5nZXRUaW1lKCkgLyAxXzAwMCxcbiAgICAgICAgVGltZXpvbmU6IFtdLFxuICAgICAgICBUb3BpY1NjaGVkdWxlVHlwZTogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVG9waWNWaXN1YWwgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBJcjogX2pzb24sXG4gICAgICAgIFJvbGU6IFtdLFxuICAgICAgICBTdXBwb3J0aW5nVmlzdWFsczogKF8pID0+IHNlX1RvcGljVmlzdWFscyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RvcGljVmlzdWFscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9Ub3BpY1Zpc3VhbChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVG90YWxBZ2dyZWdhdGlvbkNvbXB1dGF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29tcHV0YXRpb25JZDogW10sXG4gICAgICAgIE5hbWU6IFtdLFxuICAgICAgICBWYWx1ZTogKF8pID0+IHNlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UcmFuc2Zvcm1PcGVyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gVHJhbnNmb3JtT3BlcmF0aW9uLnZpc2l0KGlucHV0LCB7XG4gICAgICAgIENhc3RDb2x1bW5UeXBlT3BlcmF0aW9uOiAodmFsdWUpID0+ICh7IENhc3RDb2x1bW5UeXBlT3BlcmF0aW9uOiBfanNvbih2YWx1ZSkgfSksXG4gICAgICAgIENyZWF0ZUNvbHVtbnNPcGVyYXRpb246ICh2YWx1ZSkgPT4gKHsgQ3JlYXRlQ29sdW1uc09wZXJhdGlvbjogX2pzb24odmFsdWUpIH0pLFxuICAgICAgICBGaWx0ZXJPcGVyYXRpb246ICh2YWx1ZSkgPT4gKHsgRmlsdGVyT3BlcmF0aW9uOiBfanNvbih2YWx1ZSkgfSksXG4gICAgICAgIE92ZXJyaWRlRGF0YXNldFBhcmFtZXRlck9wZXJhdGlvbjogKHZhbHVlKSA9PiAoe1xuICAgICAgICAgICAgT3ZlcnJpZGVEYXRhc2V0UGFyYW1ldGVyT3BlcmF0aW9uOiBzZV9PdmVycmlkZURhdGFzZXRQYXJhbWV0ZXJPcGVyYXRpb24odmFsdWUsIGNvbnRleHQpLFxuICAgICAgICB9KSxcbiAgICAgICAgUHJvamVjdE9wZXJhdGlvbjogKHZhbHVlKSA9PiAoeyBQcm9qZWN0T3BlcmF0aW9uOiBfanNvbih2YWx1ZSkgfSksXG4gICAgICAgIFJlbmFtZUNvbHVtbk9wZXJhdGlvbjogKHZhbHVlKSA9PiAoeyBSZW5hbWVDb2x1bW5PcGVyYXRpb246IF9qc29uKHZhbHVlKSB9KSxcbiAgICAgICAgVGFnQ29sdW1uT3BlcmF0aW9uOiAodmFsdWUpID0+ICh7IFRhZ0NvbHVtbk9wZXJhdGlvbjogX2pzb24odmFsdWUpIH0pLFxuICAgICAgICBVbnRhZ0NvbHVtbk9wZXJhdGlvbjogKHZhbHVlKSA9PiAoeyBVbnRhZ0NvbHVtbk9wZXJhdGlvbjogX2pzb24odmFsdWUpIH0pLFxuICAgICAgICBfOiAobmFtZSwgdmFsdWUpID0+ICh7IFtuYW1lXTogdmFsdWUgfSksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVHJhbnNmb3JtT3BlcmF0aW9uTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9UcmFuc2Zvcm1PcGVyYXRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RyZWVNYXBBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIENvbG9yczogKF8pID0+IHNlX1RyZWVNYXBNZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBHcm91cHM6IF9qc29uLFxuICAgICAgICBTaXplczogKF8pID0+IHNlX1RyZWVNYXBNZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RyZWVNYXBDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ29sb3JMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBDb2xvclNjYWxlOiAoXykgPT4gc2VfQ29sb3JTY2FsZShfLCBjb250ZXh0KSxcbiAgICAgICAgRGF0YUxhYmVsczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBzZV9UcmVlTWFwRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgR3JvdXBMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBTaXplTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9UcmVlTWFwU29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBzZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UcmVlTWFwRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFRyZWVNYXBBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IHNlX1RyZWVNYXBBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UcmVlTWFwTWVhc3VyZUZpZWxkTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX1RyZWVNYXBTb3J0Q29uZmlndXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIFRyZWVNYXBHcm91cEl0ZW1zTGltaXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgVHJlZU1hcFNvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9UcmVlTWFwVmlzdWFsID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX1RyZWVNYXBDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW5IaWVyYXJjaGllczogKF8pID0+IHNlX0NvbHVtbkhpZXJhcmNoeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxDb250ZW50QWx0VGV4dDogW10sXG4gICAgICAgIFZpc3VhbElkOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9WaXNpYmxlUmFuZ2VPcHRpb25zID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgUGVyY2VudFJhbmdlOiAoXykgPT4gc2VfUGVyY2VudFZpc2libGVSYW5nZShfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9WaXN1YWwgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCYXJDaGFydFZpc3VhbDogKF8pID0+IHNlX0JhckNoYXJ0VmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBCb3hQbG90VmlzdWFsOiAoXykgPT4gc2VfQm94UGxvdFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgQ29tYm9DaGFydFZpc3VhbDogKF8pID0+IHNlX0NvbWJvQ2hhcnRWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIEN1c3RvbUNvbnRlbnRWaXN1YWw6IChfKSA9PiBzZV9DdXN0b21Db250ZW50VmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBFbXB0eVZpc3VhbDogKF8pID0+IHNlX0VtcHR5VmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBGaWxsZWRNYXBWaXN1YWw6IChfKSA9PiBzZV9GaWxsZWRNYXBWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIEZ1bm5lbENoYXJ0VmlzdWFsOiAoXykgPT4gc2VfRnVubmVsQ2hhcnRWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIEdhdWdlQ2hhcnRWaXN1YWw6IChfKSA9PiBzZV9HYXVnZUNoYXJ0VmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBHZW9zcGF0aWFsTWFwVmlzdWFsOiAoXykgPT4gc2VfR2Vvc3BhdGlhbE1hcFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgSGVhdE1hcFZpc3VhbDogKF8pID0+IHNlX0hlYXRNYXBWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIEhpc3RvZ3JhbVZpc3VhbDogKF8pID0+IHNlX0hpc3RvZ3JhbVZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgSW5zaWdodFZpc3VhbDogKF8pID0+IHNlX0luc2lnaHRWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIEtQSVZpc3VhbDogKF8pID0+IHNlX0tQSVZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgTGF5ZXJNYXBWaXN1YWw6IChfKSA9PiBzZV9MYXllck1hcFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgTGluZUNoYXJ0VmlzdWFsOiAoXykgPT4gc2VfTGluZUNoYXJ0VmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBQaWVDaGFydFZpc3VhbDogKF8pID0+IHNlX1BpZUNoYXJ0VmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBQaXZvdFRhYmxlVmlzdWFsOiAoXykgPT4gc2VfUGl2b3RUYWJsZVZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgUGx1Z2luVmlzdWFsOiAoXykgPT4gc2VfUGx1Z2luVmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBSYWRhckNoYXJ0VmlzdWFsOiAoXykgPT4gc2VfUmFkYXJDaGFydFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgU2Fua2V5RGlhZ3JhbVZpc3VhbDogKF8pID0+IHNlX1NhbmtleURpYWdyYW1WaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIFNjYXR0ZXJQbG90VmlzdWFsOiAoXykgPT4gc2VfU2NhdHRlclBsb3RWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIFRhYmxlVmlzdWFsOiAoXykgPT4gc2VfVGFibGVWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIFRyZWVNYXBWaXN1YWw6IChfKSA9PiBzZV9UcmVlTWFwVmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBXYXRlcmZhbGxWaXN1YWw6IChfKSA9PiBzZV9XYXRlcmZhbGxWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIFdvcmRDbG91ZFZpc3VhbDogKF8pID0+IHNlX1dvcmRDbG91ZFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9WaXN1YWxDdXN0b21BY3Rpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3Rpb25PcGVyYXRpb25zOiAoXykgPT4gc2VfVmlzdWFsQ3VzdG9tQWN0aW9uT3BlcmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ3VzdG9tQWN0aW9uSWQ6IFtdLFxuICAgICAgICBOYW1lOiBbXSxcbiAgICAgICAgU3RhdHVzOiBbXSxcbiAgICAgICAgVHJpZ2dlcjogW10sXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9WaXN1YWxDdXN0b21BY3Rpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX1Zpc3VhbEN1c3RvbUFjdGlvbk9wZXJhdGlvbiA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEZpbHRlck9wZXJhdGlvbjogX2pzb24sXG4gICAgICAgIE5hdmlnYXRpb25PcGVyYXRpb246IF9qc29uLFxuICAgICAgICBTZXRQYXJhbWV0ZXJzT3BlcmF0aW9uOiAoXykgPT4gc2VfQ3VzdG9tQWN0aW9uU2V0UGFyYW1ldGVyc09wZXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVVJMT3BlcmF0aW9uOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9WaXN1YWxDdXN0b21BY3Rpb25PcGVyYXRpb25MaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX1Zpc3VhbEN1c3RvbUFjdGlvbk9wZXJhdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfVmlzdWFsTGlzdCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBpbnB1dFxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBzZV9WaXN1YWwoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xufTtcbmNvbnN0IHNlX1dhdGVyZmFsbENoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBCcmVha2Rvd25zOiBfanNvbixcbiAgICAgICAgQ2F0ZWdvcmllczogX2pzb24sXG4gICAgICAgIFZhbHVlczogKF8pID0+IHNlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfV2F0ZXJmYWxsQ2hhcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBzZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIENhdGVnb3J5QXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIENvbG9yQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIERhdGFMYWJlbHM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gc2VfV2F0ZXJmYWxsQ2hhcnRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBQcmltYXJ5WUF4aXNEaXNwbGF5T3B0aW9uczogKF8pID0+IHNlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgUHJpbWFyeVlBeGlzTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9XYXRlcmZhbGxDaGFydFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBWaXN1YWxQYWxldHRlOiBfanNvbixcbiAgICAgICAgV2F0ZXJmYWxsQ2hhcnRPcHRpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9XYXRlcmZhbGxDaGFydEZpZWxkV2VsbHMgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBXYXRlcmZhbGxDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gc2VfV2F0ZXJmYWxsQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9XYXRlcmZhbGxDaGFydFNvcnRDb25maWd1cmF0aW9uID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgQnJlYWtkb3duSXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIENhdGVnb3J5U29ydDogKF8pID0+IHNlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1dhdGVyZmFsbFZpc3VhbCA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBzZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBzZV9XYXRlcmZhbGxDaGFydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gc2VfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbENvbnRlbnRBbHRUZXh0OiBbXSxcbiAgICAgICAgVmlzdWFsSWQ6IFtdLFxuICAgIH0pO1xufTtcbmNvbnN0IHNlX1doYXRJZlBvaW50U2NlbmFyaW8gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBEYXRlOiAoXykgPT4gXy5nZXRUaW1lKCkgLyAxXzAwMCxcbiAgICAgICAgVmFsdWU6IF9fc2VyaWFsaXplRmxvYXQsXG4gICAgfSk7XG59O1xuY29uc3Qgc2VfV2hhdElmUmFuZ2VTY2VuYXJpbyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEVuZERhdGU6IChfKSA9PiBfLmdldFRpbWUoKSAvIDFfMDAwLFxuICAgICAgICBTdGFydERhdGU6IChfKSA9PiBfLmdldFRpbWUoKSAvIDFfMDAwLFxuICAgICAgICBWYWx1ZTogX19zZXJpYWxpemVGbG9hdCxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Xb3JkQ2xvdWRBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChpbnB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKGlucHV0LCB7XG4gICAgICAgIEdyb3VwQnk6IF9qc29uLFxuICAgICAgICBTaXplOiAoXykgPT4gc2VfV29yZENsb3VkTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Xb3JkQ2xvdWRDaGFydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBzZV9Xb3JkQ2xvdWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IHNlX1dvcmRDbG91ZFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBXb3JkQ2xvdWRPcHRpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Xb3JkQ2xvdWRGaWVsZFdlbGxzID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2UoaW5wdXQsIHtcbiAgICAgICAgV29yZENsb3VkQWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBzZV9Xb3JkQ2xvdWRBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Xb3JkQ2xvdWRNZWFzdXJlRmllbGRMaXN0ID0gKGlucHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0XG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlX01lYXN1cmVGaWVsZChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG59O1xuY29uc3Qgc2VfV29yZENsb3VkU29ydENvbmZpZ3VyYXRpb24gPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBDYXRlZ29yeUl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBDYXRlZ29yeVNvcnQ6IChfKSA9PiBzZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBzZV9Xb3JkQ2xvdWRWaXN1YWwgPSAoaW5wdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShpbnB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gc2VfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gc2VfV29yZENsb3VkQ2hhcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW5IaWVyYXJjaGllczogKF8pID0+IHNlX0NvbHVtbkhpZXJhcmNoeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxDb250ZW50QWx0VGV4dDogW10sXG4gICAgICAgIFZpc3VhbElkOiBbXSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9BZ2dyZWdhdGlvbkZ1bmN0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBdHRyaWJ1dGVBZ2dyZWdhdGlvbkZ1bmN0aW9uOiBfanNvbixcbiAgICAgICAgQ2F0ZWdvcmljYWxBZ2dyZWdhdGlvbkZ1bmN0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGF0ZUFnZ3JlZ2F0aW9uRnVuY3Rpb246IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOdW1lcmljYWxBZ2dyZWdhdGlvbkZ1bmN0aW9uOiAoXykgPT4gZGVfTnVtZXJpY2FsQWdncmVnYXRpb25GdW5jdGlvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9BZ2dyZWdhdGlvblNvcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBZ2dyZWdhdGlvbkZ1bmN0aW9uOiAoXykgPT4gZGVfQWdncmVnYXRpb25GdW5jdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgU29ydERpcmVjdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQWdncmVnYXRpb25Tb3J0Q29uZmlndXJhdGlvbkxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfQWdncmVnYXRpb25Tb3J0Q29uZmlndXJhdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9BbmFseXNpcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQW5hbHlzaXNJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEYXRhU2V0QXJuczogX2pzb24sXG4gICAgICAgIEVycm9yczogX2pzb24sXG4gICAgICAgIExhc3RVcGRhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNoZWV0czogKF8pID0+IGRlX1NoZWV0TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0FuYWx5c2lzRGVmaW5pdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQW5hbHlzaXNEZWZhdWx0czogX2pzb24sXG4gICAgICAgIENhbGN1bGF0ZWRGaWVsZHM6IF9qc29uLFxuICAgICAgICBDb2x1bW5Db25maWd1cmF0aW9uczogX2pzb24sXG4gICAgICAgIERhdGFTZXRJZGVudGlmaWVyRGVjbGFyYXRpb25zOiBfanNvbixcbiAgICAgICAgRmlsdGVyR3JvdXBzOiAoXykgPT4gZGVfRmlsdGVyR3JvdXBMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBPcHRpb25zOiBfanNvbixcbiAgICAgICAgUGFyYW1ldGVyRGVjbGFyYXRpb25zOiAoXykgPT4gZGVfUGFyYW1ldGVyRGVjbGFyYXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBRdWVyeUV4ZWN1dGlvbk9wdGlvbnM6IF9qc29uLFxuICAgICAgICBTaGVldHM6IChfKSA9PiBkZV9TaGVldERlZmluaXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdGF0aWNGaWxlczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQW5hbHlzaXNTdW1tYXJ5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBbmFseXNpc0lkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIExhc3RVcGRhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQW5hbHlzaXNTdW1tYXJ5TGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9BbmFseXNpc1N1bW1hcnkoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfQXJjQXhpc0NvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFJhbmdlOiAoXykgPT4gZGVfQXJjQXhpc0Rpc3BsYXlSYW5nZShfLCBjb250ZXh0KSxcbiAgICAgICAgUmVzZXJ2ZVJhbmdlOiBfX2V4cGVjdEludDMyLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0FyY0F4aXNEaXNwbGF5UmFuZ2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIE1heDogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgICAgIE1pbjogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQXJjQ29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJjQW5nbGU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBBcmNUaGlja25lc3M6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0Fzc2V0QnVuZGxlRXhwb3J0Sm9iU3VtbWFyeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXNzZXRCdW5kbGVFeHBvcnRKb2JJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBFeHBvcnRGb3JtYXQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbmNsdWRlQWxsRGVwZW5kZW5jaWVzOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIEluY2x1ZGVQZXJtaXNzaW9uczogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBJbmNsdWRlVGFnczogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBKb2JTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0Fzc2V0QnVuZGxlRXhwb3J0Sm9iU3VtbWFyeUxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfQXNzZXRCdW5kbGVFeHBvcnRKb2JTdW1tYXJ5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0Fzc2V0QnVuZGxlSW1wb3J0Sm9iT3ZlcnJpZGVQYXJhbWV0ZXJzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBbmFseXNlczogX2pzb24sXG4gICAgICAgIERhc2hib2FyZHM6IF9qc29uLFxuICAgICAgICBEYXRhU2V0czogX2pzb24sXG4gICAgICAgIERhdGFTb3VyY2VzOiBfanNvbixcbiAgICAgICAgRm9sZGVyczogX2pzb24sXG4gICAgICAgIFJlZnJlc2hTY2hlZHVsZXM6IChfKSA9PiBkZV9Bc3NldEJ1bmRsZUltcG9ydEpvYlJlZnJlc2hTY2hlZHVsZU92ZXJyaWRlUGFyYW1ldGVyc0xpc3QoXywgY29udGV4dCksXG4gICAgICAgIFJlc291cmNlSWRPdmVycmlkZUNvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBUaGVtZXM6IF9qc29uLFxuICAgICAgICBWUENDb25uZWN0aW9uczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQXNzZXRCdW5kbGVJbXBvcnRKb2JSZWZyZXNoU2NoZWR1bGVPdmVycmlkZVBhcmFtZXRlcnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERhdGFTZXRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNjaGVkdWxlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGFydEFmdGVyRGF0ZVRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQXNzZXRCdW5kbGVJbXBvcnRKb2JSZWZyZXNoU2NoZWR1bGVPdmVycmlkZVBhcmFtZXRlcnNMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0Fzc2V0QnVuZGxlSW1wb3J0Sm9iUmVmcmVzaFNjaGVkdWxlT3ZlcnJpZGVQYXJhbWV0ZXJzKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0Fzc2V0QnVuZGxlSW1wb3J0Sm9iU3VtbWFyeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXNzZXRCdW5kbGVJbXBvcnRKb2JJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBGYWlsdXJlQWN0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgSm9iU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Bc3NldEJ1bmRsZUltcG9ydEpvYlN1bW1hcnlMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0Fzc2V0QnVuZGxlSW1wb3J0Sm9iU3VtbWFyeShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9BeGlzRGF0YU9wdGlvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERhdGVBeGlzT3B0aW9uczogX2pzb24sXG4gICAgICAgIE51bWVyaWNBeGlzT3B0aW9uczogKF8pID0+IGRlX051bWVyaWNBeGlzT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9BeGlzRGlzcGxheU1pbk1heFJhbmdlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBNYXhpbXVtOiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICAgICAgTWluaW11bTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQXhpc0Rpc3BsYXlPcHRpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBeGlzTGluZVZpc2liaWxpdHk6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBeGlzT2Zmc2V0OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGF0YU9wdGlvbnM6IChfKSA9PiBkZV9BeGlzRGF0YU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIEdyaWRMaW5lVmlzaWJpbGl0eTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNjcm9sbGJhck9wdGlvbnM6IChfKSA9PiBkZV9TY3JvbGxCYXJPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBUaWNrTGFiZWxPcHRpb25zOiAoXykgPT4gZGVfQXhpc1RpY2tMYWJlbE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQXhpc0Rpc3BsYXlSYW5nZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRGF0YURyaXZlbjogX2pzb24sXG4gICAgICAgIE1pbk1heDogKF8pID0+IGRlX0F4aXNEaXNwbGF5TWluTWF4UmFuZ2UoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQXhpc0xpbmVhclNjYWxlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBTdGVwQ291bnQ6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIFN0ZXBTaXplOiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9BeGlzTG9nYXJpdGhtaWNTY2FsZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQmFzZTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQXhpc1NjYWxlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBMaW5lYXI6IChfKSA9PiBkZV9BeGlzTGluZWFyU2NhbGUoXywgY29udGV4dCksXG4gICAgICAgIExvZ2FyaXRobWljOiAoXykgPT4gZGVfQXhpc0xvZ2FyaXRobWljU2NhbGUoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQXhpc1RpY2tMYWJlbE9wdGlvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIExhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFJvdGF0aW9uQW5nbGU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0JhckNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhdGVnb3J5OiBfanNvbixcbiAgICAgICAgQ29sb3JzOiBfanNvbixcbiAgICAgICAgU21hbGxNdWx0aXBsZXM6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBkZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0JhckNoYXJ0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQmFyc0FycmFuZ2VtZW50OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ2F0ZWdvcnlBeGlzOiAoXykgPT4gZGVfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBDYXRlZ29yeUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIENvbG9yTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgQ29udHJpYnV0aW9uQW5hbHlzaXNEZWZhdWx0czogX2pzb24sXG4gICAgICAgIERhdGFMYWJlbHM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gZGVfQmFyQ2hhcnRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBPcmllbnRhdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlZmVyZW5jZUxpbmVzOiAoXykgPT4gZGVfUmVmZXJlbmNlTGluZUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFNtYWxsTXVsdGlwbGVzT3B0aW9uczogX2pzb24sXG4gICAgICAgIFNvcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfQmFyQ2hhcnRTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9vbHRpcDogKF8pID0+IGRlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBWYWx1ZUF4aXM6IChfKSA9PiBkZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFZhbHVlTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQmFyQ2hhcnRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBCYXJDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gZGVfQmFyQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9CYXJDaGFydFNvcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeUl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBDYXRlZ29yeVNvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sb3JJdGVtc0xpbWl0OiBfanNvbixcbiAgICAgICAgQ29sb3JTb3J0OiAoXykgPT4gZGVfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgICAgIFNtYWxsTXVsdGlwbGVzTGltaXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgU21hbGxNdWx0aXBsZXNTb3J0OiAoXykgPT4gZGVfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQmFyQ2hhcnRWaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9CYXJDaGFydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gZGVfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbENvbnRlbnRBbHRUZXh0OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmlzdWFsSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0JpbldpZHRoT3B0aW9ucyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQmluQ291bnRMaW1pdDogX19leHBlY3RMb25nLFxuICAgICAgICBWYWx1ZTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQm9keVNlY3Rpb25Db25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb250ZW50OiBfanNvbixcbiAgICAgICAgUGFnZUJyZWFrQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIFJlcGVhdENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9Cb2R5U2VjdGlvblJlcGVhdENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFNlY3Rpb25JZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN0eWxlOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Cb2R5U2VjdGlvbkNvbmZpZ3VyYXRpb25MaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0JvZHlTZWN0aW9uQ29uZmlndXJhdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9Cb2R5U2VjdGlvbkR5bmFtaWNDYXRlZ29yeURpbWVuc2lvbkNvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIExpbWl0OiBfX2V4cGVjdEludDMyLFxuICAgICAgICBTb3J0QnlNZXRyaWNzOiAoXykgPT4gZGVfQm9keVNlY3Rpb25EeW5hbWljRGltZW5zaW9uU29ydENvbmZpZ3VyYXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0JvZHlTZWN0aW9uRHluYW1pY0RpbWVuc2lvblNvcnRDb25maWd1cmF0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9Db2x1bW5Tb3J0KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0JvZHlTZWN0aW9uRHluYW1pY051bWVyaWNEaW1lbnNpb25Db25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBMaW1pdDogX19leHBlY3RJbnQzMixcbiAgICAgICAgU29ydEJ5TWV0cmljczogKF8pID0+IGRlX0JvZHlTZWN0aW9uRHluYW1pY0RpbWVuc2lvblNvcnRDb25maWd1cmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Cb2R5U2VjdGlvblJlcGVhdENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERpbWVuc2lvbkNvbmZpZ3VyYXRpb25zOiAoXykgPT4gZGVfQm9keVNlY3Rpb25SZXBlYXREaW1lbnNpb25Db25maWd1cmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTm9uUmVwZWF0aW5nVmlzdWFsczogX2pzb24sXG4gICAgICAgIFBhZ2VCcmVha0NvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0JvZHlTZWN0aW9uUmVwZWF0RGltZW5zaW9uQ29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRHluYW1pY0NhdGVnb3J5RGltZW5zaW9uQ29uZmlndXJhdGlvbjogKF8pID0+IGRlX0JvZHlTZWN0aW9uRHluYW1pY0NhdGVnb3J5RGltZW5zaW9uQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgRHluYW1pY051bWVyaWNEaW1lbnNpb25Db25maWd1cmF0aW9uOiAoXykgPT4gZGVfQm9keVNlY3Rpb25EeW5hbWljTnVtZXJpY0RpbWVuc2lvbkNvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQm9keVNlY3Rpb25SZXBlYXREaW1lbnNpb25Db25maWd1cmF0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9Cb2R5U2VjdGlvblJlcGVhdERpbWVuc2lvbkNvbmZpZ3VyYXRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfQm94UGxvdEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBHcm91cEJ5OiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gZGVfQm94UGxvdE1lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQm94UGxvdENoYXJ0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQm94UGxvdE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBDYXRlZ29yeUF4aXM6IChfKSA9PiBkZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIENhdGVnb3J5TGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX0JveFBsb3RGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBQcmltYXJ5WUF4aXNEaXNwbGF5T3B0aW9uczogKF8pID0+IGRlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgUHJpbWFyeVlBeGlzTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgUmVmZXJlbmNlTGluZXM6IChfKSA9PiBkZV9SZWZlcmVuY2VMaW5lTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9Cb3hQbG90U29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBkZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQm94UGxvdEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEJveFBsb3RBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IGRlX0JveFBsb3RBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Cb3hQbG90TWVhc3VyZUZpZWxkTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfQm94UGxvdFNvcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeVNvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgUGFnaW5hdGlvbkNvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0JveFBsb3RWaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9Cb3hQbG90Q2hhcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW5IaWVyYXJjaGllczogKF8pID0+IGRlX0NvbHVtbkhpZXJhcmNoeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxDb250ZW50QWx0VGV4dDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9CcmFuZERldGFpbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQnJhbmRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEJyYW5kU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIEVycm9yczogX2pzb24sXG4gICAgICAgIExhc3RVcGRhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgTG9nbzogX2pzb24sXG4gICAgICAgIFZlcnNpb25JZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZlcnNpb25TdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0JyYW5kU3VtbWFyeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQnJhbmRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEJyYW5kTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEJyYW5kU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIERlc2NyaXB0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGFzdFVwZGF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0JyYW5kU3VtbWFyeUxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfQnJhbmRTdW1tYXJ5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0NhdGVnb3J5RmlsdGVyID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgRGVmYXVsdEZpbHRlckNvbnRyb2xDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfRGVmYXVsdEZpbHRlckNvbnRyb2xDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBGaWx0ZXJJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ2F0ZWdvcnlJbm5lckZpbHRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIERlZmF1bHRGaWx0ZXJDb250cm9sQ29uZmlndXJhdGlvbjogKF8pID0+IGRlX0RlZmF1bHRGaWx0ZXJDb250cm9sQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Db2xvclNjYWxlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb2xvckZpbGxUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ29sb3JzOiAoXykgPT4gZGVfQ29sb3JTY2FsZUNvbG9yTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTnVsbFZhbHVlQ29sb3I6IChfKSA9PiBkZV9EYXRhQ29sb3IoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ29sb3JTY2FsZUNvbG9yTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9EYXRhQ29sb3IoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfQ29sdW1uSGllcmFyY2h5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRlVGltZUhpZXJhcmNoeTogKF8pID0+IGRlX0RhdGVUaW1lSGllcmFyY2h5KF8sIGNvbnRleHQpLFxuICAgICAgICBFeHBsaWNpdEhpZXJhcmNoeTogKF8pID0+IGRlX0V4cGxpY2l0SGllcmFyY2h5KF8sIGNvbnRleHQpLFxuICAgICAgICBQcmVkZWZpbmVkSGllcmFyY2h5OiAoXykgPT4gZGVfUHJlZGVmaW5lZEhpZXJhcmNoeShfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Db2x1bW5IaWVyYXJjaHlMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0NvbHVtbkhpZXJhcmNoeShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9Db2x1bW5Tb3J0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBZ2dyZWdhdGlvbkZ1bmN0aW9uOiAoXykgPT4gZGVfQWdncmVnYXRpb25GdW5jdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgRGlyZWN0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU29ydEJ5OiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Db2x1bW5Ub29sdGlwSXRlbSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWdncmVnYXRpb246IChfKSA9PiBkZV9BZ2dyZWdhdGlvbkZ1bmN0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBMYWJlbDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRvb2x0aXBUYXJnZXQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWaXNpYmlsaXR5OiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Db21ib0NoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEJhclZhbHVlczogKF8pID0+IGRlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgICAgIENhdGVnb3J5OiBfanNvbixcbiAgICAgICAgQ29sb3JzOiBfanNvbixcbiAgICAgICAgTGluZVZhbHVlczogKF8pID0+IGRlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ29tYm9DaGFydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEJhckRhdGFMYWJlbHM6IF9qc29uLFxuICAgICAgICBCYXJzQXJyYW5nZW1lbnQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDYXRlZ29yeUF4aXM6IChfKSA9PiBkZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIENhdGVnb3J5TGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgQ29sb3JMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gZGVfQ29tYm9DaGFydEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIExlZ2VuZDogX2pzb24sXG4gICAgICAgIExpbmVEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgUHJpbWFyeVlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBkZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFByaW1hcnlZQXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFJlZmVyZW5jZUxpbmVzOiAoXykgPT4gZGVfUmVmZXJlbmNlTGluZUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFNlY29uZGFyeVlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBkZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFNlY29uZGFyeVlBeGlzTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgU2luZ2xlQXhpc09wdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX0NvbWJvQ2hhcnRTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9vbHRpcDogKF8pID0+IGRlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBWaXN1YWxQYWxldHRlOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Db21ib0NoYXJ0RmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29tYm9DaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gZGVfQ29tYm9DaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0NvbWJvQ2hhcnRTb3J0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlJdGVtc0xpbWl0OiBfanNvbixcbiAgICAgICAgQ2F0ZWdvcnlTb3J0OiAoXykgPT4gZGVfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgICAgIENvbG9ySXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIENvbG9yU29ydDogKF8pID0+IGRlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0NvbWJvQ2hhcnRWaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9Db21ib0NoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBkZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWaXN1YWxJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ29tcHV0YXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEZvcmVjYXN0OiAoXykgPT4gZGVfRm9yZWNhc3RDb21wdXRhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgR3Jvd3RoUmF0ZTogKF8pID0+IGRlX0dyb3d0aFJhdGVDb21wdXRhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgTWF4aW11bU1pbmltdW06IChfKSA9PiBkZV9NYXhpbXVtTWluaW11bUNvbXB1dGF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBNZXRyaWNDb21wYXJpc29uOiAoXykgPT4gZGVfTWV0cmljQ29tcGFyaXNvbkNvbXB1dGF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBQZXJpb2RPdmVyUGVyaW9kOiAoXykgPT4gZGVfUGVyaW9kT3ZlclBlcmlvZENvbXB1dGF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBQZXJpb2RUb0RhdGU6IChfKSA9PiBkZV9QZXJpb2RUb0RhdGVDb21wdXRhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9wQm90dG9tTW92ZXJzOiAoXykgPT4gZGVfVG9wQm90dG9tTW92ZXJzQ29tcHV0YXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFRvcEJvdHRvbVJhbmtlZDogKF8pID0+IGRlX1RvcEJvdHRvbVJhbmtlZENvbXB1dGF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUb3RhbEFnZ3JlZ2F0aW9uOiAoXykgPT4gZGVfVG90YWxBZ2dyZWdhdGlvbkNvbXB1dGF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBVbmlxdWVWYWx1ZXM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0NvbXB1dGF0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9Db21wdXRhdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgR3JhZGllbnQ6IChfKSA9PiBkZV9Db25kaXRpb25hbEZvcm1hdHRpbmdHcmFkaWVudENvbG9yKF8sIGNvbnRleHQpLFxuICAgICAgICBTb2xpZDogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ29uZGl0aW9uYWxGb3JtYXR0aW5nR3JhZGllbnRDb2xvciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sb3I6IChfKSA9PiBkZV9HcmFkaWVudENvbG9yKF8sIGNvbnRleHQpLFxuICAgICAgICBFeHByZXNzaW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9DdXN0b21BY3Rpb25TZXRQYXJhbWV0ZXJzT3BlcmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBQYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb25zOiAoXykgPT4gZGVfU2V0UGFyYW1ldGVyVmFsdWVDb25maWd1cmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9DdXN0b21Db250ZW50VmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgRGF0YVNldElkZW50aWZpZXI6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWaXN1YWxJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfQ3VzdG9tUGFyYW1ldGVyVmFsdWVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRlVGltZVZhbHVlczogKF8pID0+IGRlX0RhdGVUaW1lRGVmYXVsdFZhbHVlTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgRGVjaW1hbFZhbHVlczogKF8pID0+IGRlX0RlY2ltYWxEZWZhdWx0VmFsdWVMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlZ2VyVmFsdWVzOiBfanNvbixcbiAgICAgICAgU3RyaW5nVmFsdWVzOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9DdXN0b21WYWx1ZXNDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDdXN0b21WYWx1ZXM6IChfKSA9PiBkZV9DdXN0b21QYXJhbWV0ZXJWYWx1ZXMoXywgY29udGV4dCksXG4gICAgICAgIEluY2x1ZGVOdWxsVmFsdWU6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXNoYm9hcmQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEYXNoYm9hcmRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExhc3RQdWJsaXNoZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIExpbmtFbnRpdGllczogX2pzb24sXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWZXJzaW9uOiAoXykgPT4gZGVfRGFzaGJvYXJkVmVyc2lvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXNoYm9hcmRTdW1tYXJ5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRGFzaGJvYXJkSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXN0UHVibGlzaGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgTGFzdFVwZGF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUHVibGlzaGVkVmVyc2lvbk51bWJlcjogX19leHBlY3RMb25nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0Rhc2hib2FyZFN1bW1hcnlMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0Rhc2hib2FyZFN1bW1hcnkoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfRGFzaGJvYXJkVmVyc2lvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIERhdGFTZXRBcm5zOiBfanNvbixcbiAgICAgICAgRGVzY3JpcHRpb246IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBFcnJvcnM6IF9qc29uLFxuICAgICAgICBTaGVldHM6IChfKSA9PiBkZV9TaGVldExpc3QoXywgY29udGV4dCksXG4gICAgICAgIFNvdXJjZUVudGl0eUFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRoZW1lQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmVyc2lvbk51bWJlcjogX19leHBlY3RMb25nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0Rhc2hib2FyZFZlcnNpb25EZWZpbml0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBbmFseXNpc0RlZmF1bHRzOiBfanNvbixcbiAgICAgICAgQ2FsY3VsYXRlZEZpZWxkczogX2pzb24sXG4gICAgICAgIENvbHVtbkNvbmZpZ3VyYXRpb25zOiBfanNvbixcbiAgICAgICAgRGF0YVNldElkZW50aWZpZXJEZWNsYXJhdGlvbnM6IF9qc29uLFxuICAgICAgICBGaWx0ZXJHcm91cHM6IChfKSA9PiBkZV9GaWx0ZXJHcm91cExpc3QoXywgY29udGV4dCksXG4gICAgICAgIE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBQYXJhbWV0ZXJEZWNsYXJhdGlvbnM6IChfKSA9PiBkZV9QYXJhbWV0ZXJEZWNsYXJhdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFNoZWV0czogKF8pID0+IGRlX1NoZWV0RGVmaW5pdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFN0YXRpY0ZpbGVzOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXNoYm9hcmRWZXJzaW9uU3VtbWFyeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIERlc2NyaXB0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU291cmNlRW50aXR5QXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmVyc2lvbk51bWJlcjogX19leHBlY3RMb25nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0Rhc2hib2FyZFZlcnNpb25TdW1tYXJ5TGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9EYXNoYm9hcmRWZXJzaW9uU3VtbWFyeShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9EYXRhQ29sb3IgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbG9yOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGF0YVZhbHVlOiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXRhU2V0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDb2x1bW5Hcm91cHM6IF9qc29uLFxuICAgICAgICBDb2x1bW5MZXZlbFBlcm1pc3Npb25SdWxlczogX2pzb24sXG4gICAgICAgIENvbnN1bWVkU3BpY2VDYXBhY2l0eUluQnl0ZXM6IF9fZXhwZWN0TG9uZyxcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIERhdGFTZXRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERhdGFTZXRVc2FnZUNvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBEYXRhc2V0UGFyYW1ldGVyczogKF8pID0+IGRlX0RhdGFzZXRQYXJhbWV0ZXJMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBGaWVsZEZvbGRlcnM6IF9qc29uLFxuICAgICAgICBJbXBvcnRNb2RlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGFzdFVwZGF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBMb2dpY2FsVGFibGVNYXA6IChfKSA9PiBkZV9Mb2dpY2FsVGFibGVNYXAoXywgY29udGV4dCksXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBPdXRwdXRDb2x1bW5zOiBfanNvbixcbiAgICAgICAgUGVyZm9ybWFuY2VDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgUGh5c2ljYWxUYWJsZU1hcDogX2pzb24sXG4gICAgICAgIFJvd0xldmVsUGVybWlzc2lvbkRhdGFTZXQ6IF9qc29uLFxuICAgICAgICBSb3dMZXZlbFBlcm1pc3Npb25UYWdDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgVXNlQXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0RhdGFzZXRQYXJhbWV0ZXIgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERhdGVUaW1lRGF0YXNldFBhcmFtZXRlcjogKF8pID0+IGRlX0RhdGVUaW1lRGF0YXNldFBhcmFtZXRlcihfLCBjb250ZXh0KSxcbiAgICAgICAgRGVjaW1hbERhdGFzZXRQYXJhbWV0ZXI6IChfKSA9PiBkZV9EZWNpbWFsRGF0YXNldFBhcmFtZXRlcihfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZWdlckRhdGFzZXRQYXJhbWV0ZXI6IF9qc29uLFxuICAgICAgICBTdHJpbmdEYXRhc2V0UGFyYW1ldGVyOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXRhc2V0UGFyYW1ldGVyTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9EYXRhc2V0UGFyYW1ldGVyKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0RhdGFTZXRTdW1tYXJ5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDb2x1bW5MZXZlbFBlcm1pc3Npb25SdWxlc0FwcGxpZWQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIERhdGFTZXRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEltcG9ydE1vZGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSb3dMZXZlbFBlcm1pc3Npb25EYXRhU2V0OiBfanNvbixcbiAgICAgICAgUm93TGV2ZWxQZXJtaXNzaW9uVGFnQ29uZmlndXJhdGlvbkFwcGxpZWQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgVXNlQXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0RhdGFTZXRTdW1tYXJ5TGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9EYXRhU2V0U3VtbWFyeShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9EYXRhU291cmNlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBbHRlcm5hdGVEYXRhU291cmNlUGFyYW1ldGVyczogX2pzb24sXG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEYXRhU291cmNlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXRhU291cmNlUGFyYW1ldGVyczogKF8pID0+IF9qc29uKF9fZXhwZWN0VW5pb24oXykpLFxuICAgICAgICBFcnJvckluZm86IF9qc29uLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTZWNyZXRBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTc2xQcm9wZXJ0aWVzOiBfanNvbixcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVHlwZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZwY0Nvbm5lY3Rpb25Qcm9wZXJ0aWVzOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXRhU291cmNlTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9EYXRhU291cmNlKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0RhdGFTb3VyY2VTdW1tYXJ5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRGF0YVNvdXJjZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGFzdFVwZGF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVHlwZTogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRGF0YVNvdXJjZVN1bW1hcnlMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0RhdGFTb3VyY2VTdW1tYXJ5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0RhdGVUaW1lRGF0YXNldFBhcmFtZXRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRGVmYXVsdFZhbHVlczogKF8pID0+IGRlX0RhdGVUaW1lRGF0YXNldFBhcmFtZXRlckRlZmF1bHRWYWx1ZXMoXywgY29udGV4dCksXG4gICAgICAgIElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRpbWVHcmFudWxhcml0eTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZhbHVlVHlwZTogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRGF0ZVRpbWVEYXRhc2V0UGFyYW1ldGVyRGVmYXVsdFZhbHVlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgU3RhdGljVmFsdWVzOiAoXykgPT4gZGVfRGF0ZVRpbWVEYXRhc2V0UGFyYW1ldGVyVmFsdWVMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0RhdGVUaW1lRGF0YXNldFBhcmFtZXRlclZhbHVlTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKGVudHJ5KSkpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfRGF0ZVRpbWVEZWZhdWx0VmFsdWVMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoZW50cnkpKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9EYXRlVGltZURlZmF1bHRWYWx1ZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIER5bmFtaWNWYWx1ZTogX2pzb24sXG4gICAgICAgIFJvbGxpbmdEYXRlOiBfanNvbixcbiAgICAgICAgU3RhdGljVmFsdWVzOiAoXykgPT4gZGVfRGF0ZVRpbWVEZWZhdWx0VmFsdWVMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0RhdGVUaW1lSGllcmFyY2h5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEcmlsbERvd25GaWx0ZXJzOiAoXykgPT4gZGVfRHJpbGxEb3duRmlsdGVyTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgSGllcmFyY2h5SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0RhdGVUaW1lUGFyYW1ldGVyID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gZGVfU2Vuc2l0aXZlVGltZXN0YW1wTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EYXRlVGltZVBhcmFtZXRlckRlY2xhcmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEZWZhdWx0VmFsdWVzOiAoXykgPT4gZGVfRGF0ZVRpbWVEZWZhdWx0VmFsdWVzKF8sIGNvbnRleHQpLFxuICAgICAgICBNYXBwZWREYXRhU2V0UGFyYW1ldGVyczogX2pzb24sXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaW1lR3JhbnVsYXJpdHk6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWYWx1ZVdoZW5VbnNldDogKF8pID0+IGRlX0RhdGVUaW1lVmFsdWVXaGVuVW5zZXRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0RhdGVUaW1lUGFyYW1ldGVyTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9EYXRlVGltZVBhcmFtZXRlcihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9EYXRlVGltZVZhbHVlV2hlblVuc2V0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ3VzdG9tVmFsdWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIFZhbHVlV2hlblVuc2V0T3B0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EZWNpbWFsRGF0YXNldFBhcmFtZXRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRGVmYXVsdFZhbHVlczogKF8pID0+IGRlX0RlY2ltYWxEYXRhc2V0UGFyYW1ldGVyRGVmYXVsdFZhbHVlcyhfLCBjb250ZXh0KSxcbiAgICAgICAgSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmFsdWVUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EZWNpbWFsRGF0YXNldFBhcmFtZXRlckRlZmF1bHRWYWx1ZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFN0YXRpY1ZhbHVlczogKF8pID0+IGRlX0RlY2ltYWxEYXRhc2V0UGFyYW1ldGVyVmFsdWVMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0RlY2ltYWxEYXRhc2V0UGFyYW1ldGVyVmFsdWVMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fbGltaXRlZFBhcnNlRG91YmxlKGVudHJ5KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0RlY2ltYWxEZWZhdWx0VmFsdWVMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fbGltaXRlZFBhcnNlRG91YmxlKGVudHJ5KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0RlY2ltYWxEZWZhdWx0VmFsdWVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEeW5hbWljVmFsdWU6IF9qc29uLFxuICAgICAgICBTdGF0aWNWYWx1ZXM6IChfKSA9PiBkZV9EZWNpbWFsRGVmYXVsdFZhbHVlTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EZWNpbWFsUGFyYW1ldGVyID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gZGVfU2Vuc2l0aXZlRG91YmxlTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EZWNpbWFsUGFyYW1ldGVyRGVjbGFyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERlZmF1bHRWYWx1ZXM6IChfKSA9PiBkZV9EZWNpbWFsRGVmYXVsdFZhbHVlcyhfLCBjb250ZXh0KSxcbiAgICAgICAgTWFwcGVkRGF0YVNldFBhcmFtZXRlcnM6IF9qc29uLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUGFyYW1ldGVyVmFsdWVUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmFsdWVXaGVuVW5zZXQ6IChfKSA9PiBkZV9EZWNpbWFsVmFsdWVXaGVuVW5zZXRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0RlY2ltYWxQYXJhbWV0ZXJMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0RlY2ltYWxQYXJhbWV0ZXIoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfRGVjaW1hbFZhbHVlV2hlblVuc2V0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ3VzdG9tVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBWYWx1ZVdoZW5VbnNldE9wdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRGVmYXVsdEZpbHRlckNvbnRyb2xDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb250cm9sT3B0aW9uczogKF8pID0+IGRlX0RlZmF1bHRGaWx0ZXJDb250cm9sT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVGl0bGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0RlZmF1bHRGaWx0ZXJDb250cm9sT3B0aW9ucyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRGVmYXVsdERhdGVUaW1lUGlja2VyT3B0aW9uczogX2pzb24sXG4gICAgICAgIERlZmF1bHREcm9wZG93bk9wdGlvbnM6IF9qc29uLFxuICAgICAgICBEZWZhdWx0TGlzdE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBEZWZhdWx0UmVsYXRpdmVEYXRlVGltZU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBEZWZhdWx0U2xpZGVyT3B0aW9uczogKF8pID0+IGRlX0RlZmF1bHRTbGlkZXJDb250cm9sT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgRGVmYXVsdFRleHRBcmVhT3B0aW9uczogX2pzb24sXG4gICAgICAgIERlZmF1bHRUZXh0RmllbGRPcHRpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EZWZhdWx0U2xpZGVyQ29udHJvbE9wdGlvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERpc3BsYXlPcHRpb25zOiBfanNvbixcbiAgICAgICAgTWF4aW11bVZhbHVlOiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICAgICAgTWluaW11bVZhbHVlOiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICAgICAgU3RlcFNpemU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9EZXN0aW5hdGlvblBhcmFtZXRlclZhbHVlQ29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ3VzdG9tVmFsdWVzQ29uZmlndXJhdGlvbjogKF8pID0+IGRlX0N1c3RvbVZhbHVlc0NvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFNlbGVjdEFsbFZhbHVlT3B0aW9uczogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNvdXJjZUNvbHVtbjogX2pzb24sXG4gICAgICAgIFNvdXJjZUZpZWxkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU291cmNlUGFyYW1ldGVyTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRHJpbGxEb3duRmlsdGVyID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeUZpbHRlcjogX2pzb24sXG4gICAgICAgIE51bWVyaWNFcXVhbGl0eUZpbHRlcjogKF8pID0+IGRlX051bWVyaWNFcXVhbGl0eURyaWxsRG93bkZpbHRlcihfLCBjb250ZXh0KSxcbiAgICAgICAgVGltZVJhbmdlRmlsdGVyOiAoXykgPT4gZGVfVGltZVJhbmdlRHJpbGxEb3duRmlsdGVyKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0RyaWxsRG93bkZpbHRlckxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfRHJpbGxEb3duRmlsdGVyKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0VtcHR5VmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgRGF0YVNldElkZW50aWZpZXI6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWaXN1YWxJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRXhwbGljaXRIaWVyYXJjaHkgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbHVtbnM6IF9qc29uLFxuICAgICAgICBEcmlsbERvd25GaWx0ZXJzOiAoXykgPT4gZGVfRHJpbGxEb3duRmlsdGVyTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgSGllcmFyY2h5SWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0ZpZWxkQmFzZWRUb29sdGlwID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBZ2dyZWdhdGlvblZpc2liaWxpdHk6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb29sdGlwRmllbGRzOiAoXykgPT4gZGVfVG9vbHRpcEl0ZW1MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBUb29sdGlwVGl0bGVUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9GaWVsZFNvcnRPcHRpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb2x1bW5Tb3J0OiAoXykgPT4gZGVfQ29sdW1uU29ydChfLCBjb250ZXh0KSxcbiAgICAgICAgRmllbGRTb3J0OiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9GaWVsZFNvcnRPcHRpb25zKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0ZpbGxlZE1hcEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBHZW9zcGF0aWFsOiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gZGVfRmlsbGVkTWFwTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9GaWxsZWRNYXBDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbnM6IChfKSA9PiBkZV9GaWxsZWRNYXBDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0ZpbGxlZE1hcENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgU2hhcGU6IChfKSA9PiBkZV9GaWxsZWRNYXBTaGFwZUNvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9GaWxsZWRNYXBDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25MaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0ZpbGxlZE1hcENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9GaWxsZWRNYXBDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gZGVfRmlsbGVkTWFwRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgTGVnZW5kOiBfanNvbixcbiAgICAgICAgTWFwU3R5bGVPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9GaWxsZWRNYXBTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9vbHRpcDogKF8pID0+IGRlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBXaW5kb3dPcHRpb25zOiAoXykgPT4gZGVfR2Vvc3BhdGlhbFdpbmRvd09wdGlvbnMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRmlsbGVkTWFwRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRmlsbGVkTWFwQWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBkZV9GaWxsZWRNYXBBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9GaWxsZWRNYXBNZWFzdXJlRmllbGRMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX01lYXN1cmVGaWVsZChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9GaWxsZWRNYXBTaGFwZUNvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRmllbGRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEZvcm1hdDogKF8pID0+IGRlX1NoYXBlQ29uZGl0aW9uYWxGb3JtYXQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRmlsbGVkTWFwU29ydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhdGVnb3J5U29ydDogKF8pID0+IGRlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0ZpbGxlZE1hcFZpc3VhbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX0ZpbGxlZE1hcENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gZGVfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ29uZGl0aW9uYWxGb3JtYXR0aW5nOiAoXykgPT4gZGVfRmlsbGVkTWFwQ29uZGl0aW9uYWxGb3JtYXR0aW5nKF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWaXN1YWxJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRmlsdGVyID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeUZpbHRlcjogKF8pID0+IGRlX0NhdGVnb3J5RmlsdGVyKF8sIGNvbnRleHQpLFxuICAgICAgICBOZXN0ZWRGaWx0ZXI6IChfKSA9PiBkZV9OZXN0ZWRGaWx0ZXIoXywgY29udGV4dCksXG4gICAgICAgIE51bWVyaWNFcXVhbGl0eUZpbHRlcjogKF8pID0+IGRlX051bWVyaWNFcXVhbGl0eUZpbHRlcihfLCBjb250ZXh0KSxcbiAgICAgICAgTnVtZXJpY1JhbmdlRmlsdGVyOiAoXykgPT4gZGVfTnVtZXJpY1JhbmdlRmlsdGVyKF8sIGNvbnRleHQpLFxuICAgICAgICBSZWxhdGl2ZURhdGVzRmlsdGVyOiAoXykgPT4gZGVfUmVsYXRpdmVEYXRlc0ZpbHRlcihfLCBjb250ZXh0KSxcbiAgICAgICAgVGltZUVxdWFsaXR5RmlsdGVyOiAoXykgPT4gZGVfVGltZUVxdWFsaXR5RmlsdGVyKF8sIGNvbnRleHQpLFxuICAgICAgICBUaW1lUmFuZ2VGaWx0ZXI6IChfKSA9PiBkZV9UaW1lUmFuZ2VGaWx0ZXIoXywgY29udGV4dCksXG4gICAgICAgIFRvcEJvdHRvbUZpbHRlcjogKF8pID0+IGRlX1RvcEJvdHRvbUZpbHRlcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9GaWx0ZXJDb250cm9sID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDcm9zc1NoZWV0OiBfanNvbixcbiAgICAgICAgRGF0ZVRpbWVQaWNrZXI6IF9qc29uLFxuICAgICAgICBEcm9wZG93bjogX2pzb24sXG4gICAgICAgIExpc3Q6IF9qc29uLFxuICAgICAgICBSZWxhdGl2ZURhdGVUaW1lOiBfanNvbixcbiAgICAgICAgU2xpZGVyOiAoXykgPT4gZGVfRmlsdGVyU2xpZGVyQ29udHJvbChfLCBjb250ZXh0KSxcbiAgICAgICAgVGV4dEFyZWE6IF9qc29uLFxuICAgICAgICBUZXh0RmllbGQ6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0ZpbHRlckNvbnRyb2xMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0ZpbHRlckNvbnRyb2woZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfRmlsdGVyR3JvdXAgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENyb3NzRGF0YXNldDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEZpbHRlckdyb3VwSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBGaWx0ZXJzOiAoXykgPT4gZGVfRmlsdGVyTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU2NvcGVDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9GaWx0ZXJHcm91cExpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfRmlsdGVyR3JvdXAoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfRmlsdGVyTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9GaWx0ZXIoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfRmlsdGVyU2xpZGVyQ29udHJvbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRGlzcGxheU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBGaWx0ZXJDb250cm9sSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBNYXhpbXVtVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBNaW5pbXVtVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBTb3VyY2VGaWx0ZXJJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN0ZXBTaXplOiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICAgICAgVGl0bGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Gb2xkZXIgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBGb2xkZXJJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEZvbGRlclBhdGg6IF9qc29uLFxuICAgICAgICBGb2xkZXJUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGFzdFVwZGF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU2hhcmluZ01vZGVsOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Gb2xkZXJTdW1tYXJ5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgRm9sZGVySWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBGb2xkZXJUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGFzdFVwZGF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU2hhcmluZ01vZGVsOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Gb2xkZXJTdW1tYXJ5TGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9Gb2xkZXJTdW1tYXJ5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0ZvcmVjYXN0Q29tcHV0YXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbXB1dGF0aW9uSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDdXN0b21TZWFzb25hbGl0eVZhbHVlOiBfX2V4cGVjdEludDMyLFxuICAgICAgICBMb3dlckJvdW5kYXJ5OiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFBlcmlvZHNCYWNrd2FyZDogX19leHBlY3RJbnQzMixcbiAgICAgICAgUGVyaW9kc0ZvcndhcmQ6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIFByZWRpY3Rpb25JbnRlcnZhbDogX19leHBlY3RJbnQzMixcbiAgICAgICAgU2Vhc29uYWxpdHk6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaW1lOiBfanNvbixcbiAgICAgICAgVXBwZXJCb3VuZGFyeTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgICAgIFZhbHVlOiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0ZvcmVjYXN0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRm9yZWNhc3RQcm9wZXJ0aWVzOiAoXykgPT4gZGVfVGltZUJhc2VkRm9yZWNhc3RQcm9wZXJ0aWVzKF8sIGNvbnRleHQpLFxuICAgICAgICBTY2VuYXJpbzogKF8pID0+IGRlX0ZvcmVjYXN0U2NlbmFyaW8oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRm9yZWNhc3RDb25maWd1cmF0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9Gb3JlY2FzdENvbmZpZ3VyYXRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfRm9yZWNhc3RTY2VuYXJpbyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgV2hhdElmUG9pbnRTY2VuYXJpbzogKF8pID0+IGRlX1doYXRJZlBvaW50U2NlbmFyaW8oXywgY29udGV4dCksXG4gICAgICAgIFdoYXRJZlJhbmdlU2NlbmFyaW86IChfKSA9PiBkZV9XaGF0SWZSYW5nZVNjZW5hcmlvKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0Z1bm5lbENoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhdGVnb3J5OiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gZGVfRnVubmVsQ2hhcnRNZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0Z1bm5lbENoYXJ0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBEYXRhTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX0Z1bm5lbENoYXJ0RmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9GdW5uZWxDaGFydFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUb29sdGlwOiAoXykgPT4gZGVfVG9vbHRpcE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFZhbHVlTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfRnVubmVsQ2hhcnRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGdW5uZWxDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gZGVfRnVubmVsQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9GdW5uZWxDaGFydE1lYXN1cmVGaWVsZExpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfTWVhc3VyZUZpZWxkKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0Z1bm5lbENoYXJ0U29ydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhdGVnb3J5SXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIENhdGVnb3J5U29ydDogKF8pID0+IGRlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0Z1bm5lbENoYXJ0VmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfRnVubmVsQ2hhcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW5IaWVyYXJjaGllczogKF8pID0+IGRlX0NvbHVtbkhpZXJhcmNoeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxDb250ZW50QWx0VGV4dDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HYXVnZUNoYXJ0QXJjQ29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGb3JlZ3JvdW5kQ29sb3I6IChfKSA9PiBkZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HYXVnZUNoYXJ0Q29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25zOiAoXykgPT4gZGVfR2F1Z2VDaGFydENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2F1Z2VDaGFydENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJjOiAoXykgPT4gZGVfR2F1Z2VDaGFydEFyY0NvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICAgICAgUHJpbWFyeVZhbHVlOiAoXykgPT4gZGVfR2F1Z2VDaGFydFByaW1hcnlWYWx1ZUNvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HYXVnZUNoYXJ0Q29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9HYXVnZUNoYXJ0Q29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0dhdWdlQ2hhcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb2xvckNvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX0dhdWdlQ2hhcnRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBHYXVnZUNoYXJ0T3B0aW9uczogKF8pID0+IGRlX0dhdWdlQ2hhcnRPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBUb29sdGlwT3B0aW9uczogKF8pID0+IGRlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBWaXN1YWxQYWxldHRlOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HYXVnZUNoYXJ0RmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgVGFyZ2V0VmFsdWVzOiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HYXVnZUNoYXJ0T3B0aW9ucyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJjOiAoXykgPT4gZGVfQXJjQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQXJjQXhpczogKF8pID0+IGRlX0FyY0F4aXNDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb21wYXJpc29uOiBfanNvbixcbiAgICAgICAgUHJpbWFyeVZhbHVlRGlzcGxheVR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBQcmltYXJ5VmFsdWVGb250Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2F1Z2VDaGFydFByaW1hcnlWYWx1ZUNvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgSWNvbjogX2pzb24sXG4gICAgICAgIFRleHRDb2xvcjogKF8pID0+IGRlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dhdWdlQ2hhcnRWaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9HYXVnZUNoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29uZGl0aW9uYWxGb3JtYXR0aW5nOiAoXykgPT4gZGVfR2F1Z2VDaGFydENvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbENvbnRlbnRBbHRUZXh0OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmlzdWFsSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dlb3NwYXRpYWxDYXRlZ29yaWNhbENvbG9yID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeURhdGFDb2xvcnM6IF9qc29uLFxuICAgICAgICBEZWZhdWx0T3BhY2l0eTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgICAgIE51bGxEYXRhU2V0dGluZ3M6IChfKSA9PiBkZV9HZW9zcGF0aWFsTnVsbERhdGFTZXR0aW5ncyhfLCBjb250ZXh0KSxcbiAgICAgICAgTnVsbERhdGFWaXNpYmlsaXR5OiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HZW9zcGF0aWFsQ2lyY2xlUmFkaXVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBSYWRpdXM6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dlb3NwYXRpYWxDaXJjbGVTeW1ib2xTdHlsZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2lyY2xlUmFkaXVzOiAoXykgPT4gZGVfR2Vvc3BhdGlhbENpcmNsZVJhZGl1cyhfLCBjb250ZXh0KSxcbiAgICAgICAgRmlsbENvbG9yOiAoXykgPT4gZGVfR2Vvc3BhdGlhbENvbG9yKF8sIGNvbnRleHQpLFxuICAgICAgICBTdHJva2VDb2xvcjogKF8pID0+IGRlX0dlb3NwYXRpYWxDb2xvcihfLCBjb250ZXh0KSxcbiAgICAgICAgU3Ryb2tlV2lkdGg6IChfKSA9PiBkZV9HZW9zcGF0aWFsTGluZVdpZHRoKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dlb3NwYXRpYWxDb2xvciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2F0ZWdvcmljYWw6IChfKSA9PiBkZV9HZW9zcGF0aWFsQ2F0ZWdvcmljYWxDb2xvcihfLCBjb250ZXh0KSxcbiAgICAgICAgR3JhZGllbnQ6IChfKSA9PiBkZV9HZW9zcGF0aWFsR3JhZGllbnRDb2xvcihfLCBjb250ZXh0KSxcbiAgICAgICAgU29saWQ6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dlb3NwYXRpYWxDb29yZGluYXRlQm91bmRzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBFYXN0OiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICAgICAgTm9ydGg6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBTb3V0aDogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgICAgIFdlc3Q6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dlb3NwYXRpYWxHcmFkaWVudENvbG9yID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEZWZhdWx0T3BhY2l0eTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgICAgIE51bGxEYXRhU2V0dGluZ3M6IChfKSA9PiBkZV9HZW9zcGF0aWFsTnVsbERhdGFTZXR0aW5ncyhfLCBjb250ZXh0KSxcbiAgICAgICAgTnVsbERhdGFWaXNpYmlsaXR5OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RlcENvbG9yczogKF8pID0+IGRlX0dlb3NwYXRpYWxHcmFkaWVudFN0ZXBDb2xvckxpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2Vvc3BhdGlhbEdyYWRpZW50U3RlcENvbG9yID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb2xvcjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERhdGFWYWx1ZTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2Vvc3BhdGlhbEdyYWRpZW50U3RlcENvbG9yTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9HZW9zcGF0aWFsR3JhZGllbnRTdGVwQ29sb3IoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfR2Vvc3BhdGlhbExheWVyQ29sb3JGaWVsZCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sb3JEaW1lbnNpb25zRmllbGRzOiBfanNvbixcbiAgICAgICAgQ29sb3JWYWx1ZXNGaWVsZHM6IChfKSA9PiBkZV9HZW9zcGF0aWFsTGF5ZXJNZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dlb3NwYXRpYWxMYXllckRlZmluaXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIExpbmVMYXllcjogKF8pID0+IGRlX0dlb3NwYXRpYWxMaW5lTGF5ZXIoXywgY29udGV4dCksXG4gICAgICAgIFBvaW50TGF5ZXI6IChfKSA9PiBkZV9HZW9zcGF0aWFsUG9pbnRMYXllcihfLCBjb250ZXh0KSxcbiAgICAgICAgUG9seWdvbkxheWVyOiAoXykgPT4gZGVfR2Vvc3BhdGlhbFBvbHlnb25MYXllcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HZW9zcGF0aWFsTGF5ZXJJdGVtID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfTGF5ZXJDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBEYXRhU291cmNlOiBfanNvbixcbiAgICAgICAgSm9pbkRlZmluaXRpb246IChfKSA9PiBkZV9HZW9zcGF0aWFsTGF5ZXJKb2luRGVmaW5pdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgTGFiZWw6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBMYXllckRlZmluaXRpb246IChfKSA9PiBkZV9HZW9zcGF0aWFsTGF5ZXJEZWZpbml0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBMYXllcklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTGF5ZXJUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9vbHRpcDogKF8pID0+IGRlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBWaXNpYmlsaXR5OiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HZW9zcGF0aWFsTGF5ZXJKb2luRGVmaW5pdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sb3JGaWVsZDogKF8pID0+IGRlX0dlb3NwYXRpYWxMYXllckNvbG9yRmllbGQoXywgY29udGV4dCksXG4gICAgICAgIERhdGFzZXRLZXlGaWVsZDogX2pzb24sXG4gICAgICAgIFNoYXBlS2V5RmllbGQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dlb3NwYXRpYWxMYXllck1hcENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIExlZ2VuZDogX2pzb24sXG4gICAgICAgIE1hcExheWVyczogKF8pID0+IGRlX0dlb3NwYXRpYWxNYXBMYXllckxpc3QoXywgY29udGV4dCksXG4gICAgICAgIE1hcFN0YXRlOiAoXykgPT4gZGVfR2Vvc3BhdGlhbE1hcFN0YXRlKF8sIGNvbnRleHQpLFxuICAgICAgICBNYXBTdHlsZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2Vvc3BhdGlhbExheWVyTWVhc3VyZUZpZWxkTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfR2Vvc3BhdGlhbExpbmVMYXllciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgU3R5bGU6IChfKSA9PiBkZV9HZW9zcGF0aWFsTGluZVN0eWxlKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dlb3NwYXRpYWxMaW5lU3R5bGUgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIExpbmVTeW1ib2xTdHlsZTogKF8pID0+IGRlX0dlb3NwYXRpYWxMaW5lU3ltYm9sU3R5bGUoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2Vvc3BhdGlhbExpbmVTeW1ib2xTdHlsZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRmlsbENvbG9yOiAoXykgPT4gZGVfR2Vvc3BhdGlhbENvbG9yKF8sIGNvbnRleHQpLFxuICAgICAgICBMaW5lV2lkdGg6IChfKSA9PiBkZV9HZW9zcGF0aWFsTGluZVdpZHRoKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dlb3NwYXRpYWxMaW5lV2lkdGggPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIExpbmVXaWR0aDogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2Vvc3BhdGlhbE1hcEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb2xvcnM6IF9qc29uLFxuICAgICAgICBHZW9zcGF0aWFsOiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HZW9zcGF0aWFsTWFwQ29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX0dlb3NwYXRpYWxNYXBGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBNYXBTdHlsZU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBQb2ludFN0eWxlT3B0aW9uczogX2pzb24sXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBkZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgICAgIFdpbmRvd09wdGlvbnM6IChfKSA9PiBkZV9HZW9zcGF0aWFsV2luZG93T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HZW9zcGF0aWFsTWFwRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgR2Vvc3BhdGlhbE1hcEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gZGVfR2Vvc3BhdGlhbE1hcEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dlb3NwYXRpYWxNYXBMYXllckxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfR2Vvc3BhdGlhbExheWVySXRlbShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9HZW9zcGF0aWFsTWFwU3RhdGUgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEJvdW5kczogKF8pID0+IGRlX0dlb3NwYXRpYWxDb29yZGluYXRlQm91bmRzKF8sIGNvbnRleHQpLFxuICAgICAgICBNYXBOYXZpZ2F0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HZW9zcGF0aWFsTWFwVmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfR2Vvc3BhdGlhbE1hcENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gZGVfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbENvbnRlbnRBbHRUZXh0OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmlzdWFsSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dlb3NwYXRpYWxOdWxsRGF0YVNldHRpbmdzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBTeW1ib2xTdHlsZTogKF8pID0+IGRlX0dlb3NwYXRpYWxOdWxsU3ltYm9sU3R5bGUoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2Vvc3BhdGlhbE51bGxTeW1ib2xTdHlsZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRmlsbENvbG9yOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3Ryb2tlQ29sb3I6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdHJva2VXaWR0aDogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2Vvc3BhdGlhbFBvaW50TGF5ZXIgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFN0eWxlOiAoXykgPT4gZGVfR2Vvc3BhdGlhbFBvaW50U3R5bGUoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR2Vvc3BhdGlhbFBvaW50U3R5bGUgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENpcmNsZVN5bWJvbFN0eWxlOiAoXykgPT4gZGVfR2Vvc3BhdGlhbENpcmNsZVN5bWJvbFN0eWxlKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dlb3NwYXRpYWxQb2x5Z29uTGF5ZXIgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFN0eWxlOiAoXykgPT4gZGVfR2Vvc3BhdGlhbFBvbHlnb25TdHlsZShfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HZW9zcGF0aWFsUG9seWdvblN0eWxlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBQb2x5Z29uU3ltYm9sU3R5bGU6IChfKSA9PiBkZV9HZW9zcGF0aWFsUG9seWdvblN5bWJvbFN0eWxlKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0dlb3NwYXRpYWxQb2x5Z29uU3ltYm9sU3R5bGUgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEZpbGxDb2xvcjogKF8pID0+IGRlX0dlb3NwYXRpYWxDb2xvcihfLCBjb250ZXh0KSxcbiAgICAgICAgU3Ryb2tlQ29sb3I6IChfKSA9PiBkZV9HZW9zcGF0aWFsQ29sb3IoXywgY29udGV4dCksXG4gICAgICAgIFN0cm9rZVdpZHRoOiAoXykgPT4gZGVfR2Vvc3BhdGlhbExpbmVXaWR0aChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HZW9zcGF0aWFsV2luZG93T3B0aW9ucyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQm91bmRzOiAoXykgPT4gZGVfR2Vvc3BhdGlhbENvb3JkaW5hdGVCb3VuZHMoXywgY29udGV4dCksXG4gICAgICAgIE1hcFpvb21Nb2RlOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HcmFkaWVudENvbG9yID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBTdG9wczogKF8pID0+IGRlX0dyYWRpZW50U3RvcExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfR3JhZGllbnRTdG9wID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb2xvcjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERhdGFWYWx1ZTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgICAgIEdyYWRpZW50T2Zmc2V0OiBfX2xpbWl0ZWRQYXJzZURvdWJsZSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9HcmFkaWVudFN0b3BMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0dyYWRpZW50U3RvcChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9Hcm93dGhSYXRlQ29tcHV0YXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbXB1dGF0aW9uSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUGVyaW9kU2l6ZTogX19leHBlY3RJbnQzMixcbiAgICAgICAgVGltZTogX2pzb24sXG4gICAgICAgIFZhbHVlOiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0hlYXRNYXBBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sdW1uczogX2pzb24sXG4gICAgICAgIFJvd3M6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBkZV9IZWF0TWFwTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9IZWF0TWFwQ29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sb3JTY2FsZTogKF8pID0+IGRlX0NvbG9yU2NhbGUoXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkF4aXNEaXNwbGF5T3B0aW9uczogKF8pID0+IGRlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgRGF0YUxhYmVsczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBkZV9IZWF0TWFwRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgTGVnZW5kOiBfanNvbixcbiAgICAgICAgUm93QXhpc0Rpc3BsYXlPcHRpb25zOiAoXykgPT4gZGVfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBSb3dMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX0hlYXRNYXBTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9vbHRpcDogKF8pID0+IGRlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0hlYXRNYXBGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBIZWF0TWFwQWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBkZV9IZWF0TWFwQWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfSGVhdE1hcE1lYXN1cmVGaWVsZExpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfTWVhc3VyZUZpZWxkKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0hlYXRNYXBTb3J0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgSGVhdE1hcENvbHVtbkl0ZW1zTGltaXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgSGVhdE1hcENvbHVtblNvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgSGVhdE1hcFJvd0l0ZW1zTGltaXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgSGVhdE1hcFJvd1NvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9IZWF0TWFwVmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfSGVhdE1hcENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gZGVfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbENvbnRlbnRBbHRUZXh0OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmlzdWFsSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0hpc3RvZ3JhbUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBWYWx1ZXM6IChfKSA9PiBkZV9IaXN0b2dyYW1NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0hpc3RvZ3JhbUJpbk9wdGlvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEJpbkNvdW50OiBfanNvbixcbiAgICAgICAgQmluV2lkdGg6IChfKSA9PiBkZV9CaW5XaWR0aE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFNlbGVjdGVkQmluVHlwZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN0YXJ0VmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0hpc3RvZ3JhbUNvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEJpbk9wdGlvbnM6IChfKSA9PiBkZV9IaXN0b2dyYW1CaW5PcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX0hpc3RvZ3JhbUZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIFRvb2x0aXA6IChfKSA9PiBkZV9Ub29sdGlwT3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgICAgIFhBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBkZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFhBeGlzTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgWUF4aXNEaXNwbGF5T3B0aW9uczogKF8pID0+IGRlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9IaXN0b2dyYW1GaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBIaXN0b2dyYW1BZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IGRlX0hpc3RvZ3JhbUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0hpc3RvZ3JhbU1lYXN1cmVGaWVsZExpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfTWVhc3VyZUZpZWxkKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0hpc3RvZ3JhbVZpc3VhbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX0hpc3RvZ3JhbUNvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxDb250ZW50QWx0VGV4dDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9JbWFnZUN1c3RvbUFjdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uT3BlcmF0aW9uczogKF8pID0+IGRlX0ltYWdlQ3VzdG9tQWN0aW9uT3BlcmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ3VzdG9tQWN0aW9uSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVHJpZ2dlcjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfSW1hZ2VDdXN0b21BY3Rpb25MaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0ltYWdlQ3VzdG9tQWN0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0ltYWdlQ3VzdG9tQWN0aW9uT3BlcmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBOYXZpZ2F0aW9uT3BlcmF0aW9uOiBfanNvbixcbiAgICAgICAgU2V0UGFyYW1ldGVyc09wZXJhdGlvbjogKF8pID0+IGRlX0N1c3RvbUFjdGlvblNldFBhcmFtZXRlcnNPcGVyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFVSTE9wZXJhdGlvbjogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfSW1hZ2VDdXN0b21BY3Rpb25PcGVyYXRpb25MaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0ltYWdlQ3VzdG9tQWN0aW9uT3BlcmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0luZ2VzdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIEVycm9ySW5mbzogX2pzb24sXG4gICAgICAgIEluZ2VzdGlvbklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgSW5nZXN0aW9uU2l6ZUluQnl0ZXM6IF9fZXhwZWN0TG9uZyxcbiAgICAgICAgSW5nZXN0aW9uU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgSW5nZXN0aW9uVGltZUluU2Vjb25kczogX19leHBlY3RMb25nLFxuICAgICAgICBRdWV1ZUluZm86IF9qc29uLFxuICAgICAgICBSZXF1ZXN0U291cmNlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVxdWVzdFR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSb3dJbmZvOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Jbmdlc3Rpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0luZ2VzdGlvbihlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9Jbm5lckZpbHRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnlJbm5lckZpbHRlcjogKF8pID0+IGRlX0NhdGVnb3J5SW5uZXJGaWx0ZXIoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfSW5zaWdodENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbXB1dGF0aW9uczogKF8pID0+IGRlX0NvbXB1dGF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ3VzdG9tTmFycmF0aXZlOiBfanNvbixcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9JbnNpZ2h0VmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgRGF0YVNldElkZW50aWZpZXI6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbnNpZ2h0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX0luc2lnaHRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWaXN1YWxJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfS1BJQWN0dWFsVmFsdWVDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEljb246IF9qc29uLFxuICAgICAgICBUZXh0Q29sb3I6IChfKSA9PiBkZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9LUElDb21wYXJpc29uVmFsdWVDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEljb246IF9qc29uLFxuICAgICAgICBUZXh0Q29sb3I6IChfKSA9PiBkZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9LUElDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbnM6IChfKSA9PiBkZV9LUElDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0tQSUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0dWFsVmFsdWU6IChfKSA9PiBkZV9LUElBY3R1YWxWYWx1ZUNvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICAgICAgQ29tcGFyaXNvblZhbHVlOiAoXykgPT4gZGVfS1BJQ29tcGFyaXNvblZhbHVlQ29uZGl0aW9uYWxGb3JtYXR0aW5nKF8sIGNvbnRleHQpLFxuICAgICAgICBQcmltYXJ5VmFsdWU6IChfKSA9PiBkZV9LUElQcmltYXJ5VmFsdWVDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgICAgIFByb2dyZXNzQmFyOiAoXykgPT4gZGVfS1BJUHJvZ3Jlc3NCYXJDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfS1BJQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9LUElDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfS1BJQ29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX0tQSUZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIEtQSU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX0tQSVNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0tQSUZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFRhcmdldFZhbHVlczogKF8pID0+IGRlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgICAgIFRyZW5kR3JvdXBzOiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9LUElQcmltYXJ5VmFsdWVDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEljb246IF9qc29uLFxuICAgICAgICBUZXh0Q29sb3I6IChfKSA9PiBkZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9LUElQcm9ncmVzc0JhckNvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRm9yZWdyb3VuZENvbG9yOiAoXykgPT4gZGVfQ29uZGl0aW9uYWxGb3JtYXR0aW5nQ29sb3IoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfS1BJU29ydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFRyZW5kR3JvdXBTb3J0OiAoXykgPT4gZGVfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfS1BJVmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfS1BJQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBkZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmc6IChfKSA9PiBkZV9LUElDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxDb250ZW50QWx0VGV4dDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9MYXllckN1c3RvbUFjdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uT3BlcmF0aW9uczogKF8pID0+IGRlX0xheWVyQ3VzdG9tQWN0aW9uT3BlcmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ3VzdG9tQWN0aW9uSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVHJpZ2dlcjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTGF5ZXJDdXN0b21BY3Rpb25MaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0xheWVyQ3VzdG9tQWN0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0xheWVyQ3VzdG9tQWN0aW9uT3BlcmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGaWx0ZXJPcGVyYXRpb246IF9qc29uLFxuICAgICAgICBOYXZpZ2F0aW9uT3BlcmF0aW9uOiBfanNvbixcbiAgICAgICAgU2V0UGFyYW1ldGVyc09wZXJhdGlvbjogKF8pID0+IGRlX0N1c3RvbUFjdGlvblNldFBhcmFtZXRlcnNPcGVyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFVSTE9wZXJhdGlvbjogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTGF5ZXJDdXN0b21BY3Rpb25PcGVyYXRpb25MaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX0xheWVyQ3VzdG9tQWN0aW9uT3BlcmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX0xheWVyTWFwVmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9HZW9zcGF0aWFsTGF5ZXJNYXBDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBEYXRhU2V0SWRlbnRpZmllcjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxDb250ZW50QWx0VGV4dDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9MYXlvdXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9MYXlvdXRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0xheW91dENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEZyZWVGb3JtTGF5b3V0OiBfanNvbixcbiAgICAgICAgR3JpZExheW91dDogX2pzb24sXG4gICAgICAgIFNlY3Rpb25CYXNlZExheW91dDogKF8pID0+IGRlX1NlY3Rpb25CYXNlZExheW91dENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTGF5b3V0TGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9MYXlvdXQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfTGluZUNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhdGVnb3J5OiBfanNvbixcbiAgICAgICAgQ29sb3JzOiBfanNvbixcbiAgICAgICAgU21hbGxNdWx0aXBsZXM6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBkZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0xpbmVDaGFydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbnRyaWJ1dGlvbkFuYWx5c2lzRGVmYXVsdHM6IF9qc29uLFxuICAgICAgICBEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgRGVmYXVsdFNlcmllc1NldHRpbmdzOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX0xpbmVDaGFydEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEZvcmVjYXN0Q29uZmlndXJhdGlvbnM6IChfKSA9PiBkZV9Gb3JlY2FzdENvbmZpZ3VyYXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBMZWdlbmQ6IF9qc29uLFxuICAgICAgICBQcmltYXJ5WUF4aXNEaXNwbGF5T3B0aW9uczogKF8pID0+IGRlX0xpbmVTZXJpZXNBeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFByaW1hcnlZQXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFJlZmVyZW5jZUxpbmVzOiAoXykgPT4gZGVfUmVmZXJlbmNlTGluZUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFNlY29uZGFyeVlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBkZV9MaW5lU2VyaWVzQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBTZWNvbmRhcnlZQXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFNlcmllczogX2pzb24sXG4gICAgICAgIFNpbmdsZUF4aXNPcHRpb25zOiBfanNvbixcbiAgICAgICAgU21hbGxNdWx0aXBsZXNPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9MaW5lQ2hhcnRTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVG9vbHRpcDogKF8pID0+IGRlX1Rvb2x0aXBPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgICAgIFhBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBkZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFhBeGlzTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9MaW5lQ2hhcnRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBMaW5lQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IGRlX0xpbmVDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0xpbmVDaGFydFNvcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeUl0ZW1zTGltaXRDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgQ2F0ZWdvcnlTb3J0OiAoXykgPT4gZGVfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgICAgIENvbG9ySXRlbXNMaW1pdENvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBTbWFsbE11bHRpcGxlc0xpbWl0Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIFNtYWxsTXVsdGlwbGVzU29ydDogKF8pID0+IGRlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0xpbmVDaGFydFZpc3VhbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX0xpbmVDaGFydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gZGVfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbENvbnRlbnRBbHRUZXh0OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmlzdWFsSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0xpbmVTZXJpZXNBeGlzRGlzcGxheU9wdGlvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEF4aXNPcHRpb25zOiAoXykgPT4gZGVfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBNaXNzaW5nRGF0YUNvbmZpZ3VyYXRpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Mb2dpY2FsVGFibGUgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFsaWFzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGF0YVRyYW5zZm9ybXM6IChfKSA9PiBkZV9UcmFuc2Zvcm1PcGVyYXRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTb3VyY2U6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX0xvZ2ljYWxUYWJsZU1hcCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMob3V0cHV0KS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgICAgICBhY2Nba2V5XSA9IGRlX0xvZ2ljYWxUYWJsZSh2YWx1ZSwgY29udGV4dCk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xufTtcbmNvbnN0IGRlX01heGltdW1NaW5pbXVtQ29tcHV0YXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbXB1dGF0aW9uSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGltZTogX2pzb24sXG4gICAgICAgIFR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWYWx1ZTogKF8pID0+IGRlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9NZWFzdXJlRmllbGQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhbGN1bGF0ZWRNZWFzdXJlRmllbGQ6IF9qc29uLFxuICAgICAgICBDYXRlZ29yaWNhbE1lYXN1cmVGaWVsZDogX2pzb24sXG4gICAgICAgIERhdGVNZWFzdXJlRmllbGQ6IF9qc29uLFxuICAgICAgICBOdW1lcmljYWxNZWFzdXJlRmllbGQ6IChfKSA9PiBkZV9OdW1lcmljYWxNZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTWVhc3VyZUZpZWxkTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfTWV0cmljQ29tcGFyaXNvbkNvbXB1dGF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb21wdXRhdGlvbklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRnJvbVZhbHVlOiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkKF8sIGNvbnRleHQpLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGFyZ2V0VmFsdWU6IChfKSA9PiBkZV9NZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgICAgIFRpbWU6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX05lc3RlZEZpbHRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgRmlsdGVySWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbmNsdWRlSW5uZXJTZXQ6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgSW5uZXJGaWx0ZXI6IChfKSA9PiBkZV9Jbm5lckZpbHRlcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9OZXdEZWZhdWx0VmFsdWVzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRlVGltZVN0YXRpY1ZhbHVlczogKF8pID0+IGRlX0RhdGVUaW1lRGF0YXNldFBhcmFtZXRlclZhbHVlTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgRGVjaW1hbFN0YXRpY1ZhbHVlczogKF8pID0+IGRlX0RlY2ltYWxEYXRhc2V0UGFyYW1ldGVyVmFsdWVMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlZ2VyU3RhdGljVmFsdWVzOiBfanNvbixcbiAgICAgICAgU3RyaW5nU3RhdGljVmFsdWVzOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9OdW1lcmljYWxBZ2dyZWdhdGlvbkZ1bmN0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBQZXJjZW50aWxlQWdncmVnYXRpb246IChfKSA9PiBkZV9QZXJjZW50aWxlQWdncmVnYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFNpbXBsZU51bWVyaWNhbEFnZ3JlZ2F0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9OdW1lcmljYWxNZWFzdXJlRmllbGQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFnZ3JlZ2F0aW9uRnVuY3Rpb246IChfKSA9PiBkZV9OdW1lcmljYWxBZ2dyZWdhdGlvbkZ1bmN0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBGaWVsZElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRm9ybWF0Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfTnVtZXJpY0F4aXNPcHRpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBSYW5nZTogKF8pID0+IGRlX0F4aXNEaXNwbGF5UmFuZ2UoXywgY29udGV4dCksXG4gICAgICAgIFNjYWxlOiAoXykgPT4gZGVfQXhpc1NjYWxlKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX051bWVyaWNFcXVhbGl0eURyaWxsRG93bkZpbHRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX051bWVyaWNFcXVhbGl0eUZpbHRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWdncmVnYXRpb25GdW5jdGlvbjogKF8pID0+IGRlX0FnZ3JlZ2F0aW9uRnVuY3Rpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIERlZmF1bHRGaWx0ZXJDb250cm9sQ29uZmlndXJhdGlvbjogKF8pID0+IGRlX0RlZmF1bHRGaWx0ZXJDb250cm9sQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgRmlsdGVySWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBNYXRjaE9wZXJhdG9yOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTnVsbE9wdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFBhcmFtZXRlck5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTZWxlY3RBbGxPcHRpb25zOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX051bWVyaWNSYW5nZUZpbHRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWdncmVnYXRpb25GdW5jdGlvbjogKF8pID0+IGRlX0FnZ3JlZ2F0aW9uRnVuY3Rpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIERlZmF1bHRGaWx0ZXJDb250cm9sQ29uZmlndXJhdGlvbjogKF8pID0+IGRlX0RlZmF1bHRGaWx0ZXJDb250cm9sQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgRmlsdGVySWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbmNsdWRlTWF4aW11bTogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBJbmNsdWRlTWluaW11bTogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBOdWxsT3B0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmFuZ2VNYXhpbXVtOiAoXykgPT4gZGVfTnVtZXJpY1JhbmdlRmlsdGVyVmFsdWUoXywgY29udGV4dCksXG4gICAgICAgIFJhbmdlTWluaW11bTogKF8pID0+IGRlX051bWVyaWNSYW5nZUZpbHRlclZhbHVlKF8sIGNvbnRleHQpLFxuICAgICAgICBTZWxlY3RBbGxPcHRpb25zOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9OdW1lcmljUmFuZ2VGaWx0ZXJWYWx1ZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgUGFyYW1ldGVyOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdGljVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX092ZXJyaWRlRGF0YXNldFBhcmFtZXRlck9wZXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgTmV3RGVmYXVsdFZhbHVlczogKF8pID0+IGRlX05ld0RlZmF1bHRWYWx1ZXMoXywgY29udGV4dCksXG4gICAgICAgIE5ld1BhcmFtZXRlck5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBQYXJhbWV0ZXJOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QYXJhbWV0ZXJDb250cm9sID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRlVGltZVBpY2tlcjogX2pzb24sXG4gICAgICAgIERyb3Bkb3duOiBfanNvbixcbiAgICAgICAgTGlzdDogX2pzb24sXG4gICAgICAgIFNsaWRlcjogKF8pID0+IGRlX1BhcmFtZXRlclNsaWRlckNvbnRyb2woXywgY29udGV4dCksXG4gICAgICAgIFRleHRBcmVhOiBfanNvbixcbiAgICAgICAgVGV4dEZpZWxkOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QYXJhbWV0ZXJDb250cm9sTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9QYXJhbWV0ZXJDb250cm9sKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1BhcmFtZXRlckRlY2xhcmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRlVGltZVBhcmFtZXRlckRlY2xhcmF0aW9uOiAoXykgPT4gZGVfRGF0ZVRpbWVQYXJhbWV0ZXJEZWNsYXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgRGVjaW1hbFBhcmFtZXRlckRlY2xhcmF0aW9uOiAoXykgPT4gZGVfRGVjaW1hbFBhcmFtZXRlckRlY2xhcmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlZ2VyUGFyYW1ldGVyRGVjbGFyYXRpb246IF9qc29uLFxuICAgICAgICBTdHJpbmdQYXJhbWV0ZXJEZWNsYXJhdGlvbjogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGFyYW1ldGVyRGVjbGFyYXRpb25MaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX1BhcmFtZXRlckRlY2xhcmF0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX19QYXJhbWV0ZXJzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRlVGltZVBhcmFtZXRlcnM6IChfKSA9PiBkZV9EYXRlVGltZVBhcmFtZXRlckxpc3QoXywgY29udGV4dCksXG4gICAgICAgIERlY2ltYWxQYXJhbWV0ZXJzOiAoXykgPT4gZGVfRGVjaW1hbFBhcmFtZXRlckxpc3QoXywgY29udGV4dCksXG4gICAgICAgIEludGVnZXJQYXJhbWV0ZXJzOiBfanNvbixcbiAgICAgICAgU3RyaW5nUGFyYW1ldGVyczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGFyYW1ldGVyU2xpZGVyQ29udHJvbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRGlzcGxheU9wdGlvbnM6IF9qc29uLFxuICAgICAgICBNYXhpbXVtVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBNaW5pbXVtVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBQYXJhbWV0ZXJDb250cm9sSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTb3VyY2VQYXJhbWV0ZXJOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RlcFNpemU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBUaXRsZTogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGVyY2VudGlsZUFnZ3JlZ2F0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBQZXJjZW50aWxlVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1BlcmNlbnRWaXNpYmxlUmFuZ2UgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEZyb206IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgICAgICBUbzogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGVyaW9kT3ZlclBlcmlvZENvbXB1dGF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb21wdXRhdGlvbklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRpbWU6IF9qc29uLFxuICAgICAgICBWYWx1ZTogKF8pID0+IGRlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QZXJpb2RUb0RhdGVDb21wdXRhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29tcHV0YXRpb25JZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBQZXJpb2RUaW1lR3JhbnVsYXJpdHk6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUaW1lOiBfanNvbixcbiAgICAgICAgVmFsdWU6IChfKSA9PiBkZV9NZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGllQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnk6IF9qc29uLFxuICAgICAgICBTbWFsbE11bHRpcGxlczogX2pzb24sXG4gICAgICAgIFZhbHVlczogKF8pID0+IGRlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGllQ2hhcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIENvbnRyaWJ1dGlvbkFuYWx5c2lzRGVmYXVsdHM6IF9qc29uLFxuICAgICAgICBEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgRG9udXRPcHRpb25zOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX1BpZUNoYXJ0RmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgTGVnZW5kOiBfanNvbixcbiAgICAgICAgU21hbGxNdWx0aXBsZXNPcHRpb25zOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9QaWVDaGFydFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUb29sdGlwOiAoXykgPT4gZGVfVG9vbHRpcE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFZhbHVlTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgVmlzdWFsUGFsZXR0ZTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGllQ2hhcnRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBQaWVDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gZGVfUGllQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QaWVDaGFydFNvcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeUl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBDYXRlZ29yeVNvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU21hbGxNdWx0aXBsZXNMaW1pdENvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBTbWFsbE11bHRpcGxlc1NvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QaWVDaGFydFZpc3VhbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1BpZUNoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBkZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWaXN1YWxJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGl2b3RGaWVsZFNvcnRPcHRpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGaWVsZElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU29ydEJ5OiAoXykgPT4gZGVfUGl2b3RUYWJsZVNvcnRCeShfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QaXZvdEZpZWxkU29ydE9wdGlvbnNMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX1Bpdm90RmllbGRTb3J0T3B0aW9ucyhlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9QaXZvdE1lYXN1cmVGaWVsZExpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfTWVhc3VyZUZpZWxkKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1Bpdm90VGFibGVBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sdW1uczogX2pzb24sXG4gICAgICAgIFJvd3M6IF9qc29uLFxuICAgICAgICBWYWx1ZXM6IChfKSA9PiBkZV9QaXZvdE1lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGl2b3RUYWJsZUNlbGxDb25kaXRpb25hbEZvcm1hdHRpbmcgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEZpZWxkSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTY29wZTogX2pzb24sXG4gICAgICAgIFNjb3BlczogX2pzb24sXG4gICAgICAgIFRleHRGb3JtYXQ6IChfKSA9PiBkZV9UZXh0Q29uZGl0aW9uYWxGb3JtYXQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGl2b3RUYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uczogKF8pID0+IGRlX1Bpdm90VGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Bpdm90VGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENlbGw6IChfKSA9PiBkZV9QaXZvdFRhYmxlQ2VsbENvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QaXZvdFRhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9QaXZvdFRhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1Bpdm90VGFibGVDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGaWVsZE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gZGVfUGl2b3RUYWJsZUZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIFBhZ2luYXRlZFJlcG9ydE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1Bpdm90VGFibGVTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVGFibGVPcHRpb25zOiBfanNvbixcbiAgICAgICAgVG90YWxPcHRpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QaXZvdFRhYmxlRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgUGl2b3RUYWJsZUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gZGVfUGl2b3RUYWJsZUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Bpdm90VGFibGVTb3J0QnkgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbHVtbjogKF8pID0+IGRlX0NvbHVtblNvcnQoXywgY29udGV4dCksXG4gICAgICAgIERhdGFQYXRoOiBfanNvbixcbiAgICAgICAgRmllbGQ6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Bpdm90VGFibGVTb3J0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRmllbGRTb3J0T3B0aW9uczogKF8pID0+IGRlX1Bpdm90RmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGl2b3RUYWJsZVZpc3VhbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1Bpdm90VGFibGVDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmc6IChfKSA9PiBkZV9QaXZvdFRhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nKF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWaXN1YWxJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUGx1Z2luVmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfUGx1Z2luVmlzdWFsQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgUGx1Z2luQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbENvbnRlbnRBbHRUZXh0OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmlzdWFsSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1BsdWdpblZpc3VhbENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBkZV9QbHVnaW5WaXN1YWxGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1BsdWdpblZpc3VhbFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBWaXN1YWxPcHRpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QbHVnaW5WaXN1YWxGaWVsZFdlbGwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEF4aXNOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRGltZW5zaW9uczogX2pzb24sXG4gICAgICAgIE1lYXN1cmVzOiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgVW5hZ2dyZWdhdGVkOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QbHVnaW5WaXN1YWxGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX1BsdWdpblZpc3VhbEZpZWxkV2VsbChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9QbHVnaW5WaXN1YWxTb3J0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgUGx1Z2luVmlzdWFsVGFibGVRdWVyeVNvcnQ6IChfKSA9PiBkZV9QbHVnaW5WaXN1YWxUYWJsZVF1ZXJ5U29ydChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9QbHVnaW5WaXN1YWxUYWJsZVF1ZXJ5U29ydCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgSXRlbXNMaW1pdENvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBSb3dTb3J0OiAoXykgPT4gZGVfUm93U29ydExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUHJlZGVmaW5lZEhpZXJhcmNoeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sdW1uczogX2pzb24sXG4gICAgICAgIERyaWxsRG93bkZpbHRlcnM6IChfKSA9PiBkZV9EcmlsbERvd25GaWx0ZXJMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBIaWVyYXJjaHlJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUmFkYXJDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeTogX2pzb24sXG4gICAgICAgIENvbG9yOiBfanNvbixcbiAgICAgICAgVmFsdWVzOiAoXykgPT4gZGVfUmFkYXJDaGFydFZhbHVlc0ZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9SYWRhckNoYXJ0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWx0ZXJuYXRlQmFuZENvbG9yc1Zpc2liaWxpdHk6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBbHRlcm5hdGVCYW5kRXZlbkNvbG9yOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQWx0ZXJuYXRlQmFuZE9kZENvbG9yOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXhlc1JhbmdlU2NhbGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBCYXNlU2VyaWVzU2V0dGluZ3M6IF9qc29uLFxuICAgICAgICBDYXRlZ29yeUF4aXM6IChfKSA9PiBkZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIENhdGVnb3J5TGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgQ29sb3JBeGlzOiAoXykgPT4gZGVfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2xvckxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBkZV9SYWRhckNoYXJ0RmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgTGVnZW5kOiBfanNvbixcbiAgICAgICAgU2hhcGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1JhZGFyQ2hhcnRTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgU3RhcnRBbmdsZTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgICAgIFZpc3VhbFBhbGV0dGU6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1JhZGFyQ2hhcnRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBSYWRhckNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBkZV9SYWRhckNoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUmFkYXJDaGFydFNvcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeUl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBDYXRlZ29yeVNvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sb3JJdGVtc0xpbWl0OiBfanNvbixcbiAgICAgICAgQ29sb3JTb3J0OiAoXykgPT4gZGVfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUmFkYXJDaGFydFZhbHVlc0ZpZWxkTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfUmFkYXJDaGFydFZpc3VhbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1JhZGFyQ2hhcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW5IaWVyYXJjaGllczogKF8pID0+IGRlX0NvbHVtbkhpZXJhcmNoeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxDb250ZW50QWx0VGV4dDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9SZWZlcmVuY2VMaW5lID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRhQ29uZmlndXJhdGlvbjogKF8pID0+IGRlX1JlZmVyZW5jZUxpbmVEYXRhQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgTGFiZWxDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3R5bGVDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9SZWZlcmVuY2VMaW5lRGF0YUNvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEF4aXNCaW5kaW5nOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRHluYW1pY0NvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9SZWZlcmVuY2VMaW5lRHluYW1pY0RhdGFDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBTZXJpZXNUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdGljQ29uZmlndXJhdGlvbjogKF8pID0+IGRlX1JlZmVyZW5jZUxpbmVTdGF0aWNEYXRhQ29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9SZWZlcmVuY2VMaW5lRHluYW1pY0RhdGFDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYWxjdWxhdGlvbjogKF8pID0+IGRlX051bWVyaWNhbEFnZ3JlZ2F0aW9uRnVuY3Rpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbjogX2pzb24sXG4gICAgICAgIE1lYXN1cmVBZ2dyZWdhdGlvbkZ1bmN0aW9uOiAoXykgPT4gZGVfQWdncmVnYXRpb25GdW5jdGlvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9SZWZlcmVuY2VMaW5lTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9SZWZlcmVuY2VMaW5lKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1JlZmVyZW5jZUxpbmVTdGF0aWNEYXRhQ29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1JlZnJlc2hTY2hlZHVsZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVmcmVzaFR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTY2hlZHVsZUZyZXF1ZW5jeTogX2pzb24sXG4gICAgICAgIFNjaGVkdWxlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdGFydEFmdGVyRGF0ZVRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfUmVmcmVzaFNjaGVkdWxlcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9SZWZyZXNoU2NoZWR1bGUoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfUmVsYXRpdmVEYXRlc0ZpbHRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQW5jaG9yRGF0ZUNvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBEZWZhdWx0RmlsdGVyQ29udHJvbENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9EZWZhdWx0RmlsdGVyQ29udHJvbENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIEV4Y2x1ZGVQZXJpb2RDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgRmlsdGVySWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBNaW5pbXVtR3JhbnVsYXJpdHk6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOdWxsT3B0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUGFyYW1ldGVyTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlbGF0aXZlRGF0ZVR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSZWxhdGl2ZURhdGVWYWx1ZTogX19leHBlY3RJbnQzMixcbiAgICAgICAgVGltZUdyYW51bGFyaXR5OiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Sb3dTb3J0TGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9GaWVsZFNvcnRPcHRpb25zKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1NhbmtleURpYWdyYW1BZ2dyZWdhdGVkRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRGVzdGluYXRpb246IF9qc29uLFxuICAgICAgICBTb3VyY2U6IF9qc29uLFxuICAgICAgICBXZWlnaHQ6IChfKSA9PiBkZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1NhbmtleURpYWdyYW1DaGFydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERhdGFMYWJlbHM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gZGVfU2Fua2V5RGlhZ3JhbUZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIFNvcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfU2Fua2V5RGlhZ3JhbVNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1NhbmtleURpYWdyYW1GaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBTYW5rZXlEaWFncmFtQWdncmVnYXRlZEZpZWxkV2VsbHM6IChfKSA9PiBkZV9TYW5rZXlEaWFncmFtQWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2Fua2V5RGlhZ3JhbVNvcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEZXN0aW5hdGlvbkl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBTb3VyY2VJdGVtc0xpbWl0OiBfanNvbixcbiAgICAgICAgV2VpZ2h0U29ydDogKF8pID0+IGRlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1NhbmtleURpYWdyYW1WaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9TYW5rZXlEaWFncmFtQ2hhcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWaXN1YWxJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2NhdHRlclBsb3RDYXRlZ29yaWNhbGx5QWdncmVnYXRlZEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhdGVnb3J5OiBfanNvbixcbiAgICAgICAgTGFiZWw6IF9qc29uLFxuICAgICAgICBTaXplOiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgWEF4aXM6IChfKSA9PiBkZV9NZWFzdXJlRmllbGRMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBZQXhpczogKF8pID0+IGRlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2NhdHRlclBsb3RDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBEYXRhTGFiZWxzOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX1NjYXR0ZXJQbG90RmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgTGVnZW5kOiBfanNvbixcbiAgICAgICAgU29ydENvbmZpZ3VyYXRpb246IF9qc29uLFxuICAgICAgICBUb29sdGlwOiAoXykgPT4gZGVfVG9vbHRpcE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFZpc3VhbFBhbGV0dGU6IF9qc29uLFxuICAgICAgICBYQXhpc0Rpc3BsYXlPcHRpb25zOiAoXykgPT4gZGVfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBYQXhpc0xhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFlBeGlzRGlzcGxheU9wdGlvbnM6IChfKSA9PiBkZV9BeGlzRGlzcGxheU9wdGlvbnMoXywgY29udGV4dCksXG4gICAgICAgIFlBeGlzTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9TY2F0dGVyUGxvdEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFNjYXR0ZXJQbG90Q2F0ZWdvcmljYWxseUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gZGVfU2NhdHRlclBsb3RDYXRlZ29yaWNhbGx5QWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIFNjYXR0ZXJQbG90VW5hZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IGRlX1NjYXR0ZXJQbG90VW5hZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9TY2F0dGVyUGxvdFVuYWdncmVnYXRlZEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENhdGVnb3J5OiBfanNvbixcbiAgICAgICAgTGFiZWw6IF9qc29uLFxuICAgICAgICBTaXplOiAoXykgPT4gZGVfTWVhc3VyZUZpZWxkTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgWEF4aXM6IF9qc29uLFxuICAgICAgICBZQXhpczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2NhdHRlclBsb3RWaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9TY2F0dGVyUGxvdENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gZGVfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbENvbnRlbnRBbHRUZXh0OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmlzdWFsSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Njcm9sbEJhck9wdGlvbnMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFZpc2liaWxpdHk6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWaXNpYmxlUmFuZ2U6IChfKSA9PiBkZV9WaXNpYmxlUmFuZ2VPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1NlY3Rpb25CYXNlZExheW91dENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEJvZHlTZWN0aW9uczogKF8pID0+IGRlX0JvZHlTZWN0aW9uQ29uZmlndXJhdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENhbnZhc1NpemVPcHRpb25zOiBfanNvbixcbiAgICAgICAgRm9vdGVyU2VjdGlvbnM6IF9qc29uLFxuICAgICAgICBIZWFkZXJTZWN0aW9uczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2Vuc2l0aXZlRG91YmxlTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBfX2xpbWl0ZWRQYXJzZURvdWJsZShlbnRyeSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9TZW5zaXRpdmVUaW1lc3RhbXBMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoZW50cnkpKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9TZXRQYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERlc3RpbmF0aW9uUGFyYW1ldGVyTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZhbHVlOiAoXykgPT4gZGVfRGVzdGluYXRpb25QYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2V0UGFyYW1ldGVyVmFsdWVDb25maWd1cmF0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9TZXRQYXJhbWV0ZXJWYWx1ZUNvbmZpZ3VyYXRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfU2hhcGVDb25kaXRpb25hbEZvcm1hdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQmFja2dyb3VuZENvbG9yOiAoXykgPT4gZGVfQ29uZGl0aW9uYWxGb3JtYXR0aW5nQ29sb3IoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2hlZXQgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEltYWdlczogKF8pID0+IGRlX1NoZWV0SW1hZ2VMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU2hlZXRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2hlZXREZWZpbml0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb250ZW50VHlwZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEN1c3RvbUFjdGlvbkRlZmF1bHRzOiBfanNvbixcbiAgICAgICAgRGVzY3JpcHRpb246IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBGaWx0ZXJDb250cm9sczogKF8pID0+IGRlX0ZpbHRlckNvbnRyb2xMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBJbWFnZXM6IChfKSA9PiBkZV9TaGVldEltYWdlTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgTGF5b3V0czogKF8pID0+IGRlX0xheW91dExpc3QoXywgY29udGV4dCksXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBQYXJhbWV0ZXJDb250cm9sczogKF8pID0+IGRlX1BhcmFtZXRlckNvbnRyb2xMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTaGVldENvbnRyb2xMYXlvdXRzOiBfanNvbixcbiAgICAgICAgU2hlZXRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRleHRCb3hlczogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmlzdWFsczogKF8pID0+IGRlX1Zpc3VhbExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfU2hlZXREZWZpbml0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9TaGVldERlZmluaXRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfU2hlZXRJbWFnZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IGRlX0ltYWdlQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgSW1hZ2VDb250ZW50QWx0VGV4dDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIFNjYWxpbmc6IF9qc29uLFxuICAgICAgICBTaGVldEltYWdlSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTb3VyY2U6IF9qc29uLFxuICAgICAgICBUb29sdGlwOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9TaGVldEltYWdlTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9TaGVldEltYWdlKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1NoZWV0TGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9TaGVldChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9TbmFwc2hvdENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIERlc3RpbmF0aW9uQ29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIEZpbGVHcm91cHM6IF9qc29uLFxuICAgICAgICBQYXJhbWV0ZXJzOiAoXykgPT4gZGVfX1BhcmFtZXRlcnMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGFibGVBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgR3JvdXBCeTogX2pzb24sXG4gICAgICAgIFZhbHVlczogKF8pID0+IGRlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGFibGVDZWxsQ29uZGl0aW9uYWxGb3JtYXR0aW5nID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGaWVsZElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGV4dEZvcm1hdDogKF8pID0+IGRlX1RleHRDb25kaXRpb25hbEZvcm1hdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uczogKF8pID0+IGRlX1RhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZ09wdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2VsbDogKF8pID0+IGRlX1RhYmxlQ2VsbENvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICAgICAgUm93OiAoXykgPT4gZGVfVGFibGVSb3dDb25kaXRpb25hbEZvcm1hdHRpbmcoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGFibGVDb25kaXRpb25hbEZvcm1hdHRpbmdPcHRpb25MaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX1RhYmxlQ29uZGl0aW9uYWxGb3JtYXR0aW5nT3B0aW9uKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1RhYmxlQ29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRmllbGRPcHRpb25zOiBfanNvbixcbiAgICAgICAgRmllbGRXZWxsczogKF8pID0+IGRlX1RhYmxlRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgUGFnaW5hdGVkUmVwb3J0T3B0aW9uczogX2pzb24sXG4gICAgICAgIFNvcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfVGFibGVTb3J0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgVGFibGVJbmxpbmVWaXN1YWxpemF0aW9uczogX2pzb24sXG4gICAgICAgIFRhYmxlT3B0aW9uczogX2pzb24sXG4gICAgICAgIFRvdGFsT3B0aW9uczogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGFibGVGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBUYWJsZUFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiAoXykgPT4gZGVfVGFibGVBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICAgICAgVGFibGVVbmFnZ3JlZ2F0ZWRGaWVsZFdlbGxzOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UYWJsZVJvd0NvbmRpdGlvbmFsRm9ybWF0dGluZyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQmFja2dyb3VuZENvbG9yOiAoXykgPT4gZGVfQ29uZGl0aW9uYWxGb3JtYXR0aW5nQ29sb3IoXywgY29udGV4dCksXG4gICAgICAgIFRleHRDb2xvcjogKF8pID0+IGRlX0NvbmRpdGlvbmFsRm9ybWF0dGluZ0NvbG9yKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RhYmxlU29ydENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFBhZ2luYXRpb25Db25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgUm93U29ydDogKF8pID0+IGRlX1Jvd1NvcnRMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RhYmxlVmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ2hhcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfVGFibGVDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb25kaXRpb25hbEZvcm1hdHRpbmc6IChfKSA9PiBkZV9UYWJsZUNvbmRpdGlvbmFsRm9ybWF0dGluZyhfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbENvbnRlbnRBbHRUZXh0OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmlzdWFsSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RlbXBsYXRlID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgTGFzdFVwZGF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGVtcGxhdGVJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZlcnNpb246IChfKSA9PiBkZV9UZW1wbGF0ZVZlcnNpb24oXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGVtcGxhdGVTdW1tYXJ5ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDcmVhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgTGFzdFVwZGF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBMYXRlc3RWZXJzaW9uTnVtYmVyOiBfX2V4cGVjdExvbmcsXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUZW1wbGF0ZUlkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UZW1wbGF0ZVN1bW1hcnlMaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX1RlbXBsYXRlU3VtbWFyeShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9UZW1wbGF0ZVZlcnNpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEYXRhU2V0Q29uZmlndXJhdGlvbnM6IF9qc29uLFxuICAgICAgICBEZXNjcmlwdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEVycm9yczogX2pzb24sXG4gICAgICAgIFNoZWV0czogKF8pID0+IGRlX1NoZWV0TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU291cmNlRW50aXR5QXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGhlbWVBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWZXJzaW9uTnVtYmVyOiBfX2V4cGVjdExvbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGVtcGxhdGVWZXJzaW9uRGVmaW5pdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQW5hbHlzaXNEZWZhdWx0czogX2pzb24sXG4gICAgICAgIENhbGN1bGF0ZWRGaWVsZHM6IF9qc29uLFxuICAgICAgICBDb2x1bW5Db25maWd1cmF0aW9uczogX2pzb24sXG4gICAgICAgIERhdGFTZXRDb25maWd1cmF0aW9uczogX2pzb24sXG4gICAgICAgIEZpbHRlckdyb3VwczogKF8pID0+IGRlX0ZpbHRlckdyb3VwTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgT3B0aW9uczogX2pzb24sXG4gICAgICAgIFBhcmFtZXRlckRlY2xhcmF0aW9uczogKF8pID0+IGRlX1BhcmFtZXRlckRlY2xhcmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgUXVlcnlFeGVjdXRpb25PcHRpb25zOiBfanNvbixcbiAgICAgICAgU2hlZXRzOiAoXykgPT4gZGVfU2hlZXREZWZpbml0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3RhdGljRmlsZXM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RlbXBsYXRlVmVyc2lvblN1bW1hcnkgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEZXNjcmlwdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZlcnNpb25OdW1iZXI6IF9fZXhwZWN0TG9uZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UZW1wbGF0ZVZlcnNpb25TdW1tYXJ5TGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9UZW1wbGF0ZVZlcnNpb25TdW1tYXJ5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1RleHRDb25kaXRpb25hbEZvcm1hdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQmFja2dyb3VuZENvbG9yOiAoXykgPT4gZGVfQ29uZGl0aW9uYWxGb3JtYXR0aW5nQ29sb3IoXywgY29udGV4dCksXG4gICAgICAgIEljb246IF9qc29uLFxuICAgICAgICBUZXh0Q29sb3I6IChfKSA9PiBkZV9Db25kaXRpb25hbEZvcm1hdHRpbmdDb2xvcihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UaGVtZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIExhc3RVcGRhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRoZW1lSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmVyc2lvbjogKF8pID0+IGRlX1RoZW1lVmVyc2lvbihfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UaGVtZVN1bW1hcnkgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIExhdGVzdFZlcnNpb25OdW1iZXI6IF9fZXhwZWN0TG9uZyxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRoZW1lSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RoZW1lU3VtbWFyeUxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfVGhlbWVTdW1tYXJ5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1RoZW1lVmVyc2lvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQmFzZVRoZW1lSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIERlc2NyaXB0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgRXJyb3JzOiBfanNvbixcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmVyc2lvbk51bWJlcjogX19leHBlY3RMb25nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RoZW1lVmVyc2lvblN1bW1hcnkgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEZXNjcmlwdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZlcnNpb25OdW1iZXI6IF9fZXhwZWN0TG9uZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UaGVtZVZlcnNpb25TdW1tYXJ5TGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9UaGVtZVZlcnNpb25TdW1tYXJ5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1RpbWVCYXNlZEZvcmVjYXN0UHJvcGVydGllcyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgTG93ZXJCb3VuZGFyeTogX19saW1pdGVkUGFyc2VEb3VibGUsXG4gICAgICAgIFBlcmlvZHNCYWNrd2FyZDogX19leHBlY3RJbnQzMixcbiAgICAgICAgUGVyaW9kc0ZvcndhcmQ6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIFByZWRpY3Rpb25JbnRlcnZhbDogX19leHBlY3RJbnQzMixcbiAgICAgICAgU2Vhc29uYWxpdHk6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIFVwcGVyQm91bmRhcnk6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RpbWVFcXVhbGl0eUZpbHRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgRGVmYXVsdEZpbHRlckNvbnRyb2xDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfRGVmYXVsdEZpbHRlckNvbnRyb2xDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBGaWx0ZXJJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFBhcmFtZXRlck5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBSb2xsaW5nRGF0ZTogX2pzb24sXG4gICAgICAgIFRpbWVHcmFudWxhcml0eTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZhbHVlOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RpbWVSYW5nZURyaWxsRG93bkZpbHRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgUmFuZ2VNYXhpbXVtOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBSYW5nZU1pbmltdW06IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIFRpbWVHcmFudWxhcml0eTogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVGltZVJhbmdlRmlsdGVyID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDb2x1bW46IF9qc29uLFxuICAgICAgICBEZWZhdWx0RmlsdGVyQ29udHJvbENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9EZWZhdWx0RmlsdGVyQ29udHJvbENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIEV4Y2x1ZGVQZXJpb2RDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgRmlsdGVySWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBJbmNsdWRlTWF4aW11bTogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBJbmNsdWRlTWluaW11bTogX19leHBlY3RCb29sZWFuLFxuICAgICAgICBOdWxsT3B0aW9uOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmFuZ2VNYXhpbXVtVmFsdWU6IChfKSA9PiBkZV9UaW1lUmFuZ2VGaWx0ZXJWYWx1ZShfLCBjb250ZXh0KSxcbiAgICAgICAgUmFuZ2VNaW5pbXVtVmFsdWU6IChfKSA9PiBkZV9UaW1lUmFuZ2VGaWx0ZXJWYWx1ZShfLCBjb250ZXh0KSxcbiAgICAgICAgVGltZUdyYW51bGFyaXR5OiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UaW1lUmFuZ2VGaWx0ZXJWYWx1ZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgUGFyYW1ldGVyOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUm9sbGluZ0RhdGU6IF9qc29uLFxuICAgICAgICBTdGF0aWNWYWx1ZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Ub29sdGlwSXRlbSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sdW1uVG9vbHRpcEl0ZW06IChfKSA9PiBkZV9Db2x1bW5Ub29sdGlwSXRlbShfLCBjb250ZXh0KSxcbiAgICAgICAgRmllbGRUb29sdGlwSXRlbTogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVG9vbHRpcEl0ZW1MaXN0ID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IHJldFZhbCA9IChvdXRwdXQgfHwgW10pXG4gICAgICAgIC5maWx0ZXIoKGUpID0+IGUgIT0gbnVsbClcbiAgICAgICAgLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlX1Rvb2x0aXBJdGVtKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1Rvb2x0aXBPcHRpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGaWVsZEJhc2VkVG9vbHRpcDogKF8pID0+IGRlX0ZpZWxkQmFzZWRUb29sdGlwKF8sIGNvbnRleHQpLFxuICAgICAgICBTZWxlY3RlZFRvb2x0aXBUeXBlOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVG9vbHRpcFZpc2liaWxpdHk6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RvcEJvdHRvbUZpbHRlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWdncmVnYXRpb25Tb3J0Q29uZmlndXJhdGlvbnM6IChfKSA9PiBkZV9BZ2dyZWdhdGlvblNvcnRDb25maWd1cmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uOiBfanNvbixcbiAgICAgICAgRGVmYXVsdEZpbHRlckNvbnRyb2xDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfRGVmYXVsdEZpbHRlckNvbnRyb2xDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBGaWx0ZXJJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIExpbWl0OiBfX2V4cGVjdEludDMyLFxuICAgICAgICBQYXJhbWV0ZXJOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGltZUdyYW51bGFyaXR5OiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Ub3BCb3R0b21Nb3ZlcnNDb21wdXRhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnk6IF9qc29uLFxuICAgICAgICBDb21wdXRhdGlvbklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTW92ZXJTaXplOiBfX2V4cGVjdEludDMyLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU29ydE9yZGVyOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVGltZTogX2pzb24sXG4gICAgICAgIFR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWYWx1ZTogKF8pID0+IGRlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Ub3BCb3R0b21SYW5rZWRDb21wdXRhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ2F0ZWdvcnk6IF9qc29uLFxuICAgICAgICBDb21wdXRhdGlvbklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFJlc3VsdFNpemU6IF9fZXhwZWN0SW50MzIsXG4gICAgICAgIFR5cGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWYWx1ZTogKF8pID0+IGRlX01lYXN1cmVGaWVsZChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Ub3BpY1JlZnJlc2hTY2hlZHVsZSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQmFzZWRPblNwaWNlU2NoZWR1bGU6IF9fZXhwZWN0Qm9vbGVhbixcbiAgICAgICAgSXNFbmFibGVkOiBfX2V4cGVjdEJvb2xlYW4sXG4gICAgICAgIFJlcGVhdEF0OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhcnRpbmdBdDogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgVGltZXpvbmU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBUb3BpY1NjaGVkdWxlVHlwZTogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVG9waWNSZWZyZXNoU2NoZWR1bGVTdW1tYXJpZXMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfVG9waWNSZWZyZXNoU2NoZWR1bGVTdW1tYXJ5KGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1RvcGljUmVmcmVzaFNjaGVkdWxlU3VtbWFyeSA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRGF0YXNldEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERhdGFzZXRJZDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIERhdGFzZXROYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgUmVmcmVzaFNjaGVkdWxlOiAoXykgPT4gZGVfVG9waWNSZWZyZXNoU2NoZWR1bGUoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVG9waWNSZXZpZXdlZEFuc3dlciA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQW5zd2VySWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBEYXRhc2V0QXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgTWlyOiBfanNvbixcbiAgICAgICAgUHJpbWFyeVZpc3VhbDogKF8pID0+IGRlX1RvcGljVmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBRdWVzdGlvbjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFRlbXBsYXRlOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Ub3BpY1Jldmlld2VkQW5zd2VycyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9Ub3BpY1Jldmlld2VkQW5zd2VyKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1RvcGljVmlzdWFsID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBJcjogX2pzb24sXG4gICAgICAgIFJvbGU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTdXBwb3J0aW5nVmlzdWFsczogKF8pID0+IGRlX1RvcGljVmlzdWFscyhfLCBjb250ZXh0KSxcbiAgICAgICAgVmlzdWFsSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1RvcGljVmlzdWFscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9Ub3BpY1Zpc3VhbChlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9Ub3RhbEFnZ3JlZ2F0aW9uQ29tcHV0YXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbXB1dGF0aW9uSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmFsdWU6IChfKSA9PiBkZV9NZWFzdXJlRmllbGQoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVHJhbnNmb3JtT3BlcmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIGlmIChvdXRwdXQuQ2FzdENvbHVtblR5cGVPcGVyYXRpb24gIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgQ2FzdENvbHVtblR5cGVPcGVyYXRpb246IF9qc29uKG91dHB1dC5DYXN0Q29sdW1uVHlwZU9wZXJhdGlvbiksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChvdXRwdXQuQ3JlYXRlQ29sdW1uc09wZXJhdGlvbiAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBDcmVhdGVDb2x1bW5zT3BlcmF0aW9uOiBfanNvbihvdXRwdXQuQ3JlYXRlQ29sdW1uc09wZXJhdGlvbiksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChvdXRwdXQuRmlsdGVyT3BlcmF0aW9uICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEZpbHRlck9wZXJhdGlvbjogX2pzb24ob3V0cHV0LkZpbHRlck9wZXJhdGlvbiksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChvdXRwdXQuT3ZlcnJpZGVEYXRhc2V0UGFyYW1ldGVyT3BlcmF0aW9uICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIE92ZXJyaWRlRGF0YXNldFBhcmFtZXRlck9wZXJhdGlvbjogZGVfT3ZlcnJpZGVEYXRhc2V0UGFyYW1ldGVyT3BlcmF0aW9uKG91dHB1dC5PdmVycmlkZURhdGFzZXRQYXJhbWV0ZXJPcGVyYXRpb24sIGNvbnRleHQpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAob3V0cHV0LlByb2plY3RPcGVyYXRpb24gIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgUHJvamVjdE9wZXJhdGlvbjogX2pzb24ob3V0cHV0LlByb2plY3RPcGVyYXRpb24pLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAob3V0cHV0LlJlbmFtZUNvbHVtbk9wZXJhdGlvbiAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBSZW5hbWVDb2x1bW5PcGVyYXRpb246IF9qc29uKG91dHB1dC5SZW5hbWVDb2x1bW5PcGVyYXRpb24pLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAob3V0cHV0LlRhZ0NvbHVtbk9wZXJhdGlvbiAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBUYWdDb2x1bW5PcGVyYXRpb246IF9qc29uKG91dHB1dC5UYWdDb2x1bW5PcGVyYXRpb24pLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAob3V0cHV0LlVudGFnQ29sdW1uT3BlcmF0aW9uICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFVudGFnQ29sdW1uT3BlcmF0aW9uOiBfanNvbihvdXRwdXQuVW50YWdDb2x1bW5PcGVyYXRpb24pLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4geyAkdW5rbm93bjogT2JqZWN0LmVudHJpZXMob3V0cHV0KVswXSB9O1xufTtcbmNvbnN0IGRlX1RyYW5zZm9ybU9wZXJhdGlvbkxpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfVHJhbnNmb3JtT3BlcmF0aW9uKF9fZXhwZWN0VW5pb24oZW50cnkpLCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1RyZWVNYXBBZ2dyZWdhdGVkRmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQ29sb3JzOiAoXykgPT4gZGVfVHJlZU1hcE1lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgICAgIEdyb3VwczogX2pzb24sXG4gICAgICAgIFNpemVzOiAoXykgPT4gZGVfVHJlZU1hcE1lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVHJlZU1hcENvbmZpZ3VyYXRpb24gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIENvbG9yTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgQ29sb3JTY2FsZTogKF8pID0+IGRlX0NvbG9yU2NhbGUoXywgY29udGV4dCksXG4gICAgICAgIERhdGFMYWJlbHM6IF9qc29uLFxuICAgICAgICBGaWVsZFdlbGxzOiAoXykgPT4gZGVfVHJlZU1hcEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEdyb3VwTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgSW50ZXJhY3Rpb25zOiBfanNvbixcbiAgICAgICAgTGVnZW5kOiBfanNvbixcbiAgICAgICAgU2l6ZUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIFNvcnRDb25maWd1cmF0aW9uOiAoXykgPT4gZGVfVHJlZU1hcFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBUb29sdGlwOiAoXykgPT4gZGVfVG9vbHRpcE9wdGlvbnMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVHJlZU1hcEZpZWxkV2VsbHMgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIFRyZWVNYXBBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IGRlX1RyZWVNYXBBZ2dyZWdhdGVkRmllbGRXZWxscyhfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9UcmVlTWFwTWVhc3VyZUZpZWxkTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9NZWFzdXJlRmllbGQoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfVHJlZU1hcFNvcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBUcmVlTWFwR3JvdXBJdGVtc0xpbWl0Q29uZmlndXJhdGlvbjogX2pzb24sXG4gICAgICAgIFRyZWVNYXBTb3J0OiAoXykgPT4gZGVfRmllbGRTb3J0T3B0aW9uc0xpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVHJlZU1hcFZpc3VhbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1RyZWVNYXBDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBDb2x1bW5IaWVyYXJjaGllczogKF8pID0+IGRlX0NvbHVtbkhpZXJhcmNoeUxpc3QoXywgY29udGV4dCksXG4gICAgICAgIFN1YnRpdGxlOiBfanNvbixcbiAgICAgICAgVGl0bGU6IF9qc29uLFxuICAgICAgICBWaXN1YWxDb250ZW50QWx0VGV4dDogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFZpc3VhbElkOiBfX2V4cGVjdFN0cmluZyxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9WaXNpYmxlUmFuZ2VPcHRpb25zID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBQZXJjZW50UmFuZ2U6IChfKSA9PiBkZV9QZXJjZW50VmlzaWJsZVJhbmdlKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1Zpc3VhbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQmFyQ2hhcnRWaXN1YWw6IChfKSA9PiBkZV9CYXJDaGFydFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgQm94UGxvdFZpc3VhbDogKF8pID0+IGRlX0JveFBsb3RWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIENvbWJvQ2hhcnRWaXN1YWw6IChfKSA9PiBkZV9Db21ib0NoYXJ0VmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBDdXN0b21Db250ZW50VmlzdWFsOiAoXykgPT4gZGVfQ3VzdG9tQ29udGVudFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgRW1wdHlWaXN1YWw6IChfKSA9PiBkZV9FbXB0eVZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgRmlsbGVkTWFwVmlzdWFsOiAoXykgPT4gZGVfRmlsbGVkTWFwVmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBGdW5uZWxDaGFydFZpc3VhbDogKF8pID0+IGRlX0Z1bm5lbENoYXJ0VmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBHYXVnZUNoYXJ0VmlzdWFsOiAoXykgPT4gZGVfR2F1Z2VDaGFydFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgR2Vvc3BhdGlhbE1hcFZpc3VhbDogKF8pID0+IGRlX0dlb3NwYXRpYWxNYXBWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIEhlYXRNYXBWaXN1YWw6IChfKSA9PiBkZV9IZWF0TWFwVmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBIaXN0b2dyYW1WaXN1YWw6IChfKSA9PiBkZV9IaXN0b2dyYW1WaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIEluc2lnaHRWaXN1YWw6IChfKSA9PiBkZV9JbnNpZ2h0VmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBLUElWaXN1YWw6IChfKSA9PiBkZV9LUElWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIExheWVyTWFwVmlzdWFsOiAoXykgPT4gZGVfTGF5ZXJNYXBWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIExpbmVDaGFydFZpc3VhbDogKF8pID0+IGRlX0xpbmVDaGFydFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgUGllQ2hhcnRWaXN1YWw6IChfKSA9PiBkZV9QaWVDaGFydFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgUGl2b3RUYWJsZVZpc3VhbDogKF8pID0+IGRlX1Bpdm90VGFibGVWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIFBsdWdpblZpc3VhbDogKF8pID0+IGRlX1BsdWdpblZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgUmFkYXJDaGFydFZpc3VhbDogKF8pID0+IGRlX1JhZGFyQ2hhcnRWaXN1YWwoXywgY29udGV4dCksXG4gICAgICAgIFNhbmtleURpYWdyYW1WaXN1YWw6IChfKSA9PiBkZV9TYW5rZXlEaWFncmFtVmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBTY2F0dGVyUGxvdFZpc3VhbDogKF8pID0+IGRlX1NjYXR0ZXJQbG90VmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBUYWJsZVZpc3VhbDogKF8pID0+IGRlX1RhYmxlVmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBUcmVlTWFwVmlzdWFsOiAoXykgPT4gZGVfVHJlZU1hcFZpc3VhbChfLCBjb250ZXh0KSxcbiAgICAgICAgV2F0ZXJmYWxsVmlzdWFsOiAoXykgPT4gZGVfV2F0ZXJmYWxsVmlzdWFsKF8sIGNvbnRleHQpLFxuICAgICAgICBXb3JkQ2xvdWRWaXN1YWw6IChfKSA9PiBkZV9Xb3JkQ2xvdWRWaXN1YWwoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVmlzdWFsQ3VzdG9tQWN0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBBY3Rpb25PcGVyYXRpb25zOiAoXykgPT4gZGVfVmlzdWFsQ3VzdG9tQWN0aW9uT3BlcmF0aW9uTGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgQ3VzdG9tQWN0aW9uSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOYW1lOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVHJpZ2dlcjogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVmlzdWFsQ3VzdG9tQWN0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9WaXN1YWxDdXN0b21BY3Rpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfVmlzdWFsQ3VzdG9tQWN0aW9uT3BlcmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBGaWx0ZXJPcGVyYXRpb246IF9qc29uLFxuICAgICAgICBOYXZpZ2F0aW9uT3BlcmF0aW9uOiBfanNvbixcbiAgICAgICAgU2V0UGFyYW1ldGVyc09wZXJhdGlvbjogKF8pID0+IGRlX0N1c3RvbUFjdGlvblNldFBhcmFtZXRlcnNPcGVyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFVSTE9wZXJhdGlvbjogX2pzb24sXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVmlzdWFsQ3VzdG9tQWN0aW9uT3BlcmF0aW9uTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9WaXN1YWxDdXN0b21BY3Rpb25PcGVyYXRpb24oZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfVmlzdWFsTGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9WaXN1YWwoZW50cnksIGNvbnRleHQpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXRWYWw7XG59O1xuY29uc3QgZGVfVlBDQ29ubmVjdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQXJuOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQXZhaWxhYmlsaXR5U3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgQ3JlYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIERuc1Jlc29sdmVyczogX2pzb24sXG4gICAgICAgIExhc3RVcGRhdGVkVGltZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgTmFtZTogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIE5ldHdvcmtJbnRlcmZhY2VzOiBfanNvbixcbiAgICAgICAgUm9sZUFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIFNlY3VyaXR5R3JvdXBJZHM6IF9qc29uLFxuICAgICAgICBTdGF0dXM6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWUENDb25uZWN0aW9uSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWUENJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfVlBDQ29ubmVjdGlvblN1bW1hcnkgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFybjogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIEF2YWlsYWJpbGl0eVN0YXR1czogX19leHBlY3RTdHJpbmcsXG4gICAgICAgIENyZWF0ZWRUaW1lOiAoXykgPT4gX19leHBlY3ROb25OdWxsKF9fcGFyc2VFcG9jaFRpbWVzdGFtcChfX2V4cGVjdE51bWJlcihfKSkpLFxuICAgICAgICBEbnNSZXNvbHZlcnM6IF9qc29uLFxuICAgICAgICBMYXN0VXBkYXRlZFRpbWU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIE5hbWU6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBOZXR3b3JrSW50ZXJmYWNlczogX2pzb24sXG4gICAgICAgIFJvbGVBcm46IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBTZWN1cml0eUdyb3VwSWRzOiBfanNvbixcbiAgICAgICAgU3RhdHVzOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVlBDQ29ubmVjdGlvbklkOiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVlBDSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1ZQQ0Nvbm5lY3Rpb25TdW1tYXJ5TGlzdCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCByZXRWYWwgPSAob3V0cHV0IHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlICE9IG51bGwpXG4gICAgICAgIC5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIHJldHVybiBkZV9WUENDb25uZWN0aW9uU3VtbWFyeShlbnRyeSwgY29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbn07XG5jb25zdCBkZV9XYXRlcmZhbGxDaGFydEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBCcmVha2Rvd25zOiBfanNvbixcbiAgICAgICAgQ2F0ZWdvcmllczogX2pzb24sXG4gICAgICAgIFZhbHVlczogKF8pID0+IGRlX01lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfV2F0ZXJmYWxsQ2hhcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeUF4aXNEaXNwbGF5T3B0aW9uczogKF8pID0+IGRlX0F4aXNEaXNwbGF5T3B0aW9ucyhfLCBjb250ZXh0KSxcbiAgICAgICAgQ2F0ZWdvcnlBeGlzTGFiZWxPcHRpb25zOiBfanNvbixcbiAgICAgICAgQ29sb3JDb25maWd1cmF0aW9uOiBfanNvbixcbiAgICAgICAgRGF0YUxhYmVsczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBkZV9XYXRlcmZhbGxDaGFydEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgICAgIEludGVyYWN0aW9uczogX2pzb24sXG4gICAgICAgIExlZ2VuZDogX2pzb24sXG4gICAgICAgIFByaW1hcnlZQXhpc0Rpc3BsYXlPcHRpb25zOiAoXykgPT4gZGVfQXhpc0Rpc3BsYXlPcHRpb25zKF8sIGNvbnRleHQpLFxuICAgICAgICBQcmltYXJ5WUF4aXNMYWJlbE9wdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1dhdGVyZmFsbENoYXJ0U29ydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIFZpc3VhbFBhbGV0dGU6IF9qc29uLFxuICAgICAgICBXYXRlcmZhbGxDaGFydE9wdGlvbnM6IF9qc29uLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1dhdGVyZmFsbENoYXJ0RmllbGRXZWxscyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgV2F0ZXJmYWxsQ2hhcnRBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IGRlX1dhdGVyZmFsbENoYXJ0QWdncmVnYXRlZEZpZWxkV2VsbHMoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfV2F0ZXJmYWxsQ2hhcnRTb3J0Q29uZmlndXJhdGlvbiA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQnJlYWtkb3duSXRlbXNMaW1pdDogX2pzb24sXG4gICAgICAgIENhdGVnb3J5U29ydDogKF8pID0+IGRlX0ZpZWxkU29ydE9wdGlvbnNMaXN0KF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1dhdGVyZmFsbFZpc3VhbCA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgQWN0aW9uczogKF8pID0+IGRlX1Zpc3VhbEN1c3RvbUFjdGlvbkxpc3QoXywgY29udGV4dCksXG4gICAgICAgIENoYXJ0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1dhdGVyZmFsbENoYXJ0Q29uZmlndXJhdGlvbihfLCBjb250ZXh0KSxcbiAgICAgICAgQ29sdW1uSGllcmFyY2hpZXM6IChfKSA9PiBkZV9Db2x1bW5IaWVyYXJjaHlMaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBTdWJ0aXRsZTogX2pzb24sXG4gICAgICAgIFRpdGxlOiBfanNvbixcbiAgICAgICAgVmlzdWFsQ29udGVudEFsdFRleHQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgICAgICBWaXN1YWxJZDogX19leHBlY3RTdHJpbmcsXG4gICAgfSk7XG59O1xuY29uc3QgZGVfV2hhdElmUG9pbnRTY2VuYXJpbyA9IChvdXRwdXQsIGNvbnRleHQpID0+IHtcbiAgICByZXR1cm4gdGFrZShvdXRwdXQsIHtcbiAgICAgICAgRGF0ZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1doYXRJZlJhbmdlU2NlbmFyaW8gPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEVuZERhdGU6IChfKSA9PiBfX2V4cGVjdE5vbk51bGwoX19wYXJzZUVwb2NoVGltZXN0YW1wKF9fZXhwZWN0TnVtYmVyKF8pKSksXG4gICAgICAgIFN0YXJ0RGF0ZTogKF8pID0+IF9fZXhwZWN0Tm9uTnVsbChfX3BhcnNlRXBvY2hUaW1lc3RhbXAoX19leHBlY3ROdW1iZXIoXykpKSxcbiAgICAgICAgVmFsdWU6IF9fbGltaXRlZFBhcnNlRG91YmxlLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1dvcmRDbG91ZEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBHcm91cEJ5OiBfanNvbixcbiAgICAgICAgU2l6ZTogKF8pID0+IGRlX1dvcmRDbG91ZE1lYXN1cmVGaWVsZExpc3QoXywgY29udGV4dCksXG4gICAgfSk7XG59O1xuY29uc3QgZGVfV29yZENsb3VkQ2hhcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeUxhYmVsT3B0aW9uczogX2pzb24sXG4gICAgICAgIEZpZWxkV2VsbHM6IChfKSA9PiBkZV9Xb3JkQ2xvdWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgICAgICBJbnRlcmFjdGlvbnM6IF9qc29uLFxuICAgICAgICBTb3J0Q29uZmlndXJhdGlvbjogKF8pID0+IGRlX1dvcmRDbG91ZFNvcnRDb25maWd1cmF0aW9uKF8sIGNvbnRleHQpLFxuICAgICAgICBXb3JkQ2xvdWRPcHRpb25zOiBfanNvbixcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Xb3JkQ2xvdWRGaWVsZFdlbGxzID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBXb3JkQ2xvdWRBZ2dyZWdhdGVkRmllbGRXZWxsczogKF8pID0+IGRlX1dvcmRDbG91ZEFnZ3JlZ2F0ZWRGaWVsZFdlbGxzKF8sIGNvbnRleHQpLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlX1dvcmRDbG91ZE1lYXN1cmVGaWVsZExpc3QgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgcmV0VmFsID0gKG91dHB1dCB8fCBbXSlcbiAgICAgICAgLmZpbHRlcigoZSkgPT4gZSAhPSBudWxsKVxuICAgICAgICAubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVfTWVhc3VyZUZpZWxkKGVudHJ5LCBjb250ZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmV0VmFsO1xufTtcbmNvbnN0IGRlX1dvcmRDbG91ZFNvcnRDb25maWd1cmF0aW9uID0gKG91dHB1dCwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB0YWtlKG91dHB1dCwge1xuICAgICAgICBDYXRlZ29yeUl0ZW1zTGltaXQ6IF9qc29uLFxuICAgICAgICBDYXRlZ29yeVNvcnQ6IChfKSA9PiBkZV9GaWVsZFNvcnRPcHRpb25zTGlzdChfLCBjb250ZXh0KSxcbiAgICB9KTtcbn07XG5jb25zdCBkZV9Xb3JkQ2xvdWRWaXN1YWwgPSAob3V0cHV0LCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHRha2Uob3V0cHV0LCB7XG4gICAgICAgIEFjdGlvbnM6IChfKSA9PiBkZV9WaXN1YWxDdXN0b21BY3Rpb25MaXN0KF8sIGNvbnRleHQpLFxuICAgICAgICBDaGFydENvbmZpZ3VyYXRpb246IChfKSA9PiBkZV9Xb3JkQ2xvdWRDaGFydENvbmZpZ3VyYXRpb24oXywgY29udGV4dCksXG4gICAgICAgIENvbHVtbkhpZXJhcmNoaWVzOiAoXykgPT4gZGVfQ29sdW1uSGllcmFyY2h5TGlzdChfLCBjb250ZXh0KSxcbiAgICAgICAgU3VidGl0bGU6IF9qc29uLFxuICAgICAgICBUaXRsZTogX2pzb24sXG4gICAgICAgIFZpc3VhbENvbnRlbnRBbHRUZXh0OiBfX2V4cGVjdFN0cmluZyxcbiAgICAgICAgVmlzdWFsSWQ6IF9fZXhwZWN0U3RyaW5nLFxuICAgIH0pO1xufTtcbmNvbnN0IGRlc2VyaWFsaXplTWV0YWRhdGEgPSAob3V0cHV0KSA9PiAoe1xuICAgIGh0dHBTdGF0dXNDb2RlOiBvdXRwdXQuc3RhdHVzQ29kZSxcbiAgICByZXF1ZXN0SWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXpuLXJlcXVlc3RpZFwiXSA/PyBvdXRwdXQuaGVhZGVyc1tcIngtYW16bi1yZXF1ZXN0LWlkXCJdID8/IG91dHB1dC5oZWFkZXJzW1wieC1hbXotcmVxdWVzdC1pZFwiXSxcbiAgICBleHRlbmRlZFJlcXVlc3RJZDogb3V0cHV0LmhlYWRlcnNbXCJ4LWFtei1pZC0yXCJdLFxuICAgIGNmSWQ6IG91dHB1dC5oZWFkZXJzW1wieC1hbXotY2YtaWRcIl0sXG59KTtcbmNvbnN0IGNvbGxlY3RCb2R5U3RyaW5nID0gKHN0cmVhbUJvZHksIGNvbnRleHQpID0+IGNvbGxlY3RCb2R5KHN0cmVhbUJvZHksIGNvbnRleHQpLnRoZW4oKGJvZHkpID0+IGNvbnRleHQudXRmOEVuY29kZXIoYm9keSkpO1xuY29uc3QgX0FESSA9IFwiQWRkaXRpb25hbERhc2hib2FyZElkc1wiO1xuY29uc3QgX0FOID0gXCJBbGlhc05hbWVcIjtcbmNvbnN0IF9BUyA9IFwiQXNzaWdubWVudFN0YXR1c1wiO1xuY29uc3QgX0RLTyA9IFwiRGVmYXVsdEtleU9ubHlcIjtcbmNvbnN0IF9FUCA9IFwiRW50cnlQb2ludFwiO1xuY29uc3QgX0ZEV1IgPSBcIkZvcmNlRGVsZXRlV2l0aG91dFJlY292ZXJ5XCI7XG5jb25zdCBfSVQgPSBcIklkZW50aXR5VHlwZVwiO1xuY29uc3QgX01SID0gXCJNYXhSZXN1bHRzXCI7XG5jb25zdCBfTiA9IFwiTmFtZXNwYWNlXCI7XG5jb25zdCBfTlQgPSBcIk5leHRUb2tlblwiO1xuY29uc3QgX1IgPSBcIlJlc29sdmVkXCI7XG5jb25zdCBfUkQgPSBcIlJlc2V0RGlzYWJsZWRcIjtcbmNvbnN0IF9SVEYgPSBcIlJlc3RvcmVUb0ZvbGRlcnNcIjtcbmNvbnN0IF9SV0lEID0gXCJSZWNvdmVyeVdpbmRvd0luRGF5c1wiO1xuY29uc3QgX1NMSU0gPSBcIlNlc3Npb25MaWZldGltZUluTWludXRlc1wiO1xuY29uc3QgX1NQRSA9IFwiU3RhdGVQZXJzaXN0ZW5jZUVuYWJsZWRcIjtcbmNvbnN0IF9UID0gXCJUeXBlXCI7XG5jb25zdCBfVEsgPSBcIlRhZ0tleXNcIjtcbmNvbnN0IF9VQSA9IFwiVXNlckFyblwiO1xuY29uc3QgX1VSRCA9IFwiVW5kb1JlZG9EaXNhYmxlZFwiO1xuY29uc3QgX1ZJID0gXCJWZXJzaW9uSWRcIjtcbmNvbnN0IF9WTiA9IFwiVmVyc2lvbk51bWJlclwiO1xuY29uc3QgX2FkaSA9IFwiYWRkaXRpb25hbC1kYXNoYm9hcmQtaWRzXCI7XG5jb25zdCBfYW4gPSBcImFsaWFzLW5hbWVcIjtcbmNvbnN0IF9hcyA9IFwiYXNzaWdubWVudC1zdGF0dXNcIjtcbmNvbnN0IF9jdCA9IFwiY3JlZHMtdHlwZVwiO1xuY29uc3QgX2RrbyA9IFwiZGVmYXVsdC1rZXktb25seVwiO1xuY29uc3QgX2VwID0gXCJlbnRyeS1wb2ludFwiO1xuY29uc3QgX2Zkd3IgPSBcImZvcmNlLWRlbGV0ZS13aXRob3V0LXJlY292ZXJ5XCI7XG5jb25zdCBfayA9IFwia2V5c1wiO1xuY29uc3QgX21yID0gXCJtYXgtcmVzdWx0c1wiO1xuY29uc3QgX21yXyA9IFwibWF4LXJlc3VsdFwiO1xuY29uc3QgX24gPSBcIm5hbWVzcGFjZVwiO1xuY29uc3QgX250ID0gXCJuZXh0LXRva2VuXCI7XG5jb25zdCBfciA9IFwicmVzb2x2ZWRcIjtcbmNvbnN0IF9yZCA9IFwicmVzZXQtZGlzYWJsZWRcIjtcbmNvbnN0IF9ydGYgPSBcInJlc3RvcmUtdG8tZm9sZGVyc1wiO1xuY29uc3QgX3J3aWQgPSBcInJlY292ZXJ5LXdpbmRvdy1pbi1kYXlzXCI7XG5jb25zdCBfc2wgPSBcInNlc3Npb24tbGlmZXRpbWVcIjtcbmNvbnN0IF9zcGUgPSBcInN0YXRlLXBlcnNpc3RlbmNlLWVuYWJsZWRcIjtcbmNvbnN0IF90ID0gXCJ0eXBlXCI7XG5jb25zdCBfdWEgPSBcInVzZXItYXJuXCI7XG5jb25zdCBfdXJkID0gXCJ1bmRvLXJlZG8tZGlzYWJsZWRcIjtcbmNvbnN0IF92SSA9IFwidmVyc2lvbklkXCI7XG5jb25zdCBfdm4gPSBcInZlcnNpb24tbnVtYmVyXCI7XG4iLCJpbXBvcnQgeyBnZXRFbmRwb2ludFBsdWdpbiB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtZW5kcG9pbnRcIjtcbmltcG9ydCB7IGdldFNlcmRlUGx1Z2luIH0gZnJvbSBcIkBzbWl0aHkvbWlkZGxld2FyZS1zZXJkZVwiO1xuaW1wb3J0IHsgQ29tbWFuZCBhcyAkQ29tbWFuZCB9IGZyb20gXCJAc21pdGh5L3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IGNvbW1vblBhcmFtcyB9IGZyb20gXCIuLi9lbmRwb2ludC9FbmRwb2ludFBhcmFtZXRlcnNcIjtcbmltcG9ydCB7IGRlX0xpc3RVc2Vyc0NvbW1hbmQsIHNlX0xpc3RVc2Vyc0NvbW1hbmQgfSBmcm9tIFwiLi4vcHJvdG9jb2xzL0F3c19yZXN0SnNvbjFcIjtcbmV4cG9ydCB7ICRDb21tYW5kIH07XG5leHBvcnQgY2xhc3MgTGlzdFVzZXJzQ29tbWFuZCBleHRlbmRzICRDb21tYW5kXG4gICAgLmNsYXNzQnVpbGRlcigpXG4gICAgLmVwKGNvbW1vblBhcmFtcylcbiAgICAubShmdW5jdGlvbiAoQ29tbWFuZCwgY3MsIGNvbmZpZywgbykge1xuICAgIHJldHVybiBbXG4gICAgICAgIGdldFNlcmRlUGx1Z2luKGNvbmZpZywgdGhpcy5zZXJpYWxpemUsIHRoaXMuZGVzZXJpYWxpemUpLFxuICAgICAgICBnZXRFbmRwb2ludFBsdWdpbihjb25maWcsIENvbW1hbmQuZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMoKSksXG4gICAgXTtcbn0pXG4gICAgLnMoXCJRdWlja1NpZ2h0XzIwMTgwNDAxXCIsIFwiTGlzdFVzZXJzXCIsIHt9KVxuICAgIC5uKFwiUXVpY2tTaWdodENsaWVudFwiLCBcIkxpc3RVc2Vyc0NvbW1hbmRcIilcbiAgICAuZih2b2lkIDAsIHZvaWQgMClcbiAgICAuc2VyKHNlX0xpc3RVc2Vyc0NvbW1hbmQpXG4gICAgLmRlKGRlX0xpc3RVc2Vyc0NvbW1hbmQpXG4gICAgLmJ1aWxkKCkge1xufVxuIiwiaW1wb3J0IHsgZ2V0RW5kcG9pbnRQbHVnaW4gfSBmcm9tIFwiQHNtaXRoeS9taWRkbGV3YXJlLWVuZHBvaW50XCI7XG5pbXBvcnQgeyBnZXRTZXJkZVBsdWdpbiB9IGZyb20gXCJAc21pdGh5L21pZGRsZXdhcmUtc2VyZGVcIjtcbmltcG9ydCB7IENvbW1hbmQgYXMgJENvbW1hbmQgfSBmcm9tIFwiQHNtaXRoeS9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBjb21tb25QYXJhbXMgfSBmcm9tIFwiLi4vZW5kcG9pbnQvRW5kcG9pbnRQYXJhbWV0ZXJzXCI7XG5pbXBvcnQgeyBkZV9EZWxldGVVc2VyQ29tbWFuZCwgc2VfRGVsZXRlVXNlckNvbW1hbmQgfSBmcm9tIFwiLi4vcHJvdG9jb2xzL0F3c19yZXN0SnNvbjFcIjtcbmV4cG9ydCB7ICRDb21tYW5kIH07XG5leHBvcnQgY2xhc3MgRGVsZXRlVXNlckNvbW1hbmQgZXh0ZW5kcyAkQ29tbWFuZFxuICAgIC5jbGFzc0J1aWxkZXIoKVxuICAgIC5lcChjb21tb25QYXJhbXMpXG4gICAgLm0oZnVuY3Rpb24gKENvbW1hbmQsIGNzLCBjb25maWcsIG8pIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBnZXRTZXJkZVBsdWdpbihjb25maWcsIHRoaXMuc2VyaWFsaXplLCB0aGlzLmRlc2VyaWFsaXplKSxcbiAgICAgICAgZ2V0RW5kcG9pbnRQbHVnaW4oY29uZmlnLCBDb21tYW5kLmdldEVuZHBvaW50UGFyYW1ldGVySW5zdHJ1Y3Rpb25zKCkpLFxuICAgIF07XG59KVxuICAgIC5zKFwiUXVpY2tTaWdodF8yMDE4MDQwMVwiLCBcIkRlbGV0ZVVzZXJcIiwge30pXG4gICAgLm4oXCJRdWlja1NpZ2h0Q2xpZW50XCIsIFwiRGVsZXRlVXNlckNvbW1hbmRcIilcbiAgICAuZih2b2lkIDAsIHZvaWQgMClcbiAgICAuc2VyKHNlX0RlbGV0ZVVzZXJDb21tYW5kKVxuICAgIC5kZShkZV9EZWxldGVVc2VyQ29tbWFuZClcbiAgICAuYnVpbGQoKSB7XG59XG4iLCJpbXBvcnQgeyBEZWxldGVVc2VyQ29tbWFuZCwgTGlzdFVzZXJzQ29tbWFuZCwgUXVpY2tTaWdodENsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1xdWlja3NpZ2h0J1xuaW1wb3J0IHsgUXVpY2tTaWdodFVzZXIgfSBmcm9tICcuL1F1aWNrU2lnaHRVc2VyJ1xuXG5leHBvcnQgY2xhc3MgUXVpY2tTaWdodFVzZXJNYW5hZ2VyIHtcblx0cHJpdmF0ZSBhd3NBY2NvdW50SWQgPSBwcm9jZXNzLmVudi5hd3NBY2NvdW50SWRcblx0cHJpdmF0ZSBzdGF0aWMgbmFtZXNwYWNlID0gJ2RlZmF1bHQnXG5cdHByaXZhdGUgcXVpY2tTaWdodENsaWVudCA9IG5ldyBRdWlja1NpZ2h0Q2xpZW50KHt9KVxuICBcblx0cHVibGljIGFzeW5jIHJldHJpZXZlVXNlcnMoKTogUHJvbWlzZTxRdWlja1NpZ2h0VXNlcltdPiB7XG5cdFx0Y29uc3QgcXVpY2tTaWdodFVzZXJzOiBRdWlja1NpZ2h0VXNlcltdID0gW11cblxuXHRcdGxldCBuZXh0VG9rZW4gPSAnJyAvLyBvcmlnaW5hbGx5IEkgdHJpZWQgbnVsbCwgYnV0IGl0IGNhdXNlcyBBUEkgc2lnbmF0dXJlIGlzc3Vlcy5cblx0XHRkbyB7XG5cdFx0XHRjb25zdCBsaXN0VXNlcnNDb21tYW5kID0gbmV3IExpc3RVc2Vyc0NvbW1hbmQoeyBBd3NBY2NvdW50SWQ6IHRoaXMuYXdzQWNjb3VudElkLCBOYW1lc3BhY2U6IFF1aWNrU2lnaHRVc2VyTWFuYWdlci5uYW1lc3BhY2UsIE5leHRUb2tlbjogbmV4dFRva2VuIH0pXG5cdFx0XHRjb25zdCBxdWlja1NpZ2h0VXNlckxpc3RSZXNwb25zZSA9IGF3YWl0IHRoaXMucXVpY2tTaWdodENsaWVudC5zZW5kKGxpc3RVc2Vyc0NvbW1hbmQpXG5cblx0XHRcdG5leHRUb2tlbiA9IHF1aWNrU2lnaHRVc2VyTGlzdFJlc3BvbnNlLk5leHRUb2tlblxuXG5cdFx0XHRxdWlja1NpZ2h0VXNlckxpc3RSZXNwb25zZS5Vc2VyTGlzdC5mb3JFYWNoKCh1c2VyKSA9PiBxdWlja1NpZ2h0VXNlcnMucHVzaChuZXcgUXVpY2tTaWdodFVzZXIodXNlcikpKVxuXHRcdH0gd2hpbGUgKG5leHRUb2tlbilcblxuXHRcdHJldHVybiBxdWlja1NpZ2h0VXNlcnNcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBkZWxldGVVc2VyKHVzZXI6IFF1aWNrU2lnaHRVc2VyKSB7XG5cdFx0Ly8gU3RyeWtlciBkaXNhYmxlIG5leHQtbGluZSBhbGwgXCJJIGRvIG5vdCBjYXJlIGFib3V0IG11dGF0aW5nIGNvbnNvbGUgc3RhdGVtZW50c1wiXG5cdFx0Y29uc29sZS5kZWJ1ZyhgRGVsZXRpbmcgJHtKU09OLnN0cmluZ2lmeSh1c2VyLCBudWxsLCAxKX1gKVxuXHRcdFxuXHRcdGNvbnN0IGRlbGV0ZVVzZXJDb21tYW5kID0gbmV3IERlbGV0ZVVzZXJDb21tYW5kKHtcblx0XHRcdEF3c0FjY291bnRJZDogdGhpcy5hd3NBY2NvdW50SWQsXG5cdFx0XHROYW1lc3BhY2U6IFF1aWNrU2lnaHRVc2VyTWFuYWdlci5uYW1lc3BhY2UsXG5cdFx0XHRVc2VyTmFtZTogdXNlci51c2VybmFtZSxcblx0XHR9KVxuXG5cdFx0YXdhaXQgdGhpcy5xdWlja1NpZ2h0Q2xpZW50LnNlbmQoZGVsZXRlVXNlckNvbW1hbmQpXG5cdH1cbn0iLCJpbXBvcnQgeyBDbG91ZFRyYWlsVXNlckV2ZW50TWFuYWdlciB9IGZyb20gJy4vQ2xvdWRUcmFpbFVzZXJFdmVudE1hbmFnZXInXG5pbXBvcnQgeyBDbG91ZFdhdGNoTWV0cmljQ2xpZW50IH0gZnJvbSAnLi9DbG91ZFdhdGNoTWV0cmljQ2xpZW50J1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uTWFuYWdlciB9IGZyb20gJy4vTm90aWZpY2F0aW9uTWFuYWdlcidcbmltcG9ydCB7IFF1aWNrU2lnaHRSb2xlIH0gZnJvbSAnLi9RdWlja1NpZ2h0VXNlcidcbmltcG9ydCB7IFF1aWNrU2lnaHRVc2VyTWFuYWdlciB9IGZyb20gJy4vUXVpY2tTaWdodFVzZXJNYW5hZ2VyJ1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoKSA9PiB7XG5cdGNvbnN0IHsgZGVsZXRlRGF5cywgbm90aWZ5RGF5cyB9ID0gcHJvY2Vzcy5lbnZcblx0Y29uc3QgZW5hYmxlTm90aWZpY2F0aW9uID0gcHJvY2Vzcy5lbnYuZW5hYmxlTm90aWZpY2F0aW9uID09PSAndHJ1ZSdcblx0Y29uc3QgZGVsZXRlRGF0ZSA9IG5ldyBEYXRlKClcblx0Y29uc3Qgbm90aWZ5RGF0ZSA9IG5ldyBEYXRlKClcblx0ZGVsZXRlRGF0ZS5zZXREYXRlKGRlbGV0ZURhdGUuZ2V0RGF0ZSgpIC0gcGFyc2VJbnQoZGVsZXRlRGF5cykpXG5cdG5vdGlmeURhdGUuc2V0RGF0ZShub3RpZnlEYXRlLmdldERhdGUoKSAtIHBhcnNlSW50KG5vdGlmeURheXMpKVxuXG5cdC8vIFN0cnlrZXIgZGlzYWJsZSBuZXh0LWxpbmUgYWxsIFwiSSBkbyBub3QgY2FyZSBhYm91dCBtdXRhdGluZyBjb25zb2xlIHN0YXRlbWVudHNcIlxuXHRjb25zb2xlLmluZm8oYE5vdGlmeWluZyB1c2VycyB3aXRoIGxhc3QgYWNjZXNzIGRhdGUgb246ICR7bm90aWZ5RGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKX0gKCR7bm90aWZ5RGF5c30gZGF5cyBhZ28pLmApXG5cdC8vIFN0cnlrZXIgZGlzYWJsZSBuZXh0LWxpbmUgYWxsIFwiSSBkbyBub3QgY2FyZSBhYm91dCBtdXRhdGluZyBjb25zb2xlIHN0YXRlbWVudHNcIlxuXHRjb25zb2xlLmluZm8oYERlbGV0aW5nIHVzZXJzIHdpdGggbGFzdCBhY2Nlc3MgZGF0ZSBvbiBvciBiZWZvcmU6ICR7ZGVsZXRlRGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKX0gKCR7ZGVsZXRlRGF5c30gZGF5cyBhZ28pLmApXG5cdC8vIFN0cnlrZXIgZGlzYWJsZSBuZXh0LWxpbmUgYWxsIFwiSSBkbyBub3QgY2FyZSBhYm91dCBtdXRhdGluZyBjb25zb2xlIHN0YXRlbWVudHNcIlxuXHRjb25zb2xlLmluZm8oYE5vdGlmaWNhdGlvbiBlbmFibGVkPyAke2VuYWJsZU5vdGlmaWNhdGlvbn0uYClcblxuXHRjb25zdCBxdWlja1NpZ2h0VXNlck1hbmFnZXIgPSBuZXcgUXVpY2tTaWdodFVzZXJNYW5hZ2VyKClcblx0Y29uc3QgY2xvdWRUcmFpbFVzZXJFdmVudE1hbmFnZXIgPSBuZXcgQ2xvdWRUcmFpbFVzZXJFdmVudE1hbmFnZXIoKVxuXHRjb25zdCBub3RpZmljYXRpb25NYW5hZ2VyID0gbmV3IE5vdGlmaWNhdGlvbk1hbmFnZXIoKVxuXHRjb25zdCBjbG91ZFdhdGNoTWV0cmljQ2xpZW50ID0gbmV3IENsb3VkV2F0Y2hNZXRyaWNDbGllbnQoKVxuXG5cdGNvbnN0IHF1aWNrU2lnaHRVc2VycyA9IGF3YWl0IHF1aWNrU2lnaHRVc2VyTWFuYWdlci5yZXRyaWV2ZVVzZXJzKClcblx0Y29uc3QgY2xvdWRUcmFpbFVzZXJFdmVudHMgPSBhd2FpdCBjbG91ZFRyYWlsVXNlckV2ZW50TWFuYWdlci5yZXRyaWV2ZVF1aWNrU2lnaHRVc2VyRXZlbnRzKGRlbGV0ZURhdGUpXG5cblx0Zm9yIChjb25zdCBxdWlja1NpZ2h0VXNlciBvZiBxdWlja1NpZ2h0VXNlcnMpIHtcblx0XHRxdWlja1NpZ2h0VXNlci5sYXN0QWNjZXNzID0gY2xvdWRUcmFpbFVzZXJFdmVudE1hbmFnZXIuZ2V0TGFzdEFjY2Vzc0RhdGUocXVpY2tTaWdodFVzZXIsIGNsb3VkVHJhaWxVc2VyRXZlbnRzKVxuXHR9XG5cblx0Ly8gU3RyeWtlciBkaXNhYmxlIG5leHQtbGluZSBhbGwgXCJJIGRvIG5vdCBjYXJlIGFib3V0IG11dGF0aW5nIGNvbnNvbGUgc3RhdGVtZW50c1wiXG5cdGNvbnNvbGUuZGVidWcoYFF1aWNrU2lnaHQgVXNlcnM6XFxuJHtKU09OLnN0cmluZ2lmeShxdWlja1NpZ2h0VXNlcnMsIG51bGwsIDIpfWApXG5cdGNsb3VkV2F0Y2hNZXRyaWNDbGllbnQucXVldWVNZXRyaWMoeyBNZXRyaWNOYW1lOiAnUHJpb3JRdWlja1NpZ2h0VXNlcnNDb3VudCcsIFZhbHVlOiBxdWlja1NpZ2h0VXNlcnMubGVuZ3RoIH0pXG5cblx0bGV0IGludmFsaWRVc2VycyA9IDBcblx0bGV0IHVzZXJzRGVsZXRlZCA9IDBcblx0bGV0IG5vdGlmaWNhdGlvbnNTZW50ID0gMFxuXG5cdGZvciAoY29uc3QgcXVpY2tTaWdodFVzZXIgb2YgcXVpY2tTaWdodFVzZXJzKSB7XG5cdFx0aWYgKHF1aWNrU2lnaHRVc2VyLmludmFsaWQpIHsgLy8gU29tZSBRUyB1c2VycyBjYW5ub3QgYmUgZGVsZXRlZCBWSUEgdGhlIEFQSS9TREsuIFNlZSBSRUFETUUgZm9yIGRldGFpbHNcblx0XHRcdC8vIFN0cnlrZXIgZGlzYWJsZSBuZXh0LWxpbmUgYWxsIFwiSSBkbyBub3QgY2FyZSBhYm91dCBtdXRhdGluZyBjb25zb2xlIHN0YXRlbWVudHNcIlxuXHRcdFx0Y29uc29sZS53YXJuKGBJbnZhbGlkIHVzZXI6ICR7SlNPTi5zdHJpbmdpZnkocXVpY2tTaWdodFVzZXIpfWApXG5cdFx0XHRpbnZhbGlkVXNlcnMrK1xuXHRcdH0gZWxzZSBpZiAocXVpY2tTaWdodFVzZXIubGFzdEFjY2VzcyA8IGRlbGV0ZURhdGUpIHtcblx0XHRcdHVzZXJzRGVsZXRlZCsrXG5cdFx0XHRhd2FpdCBxdWlja1NpZ2h0VXNlck1hbmFnZXIuZGVsZXRlVXNlcihxdWlja1NpZ2h0VXNlcilcblx0XHR9IGVsc2UgaWYgKGVuYWJsZU5vdGlmaWNhdGlvblxuICAgICAgJiYgcXVpY2tTaWdodFVzZXIucm9sZSAhPT0gUXVpY2tTaWdodFJvbGUuUkVBREVSIC8vIFJlYWRlcnMgZ2V0IGludG8gUXVpY2tTaWdodCB0aHJvdWdoIGEgcHVibGljIHBhZ2UgYW5kIHByb2JhYmx5IGhhdmUgbm8gaWRlYSB3aGF0IFF1aWNrU2lnaHQgaXMuIFRoZXJlZm9yZSB3ZSBzaG91bGRuJ3QgZW1haWwgdGhlbS5cbiAgICAgICYmIHF1aWNrU2lnaHRVc2VyLmxhc3RBY2Nlc3MudG9Mb2NhbGVEYXRlU3RyaW5nKCkgPT09IG5vdGlmeURhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkpIHsgLy8gdG9Mb2NhbGVEYXRlU3RyaW5nIHN0cmlwcyBvZmYgdGhlIHRpbWUuIElmIHRoZSBkYXkgbWF0Y2hlcyB0aGUgbm90aWZ5IFwiZGF5XCIgdGhlbiB3ZSBub3RpZnkgdGhlIHVzZXJcblx0XHRcdG5vdGlmaWNhdGlvbnNTZW50Kytcblx0XHRcdGF3YWl0IG5vdGlmaWNhdGlvbk1hbmFnZXIubm90aWZ5VXNlcihxdWlja1NpZ2h0VXNlcilcblx0XHR9XG5cdH1cblxuXHRjbG91ZFdhdGNoTWV0cmljQ2xpZW50LnF1ZXVlTWV0cmljKHsgTWV0cmljTmFtZTogJ0ludmFsaWRVc2Vyc0NvdW50JywgVmFsdWU6IGludmFsaWRVc2VycyB9KVxuXHRjbG91ZFdhdGNoTWV0cmljQ2xpZW50LnF1ZXVlTWV0cmljKHsgTWV0cmljTmFtZTogJ1VzZXJzRGVsZXRlZENvdW50JywgVmFsdWU6IHVzZXJzRGVsZXRlZCB9KVxuXHRjbG91ZFdhdGNoTWV0cmljQ2xpZW50LnF1ZXVlTWV0cmljKHsgTWV0cmljTmFtZTogJ05vdGlmaWNhdGlvbnNTZW50Q291bnQnLCBWYWx1ZTogbm90aWZpY2F0aW9uc1NlbnQgfSlcblx0Y2xvdWRXYXRjaE1ldHJpY0NsaWVudC5xdWV1ZU1ldHJpYyh7IE1ldHJpY05hbWU6ICdSZW1haW5pbmdRdWlja1NpZ2h0VXNlcnNDb3VudCcsIFZhbHVlOiBxdWlja1NpZ2h0VXNlcnMubGVuZ3RoIC0gdXNlcnNEZWxldGVkIH0pXG5cdGF3YWl0IGNsb3VkV2F0Y2hNZXRyaWNDbGllbnQuZW1pdFF1ZXVlZE1ldHJpY3MoKVxufVxuIl0sIm5hbWVzIjpbImluc3RhbGxlZENodW5rcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwic2V0Q3JlZGVudGlhbEZlYXR1cmUiLCJjcmVkZW50aWFscyIsImZlYXR1cmUiLCJ2YWx1ZSIsIiRzb3VyY2UiLCJjdXN0b21FbmRwb2ludEZ1bmN0aW9ucyIsInJlYWRGaWxlIiwiZmlsZVByb21pc2VzSGFzaCIsImZpbGVJbnRlcmNlcHQiLCJzbHVycEZpbGUiLCJwYXRoIiwib3B0aW9ucyIsInVuZGVmaW5lZCIsImlnbm9yZUNhY2hlIiwiRGVmYXVsdElkZW50aXR5UHJvdmlkZXJDb25maWciLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsInRoaXMiLCJhdXRoU2NoZW1lcyIsIk1hcCIsImtleSIsIk9iamVjdCIsImVudHJpZXMiLCJzZXQiLCJnZXRJZGVudGl0eVByb3ZpZGVyIiwic2NoZW1lSWQiLCJnZXQiLCJpc1ZpcnR1YWxIb3N0YWJsZVMzQnVja2V0IiwiYWxsb3dTdWJEb21haW5zIiwibGFiZWwiLCJzcGxpdCIsImlzVmFsaWRIb3N0TGFiZWwiLCJsZW5ndGgiLCJ0b0xvd2VyQ2FzZSIsImlzSXBBZGRyZXNzIiwic2VsZWN0ZWRQYXJ0aXRpb25zSW5mbyIsImdldFVzZXJBZ2VudFByZWZpeCIsImF3c0VuZHBvaW50RnVuY3Rpb25zIiwicGFyc2VBcm4iLCJzZWdtZW50cyIsImFybiIsInBhcnRpdGlvbiIsInNlcnZpY2UiLCJyZWdpb24iLCJhY2NvdW50SWQiLCJyZXNvdXJjZVBhdGgiLCJqb2luIiwicmVzb3VyY2VJZCIsIm1hcCIsInJlc291cmNlIiwiZmxhdCIsInBhcnRpdGlvbnMiLCJyZWdpb25zIiwib3V0cHV0cyIsInJlZ2lvbkRhdGEiLCJyZWdpb25SZWdleCIsIlJlZ0V4cCIsInRlc3QiLCJERUZBVUxUX1BBUlRJVElPTiIsImZpbmQiLCJpZCIsIkVycm9yIiwiYXdzIiwiQ09OVEVOVF9MRU5HVEhfSEVBREVSIiwiY29udGVudExlbmd0aE1pZGRsZXdhcmVPcHRpb25zIiwic3RlcCIsInRhZ3MiLCJuYW1lIiwib3ZlcnJpZGUiLCJnZXRDb250ZW50TGVuZ3RoUGx1Z2luIiwiYXBwbHlUb1N0YWNrIiwiY2xpZW50U3RhY2siLCJib2R5TGVuZ3RoQ2hlY2tlciIsImFkZCIsIm5leHQiLCJhc3luYyIsImFyZ3MiLCJyZXF1ZXN0IiwiaXNJbnN0YW5jZSIsImJvZHkiLCJoZWFkZXJzIiwia2V5cyIsInN0ciIsImluZGV4T2YiLCJTdHJpbmciLCJlcnJvciIsImxvYWRDb25maWdzRm9yRGVmYXVsdE1vZGUiLCJtb2RlIiwicmV0cnlNb2RlIiwiY29ubmVjdGlvblRpbWVvdXQiLCJET01BSU5fUEFUVEVSTiIsIklQX0FERFJFU1NfUEFUVEVSTiIsIkRPVFNfUEFUVEVSTiIsImNyZWF0ZUNvbmZpZ1ZhbHVlUHJvdmlkZXIiLCJjb25maWdLZXkiLCJjYW5vbmljYWxFbmRwb2ludFBhcmFtS2V5IiwiY29uZmlnUHJvdmlkZXIiLCJjb25maWdWYWx1ZSIsImNyZWRlbnRpYWxTY29wZSIsIkNyZWRlbnRpYWxTY29wZSIsIkFjY291bnRJZCIsImlzQ3VzdG9tRW5kcG9pbnQiLCJlbmRwb2ludCIsInVybCIsImhyZWYiLCJwcm90b2NvbCIsImhvc3RuYW1lIiwicG9ydCIsInJlc29sdmVQYXJhbXMiLCJjb21tYW5kSW5wdXQiLCJpbnN0cnVjdGlvbnNTdXBwbGllciIsImNsaWVudENvbmZpZyIsImVuZHBvaW50UGFyYW1zIiwiaW5zdHJ1Y3Rpb25zIiwiZ2V0RW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMiLCJpbnN0cnVjdGlvbiIsInR5cGUiLCJKU09OIiwic3RyaW5naWZ5IiwiYXNzaWduIiwic2VydmljZUlkIiwiYnVja2V0IiwiQnVja2V0IiwicmVwbGFjZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImJ1Y2tldE5hbWUiLCJpc0FybiIsImlzVmFsaWRBcm4iLCJCb29sZWFuIiwiaXNBcm5CdWNrZXROYW1lIiwiRm9yY2VQYXRoU3R5bGUiLCJFbmRwb2ludCIsInN0YXJ0c1dpdGgiLCJEaXNhYmxlTXVsdGlSZWdpb25BY2Nlc3NQb2ludHMiLCJkaXNhYmxlTXVsdGlSZWdpb25BY2Nlc3NQb2ludHMiLCJEaXNhYmxlTVJBUCIsInJlc29sdmVQYXJhbXNGb3JTMyIsImVuZHBvaW50TWlkZGxld2FyZU9wdGlvbnMiLCJyZWxhdGlvbiIsInRvTWlkZGxld2FyZSIsImdldEVuZHBvaW50UGx1Z2luIiwiYWRkUmVsYXRpdmVUbyIsImNvbnRleHQiLCJzZXRGZWF0dXJlIiwiZW5kcG9pbnRGcm9tQ29uZmlnIiwic2VydmljZUNvbmZpZ3VyZWRFbmRwb2ludCIsImdldEVuZHBvaW50RnJvbUNvbmZpZyIsIlByb21pc2UiLCJyZXNvbHZlIiwidG9FbmRwb2ludFYxIiwiZW5kcG9pbnRQcm92aWRlciIsImdldEVuZHBvaW50RnJvbUluc3RydWN0aW9ucyIsImlucHV0IiwiZW5kcG9pbnRWMiIsInByb3BlcnRpZXMiLCJhdXRoU2NoZW1lIiwic2lnbmluZ1JlZ2lvbiIsInNpZ25pbmdOYW1lIiwic21pdGh5Q29udGV4dCIsImdldFNtaXRoeUNvbnRleHQiLCJodHRwQXV0aE9wdGlvbiIsInNlbGVjdGVkSHR0cEF1dGhTY2hlbWUiLCJzaWduaW5nUHJvcGVydGllcyIsInNpZ25pbmdfcmVnaW9uIiwic2lnbmluZ19zZXJ2aWNlIiwic2lnbmluZ1JlZ2lvblNldCIsImVuZHBvaW50TWlkZGxld2FyZSIsIlVpbnQ4QXJyYXlCbG9iQWRhcHRlciIsIlVpbnQ4QXJyYXkiLCJmcm9tU3RyaW5nIiwic291cmNlIiwiZW5jb2RpbmciLCJtdXRhdGUiLCJmcm9tQmFzZTY0IiwiZnJvbVV0ZjgiLCJ0cmFuc2Zvcm1Gcm9tU3RyaW5nIiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJ0cmFuc2Zvcm1Ub1N0cmluZyIsInBheWxvYWQiLCJ0b0Jhc2U2NCIsInRvVXRmOCIsImNvbGxlY3RCb2R5Iiwic3RyZWFtQm9keSIsImZyb21Db250ZXh0Iiwic3RyZWFtQ29sbGVjdG9yIiwicmVzb2x2ZUhvc3RIZWFkZXJDb25maWciLCJob3N0SGVhZGVyTWlkZGxld2FyZU9wdGlvbnMiLCJwcmlvcml0eSIsImdldEhvc3RIZWFkZXJQbHVnaW4iLCJoYW5kbGVyUHJvdG9jb2wiLCJyZXF1ZXN0SGFuZGxlciIsIm1ldGFkYXRhIiwiaG9zdCIsImhvc3RIZWFkZXJNaWRkbGV3YXJlIiwiYXJnMCIsImFyZzEiLCJhcmcyIiwidGFyZ2V0IiwiZmlsdGVyIiwibWFwV2l0aEZpbHRlciIsIkFycmF5IiwiaXNBcnJheSIsImFwcGx5SW5zdHJ1Y3Rpb24iLCJ0YWtlIiwib3V0IiwicmVkdWNlIiwiX2luc3RydWN0aW9ucyIsInRhcmdldEtleSIsIm5vbk51bGxpc2giLCJ2YWx1ZUZuIiwicGFzcyIsInNvdXJjZUtleSIsIl92YWx1ZSIsImRlZmF1bHRGaWx0ZXJQYXNzZWQiLCJjdXN0b21GaWx0ZXJQYXNzZWQiLCJfIiwiQkFTRTY0X1JFR0VYIiwiVHlwZUVycm9yIiwiZXhlYyIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiSVBfVjRfUkVHRVgiLCJlbmRzV2l0aCIsInByZWZpeEtleVJlZ2V4IiwicHJvZmlsZU5hbWVCbG9ja0xpc3QiLCJwYXJzZUluaSIsImluaURhdGEiLCJjdXJyZW50U2VjdGlvbiIsImN1cnJlbnRTdWJTZWN0aW9uIiwiaW5pTGluZSIsInRyaW1tZWRMaW5lIiwidHJpbSIsInNlY3Rpb25OYW1lIiwic3Vic3RyaW5nIiwibWF0Y2hlcyIsInByZWZpeCIsInZhbHVlcyIsIkkiLCJpbmNsdWRlcyIsImluZGV4T2ZFcXVhbHNTaWduIiwidHJpbVN0YXJ0IiwiRU5WX0tFWSIsIkVOVl9TRUNSRVQiLCJmcm9tRW52IiwiaW5pdCIsImxvZ2dlciIsImRlYnVnIiwiYWNjZXNzS2V5SWQiLCJwcm9jZXNzIiwiZW52Iiwic2VjcmV0QWNjZXNzS2V5Iiwic2Vzc2lvblRva2VuIiwiZXhwaXJ5IiwiZXhwaXJhdGlvbiIsIkRhdGUiLCJDIiwiQVdTX1JFR0lPTl9FTlYiLCJBV1NfREVGQVVMVF9SRUdJT05fRU5WIiwiREVGQVVMVFNfTU9ERV9PUFRJT05TIiwiTk9ERV9ERUZBVUxUU19NT0RFX0NPTkZJR19PUFRJT05TIiwiZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yIiwiY29uZmlnRmlsZVNlbGVjdG9yIiwicHJvZmlsZSIsImRlZmF1bHQiLCJyZXNvbHZlRGVmYXVsdHNNb2RlQ29uZmlnIiwiZGVmYXVsdHNNb2RlIiwibWVtb2l6ZSIsInJlc29sdmVOb2RlRGVmYXVsdHNNb2RlQXV0byIsInRvTG9jYWxlTG93ZXJDYXNlIiwiY2xpZW50UmVnaW9uIiwicmVzb2x2ZWRSZWdpb24iLCJpbmZlcnJlZFJlZ2lvbiIsImluZmVyUGh5c2ljYWxSZWdpb24iLCJnZXRJbnN0YW5jZU1ldGFkYXRhRW5kcG9pbnQiLCJodHRwUmVxdWVzdCIsInRvU3RyaW5nIiwiZSIsImdldEFsbEFsaWFzZXMiLCJhbGlhc2VzIiwiX2FsaWFzZXMiLCJwdXNoIiwiYWxpYXMiLCJnZXRNaWRkbGV3YXJlTmFtZVdpdGhBbGlhc2VzIiwiY29uc3RydWN0U3RhY2siLCJhYnNvbHV0ZUVudHJpZXMiLCJyZWxhdGl2ZUVudHJpZXMiLCJpZGVudGlmeU9uUmVzb2x2ZSIsImVudHJpZXNOYW1lU2V0IiwiU2V0IiwiY2xvbmVUbyIsInRvU3RhY2siLCJmb3JFYWNoIiwiZW50cnkiLCJtaWRkbGV3YXJlIiwic3RhY2siLCJleHBhbmRSZWxhdGl2ZU1pZGRsZXdhcmVMaXN0IiwiZnJvbSIsImV4cGFuZGVkTWlkZGxld2FyZUxpc3QiLCJiZWZvcmUiLCJhZnRlciIsInJldmVyc2UiLCJnZXRNaWRkbGV3YXJlTGlzdCIsIm5vcm1hbGl6ZWRBYnNvbHV0ZUVudHJpZXMiLCJub3JtYWxpemVkUmVsYXRpdmVFbnRyaWVzIiwibm9ybWFsaXplZEVudHJpZXNOYW1lTWFwIiwibm9ybWFsaXplZEVudHJ5IiwibWFpbkNoYWluIiwic29ydCIsImEiLCJiIiwic3RlcFdlaWdodHMiLCJwcmlvcml0eVdlaWdodHMiLCJ3aG9sZUxpc3QiLCJzb21lIiwiaGFzIiwidG9PdmVycmlkZUluZGV4IiwiZmluZEluZGV4IiwidG9PdmVycmlkZSIsInNwbGljZSIsImNsb25lIiwidXNlIiwicGx1Z2luIiwicmVtb3ZlIiwidG9SZW1vdmUiLCJpc1JlbW92ZWQiLCJmaWx0ZXJDYiIsImRlbGV0ZSIsInJlbW92ZUJ5TmFtZSIsInJlbW92ZUJ5UmVmZXJlbmNlIiwicmVtb3ZlQnlUYWciLCJjb25jYXQiLCJjbG9uZWQiLCJpZGVudGlmeSIsIm13IiwidG9nZ2xlIiwiaGFuZGxlciIsImNvbnNvbGUiLCJsb2ciLCJpbml0aWFsaXplIiwic2VyaWFsaXplIiwiYnVpbGQiLCJmaW5hbGl6ZVJlcXVlc3QiLCJkZXNlcmlhbGl6ZSIsImhpZ2giLCJub3JtYWwiLCJsb3ciLCJkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlIiwiZGVzZXJpYWxpemVyIiwicmVzcG9uc2UiLCJvdXRwdXQiLCJkZWZpbmVQcm9wZXJ0eSIsImhpbnQiLCJtZXNzYWdlIiwid2FybiIsIiRyZXNwb25zZUJvZHlUZXh0IiwiJHJlc3BvbnNlIiwiaGVhZGVyRW50cmllcyIsIiRtZXRhZGF0YSIsImh0dHBTdGF0dXNDb2RlIiwic3RhdHVzQ29kZSIsInJlcXVlc3RJZCIsImZpbmRIZWFkZXIiLCJleHRlbmRlZFJlcXVlc3RJZCIsImNmSWQiLCJwYXR0ZXJuIiwiayIsIm1hdGNoIiwic2VyaWFsaXplck1pZGRsZXdhcmUiLCJzZXJpYWxpemVyIiwiZW5kcG9pbnRDb25maWciLCJ1cmxQYXJzZXIiLCJkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlT3B0aW9uIiwic2VyaWFsaXplck1pZGRsZXdhcmVPcHRpb24iLCJnZXRTZXJkZVBsdWdpbiIsImNvbW1hbmRTdGFjayIsIkhhc2giLCJhbGdvcml0aG1JZGVudGlmaWVyIiwic2VjcmV0IiwicmVzZXQiLCJ1cGRhdGUiLCJ0b0hhc2giLCJoYXNoIiwiY2FzdFNvdXJjZURhdGEiLCJkaWdlc3QiLCJjcmVhdGVIbWFjIiwiY3JlYXRlSGFzaCIsInRvQ2FzdCIsIkJ1ZmZlciIsImlzQnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJhc3luY19ob29rc18xIiwibm9HbG9iYWxBd3NMYW1iZGEiLCJnbG9iYWxUaGlzIiwiYXdzbGFtYmRhIiwiUFJPVEVDVEVEX0tFWVMiLCJSRVFVRVNUX0lEIiwiU3ltYm9sIiwiWF9SQVlfVFJBQ0VfSUQiLCJJbnZva2VTdG9yZUltcGwiLCJzdGF0aWMiLCJBc3luY0xvY2FsU3RvcmFnZSIsInJ1biIsImZuIiwic3RvcmFnZSIsImdldENvbnRleHQiLCJnZXRTdG9yZSIsImlzUHJvdGVjdGVkS2V5IiwiZ2V0UmVxdWVzdElkIiwiZ2V0WFJheVRyYWNlSWQiLCJoYXNDb250ZXh0IiwiaW5zdGFuY2UiLCJJbnZva2VTdG9yZSIsIk1PTlRIUyIsIlJGQzMzMzkiLCJwYXJzZVJmYzMzMzlEYXRlVGltZSIsInllYXJTdHIiLCJtb250aFN0ciIsImRheVN0ciIsImhvdXJzIiwibWludXRlcyIsInNlY29uZHMiLCJmcmFjdGlvbmFsTWlsbGlzZWNvbmRzIiwieWVhciIsInN0cmlwTGVhZGluZ1plcm9lcyIsIm1vbnRoIiwicGFyc2VEYXRlVmFsdWUiLCJkYXkiLCJidWlsZERhdGUiLCJSRkMzMzM5X1dJVEhfT0ZGU0VUIiwicGFyc2VSZmMzMzM5RGF0ZVRpbWVXaXRoT2Zmc2V0Iiwib2Zmc2V0U3RyIiwiZGF0ZSIsInRvVXBwZXJDYXNlIiwic2V0VGltZSIsImdldFRpbWUiLCJwYXJzZU9mZnNldFRvTWlsbGlzZWNvbmRzIiwicGFyc2VFcG9jaFRpbWVzdGFtcCIsInZhbHVlQXNEb3VibGUiLCJ0YWciLCJOdW1iZXIiLCJpc05hTiIsIkluZmluaXR5IiwiTWF0aCIsInJvdW5kIiwidGltZSIsImFkanVzdGVkTW9udGgiLCJ2YWxpZGF0ZURheU9mTW9udGgiLCJVVEMiLCJwYXJzZU1pbGxpc2Vjb25kcyIsIkRBWVNfSU5fTU9OVEgiLCJtYXhEYXlzIiwiaXNMZWFwWWVhciIsImxvd2VyIiwidXBwZXIiLCJkYXRlVmFsIiwiZGlyZWN0aW9uU3RyIiwiZGlyZWN0aW9uIiwiaWR4IiwiY2hhckF0Iiwic2xpY2UiLCJwYXJzZUpzb25Cb2R5IiwidGhlbiIsImVuY29kZWQiLCJwYXJzZSIsInBhcnNlSnNvbkVycm9yQm9keSIsImVycm9yQm9keSIsIk1lc3NhZ2UiLCJsb2FkUmVzdEpzb25FcnJvckNvZGUiLCJkYXRhIiwiZmluZEtleSIsIm9iamVjdCIsInNhbml0aXplRXJyb3JDb2RlIiwicmF3VmFsdWUiLCJjbGVhblZhbHVlIiwiaGVhZGVyS2V5IiwiY29kZUtleSIsIl9fc21pdGh5X2NvbnRleHQiLCJmZWF0dXJlcyIsIk5PREVfVVNFX0RVQUxTVEFDS19FTkRQT0lOVF9DT05GSUdfT1BUSU9OUyIsIkVOViIsIkNPTkZJRyIsImNhbGN1bGF0ZUJvZHlMZW5ndGgiLCJzaXplIiwic3RhcnQiLCJlbmQiLCJsc3RhdFN5bmMiLCJmZCIsImZzdGF0U3luYyIsIndhcm5pbmdFbWl0dGVkIiwiZW1pdFdhcm5pbmdJZlVuc3VwcG9ydGVkVmVyc2lvbiIsInZlcnNpb24iLCJwYXJzZUludCIsImh0dHBBdXRoU2NoZW1lRW5kcG9pbnRSdWxlU2V0TWlkZGxld2FyZU9wdGlvbnMiLCJnZXRIdHRwQXV0aFNjaGVtZUVuZHBvaW50UnVsZVNldFBsdWdpbiIsImh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyIiwiaWRlbnRpdHlQcm92aWRlckNvbmZpZ1Byb3ZpZGVyIiwibXdPcHRpb25zIiwicmVzb2x2ZWRPcHRpb25zIiwiY2FuZGlkYXRlQXV0aE9wdGlvbnMiLCJhdXRoU2NoZW1lUHJlZmVyZW5jZSIsInByZWZlcnJlZEF1dGhPcHRpb25zIiwicHJlZmVycmVkU2NoZW1lTmFtZSIsImNhbmRpZGF0ZUF1dGhPcHRpb24iLCJyZXNvbHZlQXV0aE9wdGlvbnMiLCJodHRwQXV0aFNjaGVtZVByb3ZpZGVyIiwiaHR0cEF1dGhTY2hlbWVzIiwic2NoZW1lIiwiY29udmVydEh0dHBBdXRoU2NoZW1lc1RvTWFwIiwiZmFpbHVyZVJlYXNvbnMiLCJvcHRpb24iLCJpZGVudGl0eVByb3ZpZGVyIiwiaWRlbnRpdHlQcm9wZXJ0aWVzIiwicHJvcGVydGllc0V4dHJhY3RvciIsImlkZW50aXR5Iiwic2lnbmVyIiwiaHR0cEF1dGhTY2hlbWVNaWRkbGV3YXJlIiwiZ2V0Q29uZmlnRmlsZXBhdGgiLCJlc2NhcGVVcmkiLCJ1cmkiLCJoZXhFbmNvZGUiLCJjIiwiY2hhckNvZGVBdCIsInBhcnNlVXJsIiwiVVJMIiwicGF0aG5hbWUiLCJzZWFyY2giLCJxdWVyeSIsInF1ZXJ5c3RyaW5nIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsInBhcnNlUXVlcnlTdHJpbmciLCJyZXNvbHZlRW5kcG9pbnRDb25maWciLCJ0bHMiLCJ1c2VEdWFsc3RhY2tFbmRwb2ludCIsInVzZUZpcHNFbmRwb2ludCIsImN1c3RvbUVuZHBvaW50UHJvdmlkZXIiLCJyZXNvbHZlZENvbmZpZyIsImNvbmZpZ3VyZWRFbmRwb2ludFByb21pc2UiLCJOT0RFSlNfVElNRU9VVF9FUlJPUl9DT0RFUyIsImdldFRyYW5zZm9ybWVkSGVhZGVycyIsInRyYW5zZm9ybWVkSGVhZGVycyIsImhlYWRlclZhbHVlcyIsInRpbWluZyIsImNiIiwibXMiLCJzZXRUaW1lb3V0IiwidGltZW91dElkIiwiY2xlYXJUaW1lb3V0IiwiREVGQVVMVF9SRVFVRVNUX1RJTUVPVVQiLCJOb2RlSHR0cEhhbmRsZXIiLCJjcmVhdGUiLCJpbnN0YW5jZU9yT3B0aW9ucyIsImhhbmRsZSIsImNoZWNrU29ja2V0VXNhZ2UiLCJhZ2VudCIsInNvY2tldFdhcm5pbmdUaW1lc3RhbXAiLCJzb2NrZXRzIiwicmVxdWVzdHMiLCJtYXhTb2NrZXRzIiwibm93Iiwib3JpZ2luIiwic29ja2V0c0luVXNlIiwicmVxdWVzdHNFbnF1ZXVlZCIsInJlamVjdCIsIl9vcHRpb25zIiwicmVzb2x2ZURlZmF1bHRDb25maWciLCJjYXRjaCIsInJlcXVlc3RUaW1lb3V0Iiwic29ja2V0VGltZW91dCIsInNvY2tldEFjcXVpc2l0aW9uV2FybmluZ1RpbWVvdXQiLCJodHRwQWdlbnQiLCJodHRwc0FnZW50Iiwia2VlcEFsaXZlIiwiZGVzdHJveSIsImFib3J0U2lnbmFsIiwiX3Jlc29sdmUiLCJfcmVqZWN0Iiwid3JpdGVSZXF1ZXN0Qm9keVByb21pc2UiLCJ0aW1lb3V0cyIsImFyZyIsImFib3J0ZWQiLCJhYm9ydEVycm9yIiwiaXNTU0wiLCJxdWVyeVN0cmluZyIsInBhcnRzIiwiaSIsImlMZW4iLCJxc0VudHJ5IiwiYnVpbGRRdWVyeVN0cmluZyIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiZnJhZ21lbnQiLCJub2RlSHR0cHNPcHRpb25zIiwibWV0aG9kIiwicmVxIiwicmVzIiwicmVhc29uIiwic3RhdHVzTWVzc2FnZSIsIm9uIiwiZXJyIiwiY29kZSIsIm9uQWJvcnQiLCJhZGRFdmVudExpc3RlbmVyIiwic2lnbmFsIiwib25jZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbmFib3J0IiwiZWZmZWN0aXZlUmVxdWVzdFRpbWVvdXQiLCJ0aW1lb3V0SW5NcyIsInJlZ2lzdGVyVGltZW91dCIsIm9mZnNldCIsImRvV2l0aFNvY2tldCIsInNvY2tldCIsImNvbm5lY3RpbmciLCJiaW5kIiwic2V0Q29ubmVjdGlvblRpbWVvdXQiLCJ0aW1lb3V0Iiwib25UaW1lb3V0IiwicmVtb3ZlTGlzdGVuZXIiLCJzZXRTb2NrZXRUaW1lb3V0Iiwia2VlcEFsaXZlTXNlY3MiLCJkZWZlclRpbWVNcyIsInJlZ2lzdGVyTGlzdGVuZXIiLCJzZXRLZWVwQWxpdmUiLCJzZXRTb2NrZXRLZWVwQWxpdmUiLCJtYXhDb250aW51ZVRpbWVvdXRNcyIsImV4cGVjdCIsInNlbmRCb2R5IiwicmFjZSIsIm1heCIsIlJlYWRhYmxlIiwicGlwZSIsInVpbnQ4Iiwid3JpdGVCb2R5Iiwid3JpdGVSZXF1ZXN0Qm9keSIsInVwZGF0ZUh0dHBDbGllbnRDb25maWciLCJodHRwSGFuZGxlckNvbmZpZ3MiLCJnZXRIdHRwSGFuZGxlckV4dGVuc2lvbkNvbmZpZ3VyYXRpb24iLCJydW50aW1lQ29uZmlnIiwic2V0SHR0cEhhbmRsZXIiLCJodHRwSGFuZGxlciIsInJlc29sdmVIdHRwSGFuZGxlclJ1bnRpbWVDb25maWciLCJodHRwSGFuZGxlckV4dGVuc2lvbkNvbmZpZ3VyYXRpb24iLCJ3aXRoQmFzZUV4Y2VwdGlvbiIsIkV4Y2VwdGlvbkN0b3IiLCJwYXJzZWRCb2R5IiwiZXJyb3JDb2RlIiwiZXhjZXB0aW9uQ3RvciIsImRlc2VyaWFsaXplTWV0YWRhdGEiLCJDb2RlIiwiJGZhdWx0IiwidGhyb3dEZWZhdWx0RXJyb3IiLCJDcmVkZW50aWFsc1Byb3ZpZGVyRXJyb3IiLCJzdXBlciIsIlNlbGVjdG9yVHlwZSIsImlzQXJyYXlCdWZmZXIiLCJjYWxsIiwicHJvdmlkZXIiLCJpc0V4cGlyZWQiLCJyZXF1aXJlc1JlZnJlc2giLCJyZXNvbHZlZCIsInBlbmRpbmciLCJoYXNSZXN1bHQiLCJpc0NvbnN0YW50IiwiY29hbGVzY2VQcm92aWRlciIsImZvcmNlUmVmcmVzaCIsImdldFNlbGVjdG9yTmFtZSIsImZ1bmN0aW9uU3RyaW5nIiwiY29uc3RhbnRzIiwibG9hZENvbmZpZyIsImRlZmF1bHRWYWx1ZSIsImNvbmZpZ3VyYXRpb24iLCJlbnZPcHRpb25zIiwiY2hhaW4iLCJlbnZWYXJTZWxlY3RvciIsImNvbmZpZ1NlbGVjdG9yIiwicHJlZmVycmVkRmlsZSIsImdldFByb2ZpbGVOYW1lIiwiY29uZmlnRmlsZSIsImNyZWRlbnRpYWxzRmlsZSIsImxvYWRTaGFyZWRDb25maWdGaWxlcyIsInByb2ZpbGVGcm9tQ3JlZGVudGlhbHMiLCJwcm9maWxlRnJvbUNvbmZpZyIsIm1lcmdlZFByb2ZpbGUiLCJmcm9tU2hhcmVkQ29uZmlnRmlsZXMiLCJpc0Z1bmN0aW9uIiwic3RhdGljVmFsdWUiLCJIdHRwUmVzcG9uc2UiLCJyZXNwIiwiTm9PcExvZ2dlciIsInRyYWNlIiwiaW5mbyIsImdldEF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24iLCJzZXRSZWdpb24iLCJyZXNvbHZlQXdzUmVnaW9uRXh0ZW5zaW9uQ29uZmlndXJhdGlvbiIsImF3c1JlZ2lvbkV4dGVuc2lvbkNvbmZpZ3VyYXRpb24iLCJpc0ZpcHNSZWdpb24iLCJnZXRSZWFsUmVnaW9uIiwicmVzb2x2ZVJlZ2lvbkNvbmZpZyIsInByb3ZpZGVkUmVnaW9uIiwibm9ybWFsaXplUHJvdmlkZXIiLCJwcm9taXNpZmllZCIsIlNlcnZpY2VFeGNlcHRpb24iLCJnZXRQcm90b3R5cGVPZiIsImNhbmRpZGF0ZSIsImlzUHJvdG90eXBlT2YiLCJoYXNJbnN0YW5jZSIsImRlY29yYXRlU2VydmljZUV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImFkZGl0aW9ucyIsInYiLCJ0b1VpbnQ4QXJyYXkiLCJCWVRFU19QRVJfRUxFTUVOVCIsImdldEFycmF5Rm9yQ29tbWFTZXBhcmF0ZWRTdHJpbmciLCJpdGVtIiwiTk9ERV9BVVRIX1NDSEVNRV9QUkVGRVJFTkNFX0VOVl9LRVkiLCJOT0RFX0FVVEhfU0NIRU1FX1BSRUZFUkVOQ0VfQ09ORklHX0tFWSIsIk5PREVfQVVUSF9TQ0hFTUVfUFJFRkVSRU5DRV9PUFRJT05TIiwiVEhST1RUTElOR19FUlJPUl9DT0RFUyIsIlRSQU5TSUVOVF9FUlJPUl9DT0RFUyIsIlRSQU5TSUVOVF9FUlJPUl9TVEFUVVNfQ09ERVMiLCJOT0RFSlNfTkVUV09SS19FUlJPUl9DT0RFUyIsImlzVGhyb3R0bGluZ0Vycm9yIiwiJHJldHJ5YWJsZSIsInRocm90dGxpbmciLCJpc1RyYW5zaWVudEVycm9yIiwiZGVwdGgiLCJpc1JldHJ5YWJsZUJ5VHJhaXQiLCJjbG9ja1NrZXdDb3JyZWN0ZWQiLCJpc0Nsb2NrU2tld0NvcnJlY3RlZEVycm9yIiwiZXJyb3JNZXNzYWdlcyIsImlzQnJvd3Nlck5ldHdvcmtFcnJvciIsImNhdXNlIiwiaXNTZXJ2ZXJFcnJvciIsIk5PREVfVVNFX0ZJUFNfRU5EUE9JTlRfQ09ORklHX09QVElPTlMiLCJOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUyIsIk5PREVfUkVHSU9OX0NPTkZJR19GSUxFX09QVElPTlMiLCJzdGF0ZSIsImVtaXRXYXJuaW5nIiwicmFuZG9tVVVJRCIsImRlY2ltYWxUb0hleCIsInBhZFN0YXJ0IiwiaXNTdHJlYW1pbmdQYXlsb2FkIiwiUmVhZGFibGVTdHJlYW0iLCJhc1Nka0Vycm9yIiwiaXNSZXRyeVN0cmF0ZWd5VjIiLCJyZXRyeVN0cmF0ZWd5IiwiYWNxdWlyZUluaXRpYWxSZXRyeVRva2VuIiwicmVmcmVzaFJldHJ5VG9rZW5Gb3JSZXRyeSIsInJlY29yZFN1Y2Nlc3MiLCJnZXRSZXRyeUVycm9ySW5mbyIsImVycm9ySW5mbyIsImVycm9yVHlwZSIsImdldFJldHJ5RXJyb3JUeXBlIiwicmV0cnlBZnRlckhpbnQiLCJnZXRSZXRyeUFmdGVySGludCIsInJldHJ5TWlkZGxld2FyZU9wdGlvbnMiLCJnZXRSZXRyeVBsdWdpbiIsIm1heEF0dGVtcHRzIiwidXNlckFnZW50IiwicmV0cnkiLCJyZXRyeVRva2VuIiwibGFzdEVycm9yIiwiYXR0ZW1wdHMiLCJ0b3RhbFJldHJ5RGVsYXkiLCJpc1JlcXVlc3QiLCJybmRzIiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwidjQiLCJyZXRyeUVycm9ySW5mbyIsIk4iLCJyZWZyZXNoRXJyb3IiLCJnZXRSZXRyeUNvdW50IiwiZGVsYXkiLCJnZXRSZXRyeURlbGF5IiwicmV0cnlNaWRkbGV3YXJlIiwicmV0cnlBZnRlckhlYWRlck5hbWUiLCJyZXRyeUFmdGVyIiwicmV0cnlBZnRlclNlY29uZHMiLCJkZWZhdWx0RXJyb3JIYW5kbGVyIiwiZGVmYXVsdFN1Y2Nlc3NIYW5kbGVyIiwiaHR0cFJlc3BvbnNlIiwiaHR0cFNpZ25pbmdNaWRkbGV3YXJlT3B0aW9ucyIsImdldEh0dHBTaWduaW5nUGx1Z2luIiwic2lnbiIsImVycm9ySGFuZGxlciIsInN1Y2Nlc3NIYW5kbGVyIiwiQ29sbGVjdG9yIiwiV3JpdGFibGUiLCJhcmd1bWVudHMiLCJidWZmZXJlZEJ5dGVzIiwiX3dyaXRlIiwiY2h1bmsiLCJjYWxsYmFjayIsInN0cmVhbSIsImlzUmVhZGFibGVTdHJlYW1JbnN0YW5jZSIsImNodW5rcyIsInJlYWRlciIsImdldFJlYWRlciIsImlzRG9uZSIsImRvbmUiLCJyZWFkIiwiY29sbGVjdGVkIiwiY29sbGVjdFJlYWRhYmxlU3RyZWFtIiwiY29sbGVjdG9yIiwiYnl0ZXMiLCJnZXRDb25maWdEYXRhIiwiaW5kZXhPZlNlcGFyYXRvciIsIkNPTkZJR19QUkVGSVhfU0VQQVJBVE9SIiwiYWNjIiwiUFJPRklMRSIsImdldENyZWRlbnRpYWxzRmlsZXBhdGgiLCJnZXRIb21lRGlyIiwic3dhbGxvd0Vycm9yIiwiZmlsZXBhdGgiLCJjb25maWdGaWxlcGF0aCIsImciLCJob21lRGlyIiwicmVzb2x2ZWRGaWxlcGF0aCIsInJlc29sdmVkQ29uZmlnRmlsZXBhdGgiLCJwYXJzZWRGaWxlcyIsImFsbCIsIkluaVNlY3Rpb25UeXBlIiwiZGVmYXVsdE9wdGlvbnMiLCJwcmVzZXJ2ZU9yZGVyIiwiYXR0cmlidXRlTmFtZVByZWZpeCIsImF0dHJpYnV0ZXNHcm91cE5hbWUiLCJ0ZXh0Tm9kZU5hbWUiLCJpZ25vcmVBdHRyaWJ1dGVzIiwicmVtb3ZlTlNQcmVmaXgiLCJhbGxvd0Jvb2xlYW5BdHRyaWJ1dGVzIiwicGFyc2VUYWdWYWx1ZSIsInBhcnNlQXR0cmlidXRlVmFsdWUiLCJ0cmltVmFsdWVzIiwiY2RhdGFQcm9wTmFtZSIsIm51bWJlclBhcnNlT3B0aW9ucyIsImhleCIsImxlYWRpbmdaZXJvcyIsImVOb3RhdGlvbiIsInRhZ1ZhbHVlUHJvY2Vzc29yIiwidGFnTmFtZSIsInZhbCIsImF0dHJpYnV0ZVZhbHVlUHJvY2Vzc29yIiwiYXR0ck5hbWUiLCJzdG9wTm9kZXMiLCJhbHdheXNDcmVhdGVUZXh0Tm9kZSIsImNvbW1lbnRQcm9wTmFtZSIsInVucGFpcmVkVGFncyIsInByb2Nlc3NFbnRpdGllcyIsImh0bWxFbnRpdGllcyIsImlnbm9yZURlY2xhcmF0aW9uIiwiaWdub3JlUGlUYWdzIiwidHJhbnNmb3JtVGFnTmFtZSIsInRyYW5zZm9ybUF0dHJpYnV0ZU5hbWUiLCJ1cGRhdGVUYWciLCJqUGF0aCIsImF0dHJzIiwiY2FwdHVyZU1ldGFEYXRhIiwibmFtZVN0YXJ0Q2hhciIsInJlZ2V4TmFtZSIsImdldEFsbE1hdGNoZXMiLCJzdHJpbmciLCJyZWdleCIsImFsbG1hdGNoZXMiLCJzdGFydEluZGV4IiwibGFzdEluZGV4IiwibGVuIiwiaW5kZXgiLCJpc05hbWUiLCJNRVRBREFUQV9TWU1CT0wiLCJYbWxOb2RlIiwidGFnbmFtZSIsImNoaWxkIiwiYWRkQ2hpbGQiLCJub2RlIiwiZ2V0TWV0YURhdGFTeW1ib2wiLCJyZWFkRG9jVHlwZSIsInhtbERhdGEiLCJlbnRpdGllcyIsImFuZ2xlQnJhY2tldHNDb3VudCIsImhhc0JvZHkiLCJjb21tZW50IiwiZXhwIiwiaGFzU2VxIiwiZW50aXR5TmFtZSIsInJlYWRFbnRpdHlFeHAiLCJyZWd4IiwicmVhZEVsZW1lbnRFeHAiLCJyZWFkTm90YXRpb25FeHAiLCJza2lwV2hpdGVzcGFjZSIsInZhbGlkYXRlRW50aXR5TmFtZSIsImVudGl0eVZhbHVlIiwicmVhZElkZW50aWZpZXJWYWwiLCJub3RhdGlvbk5hbWUiLCJpZGVudGlmaWVyVHlwZSIsInB1YmxpY0lkZW50aWZpZXIiLCJzeXN0ZW1JZGVudGlmaWVyIiwiaWRlbnRpZmllclZhbCIsInN0YXJ0Q2hhciIsImVsZW1lbnROYW1lIiwiY29udGVudE1vZGVsIiwic2VxIiwiaiIsImhleFJlZ2V4IiwibnVtUmVnZXgiLCJjb25zaWRlciIsImRlY2ltYWxQb2ludCIsImVOb3RhdGlvblJlZ3giLCJPcmRlcmVkT2JqUGFyc2VyIiwiY3VycmVudE5vZGUiLCJ0YWdzTm9kZVN0YWNrIiwiZG9jVHlwZUVudGl0aWVzIiwibGFzdEVudGl0aWVzIiwiYW1wRW50aXR5IiwiZnJvbUNvZGVQb2ludCIsImFkZEV4dGVybmFsRW50aXRpZXMiLCJwYXJzZVhtbCIsInBhcnNlVGV4dERhdGEiLCJyZXNvbHZlTmFtZVNwYWNlIiwiYnVpbGRBdHRyaWJ1dGVzTWFwIiwiaXNJdFN0b3BOb2RlIiwicmVwbGFjZUVudGl0aWVzVmFsdWUiLCJyZWFkU3RvcE5vZGVEYXRhIiwic2F2ZVRleHRUb1BhcmVudFRhZyIsImlnbm9yZUF0dHJpYnV0ZXNGbiIsImV4dGVybmFsRW50aXRpZXMiLCJlbnRLZXlzIiwiZW50IiwiZG9udFRyaW0iLCJoYXNBdHRyaWJ1dGVzIiwiaXNMZWFmTm9kZSIsImVzY2FwZUVudGl0aWVzIiwibmV3dmFsIiwicGFyc2VWYWx1ZSIsImF0dHJzUmVneCIsImF0dHJTdHIiLCJvbGRWYWwiLCJhTmFtZSIsIm5ld1ZhbCIsImF0dHJDb2xsZWN0aW9uIiwieG1sT2JqIiwidGV4dERhdGEiLCJjbG9zZUluZGV4IiwiZmluZENsb3NpbmdJbmRleCIsImNvbG9uSW5kZXgiLCJzdWJzdHIiLCJsYXN0VGFnTmFtZSIsImxhc3RJbmRleE9mIiwicHJvcEluZGV4IiwicG9wIiwidGFnRGF0YSIsInJlYWRUYWdFeHAiLCJjaGlsZE5vZGUiLCJ0YWdFeHAiLCJhdHRyRXhwUHJlc2VudCIsImVuZEluZGV4IiwicmVzdWx0IiwicmF3VGFnTmFtZSIsImxhc3RUYWciLCJ0YWdDb250ZW50IiwiZW50aXR5IiwiY3VycmVudFRhZ05hbWUiLCJhbGxOb2Rlc0V4cCIsInN0b3BOb2RlUGF0aCIsInN0b3BOb2RlRXhwIiwiZXJyTXNnIiwiY2xvc2luZ0luZGV4IiwiY2xvc2luZ0NoYXIiLCJhdHRyQm91bmRhcnkiLCJjaCIsInRhZ0V4cFdpdGhDbG9zaW5nSW5kZXgiLCJzZXBhcmF0b3JJbmRleCIsIm9wZW5UYWdDb3VudCIsInNob3VsZFBhcnNlIiwidHJpbW1lZFN0ciIsInNraXBMaWtlIiwibnVtU3RyIiwid2luZG93IiwicGFyc2VfaW50Iiwibm90YXRpb24iLCJlQ2hhciIsImVBZGphY2VudFRvTGVhZGluZ1plcm9zIiwicmVzb2x2ZUVub3RhdGlvbiIsIm51bVRyaW1tZWRCeVplcm9zIiwiZGVjaW1hbEFkamFjZW50VG9MZWFkaW5nWmVyb3MiLCJudW0iLCJwYXJzZWRTdHIiLCJuIiwidG9OdW1iZXIiLCJpc0V4aXN0IiwicHJldHRpZnkiLCJjb21wcmVzcyIsImFyciIsInRleHQiLCJjb21wcmVzc2VkT2JqIiwidGFnT2JqIiwicHJvcGVydHkiLCJwcm9wTmFtZSIsIm5ld0pwYXRoIiwiaXNMZWFmIiwiaXNMZWFmVGFnIiwiYXNzaWduQXR0cmlidXRlcyIsImhhc093blByb3BlcnR5Iiwib2JqIiwiYXR0ck1hcCIsImpwYXRoIiwiYXRyck5hbWUiLCJwcm9wQ291bnQiLCJpc1doaXRlU3BhY2UiLCJjaGFyIiwicmVhZFBJIiwiZ2V0RXJyb3JPYmplY3QiLCJnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24iLCJyZWFkQ29tbWVudEFuZENEQVRBIiwicmVhZEF0dHJpYnV0ZVN0ciIsInRhZ0Nsb3NlZCIsInZhbGlkQXR0clN0clJlZ3hwIiwidmFsaWRhdGVBdHRyaWJ1dGVTdHJpbmciLCJhdHRyTmFtZXMiLCJnZXRQb3NpdGlvbkZyb21NYXRjaCIsInZhbGlkYXRlQXR0ck5hbWUiLCJ2YWxpZGF0ZUFtcGVyc2FuZCIsInJlIiwidmFsaWRhdGVOdW1iZXJBbXBlcnNhbmQiLCJjb3VudCIsImxpbmVOdW1iZXIiLCJtc2ciLCJsaW5lIiwiY29sIiwidmFsaWRhdGVUYWdOYW1lIiwibGluZXMiLCJwYXJzZXIiLCJidWlsZE9wdGlvbnMiLCJ2YWxpZGF0aW9uT3B0aW9uIiwidGFnRm91bmQiLCJyZWFjaGVkUm9vdCIsInRhZ1N0YXJ0UG9zIiwiY2xvc2luZ1RhZyIsImF0dHJTdHJTdGFydCIsImlzVmFsaWQiLCJvdGciLCJvcGVuUG9zIiwiYWZ0ZXJBbXAiLCJ0IiwidmFsaWRhdGUiLCJvcmRlcmVkT2JqUGFyc2VyIiwib3JkZXJlZFJlc3VsdCIsImFkZEVudGl0eSIsImdldFZhbHVlRnJvbVRleHROb2RlIiwicGFyc2VYbWxCb2R5IiwicGFyc2VkT2JqIiwieG1sU3RyaW5nIiwicGFyc2VkT2JqVG9SZXR1cm4iLCJwYXJzZVhtbEVycm9yQm9keSIsImJvb2xlYW5TZWxlY3RvciIsIkRlZmF1bHRSYXRlTGltaXRlciIsImN1cnJlbnRDYXBhY2l0eSIsImVuYWJsZWQiLCJsYXN0TWF4UmF0ZSIsIm1lYXN1cmVkVHhSYXRlIiwicmVxdWVzdENvdW50IiwibGFzdFRpbWVzdGFtcCIsInRpbWVXaW5kb3ciLCJiZXRhIiwibWluQ2FwYWNpdHkiLCJtaW5GaWxsUmF0ZSIsInNjYWxlQ29uc3RhbnQiLCJzbW9vdGgiLCJjdXJyZW50VGltZUluU2Vjb25kcyIsImdldEN1cnJlbnRUaW1lSW5TZWNvbmRzIiwibGFzdFRocm90dGxlVGltZSIsImxhc3RUeFJhdGVCdWNrZXQiLCJmbG9vciIsImZpbGxSYXRlIiwibWF4Q2FwYWNpdHkiLCJnZXRTZW5kVG9rZW4iLCJhY3F1aXJlVG9rZW5CdWNrZXQiLCJhbW91bnQiLCJyZWZpbGxUb2tlbkJ1Y2tldCIsInNldFRpbWVvdXRGbiIsInRpbWVzdGFtcCIsImZpbGxBbW91bnQiLCJtaW4iLCJ1cGRhdGVDbGllbnRTZW5kaW5nUmF0ZSIsImNhbGN1bGF0ZWRSYXRlIiwidXBkYXRlTWVhc3VyZWRSYXRlIiwicmF0ZVRvVXNlIiwiY2FsY3VsYXRlVGltZVdpbmRvdyIsImN1YmljVGhyb3R0bGUiLCJlbmFibGVUb2tlbkJ1Y2tldCIsImN1YmljU3VjY2VzcyIsIm5ld1JhdGUiLCJ1cGRhdGVUb2tlbkJ1Y2tldFJhdGUiLCJnZXRQcmVjaXNlIiwicG93IiwidGltZUJ1Y2tldCIsImN1cnJlbnRSYXRlIiwicGFyc2VGbG9hdCIsInRvRml4ZWQiLCJjcmVhdGVEZWZhdWx0UmV0cnlUb2tlbiIsInJldHJ5RGVsYXkiLCJyZXRyeUNvdW50IiwicmV0cnlDb3N0IiwiZ2V0UmV0cnlDb3N0IiwiU3RhbmRhcmRSZXRyeVN0cmF0ZWd5IiwiU1RBTkRBUkQiLCJjYXBhY2l0eSIsInJldHJ5QmFja29mZlN0cmF0ZWd5IiwiZGVsYXlCYXNlIiwiY29tcHV0ZU5leHRCYWNrb2ZmRGVsYXkiLCJyYW5kb20iLCJzZXREZWxheUJhc2UiLCJnZXREZWZhdWx0UmV0cnlCYWNrb2ZmU3RyYXRlZ3kiLCJtYXhBdHRlbXB0c1Byb3ZpZGVyIiwicmV0cnlUb2tlblNjb3BlIiwidG9rZW4iLCJnZXRNYXhBdHRlbXB0cyIsInNob3VsZFJldHJ5IiwiZGVsYXlGcm9tRXJyb3JUeXBlIiwiY2FwYWNpdHlDb3N0IiwiZ2V0Q2FwYWNpdHlDb3N0IiwiZ2V0Q2FwYWNpdHkiLCJ0b2tlblRvUmVuZXciLCJpc1JldHJ5YWJsZUVycm9yIiwiQWRhcHRpdmVSZXRyeVN0cmF0ZWd5IiwiQURBUFRJVkUiLCJyYXRlTGltaXRlciIsInN0YW5kYXJkUmV0cnlTdHJhdGVneSIsIkVOVl9NQVhfQVRURU1QVFMiLCJDT05GSUdfTUFYX0FUVEVNUFRTIiwiTk9ERV9NQVhfQVRURU1QVF9DT05GSUdfT1BUSU9OUyIsIm1heEF0dGVtcHQiLCJyZXNvbHZlUmV0cnlDb25maWciLCJfcmV0cnlNb2RlIiwiX21heEF0dGVtcHRzIiwiTk9ERV9SRVRSWV9NT0RFX0NPTkZJR19PUFRJT05TIiwiUHJvdmlkZXJFcnJvciIsInRyeU5leHRMaW5rIiwiZ2V0U2tld0NvcnJlY3RlZERhdGUiLCJzeXN0ZW1DbG9ja09mZnNldCIsImdldERhdGVIZWFkZXIiLCJnZXRVcGRhdGVkU3lzdGVtQ2xvY2tPZmZzZXQiLCJjbG9ja1RpbWUiLCJjdXJyZW50U3lzdGVtQ2xvY2tPZmZzZXQiLCJjbG9ja1RpbWVJbk1zIiwiYWJzIiwiaXNDbG9ja1NrZXdlZCIsInRocm93U2lnbmluZ1Byb3BlcnR5RXJyb3IiLCJBd3NTZGtTaWdWNFNpZ25lciIsInZhbGlkYXRlZFByb3BzIiwic2lnbmVyRnVuY3Rpb24iLCJ2YWxpZGF0ZVNpZ25pbmdQcm9wZXJ0aWVzIiwiaGFuZGxlckV4ZWN1dGlvbkNvbnRleHQiLCJmaXJzdCIsInNlY29uZCIsInNpZ25pbmdEYXRlIiwic2lnbmluZ1NlcnZpY2UiLCJzZXJ2ZXJUaW1lIiwiU2VydmVyVGltZSIsImluaXRpYWxTeXN0ZW1DbG9ja09mZnNldCIsImRhdGVIZWFkZXIiLCJFTlZfUFJPRklMRSIsImV4cGVjdE51bWJlciIsInBhcnNlZCIsInN0YWNrVHJhY2VXYXJuaW5nIiwiTUFYX0ZMT0FUIiwiY2VpbCIsImV4cGVjdEludDMyIiwiZXhwZWN0U2l6ZWRJbnQiLCJleHBlY3RlZCIsImlzSW50ZWdlciIsImV4cGVjdExvbmciLCJjYXN0SW50IiwiSW50MzJBcnJheSIsIm9mIiwiSW50MTZBcnJheSIsIkludDhBcnJheSIsImV4cGVjdE5vbk51bGwiLCJsb2NhdGlvbiIsImV4cGVjdE9iamVjdCIsInJlY2VpdmVkVHlwZSIsImV4cGVjdFN0cmluZyIsInN0cmljdFBhcnNlRG91YmxlIiwicGFyc2VOdW1iZXIiLCJzdHJpY3RQYXJzZUZsb2F0MzIiLCJleHBlY3RGbG9hdDMyIiwiTlVNQkVSX1JFR0VYIiwic3RyaWN0UGFyc2VJbnQzMiIsInN0cmljdFBhcnNlU2hvcnQiLCJleHBlY3RTaG9ydCIsInN0cmljdFBhcnNlQnl0ZSIsImV4cGVjdEJ5dGUiLCJzIiwiaG9tZURpckNhY2hlIiwiSE9NRSIsIlVTRVJQUk9GSUxFIiwiSE9NRVBBVEgiLCJIT01FRFJJVkUiLCJzZXAiLCJob21lRGlyQ2FjaGVLZXkiLCJnZXRldWlkIiwiaG9tZWRpciIsIkRFRkFVTFRfUkVUUllfREVMQVlfQkFTRSIsIk1BWElNVU1fUkVUUllfREVMQVkiLCJUSFJPVFRMSU5HX1JFVFJZX0RFTEFZX0JBU0UiLCJJTklUSUFMX1JFVFJZX1RPS0VOUyIsIlJFVFJZX0NPU1QiLCJUSU1FT1VUX1JFVFJZX0NPU1QiLCJOT19SRVRSWV9JTkNSRU1FTlQiLCJJTlZPQ0FUSU9OX0lEX0hFQURFUiIsIlJFUVVFU1RfSEVBREVSIiwiZGVidWdJZCIsInRvRGVidWdTdHJpbmciLCJyZWYiLCJhcmd2IiwiRW5kcG9pbnRFcnJvciIsImdldEF0dHIiLCJwYXRoTGlzdCIsInBhcnQiLCJzcXVhcmVCcmFja2V0SW5kZXgiLCJhcnJheUluZGV4IiwiZ2V0QXR0clBhdGhMaXN0IiwiRW5kcG9pbnRVUkxTY2hlbWUiLCJERUZBVUxUX1BPUlRTIiwiSFRUUCIsIkhUVFBTIiwiZW5kcG9pbnRGdW5jdGlvbnMiLCJib29sZWFuRXF1YWxzIiwidmFsdWUxIiwidmFsdWUyIiwiaXNTZXQiLCJub3QiLCJwYXJzZVVSTCIsIndoYXR3Z1VSTCIsInVybFN0cmluZyIsImlzSXAiLCJhdXRob3JpdHkiLCJub3JtYWxpemVkUGF0aCIsInN0cmluZ0VxdWFscyIsInN0b3AiLCJ1cmlFbmNvZGUiLCJldmFsdWF0ZVRlbXBsYXRlIiwidGVtcGxhdGUiLCJldmFsdWF0ZWRUZW1wbGF0ZUFyciIsInRlbXBsYXRlQ29udGV4dCIsInJlZmVyZW5jZVJlY29yZCIsImN1cnJlbnRJbmRleCIsIm9wZW5pbmdCcmFjZUluZGV4IiwiY2xvc2luZ0JyYWNlSW5kZXgiLCJwYXJhbWV0ZXJOYW1lIiwicmVmTmFtZSIsImV2YWx1YXRlRXhwcmVzc2lvbiIsImtleU5hbWUiLCJjYWxsRnVuY3Rpb24iLCJnZXRSZWZlcmVuY2VWYWx1ZSIsImV2YWx1YXRlZEFyZ3MiLCJmblNlZ21lbnRzIiwiZXZhbHVhdGVDb25kaXRpb24iLCJmbkFyZ3MiLCJ0b0Fzc2lnbiIsImV2YWx1YXRlQ29uZGl0aW9ucyIsImNvbmRpdGlvbnMiLCJjb25kaXRpb25zUmVmZXJlbmNlUmVjb3JkIiwiY29uZGl0aW9uIiwiZ2V0RW5kcG9pbnRIZWFkZXJzIiwiaGVhZGVyVmFsIiwiaGVhZGVyVmFsRW50cnkiLCJwcm9jZXNzZWRFeHByIiwiZ2V0RW5kcG9pbnRQcm9wZXJ0eSIsInByb3BlcnR5RW50cnkiLCJnZXRFbmRwb2ludFByb3BlcnRpZXMiLCJwcm9wZXJ0eUtleSIsInByb3BlcnR5VmFsIiwiZ2V0RW5kcG9pbnRVcmwiLCJlbmRwb2ludFVybCIsImV4cHJlc3Npb24iLCJldmFsdWF0ZUVuZHBvaW50UnVsZSIsImVuZHBvaW50UnVsZSIsImVuZHBvaW50UnVsZU9wdGlvbnMiLCJldmFsdWF0ZUVycm9yUnVsZSIsImVycm9yUnVsZSIsImV2YWx1YXRlVHJlZVJ1bGUiLCJ0cmVlUnVsZSIsInJ1bGVzIiwiZXZhbHVhdGVSdWxlcyIsInJ1bGUiLCJlbmRwb2ludE9yVW5kZWZpbmVkIiwicmVzb2x2ZUVuZHBvaW50IiwicnVsZVNldE9iamVjdCIsInBhcmFtZXRlcnMiLCJwYXJhbXNXaXRoRGVmYXVsdCIsInBhcmFtS2V5IiwicGFyYW1EZWZhdWx0VmFsdWUiLCJyZXF1aXJlZFBhcmFtcyIsInJlcXVpcmVkIiwicmVxdWlyZWRQYXJhbSIsIlNNSVRIWV9DT05URVhUX0tFWSIsIl9qc29uIiwiREVGQVVMVF9VQV9BUFBfSUQiLCJyZXNvbHZlVXNlckFnZW50Q29uZmlnIiwibm9ybWFsaXplZEFwcElkUHJvdmlkZXIiLCJ1c2VyQWdlbnRBcHBJZCIsImN1c3RvbVVzZXJBZ2VudCIsImFwcElkIiwiaXNWYWxpZFVzZXJBZ2VudEFwcElkIiwiSHR0cFJlcXVlc3QiLCJjYXJyeSIsInBhcmFtTmFtZSIsInBhcmFtIiwiUkVUUllfTU9ERVMiLCJERUZBVUxUX01BWF9BVFRFTVBUUyIsIkRFRkFVTFRfUkVUUllfTU9ERSIsImJ1ZiIsIkVuZHBvaW50Q2FjaGUiLCJwYXJhbXMiLCJyZXNvbHZlciIsImxvZ2dlck1pZGRsZXdhcmVPcHRpb25zIiwiZ2V0TG9nZ2VyUGx1Z2luIiwiY2xpZW50TmFtZSIsImNvbW1hbmROYW1lIiwiZHluYW1vRGJEb2N1bWVudENsaWVudE9wdGlvbnMiLCJvdmVycmlkZUlucHV0RmlsdGVyU2Vuc2l0aXZlTG9nIiwib3ZlcnJpZGVPdXRwdXRGaWx0ZXJTZW5zaXRpdmVMb2ciLCJpbnB1dEZpbHRlclNlbnNpdGl2ZUxvZyIsIm91dHB1dEZpbHRlclNlbnNpdGl2ZUxvZyIsIm91dHB1dFdpdGhvdXRNZXRhZGF0YSIsIkNsaWVudCIsIm1pZGRsZXdhcmVTdGFjayIsInNlbmQiLCJjb21tYW5kIiwib3B0aW9uc09yQ2IiLCJjYWNoZU1pZGRsZXdhcmUiLCJoYW5kbGVycyIsIldlYWtNYXAiLCJyZXNvbHZlTWlkZGxld2FyZSIsImV4dGVuZGVkRW5jb2RlVVJJQ29tcG9uZW50IiwicmVjdXJzaW9uRGV0ZWN0aW9uTWlkZGxld2FyZU9wdGlvbnMiLCJUUkFDRV9JRF9IRUFERVJfTkFNRSIsImdldFJlY3Vyc2lvbkRldGVjdGlvblBsdWdpbiIsInRyYWNlSWRIZWFkZXIiLCJoIiwiZnVuY3Rpb25OYW1lIiwidHJhY2VJZEZyb21FbnYiLCJ0cmFjZUlkIiwibm9uRW1wdHlTdHJpbmciLCJpc0lkZW50aXR5RXhwaXJlZCIsImRvZXNJZGVudGl0eVJlcXVpcmVSZWZyZXNoIiwiQU1aX0RBVEVfUVVFUllfUEFSQU0iLCJTSUdOQVRVUkVfUVVFUllfUEFSQU0iLCJUT0tFTl9RVUVSWV9QQVJBTSIsIkFVVEhfSEVBREVSIiwiQU1aX0RBVEVfSEVBREVSIiwiR0VORVJBVEVEX0hFQURFUlMiLCJTSUdOQVRVUkVfSEVBREVSIiwiU0hBMjU2X0hFQURFUiIsIlRPS0VOX0hFQURFUiIsIkFMV0FZU19VTlNJR05BQkxFX0hFQURFUlMiLCJhdXRob3JpemF0aW9uIiwiY29ubmVjdGlvbiIsInByYWdtYSIsInJlZmVyZXIiLCJ0ZSIsInRyYWlsZXIiLCJ1cGdyYWRlIiwiUFJPWFlfSEVBREVSX1BBVFRFUk4iLCJTRUNfSEVBREVSX1BBVFRFUk4iLCJBTEdPUklUSE1fSURFTlRJRklFUiIsIkVWRU5UX0FMR09SSVRITV9JREVOVElGSUVSIiwiS0VZX1RZUEVfSURFTlRJRklFUiIsInNpZ25pbmdLZXlDYWNoZSIsImNhY2hlUXVldWUiLCJjcmVhdGVTY29wZSIsInNob3J0RGF0ZSIsImhtYWMiLCJjdG9yIiwiZ2V0Q2Fub25pY2FsSGVhZGVycyIsInVuc2lnbmFibGVIZWFkZXJzIiwic2lnbmFibGVIZWFkZXJzIiwiY2Fub25pY2FsIiwiaGVhZGVyTmFtZSIsImNhbm9uaWNhbEhlYWRlck5hbWUiLCJnZXRQYXlsb2FkSGFzaCIsImhhc2hDb25zdHJ1Y3RvciIsImhhc2hDdG9yIiwiSEVBREVSX1ZBTFVFX1RZUEUiLCJIZWFkZXJGb3JtYXR0ZXIiLCJmb3JtYXQiLCJmb3JtYXRIZWFkZXJWYWx1ZSIsInBvc2l0aW9uIiwiaGVhZGVyIiwic2hvcnRWaWV3IiwiRGF0YVZpZXciLCJzZXRVaW50OCIsInNldEludDE2IiwiaW50VmlldyIsInNldEludDMyIiwibG9uZ0J5dGVzIiwiYmluVmlldyIsInNldFVpbnQxNiIsImJpbkJ5dGVzIiwidXRmOEJ5dGVzIiwic3RyVmlldyIsInN0ckJ5dGVzIiwidHNCeXRlcyIsIkludDY0IiwiZnJvbU51bWJlciIsInZhbHVlT2YiLCJVVUlEX1BBVFRFUk4iLCJ1dWlkQnl0ZXMiLCJudW1iZXIiLCJyZW1haW5pbmciLCJuZWdhdGUiLCJuZWdhdGl2ZSIsInByZXBhcmVSZXF1ZXN0IiwiU2lnbmF0dXJlVjRCYXNlIiwiYXBwbHlDaGVja3N1bSIsInNoYTI1NiIsInVyaUVzY2FwZVBhdGgiLCJyZWdpb25Qcm92aWRlciIsImNyZWRlbnRpYWxQcm92aWRlciIsImNyZWF0ZUNhbm9uaWNhbFJlcXVlc3QiLCJjYW5vbmljYWxIZWFkZXJzIiwicGF5bG9hZEhhc2giLCJzb3J0ZWRIZWFkZXJzIiwiZ2V0Q2Fub25pY2FsUGF0aCIsInNlcmlhbGl6ZWQiLCJlbmNvZGVkS2V5IiwiZ2V0Q2Fub25pY2FsUXVlcnkiLCJjcmVhdGVTdHJpbmdUb1NpZ24iLCJsb25nRGF0ZSIsImNhbm9uaWNhbFJlcXVlc3QiLCJoYXNoZWRSZXF1ZXN0Iiwibm9ybWFsaXplZFBhdGhTZWdtZW50cyIsInBhdGhTZWdtZW50IiwidmFsaWRhdGVSZXNvbHZlZENyZWRlbnRpYWxzIiwiZm9ybWF0RGF0ZSIsInRvRGF0ZSIsInRvSVNPU3RyaW5nIiwiZ2V0Q2Fub25pY2FsSGVhZGVyTGlzdCIsIlNpZ25hdHVyZVY0IiwiaGVhZGVyRm9ybWF0dGVyIiwicHJlc2lnbiIsIm9yaWdpbmFsUmVxdWVzdCIsImV4cGlyZXNJbiIsInVuaG9pc3RhYmxlSGVhZGVycyIsImhvaXN0YWJsZUhlYWRlcnMiLCJzY29wZSIsImxuYW1lIiwibW92ZUhlYWRlcnNUb1F1ZXJ5IiwiZ2V0U2lnbmF0dXJlIiwiZ2V0U2lnbmluZ0tleSIsInRvU2lnbiIsInNpZ25TdHJpbmciLCJzaWduRXZlbnQiLCJzaWduTWVzc2FnZSIsInNpZ25SZXF1ZXN0IiwicHJpb3JTaWduYXR1cmUiLCJoYXNoZWRQYXlsb2FkIiwiaGFzaGVkSGVhZGVycyIsInN0cmluZ1RvU2lnbiIsInNpZ25hYmxlTWVzc2FnZSIsInNpZ25hdHVyZSIsInJlcXVlc3RUb1NpZ24iLCJzb3VnaHRIZWFkZXIiLCJoYXNIZWFkZXIiLCJrZXlQcm9taXNlIiwic2hhMjU2Q29uc3RydWN0b3IiLCJjcmVkc0hhc2giLCJjYWNoZUtleSIsInNoaWZ0Iiwic2lnbmFibGUiLCJyZXNvbHZlQXdzU2RrU2lnVjRDb25maWciLCJyZXNvbHZlZENyZWRlbnRpYWxzIiwiaW5wdXRDcmVkZW50aWFscyIsImlzVXNlclN1cHBsaWVkIiwibWVtb2l6ZWRQcm92aWRlciIsImNyZWRlbnRpYWxEZWZhdWx0UHJvdmlkZXIiLCJjcmVkZW50aWFsc1Byb3ZpZGVyIiwibWVtb2l6ZWQiLCJub3JtYWxpemVkUHJvdmlkZXIiLCJtZW1vaXplSWRlbnRpdHlQcm92aWRlciIsInBhcmVudENsaWVudENvbmZpZyIsIm5vcm1hbGl6ZUNyZWRlbnRpYWxQcm92aWRlciIsImJvdW5kUHJvdmlkZXIiLCJjb25maWdCb3VuZCIsImNhbGxlckNsaWVudENvbmZpZyIsImJpbmRDYWxsZXJDb25maWciLCJhdHRyaWJ1dGVkIiwiY3JlZHMiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwic2lnbmluZ0VzY2FwZVBhdGgiLCJyZWdpb25JbmZvUHJvdmlkZXIiLCJyZWdpb25JbmZvIiwic2lnbmVyQ29uc3RydWN0b3IiLCJkZWZhdWx0U2lnbmluZ05hbWUiLCJTSE9SVF9UT19IRVgiLCJIRVhfVE9fU0hPUlQiLCJlbmNvZGVkQnl0ZSIsImZyb21IZXgiLCJ0b0hleCIsIl9fYXdzX3Nka19jb250ZXh0IiwiQUNDT1VOVF9JRF9FTkRQT0lOVF9SRUdFWCIsIlVTRVJfQUdFTlQiLCJYX0FNWl9VU0VSX0FHRU5UIiwiVUFfTkFNRV9FU0NBUEVfUkVHRVgiLCJVQV9WQUxVRV9FU0NBUEVfUkVHRVgiLCJlc2NhcGVVc2VyQWdlbnQiLCJ1c2VyQWdlbnRQYWlyIiwicHJlZml4U2VwYXJhdG9ySW5kZXgiLCJ1YU5hbWUiLCJnZXRVc2VyQWdlbnRNaWRkbGV3YXJlT3B0aW9ucyIsImdldFVzZXJBZ2VudFBsdWdpbiIsImRlZmF1bHRVc2VyQWdlbnQiLCJkZWZhdWx0VXNlckFnZW50UHJvdmlkZXIiLCJhY2NvdW50SWRFbmRwb2ludE1vZGUiLCJjaGVja0ZlYXR1cmVzIiwiYXdzQ29udGV4dCIsImVuY29kZUZlYXR1cmVzIiwic2RrVXNlckFnZW50VmFsdWUiLCJub3JtYWxVQVZhbHVlIiwic2VjdGlvbiIsInJ1bnRpbWUiLCJwcm92aWRlcnMiLCJsYXN0UHJvdmlkZXJFcnJvciIsImNvbGxlY3RCb2R5U3RyaW5nIiwidXRmOEVuY29kZXIiLCJjcmVhdGVEZWZhdWx0VXNlckFnZW50UHJvdmlkZXIiLCJjbGllbnRWZXJzaW9uIiwic2VjdGlvbnMiLCJwbGF0Zm9ybSIsInJlbGVhc2UiLCJ2ZXJzaW9ucyIsIkFXU19FWEVDVVRJT05fRU5WIiwiZGVyZWYiLCJzY2hlbWFSZWYiLCJUeXBlUmVnaXN0cnkiLCJuYW1lc3BhY2UiLCJzY2hlbWFzIiwiZXhjZXB0aW9ucyIsInJlZ2lzdHJpZXMiLCJyZWdpc3RlciIsInNoYXBlSWQiLCJzY2hlbWEiLCJxdWFsaWZpZWROYW1lIiwibm9ybWFsaXplU2hhcGVJZCIsImdldFNjaGVtYSIsInJlZ2lzdGVyRXJyb3IiLCJlcnJvclNjaGVtYSIsImdldEVycm9yQ3RvciIsImdldEJhc2VFeGNlcHRpb24iLCJwcmVkaWNhdGUiLCJjbGVhciIsImdldE5hbWVzcGFjZSIsImZvciIsImxocyIsImlzUHJvdG90eXBlIiwic3ltYm9sIiwiZ2V0TmFtZSIsIkxpc3RTY2hlbWEiLCJNYXBTY2hlbWEiLCJTQ0hFTUEiLCJCTE9CIiwiU1RSRUFNSU5HX0JMT0IiLCJCT09MRUFOIiwiU1RSSU5HIiwiTlVNRVJJQyIsIkJJR19JTlRFR0VSIiwiQklHX0RFQ0lNQUwiLCJET0NVTUVOVCIsIlRJTUVTVEFNUF9ERUZBVUxUIiwiVElNRVNUQU1QX0RBVEVfVElNRSIsIlRJTUVTVEFNUF9IVFRQX0RBVEUiLCJUSU1FU1RBTVBfRVBPQ0hfU0VDT05EUyIsIkxJU1RfTU9ESUZJRVIiLCJNQVBfTU9ESUZJRVIiLCJTaW1wbGVTY2hlbWEiLCJTdHJ1Y3R1cmVTY2hlbWEiLCJOb3JtYWxpemVkU2NoZW1hIiwibWVtYmVyTmFtZSIsInRyYWl0U3RhY2siLCJfcmVmIiwiX2lzTWVtYmVyU2NoZW1hIiwibWVtYmVyVHJhaXRzIiwidHJhaXRTZXQiLCJ0cmFuc2xhdGVUcmFpdHMiLCJjb21wdXRlZE1lbWJlclRyYWl0cyIsImdldE1lbWJlclRyYWl0cyIsIm5vcm1hbGl6ZWRUcmFpdHMiLCJ0cmFpdHMiLCJnZXRTY2hlbWFOYW1lIiwibnMiLCJnZXRNZXJnZWRUcmFpdHMiLCJpbmRpY2F0b3IiLCJ0cmFpdCIsIndpdGhOYW1lc3BhY2UiLCJnZXRNZW1iZXJOYW1lIiwiaXNNZW1iZXJTY2hlbWEiLCJpc1VuaXRTY2hlbWEiLCJpc0xpc3RTY2hlbWEiLCJpbm5lciIsImlzTWFwU2NoZW1hIiwiaXNTdHJ1Y3RTY2hlbWEiLCJpc0Jsb2JTY2hlbWEiLCJpc1RpbWVzdGFtcFNjaGVtYSIsImlzRG9jdW1lbnRTY2hlbWEiLCJpc1N0cmluZ1NjaGVtYSIsImlzQm9vbGVhblNjaGVtYSIsImlzTnVtZXJpY1NjaGVtYSIsImlzQmlnSW50ZWdlclNjaGVtYSIsImlzQmlnRGVjaW1hbFNjaGVtYSIsImlzU3RyZWFtaW5nIiwic3RyZWFtaW5nIiwiaXNJZGVtcG90ZW5jeVRva2VuIiwiaWRlbXBvdGVuY3lUb2tlbiIsImdldE93blRyYWl0cyIsImdldEtleVNjaGVtYSIsIm1lbWJlckZyb20iLCJrZXlTY2hlbWEiLCJnZXRWYWx1ZVNjaGVtYSIsImNvbGxlY3Rpb24iLCJ2YWx1ZVNjaGVtYSIsImhhc01lbWJlclNjaGVtYSIsIm1lbWJlciIsIm1lbWJlck5hbWVzIiwiZ2V0TWVtYmVyU2NoZW1hIiwic3RydWN0IiwibWVtYmVyU2NoZW1hIiwibWVtYmVyTGlzdCIsImdldE1lbWJlclNjaGVtYXMiLCJzdHJ1Y3RJdGVyYXRvciIsImlnbm9yZWQiLCJnZXRFdmVudFN0cmVhbU1lbWJlciIsIl9zY2hlbWEiLCJjb250YWluZXIiLCJTRU5TSVRJVkVfU1RSSU5HIiwic2NoZW1hTG9nRmlsdGVyIiwic2Vuc2l0aXZlIiwibmV3T2JqZWN0IiwibWVtYmVyTnMiLCJDb21tYW5kIiwiY2xhc3NCdWlsZGVyIiwiQ2xhc3NCdWlsZGVyIiwicmVzb2x2ZU1pZGRsZXdhcmVXaXRoQ29udGV4dCIsIm1pZGRsZXdhcmVGbiIsImFkZGl0aW9uYWxDb250ZXh0IiwiQ29tbWFuZEN0b3IiLCJjb21tYW5kSW5zdGFuY2UiLCJfaW5pdCIsIl9lcCIsIl9taWRkbGV3YXJlRm4iLCJfY29tbWFuZE5hbWUiLCJfY2xpZW50TmFtZSIsIl9hZGRpdGlvbmFsQ29udGV4dCIsIl9zbWl0aHlDb250ZXh0IiwiX2lucHV0RmlsdGVyU2Vuc2l0aXZlTG9nIiwiX291dHB1dEZpbHRlclNlbnNpdGl2ZUxvZyIsIl9zZXJpYWxpemVyIiwiX2Rlc2VyaWFsaXplciIsImVwIiwiZW5kcG9pbnRQYXJhbWV0ZXJJbnN0cnVjdGlvbnMiLCJtIiwibWlkZGxld2FyZVN1cHBsaWVyIiwib3BlcmF0aW9uIiwiZiIsImlucHV0RmlsdGVyIiwib3V0cHV0RmlsdGVyIiwic2VyIiwiZGUiLCJzYyIsIl9vcGVyYXRpb25TY2hlbWEiLCJvcGVyYXRpb25TY2hlbWEiLCJjbG9zdXJlIiwiQ29tbWFuZFJlZiIsIkVOVl9FTkRQT0lOVF9VUkwiLCJDT05GSUdfRU5EUE9JTlRfVVJMIiwic2VydmljZVN1ZmZpeFBhcnRzIiwidyIsInNlcnZpY2VFbmRwb2ludFVybCIsInNlcnZpY2VzIiwic2VydmljZXNTZWN0aW9uIiwic2VydmljZVByZWZpeFBhcnRzIiwiZ2V0RW5kcG9pbnRVcmxDb25maWciLCJWQUxJRF9IT1NUX0xBQkVMX1JFR0VYIiwibGFiZWxzIiwicmVxdWVzdEJ1aWxkZXIiLCJSZXF1ZXN0QnVpbGRlciIsInJlc29sdmVQYXRoU3RhY2siLCJiYXNlUGF0aCIsInJlc29sdmVQYXRoIiwiaG4iLCJicCIsInVyaUxhYmVsIiwicCIsImxhYmVsVmFsdWVQcm92aWRlciIsImlzR3JlZWR5TGFiZWwiLCJyZXNvbHZlZFBhdGgiLCJsYWJlbFZhbHVlIiwic2VnbWVudCIsInEiLCJmcm9tQXJyYXlCdWZmZXIiLCJfaW5wdXQiLCJOT0RFX0FQUF9JRF9DT05GSUdfT1BUSU9OUyIsIkFsZ29yaXRobUlkIiwiZ2V0RGVmYXVsdEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24iLCJjaGVja3N1bUFsZ29yaXRobXMiLCJhbGdvcml0aG1JZCIsImNoZWNrc3VtQ29uc3RydWN0b3IiLCJhZGRDaGVja3N1bUFsZ29yaXRobSIsImFsZ28iLCJzZXRSZXRyeVN0cmF0ZWd5IiwiZ2V0UmV0cnlDb25maWd1cmF0aW9uIiwicmVzb2x2ZURlZmF1bHRSdW50aW1lQ29uZmlnIiwiY2hlY2tzdW1BbGdvcml0aG0iLCJyZXRyeVN0cmF0ZWd5Q29uZmlndXJhdGlvbiIsInJlc29sdmVSZXRyeVJ1bnRpbWVDb25maWciLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJkZWZpbml0aW9uIiwibyIsImNodW5rSWQiLCJwcm9taXNlcyIsInUiLCJwcm9wIiwiciIsInRvU3RyaW5nVGFnIiwiaW5zdGFsbGVkQ2h1bmsiLCJtb3JlTW9kdWxlcyIsIm1vZHVsZXMiLCJjaHVua0lkcyIsImlkcyIsImluc3RhbGxDaHVuayIsImRlZmF1bHRDbG91ZFRyYWlsSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIiLCJkZWZhdWx0Q2xvdWRUcmFpbEh0dHBBdXRoU2NoZW1lUHJvdmlkZXIiLCJhdXRoUGFyYW1ldGVycyIsImNyZWF0ZUF3c0F1dGhTaWd2NEh0dHBBdXRoT3B0aW9uIiwiY29tbW9uUGFyYW1zIiwiVXNlRklQUyIsIlJlZ2lvbiIsIlVzZUR1YWxTdGFjayIsIkVOVl9JTURTX0RJU0FCTEVEIiwibXVsdGlwbGVDcmVkZW50aWFsU291cmNlV2FybmluZ0VtaXR0ZWQiLCJkZWZhdWx0UHJvdmlkZXIiLCJzc29TdGFydFVybCIsInNzb0FjY291bnRJZCIsInNzb1JlZ2lvbiIsInNzb1JvbGVOYW1lIiwic3NvU2Vzc2lvbiIsImZyb21TU08iLCJmcm9tSW5pIiwiZnJvbVByb2Nlc3MiLCJmcm9tVG9rZW5GaWxlIiwiRU5WX0NNRFNfRlVMTF9VUkkiLCJFTlZfQ01EU19SRUxBVElWRV9VUkkiLCJmcm9tQ29udGFpbmVyTWV0YWRhdGEiLCJmcm9tSW5zdGFuY2VNZXRhZGF0YSIsImZyb21IdHRwIiwicmVtb3RlUHJvdmlkZXIiLCJjcmVkZW50aWFsc1RyZWF0ZWRBc0V4cGlyZWQiLCJjcmVkZW50aWFsc1dpbGxOZWVkUmVmcmVzaCIsIngiLCJsIiwicnVsZVNldCIsImNhY2hlIiwiZGVmYXVsdEVuZHBvaW50UmVzb2x2ZXIiLCJDbG91ZFRyYWlsQ2xpZW50IiwiX2NvbmZpZ18wIiwiZGVmYXVsdENvbmZpZ1Byb3ZpZGVyIiwiY2xpZW50U2hhcmVkVmFsdWVzIiwiYXBpVmVyc2lvbiIsImJhc2U2NERlY29kZXIiLCJiYXNlNjRFbmNvZGVyIiwiZGlzYWJsZUhvc3RQcmVmaXgiLCJleHRlbnNpb25zIiwiaXBjIiwidXRmOERlY29kZXIiLCJsb2FkZXJDb25maWciLCJpbml0Q29uZmlnIiwiX2NvbmZpZ18xIiwiX2NvbmZpZ18yIiwiX2NvbmZpZ18zIiwiX2NvbmZpZ180IiwiX2NvbmZpZ181IiwiX2NvbmZpZ184IiwiZXh0ZW5zaW9uQ29uZmlndXJhdGlvbiIsIl9odHRwQXV0aFNjaGVtZXMiLCJfaHR0cEF1dGhTY2hlbWVQcm92aWRlciIsIl9jcmVkZW50aWFscyIsInNldEh0dHBBdXRoU2NoZW1lIiwiaHR0cEF1dGhTY2hlbWUiLCJzZXRIdHRwQXV0aFNjaGVtZVByb3ZpZGVyIiwic2V0Q3JlZGVudGlhbHMiLCJnZXRIdHRwQXV0aEV4dGVuc2lvbkNvbmZpZ3VyYXRpb24iLCJleHRlbnNpb24iLCJjb25maWd1cmUiLCJyZXNvbHZlUnVudGltZUV4dGVuc2lvbnMiLCJjb25maWdfMCIsInJlc29sdmVIdHRwQXV0aFNjaGVtZUNvbmZpZyIsIkNsb3VkVHJhaWxTZXJ2aWNlRXhjZXB0aW9uIiwiQWNjZXNzRGVuaWVkRXhjZXB0aW9uIiwib3B0cyIsIkFjY291bnRIYXNPbmdvaW5nSW1wb3J0RXhjZXB0aW9uIiwiQWNjb3VudE5vdEZvdW5kRXhjZXB0aW9uIiwiQWNjb3VudE5vdFJlZ2lzdGVyZWRFeGNlcHRpb24iLCJBY2NvdW50UmVnaXN0ZXJlZEV4Y2VwdGlvbiIsIkNoYW5uZWxBUk5JbnZhbGlkRXhjZXB0aW9uIiwiQ2hhbm5lbE5vdEZvdW5kRXhjZXB0aW9uIiwiQ2xvdWRUcmFpbEFSTkludmFsaWRFeGNlcHRpb24iLCJDb25mbGljdEV4Y2VwdGlvbiIsIkV2ZW50RGF0YVN0b3JlQVJOSW52YWxpZEV4Y2VwdGlvbiIsIkV2ZW50RGF0YVN0b3JlTm90Rm91bmRFeGNlcHRpb24iLCJJbmFjdGl2ZUV2ZW50RGF0YVN0b3JlRXhjZXB0aW9uIiwiSW52YWxpZFRhZ1BhcmFtZXRlckV4Y2VwdGlvbiIsIkludmFsaWRUcmFpbE5hbWVFeGNlcHRpb24iLCJOb01hbmFnZW1lbnRBY2NvdW50U0xSRXhpc3RzRXhjZXB0aW9uIiwiTm90T3JnYW5pemF0aW9uTWFzdGVyQWNjb3VudEV4Y2VwdGlvbiIsIk9wZXJhdGlvbk5vdFBlcm1pdHRlZEV4Y2VwdGlvbiIsIlJlc291cmNlTm90Rm91bmRFeGNlcHRpb24iLCJSZXNvdXJjZVR5cGVOb3RTdXBwb3J0ZWRFeGNlcHRpb24iLCJUYWdzTGltaXRFeGNlZWRlZEV4Y2VwdGlvbiIsIlVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uIiwiSW5hY3RpdmVRdWVyeUV4Y2VwdGlvbiIsIkludmFsaWRQYXJhbWV0ZXJFeGNlcHRpb24iLCJRdWVyeUlkTm90Rm91bmRFeGNlcHRpb24iLCJDYW5ub3REZWxlZ2F0ZU1hbmFnZW1lbnRBY2NvdW50RXhjZXB0aW9uIiwiQ2hhbm5lbEFscmVhZHlFeGlzdHNFeGNlcHRpb24iLCJDaGFubmVsRXhpc3RzRm9yRURTRXhjZXB0aW9uIiwiQ2hhbm5lbE1heExpbWl0RXhjZWVkZWRFeGNlcHRpb24iLCJJbnZhbGlkRXZlbnREYXRhU3RvcmVDYXRlZ29yeUV4Y2VwdGlvbiIsIkludmFsaWRTb3VyY2VFeGNlcHRpb24iLCJJbnN1ZmZpY2llbnRFbmNyeXB0aW9uUG9saWN5RXhjZXB0aW9uIiwiSW52YWxpZFF1ZXJ5U3RhdGVtZW50RXhjZXB0aW9uIiwiU2VydmljZVF1b3RhRXhjZWVkZWRFeGNlcHRpb24iLCJDbG91ZFRyYWlsQWNjZXNzTm90RW5hYmxlZEV4Y2VwdGlvbiIsIkV2ZW50RGF0YVN0b3JlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiIsIkV2ZW50RGF0YVN0b3JlTWF4TGltaXRFeGNlZWRlZEV4Y2VwdGlvbiIsIkluc3VmZmljaWVudERlcGVuZGVuY3lTZXJ2aWNlQWNjZXNzUGVybWlzc2lvbkV4Y2VwdGlvbiIsIkludmFsaWRFdmVudFNlbGVjdG9yc0V4Y2VwdGlvbiIsIkludmFsaWRLbXNLZXlJZEV4Y2VwdGlvbiIsIkttc0V4Y2VwdGlvbiIsIkttc0tleU5vdEZvdW5kRXhjZXB0aW9uIiwiT3JnYW5pemF0aW9uTm90SW5BbGxGZWF0dXJlc01vZGVFeGNlcHRpb24iLCJPcmdhbml6YXRpb25zTm90SW5Vc2VFeGNlcHRpb24iLCJDbG91ZFRyYWlsSW52YWxpZENsaWVudFRva2VuSWRFeGNlcHRpb24iLCJDbG91ZFdhdGNoTG9nc0RlbGl2ZXJ5VW5hdmFpbGFibGVFeGNlcHRpb24iLCJJbnN1ZmZpY2llbnRTM0J1Y2tldFBvbGljeUV4Y2VwdGlvbiIsIkluc3VmZmljaWVudFNuc1RvcGljUG9saWN5RXhjZXB0aW9uIiwiSW52YWxpZENsb3VkV2F0Y2hMb2dzTG9nR3JvdXBBcm5FeGNlcHRpb24iLCJJbnZhbGlkQ2xvdWRXYXRjaExvZ3NSb2xlQXJuRXhjZXB0aW9uIiwiSW52YWxpZFBhcmFtZXRlckNvbWJpbmF0aW9uRXhjZXB0aW9uIiwiSW52YWxpZFMzQnVja2V0TmFtZUV4Y2VwdGlvbiIsIkludmFsaWRTM1ByZWZpeEV4Y2VwdGlvbiIsIkludmFsaWRTbnNUb3BpY05hbWVFeGNlcHRpb24iLCJLbXNLZXlEaXNhYmxlZEV4Y2VwdGlvbiIsIk1heGltdW1OdW1iZXJPZlRyYWlsc0V4Y2VlZGVkRXhjZXB0aW9uIiwiUzNCdWNrZXREb2VzTm90RXhpc3RFeGNlcHRpb24iLCJUaHJvdHRsaW5nRXhjZXB0aW9uIiwiVHJhaWxBbHJlYWR5RXhpc3RzRXhjZXB0aW9uIiwiVHJhaWxOb3RQcm92aWRlZEV4Y2VwdGlvbiIsIkV2ZW50RGF0YVN0b3JlRmVkZXJhdGlvbkVuYWJsZWRFeGNlcHRpb24iLCJFdmVudERhdGFTdG9yZUhhc09uZ29pbmdJbXBvcnRFeGNlcHRpb24iLCJFdmVudERhdGFTdG9yZVRlcm1pbmF0aW9uUHJvdGVjdGVkRXhjZXB0aW9uIiwiUmVzb3VyY2VBUk5Ob3RWYWxpZEV4Y2VwdGlvbiIsIlJlc291cmNlUG9saWN5Tm90Rm91bmRFeGNlcHRpb24iLCJJbnZhbGlkSG9tZVJlZ2lvbkV4Y2VwdGlvbiIsIlRyYWlsTm90Rm91bmRFeGNlcHRpb24iLCJOb3RPcmdhbml6YXRpb25NYW5hZ2VtZW50QWNjb3VudEV4Y2VwdGlvbiIsIkNvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb24iLCJHZW5lcmF0ZVJlc3BvbnNlRXhjZXB0aW9uIiwiSW52YWxpZEV2ZW50RGF0YVN0b3JlU3RhdHVzRXhjZXB0aW9uIiwiSW1wb3J0Tm90Rm91bmRFeGNlcHRpb24iLCJJbnNpZ2h0Tm90RW5hYmxlZEV4Y2VwdGlvbiIsIkludmFsaWRNYXhSZXN1bHRzRXhjZXB0aW9uIiwiSW52YWxpZE5leHRUb2tlbkV4Y2VwdGlvbiIsIkludmFsaWRUaW1lUmFuZ2VFeGNlcHRpb24iLCJJbnZhbGlkVG9rZW5FeGNlcHRpb24iLCJJbnZhbGlkRGF0ZVJhbmdlRXhjZXB0aW9uIiwiSW52YWxpZFF1ZXJ5U3RhdHVzRXhjZXB0aW9uIiwiSW52YWxpZEV2ZW50Q2F0ZWdvcnlFeGNlcHRpb24iLCJJbnZhbGlkTG9va3VwQXR0cmlidXRlc0V4Y2VwdGlvbiIsIkluc3VmZmljaWVudElBTUFjY2Vzc1Blcm1pc3Npb25FeGNlcHRpb24iLCJJbnZhbGlkSW5zaWdodFNlbGVjdG9yc0V4Y2VwdGlvbiIsIlJlc291cmNlUG9saWN5Tm90VmFsaWRFeGNlcHRpb24iLCJEZWxlZ2F0ZWRBZG1pbkFjY291bnRMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uIiwiSW52YWxpZEltcG9ydFNvdXJjZUV4Y2VwdGlvbiIsIk1heENvbmN1cnJlbnRRdWVyaWVzRXhjZXB0aW9uIiwic2VfTG9va3VwRXZlbnRzQ29tbWFuZCIsInNlX0xvb2t1cEV2ZW50c1JlcXVlc3QiLCJidWlsZEh0dHBScGNSZXF1ZXN0IiwiZGVfTG9va3VwRXZlbnRzQ29tbWFuZCIsImRlX0NvbW1hbmRFcnJvciIsImNvbnRlbnRzIiwiZGVfTG9va3VwRXZlbnRzUmVzcG9uc2UiLCJwYXJzZWRPdXRwdXQiLCJkZV9DaGFubmVsQVJOSW52YWxpZEV4Y2VwdGlvblJlcyIsImRlX0NoYW5uZWxOb3RGb3VuZEV4Y2VwdGlvblJlcyIsImRlX0Nsb3VkVHJhaWxBUk5JbnZhbGlkRXhjZXB0aW9uUmVzIiwiZGVfQ29uZmxpY3RFeGNlcHRpb25SZXMiLCJkZV9FdmVudERhdGFTdG9yZUFSTkludmFsaWRFeGNlcHRpb25SZXMiLCJkZV9FdmVudERhdGFTdG9yZU5vdEZvdW5kRXhjZXB0aW9uUmVzIiwiZGVfSW5hY3RpdmVFdmVudERhdGFTdG9yZUV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRUYWdQYXJhbWV0ZXJFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkVHJhaWxOYW1lRXhjZXB0aW9uUmVzIiwiZGVfTm9NYW5hZ2VtZW50QWNjb3VudFNMUkV4aXN0c0V4Y2VwdGlvblJlcyIsImRlX05vdE9yZ2FuaXphdGlvbk1hc3RlckFjY291bnRFeGNlcHRpb25SZXMiLCJkZV9PcGVyYXRpb25Ob3RQZXJtaXR0ZWRFeGNlcHRpb25SZXMiLCJkZV9SZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uUmVzIiwiZGVfUmVzb3VyY2VUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uUmVzIiwiZGVfVGFnc0xpbWl0RXhjZWVkZWRFeGNlcHRpb25SZXMiLCJkZV9VbnN1cHBvcnRlZE9wZXJhdGlvbkV4Y2VwdGlvblJlcyIsImRlX0luYWN0aXZlUXVlcnlFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkUGFyYW1ldGVyRXhjZXB0aW9uUmVzIiwiZGVfUXVlcnlJZE5vdEZvdW5kRXhjZXB0aW9uUmVzIiwiZGVfQ2hhbm5lbEFscmVhZHlFeGlzdHNFeGNlcHRpb25SZXMiLCJkZV9DaGFubmVsTWF4TGltaXRFeGNlZWRlZEV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRFdmVudERhdGFTdG9yZUNhdGVnb3J5RXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZFNvdXJjZUV4Y2VwdGlvblJlcyIsImRlX0luc3VmZmljaWVudEVuY3J5cHRpb25Qb2xpY3lFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkUXVlcnlTdGF0ZW1lbnRFeGNlcHRpb25SZXMiLCJkZV9TZXJ2aWNlUXVvdGFFeGNlZWRlZEV4Y2VwdGlvblJlcyIsImRlX0Nsb3VkVHJhaWxBY2Nlc3NOb3RFbmFibGVkRXhjZXB0aW9uUmVzIiwiZGVfRXZlbnREYXRhU3RvcmVBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzIiwiZGVfRXZlbnREYXRhU3RvcmVNYXhMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uUmVzIiwiZGVfSW5zdWZmaWNpZW50RGVwZW5kZW5jeVNlcnZpY2VBY2Nlc3NQZXJtaXNzaW9uRXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZEV2ZW50U2VsZWN0b3JzRXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZEttc0tleUlkRXhjZXB0aW9uUmVzIiwiZGVfS21zRXhjZXB0aW9uUmVzIiwiZGVfS21zS2V5Tm90Rm91bmRFeGNlcHRpb25SZXMiLCJkZV9Pcmdhbml6YXRpb25Ob3RJbkFsbEZlYXR1cmVzTW9kZUV4Y2VwdGlvblJlcyIsImRlX09yZ2FuaXphdGlvbnNOb3RJblVzZUV4Y2VwdGlvblJlcyIsImRlX0Nsb3VkVHJhaWxJbnZhbGlkQ2xpZW50VG9rZW5JZEV4Y2VwdGlvblJlcyIsImRlX0Nsb3VkV2F0Y2hMb2dzRGVsaXZlcnlVbmF2YWlsYWJsZUV4Y2VwdGlvblJlcyIsImRlX0luc3VmZmljaWVudFMzQnVja2V0UG9saWN5RXhjZXB0aW9uUmVzIiwiZGVfSW5zdWZmaWNpZW50U25zVG9waWNQb2xpY3lFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkQ2xvdWRXYXRjaExvZ3NMb2dHcm91cEFybkV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRDbG91ZFdhdGNoTG9nc1JvbGVBcm5FeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkUGFyYW1ldGVyQ29tYmluYXRpb25FeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkUzNCdWNrZXROYW1lRXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZFMzUHJlZml4RXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZFNuc1RvcGljTmFtZUV4Y2VwdGlvblJlcyIsImRlX0ttc0tleURpc2FibGVkRXhjZXB0aW9uUmVzIiwiZGVfTWF4aW11bU51bWJlck9mVHJhaWxzRXhjZWVkZWRFeGNlcHRpb25SZXMiLCJkZV9TM0J1Y2tldERvZXNOb3RFeGlzdEV4Y2VwdGlvblJlcyIsImRlX1Rocm90dGxpbmdFeGNlcHRpb25SZXMiLCJkZV9UcmFpbEFscmVhZHlFeGlzdHNFeGNlcHRpb25SZXMiLCJkZV9UcmFpbE5vdFByb3ZpZGVkRXhjZXB0aW9uUmVzIiwiZGVfQ2hhbm5lbEV4aXN0c0ZvckVEU0V4Y2VwdGlvblJlcyIsImRlX0V2ZW50RGF0YVN0b3JlRmVkZXJhdGlvbkVuYWJsZWRFeGNlcHRpb25SZXMiLCJkZV9FdmVudERhdGFTdG9yZUhhc09uZ29pbmdJbXBvcnRFeGNlcHRpb25SZXMiLCJkZV9FdmVudERhdGFTdG9yZVRlcm1pbmF0aW9uUHJvdGVjdGVkRXhjZXB0aW9uUmVzIiwiZGVfUmVzb3VyY2VBUk5Ob3RWYWxpZEV4Y2VwdGlvblJlcyIsImRlX1Jlc291cmNlUG9saWN5Tm90Rm91bmRFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkSG9tZVJlZ2lvbkV4Y2VwdGlvblJlcyIsImRlX1RyYWlsTm90Rm91bmRFeGNlcHRpb25SZXMiLCJkZV9BY2NvdW50Tm90Rm91bmRFeGNlcHRpb25SZXMiLCJkZV9BY2NvdW50Tm90UmVnaXN0ZXJlZEV4Y2VwdGlvblJlcyIsImRlX05vdE9yZ2FuaXphdGlvbk1hbmFnZW1lbnRBY2NvdW50RXhjZXB0aW9uUmVzIiwiZGVfQWNjZXNzRGVuaWVkRXhjZXB0aW9uUmVzIiwiZGVfQ29uY3VycmVudE1vZGlmaWNhdGlvbkV4Y2VwdGlvblJlcyIsImRlX0dlbmVyYXRlUmVzcG9uc2VFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkRXZlbnREYXRhU3RvcmVTdGF0dXNFeGNlcHRpb25SZXMiLCJkZV9JbXBvcnROb3RGb3VuZEV4Y2VwdGlvblJlcyIsImRlX0luc2lnaHROb3RFbmFibGVkRXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZE1heFJlc3VsdHNFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkTmV4dFRva2VuRXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZFRpbWVSYW5nZUV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRUb2tlbkV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWREYXRlUmFuZ2VFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkUXVlcnlTdGF0dXNFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkRXZlbnRDYXRlZ29yeUV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRMb29rdXBBdHRyaWJ1dGVzRXhjZXB0aW9uUmVzIiwiZGVfSW5zdWZmaWNpZW50SUFNQWNjZXNzUGVybWlzc2lvbkV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRJbnNpZ2h0U2VsZWN0b3JzRXhjZXB0aW9uUmVzIiwiZGVfUmVzb3VyY2VQb2xpY3lOb3RWYWxpZEV4Y2VwdGlvblJlcyIsImRlX0FjY291bnRSZWdpc3RlcmVkRXhjZXB0aW9uUmVzIiwiZGVfQ2Fubm90RGVsZWdhdGVNYW5hZ2VtZW50QWNjb3VudEV4Y2VwdGlvblJlcyIsImRlX0RlbGVnYXRlZEFkbWluQWNjb3VudExpbWl0RXhjZWVkZWRFeGNlcHRpb25SZXMiLCJkZV9BY2NvdW50SGFzT25nb2luZ0ltcG9ydEV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRJbXBvcnRTb3VyY2VFeGNlcHRpb25SZXMiLCJkZV9NYXhDb25jdXJyZW50UXVlcmllc0V4Y2VwdGlvblJlcyIsImRlc2VyaWFsaXplZCIsIkVuZFRpbWUiLCJFdmVudENhdGVnb3J5IiwiTG9va3VwQXR0cmlidXRlcyIsIk1heFJlc3VsdHMiLCJOZXh0VG9rZW4iLCJTdGFydFRpbWUiLCJFdmVudHMiLCJyZXRWYWwiLCJBY2Nlc3NLZXlJZCIsIkNsb3VkVHJhaWxFdmVudCIsIkV2ZW50SWQiLCJFdmVudE5hbWUiLCJFdmVudFNvdXJjZSIsIkV2ZW50VGltZSIsIlJlYWRPbmx5IiwiUmVzb3VyY2VzIiwiVXNlcm5hbWUiLCJkZV9FdmVudCIsImRlX0V2ZW50c0xpc3QiLCJyZXNvbHZlZEhvc3RuYW1lIiwiTG9va3VwRXZlbnRzQ29tbWFuZCIsImNzIiwiZXZlbnQiLCJ1c2VySWRlbnRpdHkiLCJyb2xlIiwic2Vzc2lvbiIsImlhbVJvbGUiLCJzdHNTZXNzaW9uIiwiZXZlbnRUaW1lIiwiY2xvdWRUcmFpbENsaWVudCIsInJldHJpZXZlUXVpY2tTaWdodFVzZXJFdmVudHMiLCJzdGFydERhdGUiLCJldmVudHMiLCJuZXh0VG9rZW4iLCJsb29rdXBFdmVudHNDb21tYW5kIiwiQXR0cmlidXRlS2V5IiwiQXR0cmlidXRlVmFsdWUiLCJsb29rdXBFdmVudHNSZXN1bHQiLCJDbG91ZFRyYWlsVXNlckV2ZW50IiwiZ2V0TGFzdEFjY2Vzc0RhdGUiLCJ1c2VyIiwidGhpc1BhcnRpY3VsYXJVc2VyRXZlbnRzIiwibmV3ZXN0RXZlbnQiLCJkZWZhdWx0Q2xvdWRXYXRjaEh0dHBBdXRoU2NoZW1lUGFyYW1ldGVyc1Byb3ZpZGVyIiwiZGVmYXVsdENsb3VkV2F0Y2hIdHRwQXV0aFNjaGVtZVByb3ZpZGVyIiwiTk9ERV9ESVNBQkxFX1JFUVVFU1RfQ09NUFJFU1NJT05fQ09ORklHX09QVElPTlMiLCJudW1iZXJTZWxlY3RvciIsIm51bWJlclZhbHVlIiwiTk9ERV9SRVFVRVNUX01JTl9DT01QUkVTU0lPTl9TSVpFX0JZVEVTX0NPTkZJR19PUFRJT05TIiwieSIsInoiLCJBIiwiQiIsIkNsb3VkV2F0Y2hDbGllbnQiLCJkaXNhYmxlUmVxdWVzdENvbXByZXNzaW9uIiwicmVxdWVzdE1pbkNvbXByZXNzaW9uU2l6ZUJ5dGVzIiwiX2NvbmZpZ185IiwiX3JlcXVlc3RNaW5Db21wcmVzc2lvblNpemVCeXRlcyIsIlJhbmdlRXJyb3IiLCJyZXNvbHZlQ29tcHJlc3Npb25Db25maWciLCJjb21wcmVzc1N0cmVhbSIsImNyZWF0ZUd6aXAiLCJnemlwQXN5bmMiLCJwcm9taXNpZnkiLCJnemlwIiwiY29tcHJlc3NTdHJpbmciLCJjb21wcmVzc2VkQnVmZmVyIiwiQ29tcHJlc3Npb25BbGdvcml0aG0iLCJDTElFTlRfU1VQUE9SVEVEX0FMR09SSVRITVMiLCJHWklQIiwiY29tcHJlc3Npb25NaWRkbGV3YXJlT3B0aW9ucyIsImdldENvbXByZXNzaW9uUGx1Z2luIiwibWlkZGxld2FyZUNvbmZpZyIsImVuY29kaW5ncyIsInN0cmVhbVJlcXVpcmVzTGVuZ3RoIiwidXBkYXRlZEJvZHkiLCJ1cGRhdGVkSGVhZGVycyIsImFsZ29yaXRobSIsImlzUmVxdWVzdENvbXByZXNzZWQiLCJib2R5TGVuZ3RoIiwiY29tcHJlc3Npb25NaWRkbGV3YXJlIiwic2VyaWFsaXplRmxvYXQiLCJDbG91ZFdhdGNoU2VydmljZUV4Y2VwdGlvbiIsIkRhc2hib2FyZEludmFsaWRJbnB1dEVycm9yIiwiZGFzaGJvYXJkVmFsaWRhdGlvbk1lc3NhZ2VzIiwiUmVzb3VyY2VOb3RGb3VuZCIsIkludGVybmFsU2VydmljZUZhdWx0IiwiSW52YWxpZFBhcmFtZXRlclZhbHVlRXhjZXB0aW9uIiwiTWlzc2luZ1JlcXVpcmVkUGFyYW1ldGVyRXhjZXB0aW9uIiwiUmVzb3VyY2VUeXBlIiwiUmVzb3VyY2VJZCIsIkludmFsaWROZXh0VG9rZW4iLCJMaW1pdEV4Y2VlZGVkRXhjZXB0aW9uIiwiTGltaXRFeGNlZWRlZEZhdWx0IiwiSW52YWxpZEZvcm1hdEZhdWx0Iiwic2VfUHV0TWV0cmljRGF0YUNvbW1hbmQiLCJTSEFSRURfSEVBREVSUyIsImJ1aWxkRm9ybVVybGVuY29kZWRTdHJpbmciLCJzZV9QdXRNZXRyaWNEYXRhSW5wdXQiLCJfQSIsIl9QTUQiLCJfViIsImRlX1B1dE1ldHJpY0RhdGFDb21tYW5kIiwibG9hZFF1ZXJ5RXJyb3JDb2RlIiwiZGVfUmVzb3VyY2VOb3RGb3VuZFJlcyIsImRlX0ludGVybmFsU2VydmljZUZhdWx0UmVzIiwiZGVfSW52YWxpZFBhcmFtZXRlclZhbHVlRXhjZXB0aW9uUmVzIiwiZGVfTWlzc2luZ1JlcXVpcmVkUGFyYW1ldGVyRXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZE5leHRUb2tlblJlcyIsImRlX0xpbWl0RXhjZWVkZWRFeGNlcHRpb25SZXMiLCJkZV9MaW1pdEV4Y2VlZGVkRmF1bHRSZXMiLCJkZV9EYXNoYm9hcmRJbnZhbGlkSW5wdXRFcnJvclJlcyIsImRlX0ludmFsaWRGb3JtYXRGYXVsdFJlcyIsImRlX0NvbmN1cnJlbnRNb2RpZmljYXRpb25FeGNlcHRpb24iLCJkZV9Db25mbGljdEV4Y2VwdGlvbiIsImRlX0Rhc2hib2FyZEludmFsaWRJbnB1dEVycm9yIiwiZGVfSW50ZXJuYWxTZXJ2aWNlRmF1bHQiLCJkZV9JbnZhbGlkRm9ybWF0RmF1bHQiLCJkZV9JbnZhbGlkTmV4dFRva2VuIiwiZGVfSW52YWxpZFBhcmFtZXRlckNvbWJpbmF0aW9uRXhjZXB0aW9uIiwiZGVfSW52YWxpZFBhcmFtZXRlclZhbHVlRXhjZXB0aW9uIiwiZGVfTGltaXRFeGNlZWRlZEV4Y2VwdGlvbiIsImRlX0xpbWl0RXhjZWVkZWRGYXVsdCIsImRlX01pc3NpbmdSZXF1aXJlZFBhcmFtZXRlckV4Y2VwdGlvbiIsImRlX1Jlc291cmNlTm90Rm91bmQiLCJkZV9SZXNvdXJjZU5vdEZvdW5kRXhjZXB0aW9uIiwic2VfRGltZW5zaW9uIiwiX05hIiwiX1ZhIiwic2VfRW50aXR5TWV0cmljRGF0YSIsIl9FIiwibWVtYmVyRW50cmllcyIsIl9LQSIsImNvdW50ZXIiLCJzZV9FbnRpdHlLZXlBdHRyaWJ1dGVzTWFwIiwiX0F0Iiwic2VfRW50aXR5QXR0cmlidXRlc01hcCIsInNlX0VudGl0eSIsIl9NRCIsInNlX01ldHJpY0RhdGEiLCJNZXRyaWNEYXRhIiwic2VfTWV0cmljRGF0dW0iLCJfTU4iLCJfRCIsInNlX0RpbWVuc2lvbnMiLCJEaW1lbnNpb25zIiwiX1RpIiwiX1NWdCIsInNlX1N0YXRpc3RpY1NldCIsIl9WYWwiLCJzZV9WYWx1ZXMiLCJWYWx1ZXMiLCJfQyIsInNlX0NvdW50cyIsIkNvdW50cyIsIl9VIiwiX1NSIiwiX04iLCJfRU1EIiwic2VfRW50aXR5TWV0cmljRGF0YUxpc3QiLCJFbnRpdHlNZXRyaWNEYXRhIiwiX1NFViIsIl9TQ2EiLCJfU3UiLCJfTWkiLCJfTWEiLCJfTWVzIiwibWF5QmVBcnJheSIsIl9tZSIsIl9kVk0iLCJfbSIsImRlX0Rhc2hib2FyZFZhbGlkYXRpb25NZXNzYWdlcyIsIl9EUCIsImRlX0Rhc2hib2FyZFZhbGlkYXRpb25NZXNzYWdlIiwiX1JUIiwiX1JJIiwiZm9ybUVudHJpZXMiLCJQdXRNZXRyaWNEYXRhQ29tbWFuZCIsIm1ldHJpY0RhdGEiLCJjbG91ZFdhdGNoQ2xpZW50IiwicXVldWVNZXRyaWMiLCJtZXRyaWNEYXR1bSIsImVtaXRRdWV1ZWRNZXRyaWNzIiwicHV0TWV0cmljRGF0YUNvbW1hbmQiLCJOYW1lc3BhY2UiLCJBV1NfTEFNQkRBX0ZVTkNUSU9OX05BTUUiLCJkZWZhdWx0U0VTSHR0cEF1dGhTY2hlbWVQYXJhbWV0ZXJzUHJvdmlkZXIiLCJkZWZhdWx0U0VTSHR0cEF1dGhTY2hlbWVQcm92aWRlciIsIlNFU0NsaWVudCIsIlNFU1NlcnZpY2VFeGNlcHRpb24iLCJBY2NvdW50U2VuZGluZ1BhdXNlZEV4Y2VwdGlvbiIsIkFscmVhZHlFeGlzdHNFeGNlcHRpb24iLCJOYW1lIiwiQ2Fubm90RGVsZXRlRXhjZXB0aW9uIiwiUnVsZVNldERvZXNOb3RFeGlzdEV4Y2VwdGlvbiIsIkNvbmZpZ3VyYXRpb25TZXRBbHJlYWR5RXhpc3RzRXhjZXB0aW9uIiwiQ29uZmlndXJhdGlvblNldE5hbWUiLCJDb25maWd1cmF0aW9uU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiQ29uZmlndXJhdGlvblNldFNlbmRpbmdQYXVzZWRFeGNlcHRpb24iLCJJbnZhbGlkQ29uZmlndXJhdGlvblNldEV4Y2VwdGlvbiIsIkV2ZW50RGVzdGluYXRpb25BbHJlYWR5RXhpc3RzRXhjZXB0aW9uIiwiRXZlbnREZXN0aW5hdGlvbk5hbWUiLCJJbnZhbGlkQ2xvdWRXYXRjaERlc3RpbmF0aW9uRXhjZXB0aW9uIiwiSW52YWxpZEZpcmVob3NlRGVzdGluYXRpb25FeGNlcHRpb24iLCJJbnZhbGlkU05TRGVzdGluYXRpb25FeGNlcHRpb24iLCJJbnZhbGlkVHJhY2tpbmdPcHRpb25zRXhjZXB0aW9uIiwiVHJhY2tpbmdPcHRpb25zQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiIsIkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsSW52YWxpZENvbnRlbnRFeGNlcHRpb24iLCJDdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiIsIkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVOYW1lIiwiRnJvbUVtYWlsQWRkcmVzc05vdFZlcmlmaWVkRXhjZXB0aW9uIiwiRnJvbUVtYWlsQWRkcmVzcyIsIkludmFsaWRMYW1iZGFGdW5jdGlvbkV4Y2VwdGlvbiIsIkZ1bmN0aW9uQXJuIiwiSW52YWxpZFMzQ29uZmlndXJhdGlvbkV4Y2VwdGlvbiIsIkludmFsaWRTbnNUb3BpY0V4Y2VwdGlvbiIsIlRvcGljIiwiUnVsZURvZXNOb3RFeGlzdEV4Y2VwdGlvbiIsIkludmFsaWRUZW1wbGF0ZUV4Y2VwdGlvbiIsIlRlbXBsYXRlTmFtZSIsIkN1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb24iLCJFdmVudERlc3RpbmF0aW9uRG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiVHJhY2tpbmdPcHRpb25zRG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb24iLCJJbnZhbGlkRGVsaXZlcnlPcHRpb25zRXhjZXB0aW9uIiwiSW52YWxpZFBvbGljeUV4Y2VwdGlvbiIsIkludmFsaWRSZW5kZXJpbmdQYXJhbWV0ZXJFeGNlcHRpb24iLCJNYWlsRnJvbURvbWFpbk5vdFZlcmlmaWVkRXhjZXB0aW9uIiwiTWVzc2FnZVJlamVjdGVkIiwiTWlzc2luZ1JlbmRlcmluZ0F0dHJpYnV0ZUV4Y2VwdGlvbiIsIlByb2R1Y3Rpb25BY2Nlc3NOb3RHcmFudGVkRXhjZXB0aW9uIiwic2VfU2VuZEVtYWlsQ29tbWFuZCIsInNlX1NlbmRFbWFpbFJlcXVlc3QiLCJfU0UiLCJkZV9TZW5kRW1haWxDb21tYW5kIiwiZGVfU2VuZEVtYWlsUmVzcG9uc2UiLCJTZW5kRW1haWxSZXN1bHQiLCJkZV9BbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzIiwiZGVfUnVsZVNldERvZXNOb3RFeGlzdEV4Y2VwdGlvblJlcyIsImRlX0NvbmZpZ3VyYXRpb25TZXRBbHJlYWR5RXhpc3RzRXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZENvbmZpZ3VyYXRpb25TZXRFeGNlcHRpb25SZXMiLCJkZV9Db25maWd1cmF0aW9uU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzIiwiZGVfRXZlbnREZXN0aW5hdGlvbkFscmVhZHlFeGlzdHNFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkQ2xvdWRXYXRjaERlc3RpbmF0aW9uRXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZEZpcmVob3NlRGVzdGluYXRpb25FeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkU05TRGVzdGluYXRpb25FeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkVHJhY2tpbmdPcHRpb25zRXhjZXB0aW9uUmVzIiwiZGVfVHJhY2tpbmdPcHRpb25zQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlcyIsImRlX0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsSW52YWxpZENvbnRlbnRFeGNlcHRpb25SZXMiLCJkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlQWxyZWFkeUV4aXN0c0V4Y2VwdGlvblJlcyIsImRlX0Zyb21FbWFpbEFkZHJlc3NOb3RWZXJpZmllZEV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRMYW1iZGFGdW5jdGlvbkV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRTM0NvbmZpZ3VyYXRpb25FeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkU25zVG9waWNFeGNlcHRpb25SZXMiLCJkZV9SdWxlRG9lc05vdEV4aXN0RXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZFRlbXBsYXRlRXhjZXB0aW9uUmVzIiwiZGVfRXZlbnREZXN0aW5hdGlvbkRvZXNOb3RFeGlzdEV4Y2VwdGlvblJlcyIsImRlX1RyYWNraW5nT3B0aW9uc0RvZXNOb3RFeGlzdEV4Y2VwdGlvblJlcyIsImRlX0Nhbm5vdERlbGV0ZUV4Y2VwdGlvblJlcyIsImRlX0N1c3RvbVZlcmlmaWNhdGlvbkVtYWlsVGVtcGxhdGVEb2VzTm90RXhpc3RFeGNlcHRpb25SZXMiLCJkZV9UZW1wbGF0ZURvZXNOb3RFeGlzdEV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWREZWxpdmVyeU9wdGlvbnNFeGNlcHRpb25SZXMiLCJkZV9JbnZhbGlkUG9saWN5RXhjZXB0aW9uUmVzIiwiZGVfTWVzc2FnZVJlamVjdGVkUmVzIiwiZGVfQWNjb3VudFNlbmRpbmdQYXVzZWRFeGNlcHRpb25SZXMiLCJkZV9Db25maWd1cmF0aW9uU2V0U2VuZGluZ1BhdXNlZEV4Y2VwdGlvblJlcyIsImRlX01haWxGcm9tRG9tYWluTm90VmVyaWZpZWRFeGNlcHRpb25SZXMiLCJkZV9Qcm9kdWN0aW9uQWNjZXNzTm90R3JhbnRlZEV4Y2VwdGlvblJlcyIsImRlX0ludmFsaWRSZW5kZXJpbmdQYXJhbWV0ZXJFeGNlcHRpb25SZXMiLCJkZV9NaXNzaW5nUmVuZGVyaW5nQXR0cmlidXRlRXhjZXB0aW9uUmVzIiwiZGVfQWNjb3VudFNlbmRpbmdQYXVzZWRFeGNlcHRpb24iLCJkZV9BbHJlYWR5RXhpc3RzRXhjZXB0aW9uIiwiZGVfQ2Fubm90RGVsZXRlRXhjZXB0aW9uIiwiZGVfQ29uZmlndXJhdGlvblNldEFscmVhZHlFeGlzdHNFeGNlcHRpb24iLCJkZV9Db25maWd1cmF0aW9uU2V0RG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiZGVfQ29uZmlndXJhdGlvblNldFNlbmRpbmdQYXVzZWRFeGNlcHRpb24iLCJkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbEludmFsaWRDb250ZW50RXhjZXB0aW9uIiwiZGVfQ3VzdG9tVmVyaWZpY2F0aW9uRW1haWxUZW1wbGF0ZUFscmVhZHlFeGlzdHNFeGNlcHRpb24iLCJkZV9DdXN0b21WZXJpZmljYXRpb25FbWFpbFRlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiZGVfRXZlbnREZXN0aW5hdGlvbkFscmVhZHlFeGlzdHNFeGNlcHRpb24iLCJkZV9FdmVudERlc3RpbmF0aW9uRG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiZGVfRnJvbUVtYWlsQWRkcmVzc05vdFZlcmlmaWVkRXhjZXB0aW9uIiwiZGVfSW52YWxpZENsb3VkV2F0Y2hEZXN0aW5hdGlvbkV4Y2VwdGlvbiIsImRlX0ludmFsaWRDb25maWd1cmF0aW9uU2V0RXhjZXB0aW9uIiwiZGVfSW52YWxpZERlbGl2ZXJ5T3B0aW9uc0V4Y2VwdGlvbiIsImRlX0ludmFsaWRGaXJlaG9zZURlc3RpbmF0aW9uRXhjZXB0aW9uIiwiZGVfSW52YWxpZExhbWJkYUZ1bmN0aW9uRXhjZXB0aW9uIiwiZGVfSW52YWxpZFBvbGljeUV4Y2VwdGlvbiIsImRlX0ludmFsaWRSZW5kZXJpbmdQYXJhbWV0ZXJFeGNlcHRpb24iLCJkZV9JbnZhbGlkUzNDb25maWd1cmF0aW9uRXhjZXB0aW9uIiwiZGVfSW52YWxpZFNOU0Rlc3RpbmF0aW9uRXhjZXB0aW9uIiwiZGVfSW52YWxpZFNuc1RvcGljRXhjZXB0aW9uIiwiZGVfSW52YWxpZFRlbXBsYXRlRXhjZXB0aW9uIiwiZGVfSW52YWxpZFRyYWNraW5nT3B0aW9uc0V4Y2VwdGlvbiIsImRlX01haWxGcm9tRG9tYWluTm90VmVyaWZpZWRFeGNlcHRpb24iLCJkZV9NZXNzYWdlUmVqZWN0ZWQiLCJkZV9NaXNzaW5nUmVuZGVyaW5nQXR0cmlidXRlRXhjZXB0aW9uIiwiZGVfUHJvZHVjdGlvbkFjY2Vzc05vdEdyYW50ZWRFeGNlcHRpb24iLCJkZV9SdWxlRG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiZGVfUnVsZVNldERvZXNOb3RFeGlzdEV4Y2VwdGlvbiIsImRlX1RlbXBsYXRlRG9lc05vdEV4aXN0RXhjZXB0aW9uIiwiZGVfVHJhY2tpbmdPcHRpb25zQWxyZWFkeUV4aXN0c0V4Y2VwdGlvbiIsImRlX1RyYWNraW5nT3B0aW9uc0RvZXNOb3RFeGlzdEV4Y2VwdGlvbiIsInNlX0FkZHJlc3NMaXN0Iiwic2VfQ29udGVudCIsInNlX01lc3NhZ2VUYWciLCJfU28iLCJfVEFvIiwiVG9BZGRyZXNzZXMiLCJDY0FkZHJlc3NlcyIsIl9CQSIsIkJjY0FkZHJlc3NlcyIsInNlX0Rlc3RpbmF0aW9uIiwiX0IiLCJfSCIsInNlX0JvZHkiLCJzZV9NZXNzYWdlIiwiX1JUQSIsIlJlcGx5VG9BZGRyZXNzZXMiLCJfUlAiLCJfU0FvIiwiX1JQQSIsInNlX01lc3NhZ2VUYWdMaXN0IiwiVGFncyIsIl9DU04iLCJfQ1ZFVE4iLCJfRUROIiwiX0ZFQSIsIl9CdSIsIl9UbyIsIl9NSWUiLCJTZW5kRW1haWxDb21tYW5kIiwiUXVpY2tTaWdodFJvbGUiLCJzZXNDbGllbnQiLCJub0xhc3RBY2Nlc3NEYXRlIiwidG9Mb2NhbGVTdHJpbmciLCJub3RpZnlVc2VyIiwibGFzdEFjY2VzcyIsImRlbGV0ZURheXMiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJzdWJqZWN0IiwiYWNjb3VudEFsaWFzIiwiYXdzQWNjb3VudElkIiwiZW1haWwiLCJjb250YWN0Iiwic2VuZEVtYWlsQ29tbWFuZCIsIlNvdXJjZSIsIkRlc3RpbmF0aW9uIiwiY2MiLCJyZXBseVRvIiwiU291cmNlQXJuIiwic2VzQXJuIiwiU3ViamVjdCIsIkRhdGEiLCJCb2R5IiwiSHRtbCIsInF1aWNrU2lnaHRVc2VyIiwiQXJuIiwiRW1haWwiLCJSb2xlIiwiVXNlck5hbWUiLCJpbnZhbGlkIiwiZGVmYXVsdFF1aWNrU2lnaHRIdHRwQXV0aFNjaGVtZVBhcmFtZXRlcnNQcm92aWRlciIsImRlZmF1bHRRdWlja1NpZ2h0SHR0cEF1dGhTY2hlbWVQcm92aWRlciIsIlF1aWNrU2lnaHRDbGllbnQiLCJEYXRhU291cmNlUGFyYW1ldGVycyIsIkltYWdlU291cmNlIiwiUGh5c2ljYWxUYWJsZSIsIlF1aWNrU2lnaHRTZXJ2aWNlRXhjZXB0aW9uIiwiUmVxdWVzdElkIiwidmlzaXQiLCJ2aXNpdG9yIiwiQW1hem9uRWxhc3RpY3NlYXJjaFBhcmFtZXRlcnMiLCJBdGhlbmFQYXJhbWV0ZXJzIiwiQXVyb3JhUGFyYW1ldGVycyIsIkF1cm9yYVBvc3RncmVTcWxQYXJhbWV0ZXJzIiwiQXdzSW90QW5hbHl0aWNzUGFyYW1ldGVycyIsIkppcmFQYXJhbWV0ZXJzIiwiTWFyaWFEYlBhcmFtZXRlcnMiLCJNeVNxbFBhcmFtZXRlcnMiLCJPcmFjbGVQYXJhbWV0ZXJzIiwiUG9zdGdyZVNxbFBhcmFtZXRlcnMiLCJQcmVzdG9QYXJhbWV0ZXJzIiwiUmRzUGFyYW1ldGVycyIsIlJlZHNoaWZ0UGFyYW1ldGVycyIsIlMzUGFyYW1ldGVycyIsIlNlcnZpY2VOb3dQYXJhbWV0ZXJzIiwiU25vd2ZsYWtlUGFyYW1ldGVycyIsIlNwYXJrUGFyYW1ldGVycyIsIlNxbFNlcnZlclBhcmFtZXRlcnMiLCJUZXJhZGF0YVBhcmFtZXRlcnMiLCJUd2l0dGVyUGFyYW1ldGVycyIsIkFtYXpvbk9wZW5TZWFyY2hQYXJhbWV0ZXJzIiwiRXhhc29sUGFyYW1ldGVycyIsIkRhdGFicmlja3NQYXJhbWV0ZXJzIiwiU3RhcmJ1cnN0UGFyYW1ldGVycyIsIlRyaW5vUGFyYW1ldGVycyIsIkJpZ1F1ZXJ5UGFyYW1ldGVycyIsIkltcGFsYVBhcmFtZXRlcnMiLCJDdXN0b21Db25uZWN0aW9uUGFyYW1ldGVycyIsIiR1bmtub3duIiwiSW50ZXJuYWxGYWlsdXJlRXhjZXB0aW9uIiwiUHVibGljVXJsIiwiUzNVcmkiLCJSZXNvdXJjZUV4aXN0c0V4Y2VwdGlvbiIsIkNvbmN1cnJlbnRVcGRhdGluZ0V4Y2VwdGlvbiIsIlJlc291cmNlVW5hdmFpbGFibGVFeGNlcHRpb24iLCJQcmVjb25kaXRpb25Ob3RNZXRFeGNlcHRpb24iLCJVbnN1cHBvcnRlZFVzZXJFZGl0aW9uRXhjZXB0aW9uIiwiSW50ZXJuYWxTZXJ2ZXJFeGNlcHRpb24iLCJJbnZhbGlkUmVxdWVzdEV4Y2VwdGlvbiIsIlByb2plY3RPcGVyYXRpb24iLCJGaWx0ZXJPcGVyYXRpb24iLCJDcmVhdGVDb2x1bW5zT3BlcmF0aW9uIiwiUmVuYW1lQ29sdW1uT3BlcmF0aW9uIiwiQ2FzdENvbHVtblR5cGVPcGVyYXRpb24iLCJUYWdDb2x1bW5PcGVyYXRpb24iLCJVbnRhZ0NvbHVtbk9wZXJhdGlvbiIsIk92ZXJyaWRlRGF0YXNldFBhcmFtZXRlck9wZXJhdGlvbiIsIlJlbGF0aW9uYWxUYWJsZSIsIkN1c3RvbVNxbCIsIlMzU291cmNlIiwiQ3VzdG9tZXJNYW5hZ2VkS2V5VW5hdmFpbGFibGVFeGNlcHRpb24iLCJEb21haW5Ob3RXaGl0ZWxpc3RlZEV4Y2VwdGlvbiIsIlNlc3Npb25MaWZldGltZUluTWludXRlc0ludmFsaWRFeGNlcHRpb24iLCJVbnN1cHBvcnRlZFByaWNpbmdQbGFuRXhjZXB0aW9uIiwiUXVpY2tTaWdodFVzZXJOb3RGb3VuZEV4Y2VwdGlvbiIsIklkZW50aXR5VHlwZU5vdFN1cHBvcnRlZEV4Y2VwdGlvbiIsInNlX0RlbGV0ZVVzZXJDb21tYW5kIiwiQXdzQWNjb3VudElkIiwic2VfTGlzdFVzZXJzQ29tbWFuZCIsIl9udCIsIl9tciIsImRlX0RlbGV0ZVVzZXJDb21tYW5kIiwiZG9jIiwiU3RhdHVzIiwiZGVfTGlzdFVzZXJzQ29tbWFuZCIsIlVzZXJMaXN0IiwiZGVfSW50ZXJuYWxGYWlsdXJlRXhjZXB0aW9uUmVzIiwiZGVfUmVzb3VyY2VFeGlzdHNFeGNlcHRpb25SZXMiLCJkZV9SZXNvdXJjZVVuYXZhaWxhYmxlRXhjZXB0aW9uUmVzIiwiZGVfUHJlY29uZGl0aW9uTm90TWV0RXhjZXB0aW9uUmVzIiwiZGVfVW5zdXBwb3J0ZWRVc2VyRWRpdGlvbkV4Y2VwdGlvblJlcyIsImRlX0ludGVybmFsU2VydmVyRXhjZXB0aW9uUmVzIiwiZGVfSW52YWxpZFJlcXVlc3RFeGNlcHRpb25SZXMiLCJkZV9DdXN0b21lck1hbmFnZWRLZXlVbmF2YWlsYWJsZUV4Y2VwdGlvblJlcyIsImRlX0NvbmN1cnJlbnRVcGRhdGluZ0V4Y2VwdGlvblJlcyIsImRlX1Nlc3Npb25MaWZldGltZUluTWludXRlc0ludmFsaWRFeGNlcHRpb25SZXMiLCJkZV9VbnN1cHBvcnRlZFByaWNpbmdQbGFuRXhjZXB0aW9uUmVzIiwiZGVfUXVpY2tTaWdodFVzZXJOb3RGb3VuZEV4Y2VwdGlvblJlcyIsImRlX0RvbWFpbk5vdFdoaXRlbGlzdGVkRXhjZXB0aW9uUmVzIiwiZGVfSWRlbnRpdHlUeXBlTm90U3VwcG9ydGVkRXhjZXB0aW9uUmVzIiwiTGlzdFVzZXJzQ29tbWFuZCIsIkRlbGV0ZVVzZXJDb21tYW5kIiwicXVpY2tTaWdodENsaWVudCIsInJldHJpZXZlVXNlcnMiLCJxdWlja1NpZ2h0VXNlcnMiLCJsaXN0VXNlcnNDb21tYW5kIiwiUXVpY2tTaWdodFVzZXJNYW5hZ2VyIiwicXVpY2tTaWdodFVzZXJMaXN0UmVzcG9uc2UiLCJRdWlja1NpZ2h0VXNlciIsImRlbGV0ZVVzZXIiLCJkZWxldGVVc2VyQ29tbWFuZCIsIm5vdGlmeURheXMiLCJlbmFibGVOb3RpZmljYXRpb24iLCJkZWxldGVEYXRlIiwibm90aWZ5RGF0ZSIsInNldERhdGUiLCJnZXREYXRlIiwicXVpY2tTaWdodFVzZXJNYW5hZ2VyIiwiY2xvdWRUcmFpbFVzZXJFdmVudE1hbmFnZXIiLCJDbG91ZFRyYWlsVXNlckV2ZW50TWFuYWdlciIsIm5vdGlmaWNhdGlvbk1hbmFnZXIiLCJOb3RpZmljYXRpb25NYW5hZ2VyIiwiY2xvdWRXYXRjaE1ldHJpY0NsaWVudCIsIkNsb3VkV2F0Y2hNZXRyaWNDbGllbnQiLCJjbG91ZFRyYWlsVXNlckV2ZW50cyIsIk1ldHJpY05hbWUiLCJWYWx1ZSIsImludmFsaWRVc2VycyIsInVzZXJzRGVsZXRlZCIsIm5vdGlmaWNhdGlvbnNTZW50IiwiUkVBREVSIl0sInNvdXJjZVJvb3QiOiIifQ==