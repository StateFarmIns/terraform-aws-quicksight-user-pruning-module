// This file is committed because Terraform needs it to be there. Source code is in src folder
(()=>{var e,t={5122:(e,t,n)=>{"use strict";n.d(t,{I:()=>o});let s=!1;const o=e=>{e&&!s&&parseInt(e.substring(1,e.indexOf(".")))<18&&(s=!0,process.emitWarning("NodeDeprecationWarning: The AWS SDK for JavaScript (v3) will\nno longer support Node.js 16.x on January 6, 2025.\n\nTo continue receiving updates to AWS services, bug fixes, and security\nupdates please upgrade to a supported Node.js LTS version.\n\nMore information can be found at: https://a.co/74kJMmI"))}},6228:(e,t,n)=>{"use strict";n.d(t,{f2:()=>c});var s=n(5479);const o=e=>new Date(Date.now()+e),r=e=>s.cS.isInstance(e)?e.headers?.date??e.headers?.Date:void 0,a=(e,t)=>{const n=Date.parse(e);return((e,t)=>Math.abs(o(t).getTime()-e)>=3e5)(n,t)?n-Date.now():t},i=(e,t)=>{if(!t)throw new Error(`Property \`${e}\` is not resolved for AWS SDK SigV4Auth`);return t};class c{async sign(e,t,n){if(!s.Kd.isInstance(e))throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");const r=await(async e=>{const t=i("context",e.context),n=i("config",e.config),s=t.endpointV2?.properties?.authSchemes?.[0],o=i("signer",n.signer),r=await o(s),a=e?.signingRegion,c=e?.signingRegionSet,u=e?.signingName;return{config:n,signer:r,signingRegion:a,signingRegionSet:c,signingName:u}})(n),{config:a,signer:c}=r;let{signingRegion:u,signingName:l}=r;const d=n.context;if(d?.authSchemes?.length){const[e,t]=d.authSchemes;"sigv4a"===e?.name&&"sigv4"===t?.name&&(u=t?.signingRegion??u,l=t?.signingName??l)}return await c.sign(e,{signingDate:o(a.systemClockOffset),signingRegion:u,signingService:l})}errorHandler(e){return t=>{const n=t.ServerTime??r(t.$response);if(n){const s=i("config",e.config),o=s.systemClockOffset;s.systemClockOffset=a(n,s.systemClockOffset),s.systemClockOffset!==o&&t.$metadata&&(t.$metadata.clockSkewCorrected=!0)}throw t}}successHandler(e,t){const n=r(e);if(n){const e=i("config",t.config);e.systemClockOffset=a(n,e.systemClockOffset)}}}},3448:(e,t,n)=>{"use strict";n.d(t,{h:()=>L});var s=n(7503),o=n(8004),r=n(7135),a=n(2531),i=n(3197);const c="X-Amz-Date",u="X-Amz-Signature",l="X-Amz-Security-Token",d="authorization",p=c.toLowerCase(),h=[d,p,"date"],m=u.toLowerCase(),f="x-amz-content-sha256",g=l.toLowerCase(),y={authorization:!0,"cache-control":!0,connection:!0,expect:!0,from:!0,"keep-alive":!0,"max-forwards":!0,pragma:!0,referer:!0,te:!0,trailer:!0,"transfer-encoding":!0,upgrade:!0,"user-agent":!0,"x-amzn-trace-id":!0},w=/^proxy-/,E=/^sec-/,x="AWS4-HMAC-SHA256",b="AWS4-HMAC-SHA256-PAYLOAD",v="aws4_request",S={},P=[],I=(e,t,n)=>`${e}/${t}/${n}/${v}`,$=(e,t,n)=>{const s=new e(t);return s.update((0,i.Fo)(n)),s.digest()},O=({headers:e},t,n)=>{const s={};for(const o of Object.keys(e).sort()){if(null==e[o])continue;const r=o.toLowerCase();(r in y||t?.has(r)||w.test(r)||E.test(r))&&(!n||n&&!n.has(r))||(s[r]=e[o].trim().replace(/\s+/g," "))}return s};var A=n(3695);const N=async({headers:e,body:t},n)=>{for(const t of Object.keys(e))if(t.toLowerCase()===f)return e[t];if(null==t)return"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";if("string"==typeof t||ArrayBuffer.isView(t)||(0,A.m)(t)){const e=new n;return e.update((0,i.Fo)(t)),(0,o.n)(await e.digest())}return"UNSIGNED-PAYLOAD"};class T{format(e){const t=[];for(const n of Object.keys(e)){const s=(0,i.ar)(n);t.push(Uint8Array.from([s.byteLength]),s,this.formatHeaderValue(e[n]))}const n=new Uint8Array(t.reduce(((e,t)=>e+t.byteLength),0));let s=0;for(const e of t)n.set(e,s),s+=e.byteLength;return n}formatHeaderValue(e){switch(e.type){case"boolean":return Uint8Array.from([e.value?0:1]);case"byte":return Uint8Array.from([2,e.value]);case"short":const t=new DataView(new ArrayBuffer(3));return t.setUint8(0,3),t.setInt16(1,e.value,!1),new Uint8Array(t.buffer);case"integer":const n=new DataView(new ArrayBuffer(5));return n.setUint8(0,4),n.setInt32(1,e.value,!1),new Uint8Array(n.buffer);case"long":const s=new Uint8Array(9);return s[0]=5,s.set(e.value.bytes,1),s;case"binary":const r=new DataView(new ArrayBuffer(3+e.value.byteLength));r.setUint8(0,6),r.setUint16(1,e.value.byteLength,!1);const a=new Uint8Array(r.buffer);return a.set(e.value,3),a;case"string":const c=(0,i.ar)(e.value),u=new DataView(new ArrayBuffer(3+c.byteLength));u.setUint8(0,7),u.setUint16(1,c.byteLength,!1);const l=new Uint8Array(u.buffer);return l.set(c,3),l;case"timestamp":const d=new Uint8Array(9);return d[0]=8,d.set(R.fromNumber(e.value.valueOf()).bytes,1),d;case"uuid":if(!C.test(e.value))throw new Error(`Invalid UUID received: ${e.value}`);const p=new Uint8Array(17);return p[0]=9,p.set((0,o.a)(e.value.replace(/\-/g,"")),1),p}}}var M;!function(e){e[e.boolTrue=0]="boolTrue",e[e.boolFalse=1]="boolFalse",e[e.byte=2]="byte",e[e.short=3]="short",e[e.integer=4]="integer",e[e.long=5]="long",e[e.byteArray=6]="byteArray",e[e.string=7]="string",e[e.timestamp=8]="timestamp",e[e.uuid=9]="uuid"}(M||(M={}));const C=/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;class R{constructor(e){if(this.bytes=e,8!==e.byteLength)throw new Error("Int64 buffers must be exactly 8 bytes")}static fromNumber(e){if(e>0x8000000000000000||e<-0x8000000000000000)throw new Error(`${e} is too large (or, if negative, too small) to represent as an Int64`);const t=new Uint8Array(8);for(let n=7,s=Math.abs(Math.round(e));n>-1&&s>0;n--,s/=256)t[n]=s;return e<0&&k(t),new R(t)}valueOf(){const e=this.bytes.slice(0),t=128&e[0];return t&&k(e),parseInt((0,o.n)(e),16)*(t?-1:1)}toString(){return String(this.valueOf())}}function k(e){for(let t=0;t<8;t++)e[t]^=255;for(let t=7;t>-1&&(e[t]++,0===e[t]);t--);}var D=n(5479);const j=e=>{e=D.Kd.clone(e);for(const t of Object.keys(e.headers))h.indexOf(t.toLowerCase())>-1&&delete e.headers[t];return e};class F{constructor({applyChecksum:e,credentials:t,region:n,service:s,sha256:o,uriEscapePath:a=!0}){this.headerFormatter=new T,this.service=s,this.sha256=o,this.uriEscapePath=a,this.applyChecksum="boolean"!=typeof e||e,this.regionProvider=(0,r.t)(n),this.credentialProvider=(0,r.t)(t)}async presign(e,t={}){const{signingDate:n=new Date,expiresIn:s=3600,unsignableHeaders:o,unhoistableHeaders:r,signableHeaders:a,signingRegion:i,signingService:d}=t,p=await this.credentialProvider();this.validateResolvedCredentials(p);const h=i??await this.regionProvider(),{longDate:m,shortDate:f}=q(n);if(s>604800)return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");const g=I(f,h,d??this.service),y=((e,t={})=>{const{headers:n,query:s={}}=D.Kd.clone(e);for(const e of Object.keys(n)){const o=e.toLowerCase();"x-amz-"!==o.slice(0,6)||t.unhoistableHeaders?.has(o)||(s[e]=n[e],delete n[e])}return{...e,headers:n,query:s}})(j(e),{unhoistableHeaders:r});p.sessionToken&&(y.query[l]=p.sessionToken),y.query["X-Amz-Algorithm"]=x,y.query["X-Amz-Credential"]=`${p.accessKeyId}/${g}`,y.query[c]=m,y.query["X-Amz-Expires"]=s.toString(10);const w=O(y,o,a);return y.query["X-Amz-SignedHeaders"]=z(w),y.query[u]=await this.getSignature(m,g,this.getSigningKey(p,h,f,d),this.createCanonicalRequest(y,w,await N(e,this.sha256))),y}async sign(e,t){return"string"==typeof e?this.signString(e,t):e.headers&&e.payload?this.signEvent(e,t):e.message?this.signMessage(e,t):this.signRequest(e,t)}async signEvent({headers:e,payload:t},{signingDate:n=new Date,priorSignature:s,signingRegion:r,signingService:a}){const i=r??await this.regionProvider(),{shortDate:c,longDate:u}=q(n),l=I(c,i,a??this.service),d=await N({headers:{},body:t},this.sha256),p=new this.sha256;p.update(e);const h=(0,o.n)(await p.digest()),m=[b,u,l,s,h,d].join("\n");return this.signString(m,{signingDate:n,signingRegion:i,signingService:a})}async signMessage(e,{signingDate:t=new Date,signingRegion:n,signingService:s}){return this.signEvent({headers:this.headerFormatter.format(e.message.headers),payload:e.message.body},{signingDate:t,signingRegion:n,signingService:s,priorSignature:e.priorSignature}).then((t=>({message:e.message,signature:t})))}async signString(e,{signingDate:t=new Date,signingRegion:n,signingService:s}={}){const r=await this.credentialProvider();this.validateResolvedCredentials(r);const a=n??await this.regionProvider(),{shortDate:c}=q(t),u=new this.sha256(await this.getSigningKey(r,a,c,s));return u.update((0,i.Fo)(e)),(0,o.n)(await u.digest())}async signRequest(e,{signingDate:t=new Date,signableHeaders:n,unsignableHeaders:s,signingRegion:o,signingService:r}={}){const a=await this.credentialProvider();this.validateResolvedCredentials(a);const i=o??await this.regionProvider(),c=j(e),{longDate:u,shortDate:l}=q(t),h=I(l,i,r??this.service);c.headers[p]=u,a.sessionToken&&(c.headers[g]=a.sessionToken);const m=await N(c,this.sha256);!((e,t)=>{e=e.toLowerCase();for(const n of Object.keys(t))if(e===n.toLowerCase())return!0;return!1})(f,c.headers)&&this.applyChecksum&&(c.headers[f]=m);const y=O(c,s,n),w=await this.getSignature(u,h,this.getSigningKey(a,i,l,r),this.createCanonicalRequest(c,y,m));return c.headers[d]=`${x} Credential=${a.accessKeyId}/${h}, SignedHeaders=${z(y)}, Signature=${w}`,c}createCanonicalRequest(e,t,n){const s=Object.keys(t).sort();return`${e.method}\n${this.getCanonicalPath(e)}\n${(({query:e={}})=>{const t=[],n={};for(const s of Object.keys(e).sort()){if(s.toLowerCase()===m)continue;t.push(s);const o=e[s];"string"==typeof o?n[s]=`${(0,a.o)(s)}=${(0,a.o)(o)}`:Array.isArray(o)&&(n[s]=o.slice(0).reduce(((e,t)=>e.concat([`${(0,a.o)(s)}=${(0,a.o)(t)}`])),[]).sort().join("&"))}return t.map((e=>n[e])).filter((e=>e)).join("&")})(e)}\n${s.map((e=>`${e}:${t[e]}`)).join("\n")}\n\n${s.join(";")}\n${n}`}async createStringToSign(e,t,n){const s=new this.sha256;s.update((0,i.Fo)(n));const r=await s.digest();return`${x}\n${e}\n${t}\n${(0,o.n)(r)}`}getCanonicalPath({path:e}){if(this.uriEscapePath){const t=[];for(const n of e.split("/"))0!==n?.length&&"."!==n&&(".."===n?t.pop():t.push(n));const n=`${e?.startsWith("/")?"/":""}${t.join("/")}${t.length>0&&e?.endsWith("/")?"/":""}`;return(0,a.o)(n).replace(/%2F/g,"/")}return e}async getSignature(e,t,n,s){const r=await this.createStringToSign(e,t,s),a=new this.sha256(await n);return a.update((0,i.Fo)(r)),(0,o.n)(await a.digest())}getSigningKey(e,t,n,s){return(async(e,t,n,s,r)=>{const a=await $(e,t.secretAccessKey,t.accessKeyId),i=`${n}:${s}:${r}:${(0,o.n)(a)}:${t.sessionToken}`;if(i in S)return S[i];for(P.push(i);P.length>50;)delete S[P.shift()];let c=`AWS4${t.secretAccessKey}`;for(const t of[n,s,r,v])c=await $(e,c,t);return S[i]=c})(this.sha256,e,n,t,s||this.service)}validateResolvedCredentials(e){if("object"!=typeof e||"string"!=typeof e.accessKeyId||"string"!=typeof e.secretAccessKey)throw new Error("Resolved credential object is not valid")}}const q=e=>{const t=(n=e,(e=>"number"==typeof e?new Date(1e3*e):"string"==typeof e?Number(e)?new Date(1e3*Number(e)):new Date(e):e)(n).toISOString().replace(/\.\d{3}Z$/,"Z")).replace(/[\-:]/g,"");var n;return{longDate:t,shortDate:t.slice(0,8)}},z=e=>Object.keys(e).sort().join(";"),L=e=>{let t;e.credentials&&(t=(0,s.K4)(e.credentials,s.OC,s.e)),t||(t=e.credentialDefaultProvider?(0,s.te)(e.credentialDefaultProvider(Object.assign({},e,{parentClientConfig:e}))):async()=>{throw new Error("`credentials` is missing")});const{signingEscapePath:n=!0,systemClockOffset:o=e.systemClockOffset||0,sha256:r}=e;let a;return a=e.signer?(0,s.te)(e.signer):e.regionInfoProvider?()=>(0,s.te)(e.region)().then((async t=>[await e.regionInfoProvider(t,{useFipsEndpoint:await e.useFipsEndpoint(),useDualstackEndpoint:await e.useDualstackEndpoint()})||{},t])).then((([s,o])=>{const{signingRegion:a,signingService:i}=s;e.signingRegion=e.signingRegion||a||o,e.signingName=e.signingName||i||e.serviceId;const c={...e,credentials:t,region:e.signingRegion,service:e.signingName,sha256:r,uriEscapePath:n};return new(e.signerConstructor||F)(c)})):async o=>{const a=(o=Object.assign({},{name:"sigv4",signingName:e.signingName||e.defaultSigningName,signingRegion:await(0,s.te)(e.region)(),properties:{}},o)).signingRegion,i=o.signingName;e.signingRegion=e.signingRegion||a,e.signingName=e.signingName||i||e.serviceId;const c={...e,credentials:t,region:e.signingRegion,service:e.signingName,sha256:r,uriEscapePath:n};return new(e.signerConstructor||F)(c)},{...e,systemClockOffset:o,signingEscapePath:n,credentials:t,signer:a}}},8218:(e,t,n)=>{"use strict";n.d(t,{w:()=>o});var s=n(8156);const o=(e,t)=>(0,s.Px)(e,t).then((e=>t.utf8Encoder(e)))},1919:(e,t,n)=>{"use strict";n.d(t,{CG:()=>r,Y2:()=>o,cJ:()=>a});var s=n(8218);const o=(e,t)=>(0,s.w)(e,t).then((e=>{if(e.length)try{return JSON.parse(e)}catch(t){throw"SyntaxError"===t?.name&&Object.defineProperty(t,"$responseBodyText",{value:e}),t}return{}})),r=async(e,t)=>{const n=await o(e,t);return n.message=n.message??n.Message,n},a=(e,t)=>{const n=e=>{let t=e;return"number"==typeof t&&(t=t.toString()),t.indexOf(",")>=0&&(t=t.split(",")[0]),t.indexOf(":")>=0&&(t=t.split(":")[0]),t.indexOf("#")>=0&&(t=t.split("#")[1]),t},s=(o=e.headers,Object.keys(o).find((e=>e.toLowerCase()==="x-amzn-errortype".toLowerCase())));var o;return void 0!==s?n(e.headers[s]):void 0!==t.code?n(t.code):void 0!==t.__type?n(t.__type):void 0}},5469:(e,t,n)=>{"use strict";n.d(t,{FI:()=>i,t_:()=>a});var s=n(8156),o=n(6454),r=n(8218);const a=(e,t)=>(0,r.w)(e,t).then((e=>{if(e.length){const t=new o.XMLParser({attributeNamePrefix:"",htmlEntities:!0,ignoreAttributes:!1,ignoreDeclaration:!0,parseTagValue:!1,trimValues:!1,tagValueProcessor:(e,t)=>""===t.trim()&&t.includes("\n")?"":void 0});let n;t.addEntity("#xD","\r"),t.addEntity("#10","\n");try{n=t.parse(e,!0)}catch(t){throw t&&"object"==typeof t&&Object.defineProperty(t,"$responseBodyText",{value:e}),t}const r="#text",a=Object.keys(n)[0],i=n[a];return i[r]&&(i[a]=i[r],delete i[r]),(0,s.rm)(i)}return{}})),i=async(e,t)=>{const n=await a(e,t);return n.Error&&(n.Error.message=n.Error.message??n.Error.Message),n}},904:(e,t,n)=>{"use strict";n.d(t,{yG:()=>o,pi:()=>r,fromEnv:()=>a});var s=n(8112);const o="AWS_ACCESS_KEY_ID",r="AWS_SECRET_ACCESS_KEY",a=e=>async()=>{e?.logger?.debug("@aws-sdk/credential-provider-env - fromEnv");const t=process.env[o],n=process.env[r],a=process.env.AWS_SESSION_TOKEN,i=process.env.AWS_CREDENTIAL_EXPIRATION,c=process.env.AWS_CREDENTIAL_SCOPE,u=process.env.AWS_ACCOUNT_ID;if(t&&n)return{accessKeyId:t,secretAccessKey:n,...a&&{sessionToken:a},...i&&{expiration:new Date(i)},...c&&{credentialScope:c},...u&&{accountId:u}};throw new s.C1("Unable to find environment variable credentials.",{logger:e?.logger})}},8257:(e,t,n)=>{"use strict";n.d(t,{v6:()=>i});var s=n(904),o=n(8112),r=n(2792);let a=!1;const i=(e={})=>(0,o.Bj)((0,o.cy)((async()=>{if(e.profile??process.env[r.Ch])throw process.env[s.yG]&&process.env[s.pi]&&!a&&((e.logger?.warn&&"NoOpLogger"!==e.logger?.constructor?.name?e.logger.warn:console.warn)("@aws-sdk/credential-provider-node - defaultProvider::fromEnv WARNING:\n    Multiple credential sources detected: \n    Both AWS_PROFILE and the pair AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY static credentials are set.\n    This SDK will proceed with the AWS_PROFILE value.\n    \n    However, a future version may change this behavior to prefer the ENV static credentials.\n    Please ensure that your environment only sets either the AWS_PROFILE or the\n    AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY pair.\n"),a=!0),new o.C1("AWS_PROFILE is set, skipping fromEnv provider.",{logger:e.logger,tryNextLink:!0});return e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromEnv"),(0,s.fromEnv)(e)()}),(async()=>{e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromSSO");const{ssoStartUrl:t,ssoAccountId:s,ssoRegion:r,ssoRoleName:a,ssoSession:i}=e;if(!(t||s||r||a||i))throw new o.C1("Skipping SSO provider in default chain (inputs do not include SSO fields).",{logger:e.logger});const{fromSSO:c}=await n.e(791).then(n.bind(n,9791));return c(e)()}),(async()=>{e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromIni");const{fromIni:t}=await n.e(789).then(n.bind(n,2789));return t(e)()}),(async()=>{e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromProcess");const{fromProcess:t}=await n.e(109).then(n.bind(n,5109));return t(e)()}),(async()=>{e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromTokenFile");const{fromTokenFile:t}=await n.e(819).then(n.bind(n,7819));return t(e)()}),(async()=>(e.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::remoteProvider"),(await(async e=>{const{ENV_CMDS_FULL_URI:t,ENV_CMDS_RELATIVE_URI:s,fromContainerMetadata:r,fromInstanceMetadata:a}=await n.e(897).then(n.bind(n,7897));if(process.env[s]||process.env[t]){e.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromHttp/fromContainerMetadata");const{fromHttp:t}=await n.e(610).then(n.bind(n,3610));return(0,o.cy)(t(e),r(e))}return process.env.AWS_EC2_METADATA_DISABLED?async()=>{throw new o.C1("EC2 Instance Metadata Service access disabled",{logger:e.logger})}:(e.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromInstanceMetadata"),a(e))})(e))())),(async()=>{throw new o.C1("Could not load credentials from any providers",{tryNextLink:!1,logger:e.logger})})),u,c),c=e=>void 0!==e?.expiration,u=e=>void 0!==e?.expiration&&e.expiration.getTime()-Date.now()<3e5},1095:(e,t,n)=>{"use strict";n.d(t,{OV:()=>o,TC:()=>a});var s=n(5479);function o(e){return e}const r={name:"hostHeaderMiddleware",step:"build",priority:"low",tags:["HOST"],override:!0},a=e=>({applyToStack:t=>{t.add((e=>t=>async n=>{if(!s.Kd.isInstance(n.request))return t(n);const{request:o}=n,{handlerProtocol:r=""}=e.requestHandler.metadata||{};if(r.indexOf("h2")>=0&&!o.headers[":authority"])delete o.headers.host,o.headers[":authority"]=o.hostname+(o.port?":"+o.port:"");else if(!o.headers.host){let e=o.hostname;null!=o.port&&(e+=`:${o.port}`),o.headers.host=e}return t(n)})(e),r)}})},9359:(e,t,n)=>{"use strict";n.d(t,{Y7:()=>o});const s={name:"loggerMiddleware",tags:["LOGGER"],step:"initialize",override:!0},o=e=>({applyToStack:e=>{e.add(((e,t)=>async n=>{try{const s=await e(n),{clientName:o,commandName:r,logger:a,dynamoDbDocumentClientOptions:i={}}=t,{overrideInputFilterSensitiveLog:c,overrideOutputFilterSensitiveLog:u}=i,l=c??t.inputFilterSensitiveLog,d=u??t.outputFilterSensitiveLog,{$metadata:p,...h}=s.output;return a?.info?.({clientName:o,commandName:r,input:l(n.input),output:d(h),metadata:p}),s}catch(e){const{clientName:s,commandName:o,logger:r,dynamoDbDocumentClientOptions:a={}}=t,{overrideInputFilterSensitiveLog:i}=a,c=i??t.inputFilterSensitiveLog;throw r?.error?.({clientName:s,commandName:o,input:c(n.input),error:e,metadata:e.$metadata}),e}}),s)}})},8377:(e,t,n)=>{"use strict";n.d(t,{n4:()=>a});var s=n(5479);const o="X-Amzn-Trace-Id",r={step:"build",tags:["RECURSION_DETECTION"],name:"recursionDetectionMiddleware",override:!0,priority:"low"},a=e=>({applyToStack:t=>{t.add((e=>t=>async n=>{const{request:r}=n;if(!s.Kd.isInstance(r)||"node"!==e.runtime||r.headers.hasOwnProperty(o))return t(n);const a=process.env.AWS_LAMBDA_FUNCTION_NAME,i=process.env._X_AMZN_TRACE_ID,c=e=>"string"==typeof e&&e.length>0;return c(a)&&c(i)&&(r.headers[o]=i),t({...n,request:r})})(e),r)}})},499:(e,t,n)=>{"use strict";function s(e){return{...e,customUserAgent:"string"==typeof e.customUserAgent?[[e.customUserAgent]]:e.customUserAgent}}n.d(t,{sM:()=>p,Dc:()=>s});var o=n(6652),r=n(5479);const a="user-agent",i="x-amz-user-agent",c=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g,u=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g,l=e=>{const t=e[0].split("/").map((e=>e.replace(c,"-"))).join("/"),n=e[1]?.replace(u,"-"),s=t.indexOf("/"),o=t.substring(0,s);let r=t.substring(s+1);return"api"===o&&(r=r.toLowerCase()),[o,r,n].filter((e=>e&&e.length>0)).reduce(((e,t,n)=>{switch(n){case 0:return t;case 1:return`${e}/${t}`;default:return`${e}#${t}`}}),"")},d={name:"getUserAgentMiddleware",step:"build",priority:"low",tags:["SET_USER_AGENT","USER_AGENT"],override:!0},p=e=>({applyToStack:t=>{var n;t.add((n=e,(e,t)=>async s=>{const{request:c}=s;if(!r.Kd.isInstance(c))return e(s);const{headers:u}=c,d=t?.userAgent?.map(l)||[],p=(await n.defaultUserAgentProvider()).map(l),h=n?.customUserAgent?.map(l)||[],m=(0,o.vL)(),f=(m?[m]:[]).concat([...p,...d,...h]).join(" "),g=[...p.filter((e=>e.startsWith("aws-sdk-"))),...h].join(" ");return"browser"!==n.runtime?(g&&(u[i]=u[i]?`${u[a]} ${g}`:g),u[a]=f):u[i]=f,e({...s,request:c})}),d)}})},6928:(e,t,n)=>{"use strict";n.d(t,{Rq:()=>s,$3:()=>o});const s=e=>{let t=async()=>{if(void 0===e.region)throw new Error("Region is missing from runtimeConfig");const t=e.region;return"string"==typeof t?t:t()};return{setRegion(e){t=e},region:()=>t}},o=e=>({region:e.region()})},6652:(e,t,n)=>{"use strict";n.d(t,{UF:()=>i,vL:()=>a});var s=n(3875);const o=(e,t=!1)=>{if(t){for(const t of e.split("."))if(!o(t))return!1;return!0}return!(!(0,s.X8)(e)||e.length<3||e.length>63||e!==e.toLowerCase()||(0,s.oX)(e))};let r=JSON.parse('{"partitions":[{"id":"aws","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","implicitGlobalRegion":"us-east-1","name":"aws","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^(us|eu|ap|sa|ca|me|af|il)\\\\-\\\\w+\\\\-\\\\d+$","regions":{"af-south-1":{"description":"Africa (Cape Town)"},"ap-east-1":{"description":"Asia Pacific (Hong Kong)"},"ap-northeast-1":{"description":"Asia Pacific (Tokyo)"},"ap-northeast-2":{"description":"Asia Pacific (Seoul)"},"ap-northeast-3":{"description":"Asia Pacific (Osaka)"},"ap-south-1":{"description":"Asia Pacific (Mumbai)"},"ap-south-2":{"description":"Asia Pacific (Hyderabad)"},"ap-southeast-1":{"description":"Asia Pacific (Singapore)"},"ap-southeast-2":{"description":"Asia Pacific (Sydney)"},"ap-southeast-3":{"description":"Asia Pacific (Jakarta)"},"ap-southeast-4":{"description":"Asia Pacific (Melbourne)"},"ap-southeast-5":{"description":"Asia Pacific (Malaysia)"},"aws-global":{"description":"AWS Standard global region"},"ca-central-1":{"description":"Canada (Central)"},"ca-west-1":{"description":"Canada West (Calgary)"},"eu-central-1":{"description":"Europe (Frankfurt)"},"eu-central-2":{"description":"Europe (Zurich)"},"eu-north-1":{"description":"Europe (Stockholm)"},"eu-south-1":{"description":"Europe (Milan)"},"eu-south-2":{"description":"Europe (Spain)"},"eu-west-1":{"description":"Europe (Ireland)"},"eu-west-2":{"description":"Europe (London)"},"eu-west-3":{"description":"Europe (Paris)"},"il-central-1":{"description":"Israel (Tel Aviv)"},"me-central-1":{"description":"Middle East (UAE)"},"me-south-1":{"description":"Middle East (Bahrain)"},"sa-east-1":{"description":"South America (Sao Paulo)"},"us-east-1":{"description":"US East (N. Virginia)"},"us-east-2":{"description":"US East (Ohio)"},"us-west-1":{"description":"US West (N. California)"},"us-west-2":{"description":"US West (Oregon)"}}},{"id":"aws-cn","outputs":{"dnsSuffix":"amazonaws.com.cn","dualStackDnsSuffix":"api.amazonwebservices.com.cn","implicitGlobalRegion":"cn-northwest-1","name":"aws-cn","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^cn\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-cn-global":{"description":"AWS China global region"},"cn-north-1":{"description":"China (Beijing)"},"cn-northwest-1":{"description":"China (Ningxia)"}}},{"id":"aws-us-gov","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","implicitGlobalRegion":"us-gov-west-1","name":"aws-us-gov","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-us-gov-global":{"description":"AWS GovCloud (US) global region"},"us-gov-east-1":{"description":"AWS GovCloud (US-East)"},"us-gov-west-1":{"description":"AWS GovCloud (US-West)"}}},{"id":"aws-iso","outputs":{"dnsSuffix":"c2s.ic.gov","dualStackDnsSuffix":"c2s.ic.gov","implicitGlobalRegion":"us-iso-east-1","name":"aws-iso","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-global":{"description":"AWS ISO (US) global region"},"us-iso-east-1":{"description":"US ISO East"},"us-iso-west-1":{"description":"US ISO WEST"}}},{"id":"aws-iso-b","outputs":{"dnsSuffix":"sc2s.sgov.gov","dualStackDnsSuffix":"sc2s.sgov.gov","implicitGlobalRegion":"us-isob-east-1","name":"aws-iso-b","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-b-global":{"description":"AWS ISOB (US) global region"},"us-isob-east-1":{"description":"US ISOB East (Ohio)"}}},{"id":"aws-iso-e","outputs":{"dnsSuffix":"cloud.adc-e.uk","dualStackDnsSuffix":"cloud.adc-e.uk","implicitGlobalRegion":"eu-isoe-west-1","name":"aws-iso-e","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^eu\\\\-isoe\\\\-\\\\w+\\\\-\\\\d+$","regions":{"eu-isoe-west-1":{"description":"EU ISOE West"}}},{"id":"aws-iso-f","outputs":{"dnsSuffix":"csp.hci.ic.gov","dualStackDnsSuffix":"csp.hci.ic.gov","implicitGlobalRegion":"us-isof-south-1","name":"aws-iso-f","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isof\\\\-\\\\w+\\\\-\\\\d+$","regions":{}}],"version":"1.1"}');const a=()=>"",i={isVirtualHostableS3Bucket:o,parseArn:e=>{const t=e.split(":");if(t.length<6)return null;const[n,s,o,r,a,...i]=t;return"arn"!==n||""===s||""===o||""===i.join(":")?null:{partition:s,service:o,region:r,accountId:a,resourceId:i.map((e=>e.split("/"))).flat()}},partition:e=>{const{partitions:t}=r;for(const n of t){const{regions:t,outputs:s}=n;for(const[n,o]of Object.entries(t))if(n===e)return{...s,...o}}for(const n of t){const{regionRegex:t,outputs:s}=n;if(new RegExp(t).test(e))return{...s}}const n=t.find((e=>"aws"===e.id));if(!n)throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");return{...n.outputs}}};s.mw.aws=i},3058:(e,t,n)=>{"use strict";n.d(t,{mJ:()=>a});var s=n(9987),o=n(857);const r=require("process"),a=({serviceId:e,clientVersion:t})=>{const n=[["aws-sdk-js",t],["ua","2.0"],[`os/${(0,o.platform)()}`,(0,o.release)()],["lang/js"],["md/nodejs",`${r.versions.node}`]];e&&n.push([`api/${e}`,t]),r.env.AWS_EXECUTION_ENV&&n.push([`exec-env/${r.env.AWS_EXECUTION_ENV}`]);const a=(0,s.Z)({environmentVariableSelector:e=>e.AWS_SDK_UA_APP_ID,configFileSelector:e=>e["sdk-ua-app-id"],default:void 0})();let i;return async()=>{if(!i){const e=await a;i=e?[...n,[`app/${e}`]]:[...n]}return i}}},7122:(e,t,n)=>{"use strict";n.d(t,{zH:()=>i,GG:()=>a,e$:()=>o,Ko:()=>r,TD:()=>l});var s=n(8230);const o={environmentVariableSelector:e=>(0,s.Qm)(e,"AWS_USE_DUALSTACK_ENDPOINT",s.cV.ENV),configFileSelector:e=>(0,s.Qm)(e,"use_dualstack_endpoint",s.cV.CONFIG),default:!1},r={environmentVariableSelector:e=>(0,s.Qm)(e,"AWS_USE_FIPS_ENDPOINT",s.cV.ENV),configFileSelector:e=>(0,s.Qm)(e,"use_fips_endpoint",s.cV.CONFIG),default:!1};n(7135);const a={environmentVariableSelector:e=>e.AWS_REGION,configFileSelector:e=>e.region,default:()=>{throw new Error("Region is missing")}},i={preferredFile:"credentials"},c=e=>"string"==typeof e&&(e.startsWith("fips-")||e.endsWith("-fips")),u=e=>c(e)?["fips-aws-global","aws-fips"].includes(e)?"us-east-1":e.replace(/fips-(dkr-|prod-)?|-fips/,""):e,l=e=>{const{region:t,useFipsEndpoint:n}=e;if(!t)throw new Error("Region is missing");return{...e,region:async()=>{if("string"==typeof t)return u(t);const e=await t();return u(e)},useFipsEndpoint:async()=>{const e="string"==typeof t?t:await t();return!!c(e)||("function"!=typeof n?Promise.resolve(!!n):n())}}}},7503:(e,t,n)=>{"use strict";n.d(t,{h$:()=>d,mR:()=>p,e:()=>m,wB:()=>r,lW:()=>l,OC:()=>h,K4:()=>f,te:()=>g,lI:()=>w}),n(7523);var s=n(7135);const o={step:"serialize",tags:["HTTP_AUTH_SCHEME"],name:"httpAuthSchemeMiddleware",override:!0,relation:"before",toMiddleware:n(9389).ko.name},r=(e,{httpAuthSchemeParametersProvider:t,identityProviderConfigProvider:n})=>({applyToStack:r=>{r.addRelativeTo(((e,t)=>(n,o)=>async r=>{const a=e.httpAuthSchemeProvider(await t.httpAuthSchemeParametersProvider(e,o,r.input)),i=function(e){const t=new Map;for(const n of e)t.set(n.schemeId,n);return t}(e.httpAuthSchemes),c=(0,s.u)(o),u=[];for(const n of a){const s=i.get(n.schemeId);if(!s){u.push(`HttpAuthScheme \`${n.schemeId}\` was not enabled for this service.`);continue}const r=s.identityProvider(await t.identityProviderConfigProvider(e));if(!r){u.push(`HttpAuthScheme \`${n.schemeId}\` did not have an IdentityProvider configured.`);continue}const{identityProperties:a={},signingProperties:l={}}=n.propertiesExtractor?.(e,o)||{};n.identityProperties=Object.assign(n.identityProperties||{},a),n.signingProperties=Object.assign(n.signingProperties||{},l),c.selectedHttpAuthScheme={httpAuthOption:n,identity:await r(n.identityProperties),signer:s.signer};break}if(!c.selectedHttpAuthScheme)throw new Error(u.join("\n"));return n(r)})(e,{httpAuthSchemeParametersProvider:t,identityProviderConfigProvider:n}),o)}});n(1208).Ou.name;var a=n(5479);const i=e=>e=>{throw e},c=(e,t)=>{},u={step:"finalizeRequest",tags:["HTTP_SIGNING"],name:"httpSigningMiddleware",aliases:["apiKeyMiddleware","tokenMiddleware","awsAuthMiddleware"],override:!0,relation:"after",toMiddleware:n(4171).j7.name},l=e=>({applyToStack:e=>{e.addRelativeTo(((e,t)=>async n=>{if(!a.Kd.isInstance(n.request))return e(n);const o=(0,s.u)(t).selectedHttpAuthScheme;if(!o)throw new Error("No HttpAuthScheme was selected: unable to sign request");const{httpAuthOption:{signingProperties:r={}},identity:u,signer:l}=o,d=await e({...n,request:await l.sign(n.request,u,r)}).catch((l.errorHandler||i)(r));return(l.successHandler||c)(d.response,r),d}),u)}});class d{constructor(e){this.authSchemes=new Map;for(const[t,n]of Object.entries(e))void 0!==n&&this.authSchemes.set(t,n)}getIdentityProvider(e){return this.authSchemes.get(e)}}class p{async sign(e,t,n){return e}}const h=e=>m(e)&&e.expiration.getTime()-Date.now()<3e5;const m=e=>void 0!==e.expiration,f=(e,t,n)=>{if(void 0===e)return;const s="function"!=typeof e?async()=>Promise.resolve(e):e;let o,r,a,i=!1;const c=async e=>{r||(r=s(e));try{o=await r,a=!0,i=!1}finally{r=void 0}return o};return void 0===t?async e=>(a&&!e?.forceRefresh||(o=await c(e)),o):async e=>(a&&!e?.forceRefresh||(o=await c(e)),i?o:n(o)?t(o)?(await c(e),o):o:(i=!0,o))},g=e=>{if("function"==typeof e)return e;const t=Promise.resolve(e);return()=>t};var y=n(8156);function w(e,t){return new E(e,t)}class E{constructor(e,t){this.input=e,this.context=t,this.query={},this.method="",this.headers={},this.path="",this.body=null,this.hostname="",this.resolvePathStack=[]}async build(){const{hostname:e,protocol:t="https",port:n,path:s}=await this.context.endpoint();this.path=s;for(const e of this.resolvePathStack)e(this.path);return new a.Kd({protocol:t,hostname:this.hostname||e,port:n,method:this.method,path:this.path,query:this.query,body:this.body,headers:this.headers})}hn(e){return this.hostname=e,this}bp(e){return this.resolvePathStack.push((t=>{this.path=`${t?.endsWith("/")?t.slice(0,-1):t||""}`+e})),this}p(e,t,n,s){return this.resolvePathStack.push((o=>{this.path=(0,y.un)(o,this.input,e,t,n,s)})),this}h(e){return this.headers=e,this}q(e){return this.query=e,this}b(e){return this.body=e,this}m(e){return this.method=e,this}}},1701:(e,t,n)=>{"use strict";n.d(t,{V:()=>i});var s=n(9290),o=n(3197),r=n(181),a=n(6982);class i{constructor(e,t){this.algorithmIdentifier=e,this.secret=t,this.reset()}update(e,t){this.hash.update((0,o.Fo)(c(e,t)))}digest(){return Promise.resolve(this.hash.digest())}reset(){this.hash=this.secret?(0,a.createHmac)(this.algorithmIdentifier,c(this.secret)):(0,a.createHash)(this.algorithmIdentifier)}}function c(e,t){return r.Buffer.isBuffer(e)?e:"string"==typeof e?(0,s.s)(e,t):ArrayBuffer.isView(e)?(0,s.Q)(e.buffer,e.byteOffset,e.byteLength):(0,s.Q)(e)}},3695:(e,t,n)=>{"use strict";n.d(t,{m:()=>s});const s=e=>"function"==typeof ArrayBuffer&&e instanceof ArrayBuffer||"[object ArrayBuffer]"===Object.prototype.toString.call(e)},649:(e,t,n)=>{"use strict";n.d(t,{vK:()=>a});var s=n(5479);const o="content-length",r={step:"build",tags:["SET_CONTENT_LENGTH","CONTENT_LENGTH"],name:"contentLengthMiddleware",override:!0},a=e=>({applyToStack:t=>{var n;t.add((n=e.bodyLengthChecker,e=>async t=>{const r=t.request;if(s.Kd.isInstance(r)){const{body:e,headers:t}=r;if(e&&-1===Object.keys(t).map((e=>e.toLowerCase())).indexOf(o))try{const t=n(e);r.headers={...r.headers,[o]:String(t)}}catch(e){}}return e({...t,request:r})}),r)}})},9389:(e,t,n)=>{"use strict";n.d(t,{ko:()=>g,rD:()=>y,Co:()=>w});const s=/^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/,o=/(\d+\.){3}\d+/,r=/\.\./,a=(e,t,n)=>{const s=async()=>{const s=n[e]??n[t];return"function"==typeof s?s():s};return"credentialScope"===e||"CredentialScope"===t?async()=>{const e="function"==typeof n.credentials?await n.credentials():n.credentials;return e?.credentialScope??e?.CredentialScope}:"accountId"===e||"AccountId"===t?async()=>{const e="function"==typeof n.credentials?await n.credentials():n.credentials;return e?.accountId??e?.AccountId}:"endpoint"===e||"endpoint"===t?async()=>{const e=await s();if(e&&"object"==typeof e){if("url"in e)return e.url.href;if("hostname"in e){const{protocol:t,hostname:n,port:s,path:o}=e;return`${t}//${n}${s?":"+s:""}${o}`}}return e}:s};var i=n(9987),c=n(2792);const u="AWS_ENDPOINT_URL",l="endpoint_url";var d=n(2641);const p=e=>"object"==typeof e?"url"in e?(0,d.D)(e.url):e:(0,d.D)(e),h=async(e,t,n)=>{const i={},c=t?.getEndpointParameterInstructions?.()||{};for(const[t,s]of Object.entries(c))switch(s.type){case"staticContextParams":i[t]=s.value;break;case"contextParams":i[t]=e[s.name];break;case"clientContextParams":case"builtInParams":i[t]=await a(s.name,t,n)();break;default:throw new Error("Unrecognized endpoint parameter instruction: "+JSON.stringify(s))}return 0===Object.keys(c).length&&Object.assign(i,n),"s3"===String(n.serviceId).toLowerCase()&&await(async e=>{const t=e?.Bucket||"";if("string"==typeof e.Bucket&&(e.Bucket=t.replace(/#/g,encodeURIComponent("#")).replace(/\?/g,encodeURIComponent("?"))),(e=>{const[t,n,s,,,o]=e.split(":"),r="arn"===t&&e.split(":").length>=6,a=Boolean(r&&n&&s&&o);if(r&&!a)throw new Error(`Invalid ARN: ${e} was an invalid ARN.`);return a})(t)){if(!0===e.ForcePathStyle)throw new Error("Path-style addressing cannot be used with ARN buckets")}else n=t,(!s.test(n)||o.test(n)||r.test(n)||-1!==t.indexOf(".")&&!String(e.Endpoint).startsWith("http:")||t.toLowerCase()!==t||t.length<3)&&(e.ForcePathStyle=!0);var n;return e.DisableMultiRegionAccessPoints&&(e.disableMultiRegionAccessPoints=!0,e.DisableMRAP=!0),e})(i),i};var m=n(7135);const f=({config:e,instructions:t})=>(n,s)=>async o=>{const r=await(async(e,t,n,s)=>{if(!n.endpoint){const e=await(async e=>(0,i.Z)((e=>({environmentVariableSelector:t=>{const n=e.split(" ").map((e=>e.toUpperCase()));return t[[u,...n].join("_")]||t[u]||void 0},configFileSelector:(t,n)=>{if(n&&t.services){const s=n[["services",t.services].join(c.QD)];if(s){const t=s[[e.split(" ").map((e=>e.toLowerCase())).join("_"),l].join(c.QD)];if(t)return t}}const s=t[l];if(s)return s},default:void 0}))(e))())(n.serviceId||"");e&&(n.endpoint=()=>Promise.resolve(p(e)))}const o=await h(e,t,n);if("function"!=typeof n.endpointProvider)throw new Error("config.endpointProvider is not set.");return n.endpointProvider(o,s)})(o.input,{getEndpointParameterInstructions:()=>t},{...e},s);s.endpointV2=r,s.authSchemes=r.properties?.authSchemes;const a=s.authSchemes?.[0];if(a){s.signing_region=a.signingRegion,s.signing_service=a.signingName;const e=(0,m.u)(s),t=e?.selectedHttpAuthScheme?.httpAuthOption;t&&(t.signingProperties=Object.assign(t.signingProperties||{},{signing_region:a.signingRegion,signingRegion:a.signingRegion,signing_service:a.signingName,signingName:a.signingName,signingRegionSet:a.signingRegionSet},a.properties))}return n({...o})},g={step:"serialize",tags:["ENDPOINT_PARAMETERS","ENDPOINT_V2","ENDPOINT"],name:"endpointV2Middleware",override:!0,relation:"before",toMiddleware:n(1208).Ou.name},y=(e,t)=>({applyToStack:n=>{n.addRelativeTo(f({config:e,instructions:t}),g)}}),w=e=>{const t=e.tls??!0,{endpoint:n}=e,s=null!=n?async()=>p(await(0,m.t)(n)()):void 0,o=!!n;return{...e,endpoint:s,tls:t,isCustomEndpoint:o,useDualstackEndpoint:(0,m.t)(e.useDualstackEndpoint??!1),useFipsEndpoint:(0,m.t)(e.useFipsEndpoint??!1)}}},4171:(e,t,n)=>{"use strict";n.d(t,{qs:()=>y,kN:()=>E,ey:()=>$,$z:()=>w,j7:()=>I});var s=n(3323),o=n(5479),r=n(4542),a=n(6982),i=n.n(a);const c={randomUUID:i().randomUUID},u=new Uint8Array(256);let l=u.length;function d(){return l>u.length-16&&(i().randomFillSync(u),l=0),u.slice(l,l+=16)}const p=[];for(let e=0;e<256;++e)p.push((e+256).toString(16).slice(1));const h=function(e,t,n){if(c.randomUUID&&!t&&!e)return c.randomUUID();const s=(e=e||{}).random||(e.rng||d)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=s[e];return t}return function(e,t=0){return p[e[t+0]]+p[e[t+1]]+p[e[t+2]]+p[e[t+3]]+"-"+p[e[t+4]]+p[e[t+5]]+"-"+p[e[t+6]]+p[e[t+7]]+"-"+p[e[t+8]]+p[e[t+9]]+"-"+p[e[t+10]]+p[e[t+11]]+p[e[t+12]]+p[e[t+13]]+p[e[t+14]]+p[e[t+15]]}(s)};var m=n(7135);const f="AWS_MAX_ATTEMPTS",g="max_attempts",y={environmentVariableSelector:e=>{const t=e[f];if(!t)return;const n=parseInt(t);if(Number.isNaN(n))throw new Error(`Environment variable ${f} mast be a number, got "${t}"`);return n},configFileSelector:e=>{const t=e[g];if(!t)return;const n=parseInt(t);if(Number.isNaN(n))throw new Error(`Shared config file entry ${g} mast be a number, got "${t}"`);return n},default:s.Gz},w=e=>{const{retryStrategy:t}=e,n=(0,m.t)(e.maxAttempts??s.Gz);return{...e,maxAttempts:n,retryStrategy:async()=>t||(await(0,m.t)(e.retryMode)()===s.cm.ADAPTIVE?new s.Y(n):new s.ru(n))}},E={environmentVariableSelector:e=>e.AWS_RETRY_MODE,configFileSelector:e=>e.retry_mode,default:s.L0};var x=n(8156),b=n(2203);const v=e=>e?.body instanceof b.Readable||"undefined"!=typeof ReadableStream&&e?.body instanceof ReadableStream,S=e=>{const t={error:e,errorType:P(e)},n=O(e.$response);return n&&(t.retryAfterHint=n),t},P=e=>(0,r.Qb)(e)?"THROTTLING":(0,r.bV)(e)?"TRANSIENT":(0,r.GQ)(e)?"SERVER_ERROR":"CLIENT_ERROR",I={name:"retryMiddleware",tags:["RETRY"],step:"finalizeRequest",priority:"high",override:!0},$=e=>({applyToStack:t=>{t.add((e=>(t,n)=>async r=>{let a=await e.retryStrategy();const i=await e.maxAttempts();if(!(e=>void 0!==e.acquireInitialRetryToken&&void 0!==e.refreshRetryTokenForRetry&&void 0!==e.recordSuccess)(a))return a?.mode&&(n.userAgent=[...n.userAgent||[],["cfg/retry-mode",a.mode]]),a.retry(t,r);{let e=await a.acquireInitialRetryToken(n.partition_id),u=new Error,l=0,d=0;const{request:p}=r,m=o.Kd.isInstance(p);for(m&&(p.headers[s.l5]=h());;)try{m&&(p.headers[s.ok]=`attempt=${l+1}; max=${i}`);const{response:n,output:o}=await t(r);return a.recordSuccess(e),o.$metadata.attempts=l+1,o.$metadata.totalRetryDelay=d,{response:n,output:o}}catch(t){const s=S(t);if(u=(c=t)instanceof Error?c:c instanceof Object?Object.assign(new Error,c):"string"==typeof c?new Error(c):new Error(`AWS SDK error wrapper for ${c}`),m&&v(p))throw(n.logger instanceof x.N4?console:n.logger)?.warn("An error was encountered in a non-retryable streaming request."),u;try{e=await a.refreshRetryTokenForRetry(e,s)}catch(e){throw u.$metadata||(u.$metadata={}),u.$metadata.attempts=l+1,u.$metadata.totalRetryDelay=d,u}l=e.getRetryCount();const o=e.getRetryDelay();d+=o,await new Promise((e=>setTimeout(e,o)))}}var c})(e),I)}}),O=e=>{if(!o.cS.isInstance(e))return;const t=Object.keys(e.headers).find((e=>"retry-after"===e.toLowerCase()));if(!t)return;const n=e.headers[t],s=Number(n);return Number.isNaN(s)?new Date(n):new Date(1e3*s)}},1208:(e,t,n)=>{"use strict";n.d(t,{TM:()=>i,Ou:()=>a});const s=(e,t)=>n=>async s=>{const{response:o}=await n(s);try{return{response:o,output:await t(o,e)}}catch(e){if(Object.defineProperty(e,"$response",{value:o}),!("$metadata"in e)){const t="Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.";e.message+="\n  "+t,void 0!==e.$responseBodyText&&e.$response&&(e.$response.body=e.$responseBodyText)}throw e}},o=(e,t)=>(n,s)=>async o=>{const r=s.endpointV2?.url&&e.urlParser?async()=>e.urlParser(s.endpointV2.url):e.endpoint;if(!r)throw new Error("No valid endpoint provider available.");const a=await t(o.input,{...e,endpoint:r});return n({...o,request:a})},r={name:"deserializerMiddleware",step:"deserialize",tags:["DESERIALIZER"],override:!0},a={name:"serializerMiddleware",step:"serialize",tags:["SERIALIZER"],override:!0};function i(e,t,n){return{applyToStack:i=>{i.add(s(e,n),r),i.add(o(e,t),a)}}}},9987:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var s=n(8112);function o(e){try{const t=new Set(Array.from(e.match(/([A-Z_]){3,}/g)??[]));return t.delete("CONFIG"),t.delete("CONFIG_PREFIX_SEPARATOR"),t.delete("ENV"),[...t].join(", ")}catch(t){return e}}var r=n(2792);const a=({environmentVariableSelector:e,configFileSelector:t,default:n},a={})=>{return(0,s.Bj)((0,s.cy)((i=e,async()=>{try{const e=i(process.env);if(void 0===e)throw new Error;return e}catch(e){throw new s.C1(e.message||`Not found in ENV: ${o(i.toString())}`,{logger:undefined})}}),((e,{preferredFile:t="config",...n}={})=>async()=>{const a=(0,r.Bz)(n),{configFile:i,credentialsFile:c}=await(0,r.p6)(n),u=c[a]||{},l=i[a]||{},d="config"===t?{...u,...l}:{...l,...u};try{const n=e(d,"config"===t?i:c);if(void 0===n)throw new Error;return n}catch(t){throw new s.C1(t.message||`Not found in config files w/ profile [${a}]: ${o(e.toString())}`,{logger:n.logger})}})(t,a),(e=>"function"==typeof e?async()=>await e():(0,s.VR)(e))(n)));var i}},4029:(e,t,n)=>{"use strict";n.d(t,{$c:()=>l,kv:()=>p});var s=n(5479),o=n(2531),r=n(8611);const a=require("https"),i=["ECONNRESET","EPIPE","ETIMEDOUT"],c=e=>{const t={};for(const n of Object.keys(e)){const s=e[n];t[n]=Array.isArray(s)?s.join(","):s}return t};var u=n(2203);class l{static create(e){return"function"==typeof e?.handle?e:new l(e)}static checkSocketUsage(e,t,n=console){const{sockets:s,requests:o,maxSockets:r}=e;if("number"!=typeof r||r===1/0)return t;if(Date.now()-15e3<t)return t;if(s&&o)for(const e in s){const t=s[e]?.length??0,a=o[e]?.length??0;if(t>=r&&a>=2*r)return n?.warn?.(`@smithy/node-http-handler:WARN - socket usage at capacity=${t} and ${a} additional requests are enqueued.\nSee https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-configuring-maxsockets.html\nor increase socketAcquisitionWarningTimeout=(millis) in the NodeHttpHandler config.`),Date.now()}return t}constructor(e){this.socketWarningTimestamp=0,this.metadata={handlerProtocol:"http/1.1"},this.configProvider=new Promise(((t,n)=>{"function"==typeof e?e().then((e=>{t(this.resolveDefaultConfig(e))})).catch(n):t(this.resolveDefaultConfig(e))}))}resolveDefaultConfig(e){const{requestTimeout:t,connectionTimeout:n,socketTimeout:s,httpAgent:o,httpsAgent:i}=e||{},c=!0;return{connectionTimeout:n,requestTimeout:t??s,httpAgent:o instanceof r.Agent||"function"==typeof o?.destroy?o:new r.Agent({keepAlive:c,maxSockets:50,...o}),httpsAgent:i instanceof a.Agent||"function"==typeof i?.destroy?i:new a.Agent({keepAlive:c,maxSockets:50,...i}),logger:console}}destroy(){this.config?.httpAgent?.destroy(),this.config?.httpsAgent?.destroy()}async handle(e,{abortSignal:t}={}){let n;return this.config||(this.config=await this.configProvider),new Promise(((d,p)=>{let h;const m=async e=>{await h,clearTimeout(n),p(e)};if(!this.config)throw new Error("Node HTTP request handler config is not resolved");if(t?.aborted){const e=new Error("Request aborted");return e.name="AbortError",void m(e)}const f="https:"===e.protocol,g=f?this.config.httpsAgent:this.config.httpAgent;n=setTimeout((()=>{this.socketWarningTimestamp=l.checkSocketUsage(g,this.socketWarningTimestamp,this.config.logger)}),this.config.socketAcquisitionWarningTimeout??(this.config.requestTimeout??2e3)+(this.config.connectionTimeout??1e3));const y=function(e){const t=[];for(let n of Object.keys(e).sort()){const s=e[n];if(n=(0,o.o)(n),Array.isArray(s))for(let e=0,r=s.length;e<r;e++)t.push(`${n}=${(0,o.o)(s[e])}`);else{let e=n;(s||"string"==typeof s)&&(e+=`=${(0,o.o)(s)}`),t.push(e)}}return t.join("&")}(e.query||{});let w;null==e.username&&null==e.password||(w=`${e.username??""}:${e.password??""}`);let E=e.path;y&&(E+=`?${y}`),e.fragment&&(E+=`#${e.fragment}`);const x={headers:e.headers,host:e.hostname,method:e.method,path:E,port:e.port,agent:g,auth:w},b=(f?a.request:r.request)(x,(e=>{(async e=>{await h,clearTimeout(n),d(e)})({response:new s.cS({statusCode:e.statusCode||-1,reason:e.statusMessage,headers:c(e.headers),body:e})})}));if(b.on("error",(e=>{i.includes(e.code)?m(Object.assign(e,{name:"TimeoutError"})):m(e)})),((e,t,n=0)=>{if(!n)return;const s=setTimeout((()=>{e.destroy(),t(Object.assign(new Error(`Socket timed out without establishing a connection within ${n} ms`),{name:"TimeoutError"}))}),n);e.on("socket",(e=>{e.connecting?e.on("connect",(()=>{clearTimeout(s)})):clearTimeout(s)}))})(b,m,this.config.connectionTimeout),((e,t,n=0)=>{e.setTimeout(n,(()=>{e.destroy(),t(Object.assign(new Error(`Connection timed out after ${n} ms`),{name:"TimeoutError"}))}))})(b,m,this.config.requestTimeout),t){const e=()=>{b.destroy();const e=new Error("Request aborted");e.name="AbortError",m(e)};if("function"==typeof t.addEventListener){const n=t;n.addEventListener("abort",e,{once:!0}),b.once("close",(()=>n.removeEventListener("abort",e)))}else t.onabort=e}const v=x.agent;"object"==typeof v&&"keepAlive"in v&&((e,{keepAlive:t,keepAliveMsecs:n})=>{!0===t&&e.on("socket",(e=>{e.setKeepAlive(t,n||0)}))})(b,{keepAlive:v.keepAlive,keepAliveMsecs:v.keepAliveMsecs}),h=async function(e,t,n=1e3){const s=t.headers??{},o=s.Expect||s.expect;let r=-1,a=!1;"100-continue"===o&&await Promise.race([new Promise((e=>{r=Number(setTimeout(e,Math.max(1e3,n)))})),new Promise((t=>{e.on("continue",(()=>{clearTimeout(r),t()})),e.on("error",(()=>{a=!0,clearTimeout(r),t()}))}))]),a||function(e,t){if(t instanceof u.Readable)t.pipe(e);else{if(t){if(Buffer.isBuffer(t)||"string"==typeof t)return void e.end(t);const n=t;return"object"==typeof n&&n.buffer&&"number"==typeof n.byteOffset&&"number"==typeof n.byteLength?void e.end(Buffer.from(n.buffer,n.byteOffset,n.byteLength)):void e.end(Buffer.from(t))}e.end()}}(e,t.body)}(b,e,this.config.requestTimeout).catch((e=>(clearTimeout(n),p(e))))}))}updateHttpClientConfig(e,t){this.config=void 0,this.configProvider=this.configProvider.then((n=>({...n,[e]:t})))}httpHandlerConfigs(){return this.config??{}}}require("http2"),Symbol.iterator;class d extends u.Writable{constructor(){super(...arguments),this.bufferedBytes=[]}_write(e,t,n){this.bufferedBytes.push(e),n()}}const p=e=>h(e)?async function(e){const t=[],n=e.getReader();let s=!1,o=0;for(;!s;){const{done:e,value:r}=await n.read();r&&(t.push(r),o+=r.length),s=e}const r=new Uint8Array(o);let a=0;for(const e of t)r.set(e,a),a+=e.length;return r}(e):new Promise(((t,n)=>{const s=new d;e.pipe(s),e.on("error",(e=>{s.end(),n(e)})),s.on("error",n),s.on("finish",(function(){const e=new Uint8Array(Buffer.concat(this.bufferedBytes));t(e)}))})),h=e=>"function"==typeof ReadableStream&&e instanceof ReadableStream},8112:(e,t,n)=>{"use strict";n.d(t,{C1:()=>o,mZ:()=>s,Jh:()=>r,cy:()=>a,VR:()=>i,Bj:()=>c});class s extends Error{constructor(e,t=!0){let n,o=!0;"boolean"==typeof t?(n=void 0,o=t):null!=t&&"object"==typeof t&&(n=t.logger,o=t.tryNextLink??!0),super(e),this.name="ProviderError",this.tryNextLink=o,Object.setPrototypeOf(this,s.prototype),n?.debug?.(`@smithy/property-provider ${o?"->":"(!)"} ${e}`)}static from(e,t=!0){return Object.assign(new this(e.message,t),e)}}class o extends s{constructor(e,t=!0){super(e,t),this.name="CredentialsProviderError",Object.setPrototypeOf(this,o.prototype)}}class r extends s{constructor(e,t=!0){super(e,t),this.name="TokenProviderError",Object.setPrototypeOf(this,r.prototype)}}const a=(...e)=>async()=>{if(0===e.length)throw new s("No providers in chain");let t;for(const n of e)try{return await n()}catch(e){if(t=e,e?.tryNextLink)continue;throw e}throw t},i=e=>()=>Promise.resolve(e),c=(e,t,n)=>{let s,o,r,a=!1;const i=async()=>{o||(o=e());try{s=await o,r=!0,a=!1}finally{o=void 0}return s};return void 0===t?async e=>(r&&!e?.forceRefresh||(s=await i()),s):async e=>(r&&!e?.forceRefresh||(s=await i()),a?s:n&&!n(s)?(a=!0,s):t(s)?(await i(),s):s)}},5479:(e,t,n)=>{"use strict";n.d(t,{Kd:()=>r,cS:()=>a,eS:()=>s,jt:()=>o});const s=e=>{let t=e.httpHandler;return{setHttpHandler(e){t=e},httpHandler:()=>t,updateHttpClientConfig(e,n){t.updateHttpClientConfig(e,n)},httpHandlerConfigs:()=>t.httpHandlerConfigs()}},o=e=>({httpHandler:e.httpHandler()});n(7523);class r{constructor(e){this.method=e.method||"GET",this.hostname=e.hostname||"localhost",this.port=e.port,this.query=e.query||{},this.headers=e.headers||{},this.body=e.body,this.protocol=e.protocol?":"!==e.protocol.slice(-1)?`${e.protocol}:`:e.protocol:"https:",this.path=e.path?"/"!==e.path.charAt(0)?`/${e.path}`:e.path:"/",this.username=e.username,this.password=e.password,this.fragment=e.fragment}static clone(e){const t=new r({...e,headers:{...e.headers}});var n;return t.query&&(t.query=(n=t.query,Object.keys(n).reduce(((e,t)=>{const s=n[t];return{...e,[t]:Array.isArray(s)?[...s]:s}}),{}))),t}static isInstance(e){if(!e)return!1;const t=e;return"method"in t&&"protocol"in t&&"hostname"in t&&"path"in t&&"object"==typeof t.query&&"object"==typeof t.headers}clone(){return r.clone(this)}}class a{constructor(e){this.statusCode=e.statusCode,this.reason=e.reason,this.headers=e.headers||{},this.body=e.body}static isInstance(e){if(!e)return!1;const t=e;return"number"==typeof t.statusCode&&"object"==typeof t.headers}}},4542:(e,t,n)=>{"use strict";n.d(t,{h5:()=>u,S0:()=>c,GQ:()=>p,Qb:()=>l,bV:()=>d});const s=["AuthFailure","InvalidSignatureException","RequestExpired","RequestInTheFuture","RequestTimeTooSkewed","SignatureDoesNotMatch"],o=["BandwidthLimitExceeded","EC2ThrottledException","LimitExceededException","PriorRequestNotComplete","ProvisionedThroughputExceededException","RequestLimitExceeded","RequestThrottled","RequestThrottledException","SlowDown","ThrottledException","Throttling","ThrottlingException","TooManyRequestsException","TransactionInProgressException"],r=["TimeoutError","RequestTimeout","RequestTimeoutException"],a=[500,502,503,504],i=["ECONNRESET","ECONNREFUSED","EPIPE","ETIMEDOUT"],c=e=>void 0!==e.$retryable,u=e=>s.includes(e.name),l=e=>429===e.$metadata?.httpStatusCode||o.includes(e.name)||1==e.$retryable?.throttling,d=e=>(e=>e.$metadata?.clockSkewCorrected)(e)||r.includes(e.name)||i.includes(e?.code||"")||a.includes(e.$metadata?.httpStatusCode||0),p=e=>{if(void 0!==e.$metadata?.httpStatusCode){const t=e.$metadata.httpStatusCode;return 500<=t&&t<=599&&!d(e)}return!1}},2792:(e,t,n)=>{"use strict";n.d(t,{QD:()=>I,Ch:()=>i,Bz:()=>c,C9:()=>l,vf:()=>h,p6:()=>$,qw:()=>N,YU:()=>T});var s=n(857);const o=require("path"),r={},a=()=>{const{HOME:e,USERPROFILE:t,HOMEPATH:n,HOMEDRIVE:a=`C:${o.sep}`}=process.env;if(e)return e;if(t)return t;if(n)return`${a}${n}`;const i=process&&process.geteuid?`${process.geteuid()}`:"DEFAULT";return r[i]||(r[i]=(0,s.homedir)()),r[i]},i="AWS_PROFILE",c=e=>e.profile||process.env[i]||"default";var u=n(6982);const l=e=>{const t=(0,u.createHash)("sha1").update(e).digest("hex");return(0,o.join)(a(),".aws","sso","cache",`${t}.json`)};var d=n(9896);const{readFile:p}=d.promises,h=async e=>{const t=l(e),n=await p(t,"utf8");return JSON.parse(n)};var m=n(7523);const f=e=>Object.entries(e).filter((([e])=>{const t=e.indexOf(I);return-1!==t&&Object.values(m.Ip).includes(e.substring(0,t))})).reduce(((e,[t,n])=>{const s=t.indexOf(I);return e[t.substring(0,s)===m.Ip.PROFILE?t.substring(s+1):t]=n,e}),{...e.default&&{default:e.default}}),g=()=>process.env.AWS_CONFIG_FILE||(0,o.join)(a(),".aws","config"),y=()=>process.env.AWS_SHARED_CREDENTIALS_FILE||(0,o.join)(a(),".aws","credentials"),w=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,E=["__proto__","profile __proto__"],x=e=>{const t={};let n,s;for(const o of e.split(/\r?\n/)){const e=o.split(/(^|\s)[;#]/)[0].trim();if("["===e[0]&&"]"===e[e.length-1]){n=void 0,s=void 0;const t=e.substring(1,e.length-1),o=w.exec(t);if(o){const[,e,,t]=o;Object.values(m.Ip).includes(e)&&(n=[e,t].join(I))}else n=t;if(E.includes(t))throw new Error(`Found invalid profile name "${t}"`)}else if(n){const r=e.indexOf("=");if(![0,-1].includes(r)){const[a,i]=[e.substring(0,r).trim(),e.substring(r+1).trim()];if(""===i)s=a;else{s&&o.trimStart()===o&&(s=void 0),t[n]=t[n]||{};const e=s?[s,a].join(I):a;t[n][e]=i}}}}return t},{readFile:b}=d.promises,v={},S=(e,t)=>(v[e]&&!t?.ignoreCache||(v[e]=b(e,"utf8")),v[e]),P=()=>({}),I=".",$=async(e={})=>{const{filepath:t=y(),configFilepath:n=g()}=e,s=a();let r=t;t.startsWith("~/")&&(r=(0,o.join)(s,t.slice(2)));let i=n;n.startsWith("~/")&&(i=(0,o.join)(s,n.slice(2)));const c=await Promise.all([S(i,{ignoreCache:e.ignoreCache}).then(x).then(f).catch(P),S(r,{ignoreCache:e.ignoreCache}).then(x).catch(P)]);return{configFile:c[0],credentialsFile:c[1]}},O=e=>Object.entries(e).filter((([e])=>e.startsWith(m.Ip.SSO_SESSION+I))).reduce(((e,[t,n])=>({...e,[t.substring(t.indexOf(I)+1)]:n})),{}),A=()=>({}),N=async(e={})=>S(e.configFilepath??g()).then(x).then(O).catch(A),T=async e=>{const t=await $(e);return((...e)=>{const t={};for(const n of e)for(const[e,s]of Object.entries(n))void 0!==t[e]?Object.assign(t[e],s):t[e]=s;return t})(t.configFile,t.credentialsFile)}},8156:(e,t,n)=>{"use strict";n.d(t,{Kj:()=>u,uB:()=>h,N4:()=>s,$H:()=>f,TJ:()=>V,Ss:()=>ge,Px:()=>d,Mw:()=>B,I9:()=>Z,ET:()=>w,Y0:()=>b,r$:()=>g,Xk:()=>v,lK:()=>S,$6:()=>se,Yd:()=>oe,xA:()=>te,rm:()=>re,lT:()=>G,Tj:()=>ie,l3:()=>D,EI:()=>C,t_:()=>k,uv:()=>ne,un:()=>he,yI:()=>fe,VA:()=>me,xW:()=>$,s:()=>ce,jr:()=>H});class s{trace(){}debug(){}info(){}warn(){}error(){}}const o=(e,t)=>{const n=[];if(e&&n.push(e),t)for(const e of t)n.push(e);return n},r=(e,t)=>`${e||"anonymous"}${t&&t.length>0?` (a.k.a. ${t.join(",")})`:""}`,a=()=>{let e=[],t=[],n=!1;const s=new Set,u=n=>(e.forEach((e=>{n.add(e.middleware,{...e})})),t.forEach((e=>{n.addRelativeTo(e.middleware,{...e})})),n.identifyOnResolve?.(p.identifyOnResolve()),n),l=e=>{const t=[];return e.before.forEach((e=>{0===e.before.length&&0===e.after.length?t.push(e):t.push(...l(e))})),t.push(e),e.after.reverse().forEach((e=>{0===e.before.length&&0===e.after.length?t.push(e):t.push(...l(e))})),t},d=(n=!1)=>{const s=[],a=[],u={};var d;return e.forEach((e=>{const t={...e,before:[],after:[]};for(const e of o(t.name,t.aliases))u[e]=t;s.push(t)})),t.forEach((e=>{const t={...e,before:[],after:[]};for(const e of o(t.name,t.aliases))u[e]=t;a.push(t)})),a.forEach((e=>{if(e.toMiddleware){const t=u[e.toMiddleware];if(void 0===t){if(n)return;throw new Error(`${e.toMiddleware} is not found when adding ${r(e.name,e.aliases)} middleware ${e.relation} ${e.toMiddleware}`)}"after"===e.relation&&t.after.push(e),"before"===e.relation&&t.before.push(e)}})),(d=s,d.sort(((e,t)=>i[t.step]-i[e.step]||c[t.priority||"normal"]-c[e.priority||"normal"]))).map(l).reduce(((e,t)=>(e.push(...t),e)),[])},p={add:(t,n={})=>{const{name:a,override:i,aliases:c}=n,u={step:"initialize",priority:"normal",middleware:t,...n},l=o(a,c);if(l.length>0){if(l.some((e=>s.has(e)))){if(!i)throw new Error(`Duplicate middleware name '${r(a,c)}'`);for(const t of l){const n=e.findIndex((e=>e.name===t||e.aliases?.some((e=>e===t))));if(-1===n)continue;const s=e[n];if(s.step!==u.step||u.priority!==s.priority)throw new Error(`"${r(s.name,s.aliases)}" middleware with ${s.priority} priority in ${s.step} step cannot be overridden by "${r(a,c)}" middleware with ${u.priority} priority in ${u.step} step.`);e.splice(n,1)}}for(const e of l)s.add(e)}e.push(u)},addRelativeTo:(e,n)=>{const{name:a,override:i,aliases:c}=n,u={middleware:e,...n},l=o(a,c);if(l.length>0){if(l.some((e=>s.has(e)))){if(!i)throw new Error(`Duplicate middleware name '${r(a,c)}'`);for(const e of l){const n=t.findIndex((t=>t.name===e||t.aliases?.some((t=>t===e))));if(-1===n)continue;const s=t[n];if(s.toMiddleware!==u.toMiddleware||s.relation!==u.relation)throw new Error(`"${r(s.name,s.aliases)}" middleware ${s.relation} "${s.toMiddleware}" middleware cannot be overridden by "${r(a,c)}" middleware ${u.relation} "${u.toMiddleware}" middleware.`);t.splice(n,1)}}for(const e of l)s.add(e)}t.push(u)},clone:()=>u(a()),use:e=>{e.applyToStack(p)},remove:n=>"string"==typeof n?(n=>{let r=!1;const a=e=>{const t=o(e.name,e.aliases);if(t.includes(n)){r=!0;for(const e of t)s.delete(e);return!1}return!0};return e=e.filter(a),t=t.filter(a),r})(n):(n=>{let r=!1;const a=e=>{if(e.middleware===n){r=!0;for(const t of o(e.name,e.aliases))s.delete(t);return!1}return!0};return e=e.filter(a),t=t.filter(a),r})(n),removeByTag:n=>{let r=!1;const a=e=>{const{tags:t,name:a,aliases:i}=e;if(t&&t.includes(n)){const e=o(a,i);for(const t of e)s.delete(t);return r=!0,!1}return!0};return e=e.filter(a),t=t.filter(a),r},concat:e=>{const t=u(a());return t.use(e),t.identifyOnResolve(n||t.identifyOnResolve()||(e.identifyOnResolve?.()??!1)),t},applyToStack:u,identify:()=>d(!0).map((e=>{const t=e.step??e.relation+" "+e.toMiddleware;return r(e.name,e.aliases)+" - "+t})),identifyOnResolve:e=>("boolean"==typeof e&&(n=e),n),resolve:(e,t)=>{for(const n of d().map((e=>e.middleware)).reverse())e=n(e,t);return n&&console.log(p.identify()),e}};return p},i={initialize:5,serialize:4,build:3,finalizeRequest:2,deserialize:1},c={high:3,normal:2,low:1};class u{constructor(e){this.middlewareStack=a(),this.config=e}send(e,t,n){const s="function"!=typeof t?t:void 0,o="function"==typeof t?t:n,r=e.resolveMiddleware(this.middlewareStack,this.config,s);if(!o)return r(e).then((e=>e.output));r(e).then((e=>o(null,e.output)),(e=>o(e))).catch((()=>{}))}destroy(){this.config.requestHandler.destroy&&this.config.requestHandler.destroy()}}var l=n(7509);const d=async(e=new Uint8Array,t)=>{if(e instanceof Uint8Array)return l.Mu.mutate(e);if(!e)return l.Mu.mutate(new Uint8Array);const n=t.streamCollector(e);return l.Mu.mutate(await n)};var p=n(7523);class h{constructor(){this.middlewareStack=a()}static classBuilder(){return new m}resolveMiddlewareWithContext(e,t,n,{middlewareFn:s,clientName:o,commandName:r,inputFilterSensitiveLog:a,outputFilterSensitiveLog:i,smithyContext:c,additionalContext:u,CommandCtor:l}){for(const o of s.bind(this)(l,e,t,n))this.middlewareStack.use(o);const d=e.concat(this.middlewareStack),{logger:h}=t,m={logger:h,clientName:o,commandName:r,inputFilterSensitiveLog:a,outputFilterSensitiveLog:i,[p.Vf]:{commandInstance:this,...c},...u},{requestHandler:f}=t;return d.resolve((e=>f.handle(e.request,n||{})),m)}}class m{constructor(){this._init=()=>{},this._ep={},this._middlewareFn=()=>[],this._commandName="",this._clientName="",this._additionalContext={},this._smithyContext={},this._inputFilterSensitiveLog=e=>e,this._outputFilterSensitiveLog=e=>e,this._serializer=null,this._deserializer=null}init(e){this._init=e}ep(e){return this._ep=e,this}m(e){return this._middlewareFn=e,this}s(e,t,n={}){return this._smithyContext={service:e,operation:t,...n},this}c(e={}){return this._additionalContext=e,this}n(e,t){return this._clientName=e,this._commandName=t,this}f(e=e=>e,t=e=>e){return this._inputFilterSensitiveLog=e,this._outputFilterSensitiveLog=t,this}ser(e){return this._serializer=e,this}de(e){return this._deserializer=e,this}build(){const e=this;let t;return t=class extends h{static getEndpointParameterInstructions(){return e._ep}constructor(...[t]){super(),this.serialize=e._serializer,this.deserialize=e._deserializer,this.input=t??{},e._init(this)}resolveMiddleware(n,s,o){return this.resolveMiddlewareWithContext(n,s,o,{CommandCtor:t,middlewareFn:e._middlewareFn,clientName:e._clientName,commandName:e._commandName,inputFilterSensitiveLog:e._inputFilterSensitiveLog,outputFilterSensitiveLog:e._outputFilterSensitiveLog,smithyContext:e._smithyContext,additionalContext:e._additionalContext})}}}}const f="***SensitiveInformation***",g=e=>{if(null!=e){if("string"==typeof e){const t=parseFloat(e);if(!Number.isNaN(t))return String(t)!==String(e)&&N.warn(A(`Expected number but observed string: ${e}`)),t}if("number"==typeof e)return e;throw new TypeError(`Expected number, got ${typeof e}: ${e}`)}},y=Math.ceil(2**127*(2-2**-23)),w=e=>E(e,32),E=(e,t)=>{const n=(e=>{if(null!=e){if(Number.isInteger(e)&&!Number.isNaN(e))return e;throw new TypeError(`Expected integer, got ${typeof e}: ${e}`)}})(e);if(void 0!==n&&x(n,t)!==n)throw new TypeError(`Expected ${t}-bit integer, got ${e}`);return n},x=(e,t)=>{switch(t){case 32:return Int32Array.of(e)[0];case 16:return Int16Array.of(e)[0];case 8:return Int8Array.of(e)[0]}},b=(e,t)=>{if(null==e){if(t)throw new TypeError(`Expected a non-null value for ${t}`);throw new TypeError("Expected a non-null value")}return e},v=e=>{if(null==e)return;if("object"==typeof e&&!Array.isArray(e))return e;const t=Array.isArray(e)?"array":typeof e;throw new TypeError(`Expected object, got ${t}: ${e}`)},S=e=>{if(null!=e){if("string"==typeof e)return e;if(["boolean","number","bigint"].includes(typeof e))return N.warn(A(`Expected string, got ${typeof e}: ${e}`)),String(e);throw new TypeError(`Expected string, got ${typeof e}: ${e}`)}},P=/(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g,I=e=>{const t=e.match(P);if(null===t||t[0].length!==e.length)throw new TypeError("Expected real number, got implicit NaN");return parseFloat(e)},$=e=>w("string"==typeof e?I(e):e),O=e=>(e=>E(e,16))("string"==typeof e?I(e):e),A=e=>String(new TypeError(e).stack||e).split("\n").slice(0,5).filter((e=>!e.includes("stackTraceWarning"))).join("\n"),N={warn:console.warn},T=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],M=new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/),C=e=>{if(null==e)return;if("string"!=typeof e)throw new TypeError("RFC-3339 date-times must be expressed as strings");const t=M.exec(e);if(!t)throw new TypeError("Invalid RFC-3339 date-time value");const[n,s,o,r,a,i,c,u]=t,l=O(K(s)),d=L(o,"month",1,12),p=L(r,"day",1,31);return j(l,d,p,{hours:a,minutes:i,seconds:c,fractionalMilliseconds:u})},R=new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/),k=e=>{if(null==e)return;if("string"!=typeof e)throw new TypeError("RFC-3339 date-times must be expressed as strings");const t=R.exec(e);if(!t)throw new TypeError("Invalid RFC-3339 date-time value");const[n,s,o,r,a,i,c,u,l]=t,d=O(K(s)),p=L(o,"month",1,12),h=L(r,"day",1,31),m=j(d,p,h,{hours:a,minutes:i,seconds:c,fractionalMilliseconds:u});return"Z"!=l.toUpperCase()&&m.setTime(m.getTime()-_(l)),m},D=e=>{if(null==e)return;let t;if("number"==typeof e)t=e;else if("string"==typeof e)t=(e=>g("string"==typeof e?I(e):e))(e);else{if("object"!=typeof e||1!==e.tag)throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");t=e.value}if(Number.isNaN(t)||t===1/0||t===-1/0)throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");return new Date(Math.round(1e3*t))},j=(e,t,n,s)=>{const o=t-1;return q(e,o,n),new Date(Date.UTC(e,o,n,L(s.hours,"hour",0,23),L(s.minutes,"minute",0,59),L(s.seconds,"seconds",0,60),U(s.fractionalMilliseconds)))},F=[31,28,31,30,31,30,31,31,30,31,30,31],q=(e,t,n)=>{let s=F[t];if(1===t&&z(e)&&(s=29),n>s)throw new TypeError(`Invalid day for ${T[t]} in ${e}: ${n}`)},z=e=>e%4==0&&(e%100!=0||e%400==0),L=(e,t,n,s)=>{const o=(e=>(e=>E(e,8))("string"==typeof e?I(e):e))(K(e));if(o<n||o>s)throw new TypeError(`${t} must be between ${n} and ${s}, inclusive`);return o},U=e=>null==e?0:1e3*(e=>(e=>{const t=g(e);if(void 0!==t&&!Number.isNaN(t)&&t!==1/0&&t!==-1/0&&Math.abs(t)>y)throw new TypeError(`Expected 32-bit float, got ${e}`);return t})("string"==typeof e?I(e):e))("0."+e),_=e=>{const t=e[0];let n=1;if("+"==t)n=1;else{if("-"!=t)throw new TypeError(`Offset direction, ${t}, must be "+" or "-"`);n=-1}return n*(60*Number(e.substring(1,3))+Number(e.substring(4,6)))*60*1e3},K=e=>{let t=0;for(;t<e.length-1&&"0"===e.charAt(t);)t++;return 0===t?e:e.slice(t)};class V extends Error{constructor(e){super(e.message),Object.setPrototypeOf(this,V.prototype),this.name=e.name,this.$fault=e.$fault,this.$metadata=e.$metadata}}const B=(e,t={})=>{Object.entries(t).filter((([,e])=>void 0!==e)).forEach((([t,n])=>{null!=e[t]&&""!==e[t]||(e[t]=n)}));const n=e.message||e.Message||"UnknownError";return e.message=n,delete e.Message,e},H=e=>({output:t,parsedBody:n,errorCode:s})=>{(({output:e,parsedBody:t,exceptionCtor:n,errorCode:s})=>{const o=W(e),r=o.httpStatusCode?o.httpStatusCode+"":void 0,a=new n({name:t?.code||t?.Code||s||r||"UnknownError",$fault:"client",$metadata:o});throw B(a,t)})({output:t,parsedBody:n,exceptionCtor:e,errorCode:s})},W=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),G=e=>{switch(e){case"standard":case"cross-region":return{retryMode:"standard",connectionTimeout:3100};case"in-region":return{retryMode:"standard",connectionTimeout:1100};case"mobile":return{retryMode:"standard",connectionTimeout:3e4};default:return{}}};let Q=!1;const Z=e=>{e&&!Q&&parseInt(e.substring(1,e.indexOf(".")))<16&&(Q=!0)},J=e=>{const t=[];for(const n in p.dB){const s=p.dB[n];void 0!==e[s]&&t.push({algorithmId:()=>s,checksumConstructor:()=>e[s]})}return{_checksumAlgorithms:t,addChecksumAlgorithm(e){this._checksumAlgorithms.push(e)},checksumAlgorithms(){return this._checksumAlgorithms}}},Y=e=>{const t={};return e.checksumAlgorithms().forEach((e=>{t[e.algorithmId()]=e.checksumConstructor()})),t},X=e=>{let t=e.retryStrategy;return{setRetryStrategy(e){t=e},retryStrategy:()=>t}},ee=e=>{const t={};return t.retryStrategy=e.retryStrategy(),t},te=e=>({...J(e),...X(e)}),ne=e=>({...Y(e),...ee(e)});function se(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}const oe=e=>Array.isArray(e)?e:[e],re=e=>{const t="#text";for(const n in e)e.hasOwnProperty(n)&&void 0!==e[n][t]?e[n]=e[n][t]:"object"==typeof e[n]&&null!==e[n]&&(e[n]=re(e[n]));return e},ae=function(){const e=Object.getPrototypeOf(this).constructor,t=new(Function.bind.apply(String,[null,...arguments]));return Object.setPrototypeOf(t,e.prototype),t};function ie(e,t,n){let s,o,r;if(void 0===t&&void 0===n)s={},r=e;else{if(s=e,"function"==typeof t)return o=t,r=n,ue(s,o,r);r=t}for(const e of Object.keys(r))Array.isArray(r[e])?le(s,null,r,e):s[e]=r[e];return s}ae.prototype=Object.create(String.prototype,{constructor:{value:ae,enumerable:!1,writable:!0,configurable:!0}}),Object.setPrototypeOf(ae,String);const ce=(e,t)=>{const n={};for(const s in t)le(n,e,t,s);return n},ue=(e,t,n)=>ie(e,Object.entries(n).reduce(((e,[n,s])=>(Array.isArray(s)?e[n]=s:e[n]="function"==typeof s?[t,s()]:[t,s],e)),{})),le=(e,t,n,s)=>{if(null!==t){let o=n[s];"function"==typeof o&&(o=[,o]);const[r=de,a=pe,i=s]=o;return void(("function"==typeof r&&r(t[i])||"function"!=typeof r&&r)&&(e[s]=a(t[i])))}let[o,r]=n[s];if("function"==typeof r){let t;const n=void 0===o&&null!=(t=r()),a="function"==typeof o&&!!o(void 0)||"function"!=typeof o&&!!o;n?e[s]=t:a&&(e[s]=r())}else{const t=void 0===o&&null!=r,n="function"==typeof o&&!!o(r)||"function"!=typeof o&&!!o;(t||n)&&(e[s]=r)}},de=e=>null!=e,pe=e=>e,he=(e,t,n,s,o,r)=>{if(null==t||void 0===t[n])throw new Error("No value provided for input HTTP label: "+n+".");{const t=s();if(t.length<=0)throw new Error("Empty value provided for input HTTP label: "+n+".");e=e.replace(o,r?t.split("/").map((e=>se(e))).join("/"):se(t))}return e},me=e=>{if(e!=e)return"NaN";switch(e){case 1/0:return"Infinity";case-1/0:return"-Infinity";default:return e}},fe=e=>e.toISOString().replace(".000Z","Z"),ge=e=>{if(null==e)return{};if(Array.isArray(e))return e.filter((e=>null!=e)).map(ge);if("object"==typeof e){const t={};for(const n of Object.keys(e))null!=e[n]&&(t[n]=ge(e[n]));return t}return e}},7523:(e,t,n)=>{"use strict";var s,o,r,a,i;n.d(t,{dB:()=>a,Ue:()=>r,Ip:()=>u,Vf:()=>c}),function(e){e.HEADER="header",e.QUERY="query"}(s||(s={})),function(e){e.HEADER="header",e.QUERY="query"}(o||(o={})),function(e){e.HTTP="http",e.HTTPS="https"}(r||(r={})),function(e){e.MD5="md5",e.CRC32="crc32",e.CRC32C="crc32c",e.SHA1="sha1",e.SHA256="sha256"}(a||(a={})),function(e){e[e.HEADER=0]="HEADER",e[e.TRAILER=1]="TRAILER"}(i||(i={}));const c="__smithy_context";var u,l;!function(e){e.PROFILE="profile",e.SSO_SESSION="sso-session",e.SERVICES="services"}(u||(u={})),function(e){e.HTTP_0_9="http/0.9",e.HTTP_1_0="http/1.0",e.TDS_8_0="tds/8.0"}(l||(l={}))},2641:(e,t,n)=>{"use strict";n.d(t,{D:()=>s});const s=e=>{if("string"==typeof e)return s(new URL(e));const{hostname:t,pathname:n,port:o,protocol:r,search:a}=e;let i;return a&&(i=function(e){const t={};if(e=e.replace(/^\?/,""))for(const n of e.split("&")){let[e,s=null]=n.split("=");e=decodeURIComponent(e),s&&(s=decodeURIComponent(s)),e in t?Array.isArray(t[e])?t[e].push(s):t[e]=[t[e],s]:t[e]=s}return t}(a)),{hostname:t,port:o?parseInt(o):void 0,protocol:r,path:n,query:i}}},4572:(e,t,n)=>{"use strict";n.d(t,{E:()=>r,n:()=>i});var s=n(9290);const o=/^[A-Za-z0-9+/]*={0,2}$/,r=e=>{if(3*e.length%4!=0)throw new TypeError("Incorrect padding on base64 string.");if(!o.exec(e))throw new TypeError("Invalid base64 string.");const t=(0,s.s)(e,"base64");return new Uint8Array(t.buffer,t.byteOffset,t.byteLength)};var a=n(3197);const i=e=>{let t;if(t="string"==typeof e?(0,a.ar)(e):e,"object"!=typeof t||"number"!=typeof t.byteOffset||"number"!=typeof t.byteLength)throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");return(0,s.Q)(t.buffer,t.byteOffset,t.byteLength).toString("base64")}},7809:(e,t,n)=>{"use strict";n.d(t,{n:()=>o});var s=n(9896);const o=e=>{if(!e)return 0;if("string"==typeof e)return Buffer.byteLength(e);if("number"==typeof e.byteLength)return e.byteLength;if("number"==typeof e.size)return e.size;if("number"==typeof e.start&&"number"==typeof e.end)return e.end+1-e.start;if("string"==typeof e.path||Buffer.isBuffer(e.path))return(0,s.lstatSync)(e.path).size;if("number"==typeof e.fd)return(0,s.fstatSync)(e.fd).size;throw new Error(`Body Length computation failed for ${e}`)}},9290:(e,t,n)=>{"use strict";n.d(t,{Q:()=>r,s:()=>a});var s=n(3695),o=n(181);const r=(e,t=0,n=e.byteLength-t)=>{if(!(0,s.m)(e))throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof e} (${e})`);return o.Buffer.from(e,t,n)},a=(e,t)=>{if("string"!=typeof e)throw new TypeError(`The "input" argument must be of type string. Received type ${typeof e} (${e})`);return t?o.Buffer.from(e,t):o.Buffer.from(e)}},8230:(e,t,n)=>{"use strict";n.d(t,{cV:()=>r,Qm:()=>s,nB:()=>o});const s=(e,t,n)=>{if(t in e){if("true"===e[t])return!0;if("false"===e[t])return!1;throw new Error(`Cannot load ${n} "${t}". Expected "true" or "false", got ${e[t]}.`)}},o=(e,t,n)=>{if(!(t in e))return;const s=parseInt(e[t],10);if(Number.isNaN(s))throw new TypeError(`Cannot load ${n} '${t}'. Expected number, got '${e[t]}'.`);return s};var r;!function(e){e.ENV="env",e.CONFIG="shared config entry"}(r||(r={}))},4321:(e,t,n)=>{"use strict";n.d(t,{I:()=>l});var s=n(7122),o=n(9987),r=n(8112);const a="AWS_REGION",i="AWS_DEFAULT_REGION",c=["in-region","cross-region","mobile","standard","legacy"],u={environmentVariableSelector:e=>e.AWS_DEFAULTS_MODE,configFileSelector:e=>e.defaults_mode,default:"legacy"},l=({region:e=(0,o.Z)(s.GG),defaultsMode:t=(0,o.Z)(u)}={})=>(0,r.Bj)((async()=>{const n="function"==typeof t?await t():t;switch(n?.toLowerCase()){case"auto":return d(e);case"in-region":case"cross-region":case"mobile":case"standard":case"legacy":return Promise.resolve(n?.toLocaleLowerCase());case void 0:return Promise.resolve("legacy");default:throw new Error(`Invalid parameter for "defaultsMode", expect ${c.join(", ")}, got ${n}`)}})),d=async e=>{if(e){const t="function"==typeof e?await e():e,n=await p();return n?t===n?"in-region":"cross-region":"standard"}return"standard"},p=async()=>{if(process.env.AWS_EXECUTION_ENV&&(process.env[a]||process.env[i]))return process.env[a]??process.env[i];if(!process.env.AWS_EC2_METADATA_DISABLED)try{const{getInstanceMetadataEndpoint:e,httpRequest:t}=await n.e(897).then(n.bind(n,7897)),s=await e();return(await t({...s,path:"/latest/meta-data/placement/region"})).toString()}catch(e){}}},3875:(e,t,n)=>{"use strict";n.d(t,{mw:()=>i,oX:()=>o,X8:()=>a,sO:()=>A});const s=new RegExp("^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$"),o=e=>s.test(e)||e.startsWith("[")&&e.endsWith("]"),r=new RegExp("^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$"),a=(e,t=!1)=>{if(!t)return r.test(e);const n=e.split(".");for(const e of n)if(!a(e))return!1;return!0},i={},c="endpoints";function u(e){return"object"!=typeof e||null==e?e:"ref"in e?`$${u(e.ref)}`:"fn"in e?`${e.fn}(${(e.argv||[]).map(u).join(", ")})`:JSON.stringify(e,null,2)}class l extends Error{constructor(e){super(e),this.name="EndpointError"}}const d=(e,t)=>(e=>{const t=e.split("."),n=[];for(const s of t){const t=s.indexOf("[");if(-1!==t){if(s.indexOf("]")!==s.length-1)throw new l(`Path: '${e}' does not end with ']'`);const o=s.slice(t+1,-1);if(Number.isNaN(parseInt(o)))throw new l(`Invalid array index: '${o}' in path: '${e}'`);0!==t&&n.push(s.slice(0,t)),n.push(o)}else n.push(s)}return n})(t).reduce(((n,s)=>{if("object"!=typeof n)throw new l(`Index '${s}' in '${t}' not found in '${JSON.stringify(e)}'`);return Array.isArray(n)?n[parseInt(s)]:n[s]}),e);var p=n(7523);const h={[p.Ue.HTTP]:80,[p.Ue.HTTPS]:443},m={booleanEquals:(e,t)=>e===t,getAttr:d,isSet:e=>null!=e,isValidHostLabel:a,not:e=>!e,parseURL:e=>{const t=(()=>{try{if(e instanceof URL)return e;if("object"==typeof e&&"hostname"in e){const{hostname:t,port:n,protocol:s="",path:o="",query:r={}}=e,a=new URL(`${s}//${t}${n?`:${n}`:""}${o}`);return a.search=Object.entries(r).map((([e,t])=>`${e}=${t}`)).join("&"),a}return new URL(e)}catch(e){return null}})();if(!t)return console.error(`Unable to parse ${JSON.stringify(e)} as a whatwg URL.`),null;const n=t.href,{host:s,hostname:r,pathname:a,protocol:i,search:c}=t;if(c)return null;const u=i.slice(0,-1);if(!Object.values(p.Ue).includes(u))return null;const l=o(r);return{scheme:u,authority:`${s}${n.includes(`${s}:${h[u]}`)||"string"==typeof e&&e.includes(`${s}:${h[u]}`)?`:${h[u]}`:""}`,path:a,normalizedPath:a.endsWith("/")?a:`${a}/`,isIp:l}},stringEquals:(e,t)=>e===t,substring:(e,t,n,s)=>t>=n||e.length<n?null:s?e.substring(e.length-n,e.length-t):e.substring(t,n),uriEncode:e=>encodeURIComponent(e).replace(/[!*'()]/g,(e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`))},f=(e,t)=>{const n=[],s={...t.endpointParams,...t.referenceRecord};let o=0;for(;o<e.length;){const t=e.indexOf("{",o);if(-1===t){n.push(e.slice(o));break}n.push(e.slice(o,t));const r=e.indexOf("}",t);if(-1===r){n.push(e.slice(t));break}"{"===e[t+1]&&"}"===e[r+1]&&(n.push(e.slice(t+1,r)),o=r+2);const a=e.substring(t+1,r);if(a.includes("#")){const[e,t]=a.split("#");n.push(d(s[e],t))}else n.push(s[a]);o=r+1}return n.join("")},g=(e,t,n)=>{if("string"==typeof e)return f(e,n);if(e.fn)return y(e,n);if(e.ref)return(({ref:e},t)=>({...t.endpointParams,...t.referenceRecord}[e]))(e,n);throw new l(`'${t}': ${String(e)} is not a string, function or reference.`)},y=({fn:e,argv:t},n)=>{const s=t.map((e=>["boolean","number"].includes(typeof e)?e:g(e,"arg",n))),o=e.split(".");return o[0]in i&&null!=o[1]?i[o[0]][o[1]](...s):m[e](...s)},w=({assign:e,...t},n)=>{if(e&&e in n.referenceRecord)throw new l(`'${e}' is already defined in Reference Record.`);const s=y(t,n);return n.logger?.debug?.(`${c} evaluateCondition: ${u(t)} = ${u(s)}`),{result:""===s||!!s,...null!=e&&{toAssign:{name:e,value:s}}}},E=(e=[],t)=>{const n={};for(const s of e){const{result:e,toAssign:o}=w(s,{...t,referenceRecord:{...t.referenceRecord,...n}});if(!e)return{result:e};o&&(n[o.name]=o.value,t.logger?.debug?.(`${c} assign: ${o.name} := ${u(o.value)}`))}return{result:!0,referenceRecord:n}},x=(e,t)=>Object.entries(e).reduce(((e,[n,s])=>({...e,[n]:s.map((e=>{const s=g(e,"Header value entry",t);if("string"!=typeof s)throw new l(`Header '${n}' value '${s}' is not a string`);return s}))})),{}),b=(e,t)=>{if(Array.isArray(e))return e.map((e=>b(e,t)));switch(typeof e){case"string":return f(e,t);case"object":if(null===e)throw new l(`Unexpected endpoint property: ${e}`);return v(e,t);case"boolean":return e;default:throw new l("Unexpected endpoint property type: "+typeof e)}},v=(e,t)=>Object.entries(e).reduce(((e,[n,s])=>({...e,[n]:b(s,t)})),{}),S=(e,t)=>{const n=g(e,"Endpoint URL",t);if("string"==typeof n)try{return new URL(n)}catch(e){throw console.error(`Failed to construct URL with ${n}`,e),e}throw new l("Endpoint URL must be a string, got "+typeof n)},P=(e,t)=>{const{conditions:n,endpoint:s}=e,{result:o,referenceRecord:r}=E(n,t);if(!o)return;const a={...t,referenceRecord:{...t.referenceRecord,...r}},{url:i,properties:l,headers:d}=s;return t.logger?.debug?.(`${c} Resolving endpoint from template: ${u(s)}`),{...null!=d&&{headers:x(d,a)},...null!=l&&{properties:v(l,a)},url:S(i,a)}},I=(e,t)=>{const{conditions:n,error:s}=e,{result:o,referenceRecord:r}=E(n,t);if(o)throw new l(g(s,"Error",{...t,referenceRecord:{...t.referenceRecord,...r}}))},$=(e,t)=>{const{conditions:n,rules:s}=e,{result:o,referenceRecord:r}=E(n,t);if(o)return O(s,{...t,referenceRecord:{...t.referenceRecord,...r}})},O=(e,t)=>{for(const n of e)if("endpoint"===n.type){const e=P(n,t);if(e)return e}else if("error"===n.type)I(n,t);else{if("tree"!==n.type)throw new l(`Unknown endpoint rule: ${n}`);{const e=$(n,t);if(e)return e}}throw new l("Rules evaluation failed")},A=(e,t)=>{const{endpointParams:n,logger:s}=t,{parameters:o,rules:r}=e;t.logger?.debug?.(`${c} Initial EndpointParams: ${u(n)}`);const a=Object.entries(o).filter((([,e])=>null!=e.default)).map((([e,t])=>[e,t.default]));if(a.length>0)for(const[e,t]of a)n[e]=n[e]??t;const i=Object.entries(o).filter((([,e])=>e.required)).map((([e])=>e));for(const e of i)if(null==n[e])throw new l(`Missing required parameter: '${e}'`);const d=O(r,{endpointParams:n,logger:s,referenceRecord:{}});if(t.endpointParams?.Endpoint)try{const e=new URL(t.endpointParams.Endpoint),{protocol:n,port:s}=e;d.url.protocol=n,d.url.port=s}catch(e){}return t.logger?.debug?.(`${c} Resolved endpoint: ${u(d)}`),d}},8004:(e,t,n)=>{"use strict";n.d(t,{a:()=>r,n:()=>a});const s={},o={};for(let e=0;e<256;e++){let t=e.toString(16).toLowerCase();1===t.length&&(t=`0${t}`),s[e]=t,o[t]=e}function r(e){if(e.length%2!=0)throw new Error("Hex encoded strings must have an even number length");const t=new Uint8Array(e.length/2);for(let n=0;n<e.length;n+=2){const s=e.slice(n,n+2).toLowerCase();if(!(s in o))throw new Error(`Cannot decode unrecognized sequence ${s} as hexadecimal`);t[n/2]=o[s]}return t}function a(e){let t="";for(let n=0;n<e.byteLength;n++)t+=s[e[n]];return t}},7135:(e,t,n)=>{"use strict";n.d(t,{u:()=>o,t:()=>r});var s=n(7523);const o=e=>e[s.Vf]||(e[s.Vf]={}),r=e=>{if("function"==typeof e)return e;const t=Promise.resolve(e);return()=>t}},3323:(e,t,n)=>{"use strict";var s;n.d(t,{Y:()=>E,Gz:()=>o,bp:()=>c,L0:()=>r,QJ:()=>i,Df:()=>d,l5:()=>f,G8:()=>u,XP:()=>m,ok:()=>g,XS:()=>p,cm:()=>s,ru:()=>w,jh:()=>l,Rn:()=>h}),function(e){e.STANDARD="standard",e.ADAPTIVE="adaptive"}(s||(s={}));const o=3,r=s.STANDARD;var a=n(4542);class i{constructor(e){this.currentCapacity=0,this.enabled=!1,this.lastMaxRate=0,this.measuredTxRate=0,this.requestCount=0,this.lastTimestamp=0,this.timeWindow=0,this.beta=e?.beta??.7,this.minCapacity=e?.minCapacity??1,this.minFillRate=e?.minFillRate??.5,this.scaleConstant=e?.scaleConstant??.4,this.smooth=e?.smooth??.8;const t=this.getCurrentTimeInSeconds();this.lastThrottleTime=t,this.lastTxRateBucket=Math.floor(this.getCurrentTimeInSeconds()),this.fillRate=this.minFillRate,this.maxCapacity=this.minCapacity}getCurrentTimeInSeconds(){return Date.now()/1e3}async getSendToken(){return this.acquireTokenBucket(1)}async acquireTokenBucket(e){if(this.enabled){if(this.refillTokenBucket(),e>this.currentCapacity){const t=(e-this.currentCapacity)/this.fillRate*1e3;await new Promise((e=>setTimeout(e,t)))}this.currentCapacity=this.currentCapacity-e}}refillTokenBucket(){const e=this.getCurrentTimeInSeconds();if(!this.lastTimestamp)return void(this.lastTimestamp=e);const t=(e-this.lastTimestamp)*this.fillRate;this.currentCapacity=Math.min(this.maxCapacity,this.currentCapacity+t),this.lastTimestamp=e}updateClientSendingRate(e){let t;if(this.updateMeasuredRate(),(0,a.Qb)(e)){const e=this.enabled?Math.min(this.measuredTxRate,this.fillRate):this.measuredTxRate;this.lastMaxRate=e,this.calculateTimeWindow(),this.lastThrottleTime=this.getCurrentTimeInSeconds(),t=this.cubicThrottle(e),this.enableTokenBucket()}else this.calculateTimeWindow(),t=this.cubicSuccess(this.getCurrentTimeInSeconds());const n=Math.min(t,2*this.measuredTxRate);this.updateTokenBucketRate(n)}calculateTimeWindow(){this.timeWindow=this.getPrecise(Math.pow(this.lastMaxRate*(1-this.beta)/this.scaleConstant,1/3))}cubicThrottle(e){return this.getPrecise(e*this.beta)}cubicSuccess(e){return this.getPrecise(this.scaleConstant*Math.pow(e-this.lastThrottleTime-this.timeWindow,3)+this.lastMaxRate)}enableTokenBucket(){this.enabled=!0}updateTokenBucketRate(e){this.refillTokenBucket(),this.fillRate=Math.max(e,this.minFillRate),this.maxCapacity=Math.max(e,this.minCapacity),this.currentCapacity=Math.min(this.currentCapacity,this.maxCapacity)}updateMeasuredRate(){const e=this.getCurrentTimeInSeconds(),t=Math.floor(2*e)/2;if(this.requestCount++,t>this.lastTxRateBucket){const e=this.requestCount/(t-this.lastTxRateBucket);this.measuredTxRate=this.getPrecise(e*this.smooth+this.measuredTxRate*(1-this.smooth)),this.requestCount=0,this.lastTxRateBucket=t}}getPrecise(e){return parseFloat(e.toFixed(8))}}const c=100,u=2e4,l=500,d=500,p=5,h=10,m=1,f="amz-sdk-invocation-id",g="amz-sdk-request",y=({retryDelay:e,retryCount:t,retryCost:n})=>({getRetryCount:()=>t,getRetryDelay:()=>Math.min(u,e),getRetryCost:()=>n});class w{constructor(e){this.maxAttempts=e,this.mode=s.STANDARD,this.capacity=d,this.retryBackoffStrategy=(()=>{let e=c;return{computeNextBackoffDelay:t=>Math.floor(Math.min(u,Math.random()*2**t*e)),setDelayBase:t=>{e=t}}})(),this.maxAttemptsProvider="function"==typeof e?e:async()=>e}async acquireInitialRetryToken(e){return y({retryDelay:c,retryCount:0})}async refreshRetryTokenForRetry(e,t){const n=await this.getMaxAttempts();if(this.shouldRetry(e,t,n)){const n=t.errorType;this.retryBackoffStrategy.setDelayBase("THROTTLING"===n?l:c);const s=this.retryBackoffStrategy.computeNextBackoffDelay(e.getRetryCount()),o=t.retryAfterHint?Math.max(t.retryAfterHint.getTime()-Date.now()||0,s):s,r=this.getCapacityCost(n);return this.capacity-=r,y({retryDelay:o,retryCount:e.getRetryCount()+1,retryCost:r})}throw new Error("No retry token available")}recordSuccess(e){this.capacity=Math.max(d,this.capacity+(e.getRetryCost()??m))}getCapacity(){return this.capacity}async getMaxAttempts(){try{return await this.maxAttemptsProvider()}catch(e){return console.warn(`Max attempts provider could not resolve. Using default of ${o}`),o}}shouldRetry(e,t,n){return e.getRetryCount()+1<n&&this.capacity>=this.getCapacityCost(t.errorType)&&this.isRetryableError(t.errorType)}getCapacityCost(e){return"TRANSIENT"===e?h:p}isRetryableError(e){return"THROTTLING"===e||"TRANSIENT"===e}}class E{constructor(e,t){this.maxAttemptsProvider=e,this.mode=s.ADAPTIVE;const{rateLimiter:n}=t??{};this.rateLimiter=n??new i,this.standardRetryStrategy=new w(e)}async acquireInitialRetryToken(e){return await this.rateLimiter.getSendToken(),this.standardRetryStrategy.acquireInitialRetryToken(e)}async refreshRetryTokenForRetry(e,t){return this.rateLimiter.updateClientSendingRate(t),this.standardRetryStrategy.refreshRetryTokenForRetry(e,t)}recordSuccess(e){this.rateLimiter.updateClientSendingRate({}),this.standardRetryStrategy.recordSuccess(e)}}},7509:(e,t,n)=>{"use strict";n.d(t,{Mu:()=>r,c9:()=>g});var s=n(4572),o=n(3197);class r extends Uint8Array{static fromString(e,t="utf-8"){if("string"==typeof e)return function(e,t){return"base64"===t?r.mutate((0,s.E)(e)):r.mutate((0,o.ar)(e))}(e,t);throw new Error(`Unsupported conversion from ${typeof e} to Uint8ArrayBlobAdapter.`)}static mutate(e){return Object.setPrototypeOf(e,r.prototype),e}transformToString(e="utf-8"){return function(e,t="utf-8"){return"base64"===t?(0,s.n)(e):(0,o.Pq)(e)}(this,e)}}var a=n(2203),i=n(4029),c=n(9290),u=n(9023);n(5479);var l=n(8004);const d=e=>"function"==typeof ReadableStream&&(e?.constructor?.name===ReadableStream.name||e instanceof ReadableStream),p="The stream has already been transformed.",h=e=>{if(!m(e)&&!d(e))throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${e?.__proto__?.constructor?.name||e}`);let t=!1;const n=async()=>{if(t)throw new Error(p);return t=!0,await(e=>"function"==typeof Blob&&e instanceof Blob?async function(e){const t=await function(e){return new Promise(((t,n)=>{const s=new FileReader;s.onloadend=()=>{if(2!==s.readyState)return n(new Error("Reader aborted too early"));const e=s.result??"",o=e.indexOf(","),r=o>-1?o+1:e.length;t(e.substring(r))},s.onabort=()=>n(new Error("Read aborted")),s.onerror=()=>n(s.error),s.readAsDataURL(e)}))}(e),n=(0,s.E)(t);return new Uint8Array(n)}(e):async function(e){const t=[],n=e.getReader();let s=!1,o=0;for(;!s;){const{done:e,value:r}=await n.read();r&&(t.push(r),o+=r.length),s=e}const r=new Uint8Array(o);let a=0;for(const e of t)r.set(e,a),a+=e.length;return r}(e))(e)};return Object.assign(e,{transformToByteArray:n,transformToString:async e=>{const t=await n();if("base64"===e)return(0,s.n)(t);if("hex"===e)return(0,l.n)(t);if(void 0===e||"utf8"===e||"utf-8"===e)return(0,o.Pq)(t);if("function"==typeof TextDecoder)return new TextDecoder(e).decode(t);throw new Error("TextDecoder is not available, please make sure polyfill is provided.")},transformToWebStream:()=>{if(t)throw new Error(p);if(t=!0,m(e))return(e=>{if("function"!=typeof e.stream)throw new Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\nIf you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");return e.stream()})(e);if(d(e))return e;throw new Error(`Cannot transform payload to web stream, got ${e}`)}})},m=e=>"function"==typeof Blob&&e instanceof Blob,f="The stream has already been transformed.",g=e=>{if(!(e instanceof a.Readable))try{return h(e)}catch(t){throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${e?.__proto__?.constructor?.name||e}`)}let t=!1;const n=async()=>{if(t)throw new Error(f);return t=!0,await(0,i.kv)(e)};return Object.assign(e,{transformToByteArray:n,transformToString:async e=>{const t=await n();return void 0===e||Buffer.isEncoding(e)?(0,c.Q)(t.buffer,t.byteOffset,t.byteLength).toString(e):new u.TextDecoder(e).decode(t)},transformToWebStream:()=>{if(t)throw new Error(f);if(null!==e.readableFlowing)throw new Error("The stream has been consumed by other callbacks.");if("function"!=typeof a.Readable.toWeb)throw new Error("Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.");return t=!0,a.Readable.toWeb(e)}})};a.Writable},2531:(e,t,n)=>{"use strict";n.d(t,{o:()=>s});const s=e=>encodeURIComponent(e).replace(/[!'()*]/g,o),o=e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`},3197:(e,t,n)=>{"use strict";n.d(t,{ar:()=>o,Fo:()=>r,Pq:()=>a});var s=n(9290);const o=e=>{const t=(0,s.s)(e,"utf8");return new Uint8Array(t.buffer,t.byteOffset,t.byteLength/Uint8Array.BYTES_PER_ELEMENT)},r=e=>"string"==typeof e?o(e):ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e),a=e=>{if("string"==typeof e)return e;if("object"!=typeof e||"number"!=typeof e.byteOffset||"number"!=typeof e.byteLength)throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");return(0,s.Q)(e.buffer,e.byteOffset,e.byteLength).toString("utf8")}},6454:(e,t,n)=>{"use strict";const s=n(3918),o=n(2923),r=n(8904);e.exports={XMLParser:o,XMLValidator:s,XMLBuilder:r}},5334:(e,t)=>{"use strict";const n=":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",s="["+n+"]["+n+"\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*",o=new RegExp("^"+s+"$");t.isExist=function(e){return void 0!==e},t.isEmptyObject=function(e){return 0===Object.keys(e).length},t.merge=function(e,t,n){if(t){const s=Object.keys(t),o=s.length;for(let r=0;r<o;r++)e[s[r]]="strict"===n?[t[s[r]]]:t[s[r]]}},t.getValue=function(e){return t.isExist(e)?e:""},t.isName=function(e){return!(null==o.exec(e))},t.getAllMatches=function(e,t){const n=[];let s=t.exec(e);for(;s;){const o=[];o.startIndex=t.lastIndex-s[0].length;const r=s.length;for(let e=0;e<r;e++)o.push(s[e]);n.push(o),s=t.exec(e)}return n},t.nameRegexp=s},3918:(e,t,n)=>{"use strict";const s=n(5334),o={allowBooleanAttributes:!1,unpairedTags:[]};function r(e){return" "===e||"\t"===e||"\n"===e||"\r"===e}function a(e,t){const n=t;for(;t<e.length;t++)if("?"!=e[t]&&" "!=e[t]);else{const s=e.substr(n,t-n);if(t>5&&"xml"===s)return m("InvalidXml","XML declaration allowed only at the start of the document.",g(e,t));if("?"==e[t]&&">"==e[t+1]){t++;break}}return t}function i(e,t){if(e.length>t+5&&"-"===e[t+1]&&"-"===e[t+2]){for(t+=3;t<e.length;t++)if("-"===e[t]&&"-"===e[t+1]&&">"===e[t+2]){t+=2;break}}else if(e.length>t+8&&"D"===e[t+1]&&"O"===e[t+2]&&"C"===e[t+3]&&"T"===e[t+4]&&"Y"===e[t+5]&&"P"===e[t+6]&&"E"===e[t+7]){let n=1;for(t+=8;t<e.length;t++)if("<"===e[t])n++;else if(">"===e[t]&&(n--,0===n))break}else if(e.length>t+9&&"["===e[t+1]&&"C"===e[t+2]&&"D"===e[t+3]&&"A"===e[t+4]&&"T"===e[t+5]&&"A"===e[t+6]&&"["===e[t+7])for(t+=8;t<e.length;t++)if("]"===e[t]&&"]"===e[t+1]&&">"===e[t+2]){t+=2;break}return t}t.validate=function(e,t){t=Object.assign({},o,t);const n=[];let c=!1,u=!1;"\ufeff"===e[0]&&(e=e.substr(1));for(let o=0;o<e.length;o++)if("<"===e[o]&&"?"===e[o+1]){if(o+=2,o=a(e,o),o.err)return o}else{if("<"!==e[o]){if(r(e[o]))continue;return m("InvalidChar","char '"+e[o]+"' is not expected.",g(e,o))}{let f=o;if(o++,"!"===e[o]){o=i(e,o);continue}{let y=!1;"/"===e[o]&&(y=!0,o++);let w="";for(;o<e.length&&">"!==e[o]&&" "!==e[o]&&"\t"!==e[o]&&"\n"!==e[o]&&"\r"!==e[o];o++)w+=e[o];if(w=w.trim(),"/"===w[w.length-1]&&(w=w.substring(0,w.length-1),o--),d=w,!s.isName(d)){let t;return t=0===w.trim().length?"Invalid space after '<'.":"Tag '"+w+"' is an invalid name.",m("InvalidTag",t,g(e,o))}const E=l(e,o);if(!1===E)return m("InvalidAttr","Attributes for '"+w+"' have open quote.",g(e,o));let x=E.value;if(o=E.index,"/"===x[x.length-1]){const n=o-x.length;x=x.substring(0,x.length-1);const s=p(x,t);if(!0!==s)return m(s.err.code,s.err.msg,g(e,n+s.err.line));c=!0}else if(y){if(!E.tagClosed)return m("InvalidTag","Closing tag '"+w+"' doesn't have proper closing.",g(e,o));if(x.trim().length>0)return m("InvalidTag","Closing tag '"+w+"' can't have attributes or invalid starting.",g(e,f));if(0===n.length)return m("InvalidTag","Closing tag '"+w+"' has not been opened.",g(e,f));{const t=n.pop();if(w!==t.tagName){let n=g(e,t.tagStartPos);return m("InvalidTag","Expected closing tag '"+t.tagName+"' (opened in line "+n.line+", col "+n.col+") instead of closing tag '"+w+"'.",g(e,f))}0==n.length&&(u=!0)}}else{const s=p(x,t);if(!0!==s)return m(s.err.code,s.err.msg,g(e,o-x.length+s.err.line));if(!0===u)return m("InvalidXml","Multiple possible root nodes found.",g(e,o));-1!==t.unpairedTags.indexOf(w)||n.push({tagName:w,tagStartPos:f}),c=!0}for(o++;o<e.length;o++)if("<"===e[o]){if("!"===e[o+1]){o++,o=i(e,o);continue}if("?"!==e[o+1])break;if(o=a(e,++o),o.err)return o}else if("&"===e[o]){const t=h(e,o);if(-1==t)return m("InvalidChar","char '&' is not expected.",g(e,o));o=t}else if(!0===u&&!r(e[o]))return m("InvalidXml","Extra text at the end",g(e,o));"<"===e[o]&&o--}}}var d;return c?1==n.length?m("InvalidTag","Unclosed tag '"+n[0].tagName+"'.",g(e,n[0].tagStartPos)):!(n.length>0)||m("InvalidXml","Invalid '"+JSON.stringify(n.map((e=>e.tagName)),null,4).replace(/\r?\n/g,"")+"' found.",{line:1,col:1}):m("InvalidXml","Start tag expected.",1)};const c='"',u="'";function l(e,t){let n="",s="",o=!1;for(;t<e.length;t++){if(e[t]===c||e[t]===u)""===s?s=e[t]:s!==e[t]||(s="");else if(">"===e[t]&&""===s){o=!0;break}n+=e[t]}return""===s&&{value:n,index:t,tagClosed:o}}const d=new RegExp("(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['\"])(([\\s\\S])*?)\\5)?","g");function p(e,t){const n=s.getAllMatches(e,d),o={};for(let e=0;e<n.length;e++){if(0===n[e][1].length)return m("InvalidAttr","Attribute '"+n[e][2]+"' has no space in starting.",y(n[e]));if(void 0!==n[e][3]&&void 0===n[e][4])return m("InvalidAttr","Attribute '"+n[e][2]+"' is without value.",y(n[e]));if(void 0===n[e][3]&&!t.allowBooleanAttributes)return m("InvalidAttr","boolean attribute '"+n[e][2]+"' is not allowed.",y(n[e]));const s=n[e][2];if(!f(s))return m("InvalidAttr","Attribute '"+s+"' is an invalid name.",y(n[e]));if(o.hasOwnProperty(s))return m("InvalidAttr","Attribute '"+s+"' is repeated.",y(n[e]));o[s]=1}return!0}function h(e,t){if(";"===e[++t])return-1;if("#"===e[t])return function(e,t){let n=/\d/;for("x"===e[t]&&(t++,n=/[\da-fA-F]/);t<e.length;t++){if(";"===e[t])return t;if(!e[t].match(n))break}return-1}(e,++t);let n=0;for(;t<e.length;t++,n++)if(!(e[t].match(/\w/)&&n<20)){if(";"===e[t])break;return-1}return t}function m(e,t,n){return{err:{code:e,msg:t,line:n.line||n,col:n.col}}}function f(e){return s.isName(e)}function g(e,t){const n=e.substring(0,t).split(/\r?\n/);return{line:n.length,col:n[n.length-1].length+1}}function y(e){return e.startIndex+e[1].length}},8904:(e,t,n)=>{"use strict";const s=n(2788),o={attributeNamePrefix:"@_",attributesGroupName:!1,textNodeName:"#text",ignoreAttributes:!0,cdataPropName:!1,format:!1,indentBy:"  ",suppressEmptyNode:!1,suppressUnpairedNode:!0,suppressBooleanAttributes:!0,tagValueProcessor:function(e,t){return t},attributeValueProcessor:function(e,t){return t},preserveOrder:!1,commentPropName:!1,unpairedTags:[],entities:[{regex:new RegExp("&","g"),val:"&amp;"},{regex:new RegExp(">","g"),val:"&gt;"},{regex:new RegExp("<","g"),val:"&lt;"},{regex:new RegExp("'","g"),val:"&apos;"},{regex:new RegExp('"',"g"),val:"&quot;"}],processEntities:!0,stopNodes:[],oneListGroup:!1};function r(e){this.options=Object.assign({},o,e),this.options.ignoreAttributes||this.options.attributesGroupName?this.isAttribute=function(){return!1}:(this.attrPrefixLen=this.options.attributeNamePrefix.length,this.isAttribute=c),this.processTextOrObjNode=a,this.options.format?(this.indentate=i,this.tagEndChar=">\n",this.newLine="\n"):(this.indentate=function(){return""},this.tagEndChar=">",this.newLine="")}function a(e,t,n){const s=this.j2x(e,n+1);return void 0!==e[this.options.textNodeName]&&1===Object.keys(e).length?this.buildTextValNode(e[this.options.textNodeName],t,s.attrStr,n):this.buildObjectNode(s.val,t,s.attrStr,n)}function i(e){return this.options.indentBy.repeat(e)}function c(e){return!(!e.startsWith(this.options.attributeNamePrefix)||e===this.options.textNodeName)&&e.substr(this.attrPrefixLen)}r.prototype.build=function(e){return this.options.preserveOrder?s(e,this.options):(Array.isArray(e)&&this.options.arrayNodeName&&this.options.arrayNodeName.length>1&&(e={[this.options.arrayNodeName]:e}),this.j2x(e,0).val)},r.prototype.j2x=function(e,t){let n="",s="";for(let o in e)if(Object.prototype.hasOwnProperty.call(e,o))if(void 0===e[o])this.isAttribute(o)&&(s+="");else if(null===e[o])this.isAttribute(o)?s+="":"?"===o[0]?s+=this.indentate(t)+"<"+o+"?"+this.tagEndChar:s+=this.indentate(t)+"<"+o+"/"+this.tagEndChar;else if(e[o]instanceof Date)s+=this.buildTextValNode(e[o],o,"",t);else if("object"!=typeof e[o]){const r=this.isAttribute(o);if(r)n+=this.buildAttrPairStr(r,""+e[o]);else if(o===this.options.textNodeName){let t=this.options.tagValueProcessor(o,""+e[o]);s+=this.replaceEntitiesValue(t)}else s+=this.buildTextValNode(e[o],o,"",t)}else if(Array.isArray(e[o])){const n=e[o].length;let r="",a="";for(let i=0;i<n;i++){const n=e[o][i];if(void 0===n);else if(null===n)"?"===o[0]?s+=this.indentate(t)+"<"+o+"?"+this.tagEndChar:s+=this.indentate(t)+"<"+o+"/"+this.tagEndChar;else if("object"==typeof n)if(this.options.oneListGroup){const e=this.j2x(n,t+1);r+=e.val,this.options.attributesGroupName&&n.hasOwnProperty(this.options.attributesGroupName)&&(a+=e.attrStr)}else r+=this.processTextOrObjNode(n,o,t);else if(this.options.oneListGroup){let e=this.options.tagValueProcessor(o,n);e=this.replaceEntitiesValue(e),r+=e}else r+=this.buildTextValNode(n,o,"",t)}this.options.oneListGroup&&(r=this.buildObjectNode(r,o,a,t)),s+=r}else if(this.options.attributesGroupName&&o===this.options.attributesGroupName){const t=Object.keys(e[o]),s=t.length;for(let r=0;r<s;r++)n+=this.buildAttrPairStr(t[r],""+e[o][t[r]])}else s+=this.processTextOrObjNode(e[o],o,t);return{attrStr:n,val:s}},r.prototype.buildAttrPairStr=function(e,t){return t=this.options.attributeValueProcessor(e,""+t),t=this.replaceEntitiesValue(t),this.options.suppressBooleanAttributes&&"true"===t?" "+e:" "+e+'="'+t+'"'},r.prototype.buildObjectNode=function(e,t,n,s){if(""===e)return"?"===t[0]?this.indentate(s)+"<"+t+n+"?"+this.tagEndChar:this.indentate(s)+"<"+t+n+this.closeTag(t)+this.tagEndChar;{let o="</"+t+this.tagEndChar,r="";return"?"===t[0]&&(r="?",o=""),!n&&""!==n||-1!==e.indexOf("<")?!1!==this.options.commentPropName&&t===this.options.commentPropName&&0===r.length?this.indentate(s)+`\x3c!--${e}--\x3e`+this.newLine:this.indentate(s)+"<"+t+n+r+this.tagEndChar+e+this.indentate(s)+o:this.indentate(s)+"<"+t+n+r+">"+e+o}},r.prototype.closeTag=function(e){let t="";return-1!==this.options.unpairedTags.indexOf(e)?this.options.suppressUnpairedNode||(t="/"):t=this.options.suppressEmptyNode?"/":`></${e}`,t},r.prototype.buildTextValNode=function(e,t,n,s){if(!1!==this.options.cdataPropName&&t===this.options.cdataPropName)return this.indentate(s)+`<![CDATA[${e}]]>`+this.newLine;if(!1!==this.options.commentPropName&&t===this.options.commentPropName)return this.indentate(s)+`\x3c!--${e}--\x3e`+this.newLine;if("?"===t[0])return this.indentate(s)+"<"+t+n+"?"+this.tagEndChar;{let o=this.options.tagValueProcessor(t,e);return o=this.replaceEntitiesValue(o),""===o?this.indentate(s)+"<"+t+n+this.closeTag(t)+this.tagEndChar:this.indentate(s)+"<"+t+n+">"+o+"</"+t+this.tagEndChar}},r.prototype.replaceEntitiesValue=function(e){if(e&&e.length>0&&this.options.processEntities)for(let t=0;t<this.options.entities.length;t++){const n=this.options.entities[t];e=e.replace(n.regex,n.val)}return e},e.exports=r},2788:e=>{function t(e,a,i,c){let u="",l=!1;for(let d=0;d<e.length;d++){const p=e[d],h=n(p);if(void 0===h)continue;let m="";if(m=0===i.length?h:`${i}.${h}`,h===a.textNodeName){let e=p[h];o(m,a)||(e=a.tagValueProcessor(h,e),e=r(e,a)),l&&(u+=c),u+=e,l=!1;continue}if(h===a.cdataPropName){l&&(u+=c),u+=`<![CDATA[${p[h][0][a.textNodeName]}]]>`,l=!1;continue}if(h===a.commentPropName){u+=c+`\x3c!--${p[h][0][a.textNodeName]}--\x3e`,l=!0;continue}if("?"===h[0]){const e=s(p[":@"],a),t="?xml"===h?"":c;let n=p[h][0][a.textNodeName];n=0!==n.length?" "+n:"",u+=t+`<${h}${n}${e}?>`,l=!0;continue}let f=c;""!==f&&(f+=a.indentBy);const g=c+`<${h}${s(p[":@"],a)}`,y=t(p[h],a,m,f);-1!==a.unpairedTags.indexOf(h)?a.suppressUnpairedNode?u+=g+">":u+=g+"/>":y&&0!==y.length||!a.suppressEmptyNode?y&&y.endsWith(">")?u+=g+`>${y}${c}</${h}>`:(u+=g+">",y&&""!==c&&(y.includes("/>")||y.includes("</"))?u+=c+a.indentBy+y+c:u+=y,u+=`</${h}>`):u+=g+"/>",l=!0}return u}function n(e){const t=Object.keys(e);for(let n=0;n<t.length;n++){const s=t[n];if(e.hasOwnProperty(s)&&":@"!==s)return s}}function s(e,t){let n="";if(e&&!t.ignoreAttributes)for(let s in e){if(!e.hasOwnProperty(s))continue;let o=t.attributeValueProcessor(s,e[s]);o=r(o,t),!0===o&&t.suppressBooleanAttributes?n+=` ${s.substr(t.attributeNamePrefix.length)}`:n+=` ${s.substr(t.attributeNamePrefix.length)}="${o}"`}return n}function o(e,t){let n=(e=e.substr(0,e.length-t.textNodeName.length-1)).substr(e.lastIndexOf(".")+1);for(let s in t.stopNodes)if(t.stopNodes[s]===e||t.stopNodes[s]==="*."+n)return!0;return!1}function r(e,t){if(e&&e.length>0&&t.processEntities)for(let n=0;n<t.entities.length;n++){const s=t.entities[n];e=e.replace(s.regex,s.val)}return e}e.exports=function(e,n){let s="";return n.format&&n.indentBy.length>0&&(s="\n"),t(e,n,"",s)}},9400:(e,t,n)=>{const s=n(5334);function o(e,t){let n="";for(;t<e.length&&"'"!==e[t]&&'"'!==e[t];t++)n+=e[t];if(n=n.trim(),-1!==n.indexOf(" "))throw new Error("External entites are not supported");const s=e[t++];let o="";for(;t<e.length&&e[t]!==s;t++)o+=e[t];return[n,o,t]}function r(e,t){return"!"===e[t+1]&&"-"===e[t+2]&&"-"===e[t+3]}function a(e,t){return"!"===e[t+1]&&"E"===e[t+2]&&"N"===e[t+3]&&"T"===e[t+4]&&"I"===e[t+5]&&"T"===e[t+6]&&"Y"===e[t+7]}function i(e,t){return"!"===e[t+1]&&"E"===e[t+2]&&"L"===e[t+3]&&"E"===e[t+4]&&"M"===e[t+5]&&"E"===e[t+6]&&"N"===e[t+7]&&"T"===e[t+8]}function c(e,t){return"!"===e[t+1]&&"A"===e[t+2]&&"T"===e[t+3]&&"T"===e[t+4]&&"L"===e[t+5]&&"I"===e[t+6]&&"S"===e[t+7]&&"T"===e[t+8]}function u(e,t){return"!"===e[t+1]&&"N"===e[t+2]&&"O"===e[t+3]&&"T"===e[t+4]&&"A"===e[t+5]&&"T"===e[t+6]&&"I"===e[t+7]&&"O"===e[t+8]&&"N"===e[t+9]}function l(e){if(s.isName(e))return e;throw new Error(`Invalid entity name ${e}`)}e.exports=function(e,t){const n={};if("O"!==e[t+3]||"C"!==e[t+4]||"T"!==e[t+5]||"Y"!==e[t+6]||"P"!==e[t+7]||"E"!==e[t+8])throw new Error("Invalid Tag instead of DOCTYPE");{t+=9;let s=1,d=!1,p=!1,h="";for(;t<e.length;t++)if("<"!==e[t]||p)if(">"===e[t]){if(p?"-"===e[t-1]&&"-"===e[t-2]&&(p=!1,s--):s--,0===s)break}else"["===e[t]?d=!0:h+=e[t];else{if(d&&a(e,t))t+=7,[entityName,val,t]=o(e,t+1),-1===val.indexOf("&")&&(n[l(entityName)]={regx:RegExp(`&${entityName};`,"g"),val});else if(d&&i(e,t))t+=8;else if(d&&c(e,t))t+=8;else if(d&&u(e,t))t+=9;else{if(!r)throw new Error("Invalid DOCTYPE");p=!0}s++,h=""}if(0!==s)throw new Error("Unclosed DOCTYPE")}return{entities:n,i:t}}},460:(e,t)=>{const n={preserveOrder:!1,attributeNamePrefix:"@_",attributesGroupName:!1,textNodeName:"#text",ignoreAttributes:!0,removeNSPrefix:!1,allowBooleanAttributes:!1,parseTagValue:!0,parseAttributeValue:!1,trimValues:!0,cdataPropName:!1,numberParseOptions:{hex:!0,leadingZeros:!0,eNotation:!0},tagValueProcessor:function(e,t){return t},attributeValueProcessor:function(e,t){return t},stopNodes:[],alwaysCreateTextNode:!1,isArray:()=>!1,commentPropName:!1,unpairedTags:[],processEntities:!0,htmlEntities:!1,ignoreDeclaration:!1,ignorePiTags:!1,transformTagName:!1,transformAttributeName:!1,updateTag:function(e,t,n){return e}};t.buildOptions=function(e){return Object.assign({},n,e)},t.defaultOptions=n},7680:(e,t,n)=>{"use strict";const s=n(5334),o=n(3832),r=n(9400),a=n(7983);function i(e){const t=Object.keys(e);for(let n=0;n<t.length;n++){const s=t[n];this.lastEntities[s]={regex:new RegExp("&"+s+";","g"),val:e[s]}}}function c(e,t,n,s,o,r,a){if(void 0!==e&&(this.options.trimValues&&!s&&(e=e.trim()),e.length>0)){a||(e=this.replaceEntitiesValue(e));const s=this.options.tagValueProcessor(t,e,n,o,r);return null==s?e:typeof s!=typeof e||s!==e?s:this.options.trimValues||e.trim()===e?x(e,this.options.parseTagValue,this.options.numberParseOptions):e}}function u(e){if(this.options.removeNSPrefix){const t=e.split(":"),n="/"===e.charAt(0)?"/":"";if("xmlns"===t[0])return"";2===t.length&&(e=n+t[1])}return e}const l=new RegExp("([^\\s=]+)\\s*(=\\s*(['\"])([\\s\\S]*?)\\3)?","gm");function d(e,t,n){if(!this.options.ignoreAttributes&&"string"==typeof e){const n=s.getAllMatches(e,l),o=n.length,r={};for(let e=0;e<o;e++){const s=this.resolveNameSpace(n[e][1]);let o=n[e][4],a=this.options.attributeNamePrefix+s;if(s.length)if(this.options.transformAttributeName&&(a=this.options.transformAttributeName(a)),"__proto__"===a&&(a="#__proto__"),void 0!==o){this.options.trimValues&&(o=o.trim()),o=this.replaceEntitiesValue(o);const e=this.options.attributeValueProcessor(s,o,t);r[a]=null==e?o:typeof e!=typeof o||e!==o?e:x(o,this.options.parseAttributeValue,this.options.numberParseOptions)}else this.options.allowBooleanAttributes&&(r[a]=!0)}if(!Object.keys(r).length)return;if(this.options.attributesGroupName){const e={};return e[this.options.attributesGroupName]=r,e}return r}}const p=function(e){e=e.replace(/\r\n?/g,"\n");const t=new o("!xml");let n=t,s="",a="";for(let i=0;i<e.length;i++)if("<"===e[i])if("/"===e[i+1]){const t=y(e,">",i,"Closing Tag is not closed.");let o=e.substring(i+2,t).trim();if(this.options.removeNSPrefix){const e=o.indexOf(":");-1!==e&&(o=o.substr(e+1))}this.options.transformTagName&&(o=this.options.transformTagName(o)),n&&(s=this.saveTextToParentTag(s,n,a));const r=a.substring(a.lastIndexOf(".")+1);if(o&&-1!==this.options.unpairedTags.indexOf(o))throw new Error(`Unpaired tag can not be used as closing tag: </${o}>`);let c=0;r&&-1!==this.options.unpairedTags.indexOf(r)?(c=a.lastIndexOf(".",a.lastIndexOf(".")-1),this.tagsNodeStack.pop()):c=a.lastIndexOf("."),a=a.substring(0,c),n=this.tagsNodeStack.pop(),s="",i=t}else if("?"===e[i+1]){let t=w(e,i,!1,"?>");if(!t)throw new Error("Pi Tag is not closed.");if(s=this.saveTextToParentTag(s,n,a),this.options.ignoreDeclaration&&"?xml"===t.tagName||this.options.ignorePiTags);else{const e=new o(t.tagName);e.add(this.options.textNodeName,""),t.tagName!==t.tagExp&&t.attrExpPresent&&(e[":@"]=this.buildAttributesMap(t.tagExp,a,t.tagName)),this.addChild(n,e,a)}i=t.closeIndex+1}else if("!--"===e.substr(i+1,3)){const t=y(e,"--\x3e",i+4,"Comment is not closed.");if(this.options.commentPropName){const o=e.substring(i+4,t-2);s=this.saveTextToParentTag(s,n,a),n.add(this.options.commentPropName,[{[this.options.textNodeName]:o}])}i=t}else if("!D"===e.substr(i+1,2)){const t=r(e,i);this.docTypeEntities=t.entities,i=t.i}else if("!["===e.substr(i+1,2)){const t=y(e,"]]>",i,"CDATA is not closed.")-2,o=e.substring(i+9,t);s=this.saveTextToParentTag(s,n,a);let r=this.parseTextData(o,n.tagname,a,!0,!1,!0,!0);null==r&&(r=""),this.options.cdataPropName?n.add(this.options.cdataPropName,[{[this.options.textNodeName]:o}]):n.add(this.options.textNodeName,r),i=t+2}else{let r=w(e,i,this.options.removeNSPrefix),c=r.tagName;const u=r.rawTagName;let l=r.tagExp,d=r.attrExpPresent,p=r.closeIndex;this.options.transformTagName&&(c=this.options.transformTagName(c)),n&&s&&"!xml"!==n.tagname&&(s=this.saveTextToParentTag(s,n,a,!1));const h=n;if(h&&-1!==this.options.unpairedTags.indexOf(h.tagname)&&(n=this.tagsNodeStack.pop(),a=a.substring(0,a.lastIndexOf("."))),c!==t.tagname&&(a+=a?"."+c:c),this.isItStopNode(this.options.stopNodes,a,c)){let t="";if(l.length>0&&l.lastIndexOf("/")===l.length-1)"/"===c[c.length-1]?(c=c.substr(0,c.length-1),a=a.substr(0,a.length-1),l=c):l=l.substr(0,l.length-1),i=r.closeIndex;else if(-1!==this.options.unpairedTags.indexOf(c))i=r.closeIndex;else{const n=this.readStopNodeData(e,u,p+1);if(!n)throw new Error(`Unexpected end of ${u}`);i=n.i,t=n.tagContent}const s=new o(c);c!==l&&d&&(s[":@"]=this.buildAttributesMap(l,a,c)),t&&(t=this.parseTextData(t,c,a,!0,d,!0,!0)),a=a.substr(0,a.lastIndexOf(".")),s.add(this.options.textNodeName,t),this.addChild(n,s,a)}else{if(l.length>0&&l.lastIndexOf("/")===l.length-1){"/"===c[c.length-1]?(c=c.substr(0,c.length-1),a=a.substr(0,a.length-1),l=c):l=l.substr(0,l.length-1),this.options.transformTagName&&(c=this.options.transformTagName(c));const e=new o(c);c!==l&&d&&(e[":@"]=this.buildAttributesMap(l,a,c)),this.addChild(n,e,a),a=a.substr(0,a.lastIndexOf("."))}else{const e=new o(c);this.tagsNodeStack.push(n),c!==l&&d&&(e[":@"]=this.buildAttributesMap(l,a,c)),this.addChild(n,e,a),n=e}s="",i=p}}else s+=e[i];return t.child};function h(e,t,n){const s=this.options.updateTag(t.tagname,n,t[":@"]);!1===s||("string"==typeof s?(t.tagname=s,e.addChild(t)):e.addChild(t))}const m=function(e){if(this.options.processEntities){for(let t in this.docTypeEntities){const n=this.docTypeEntities[t];e=e.replace(n.regx,n.val)}for(let t in this.lastEntities){const n=this.lastEntities[t];e=e.replace(n.regex,n.val)}if(this.options.htmlEntities)for(let t in this.htmlEntities){const n=this.htmlEntities[t];e=e.replace(n.regex,n.val)}e=e.replace(this.ampEntity.regex,this.ampEntity.val)}return e};function f(e,t,n,s){return e&&(void 0===s&&(s=0===Object.keys(t.child).length),void 0!==(e=this.parseTextData(e,t.tagname,n,!1,!!t[":@"]&&0!==Object.keys(t[":@"]).length,s))&&""!==e&&t.add(this.options.textNodeName,e),e=""),e}function g(e,t,n){const s="*."+n;for(const n in e){const o=e[n];if(s===o||t===o)return!0}return!1}function y(e,t,n,s){const o=e.indexOf(t,n);if(-1===o)throw new Error(s);return o+t.length-1}function w(e,t,n,s=">"){const o=function(e,t,n=">"){let s,o="";for(let r=t;r<e.length;r++){let t=e[r];if(s)t===s&&(s="");else if('"'===t||"'"===t)s=t;else if(t===n[0]){if(!n[1])return{data:o,index:r};if(e[r+1]===n[1])return{data:o,index:r}}else"\t"===t&&(t=" ");o+=t}}(e,t+1,s);if(!o)return;let r=o.data;const a=o.index,i=r.search(/\s/);let c=r,u=!0;-1!==i&&(c=r.substring(0,i),r=r.substring(i+1).trimStart());const l=c;if(n){const e=c.indexOf(":");-1!==e&&(c=c.substr(e+1),u=c!==o.data.substr(e+1))}return{tagName:c,tagExp:r,closeIndex:a,attrExpPresent:u,rawTagName:l}}function E(e,t,n){const s=n;let o=1;for(;n<e.length;n++)if("<"===e[n])if("/"===e[n+1]){const r=y(e,">",n,`${t} is not closed`);if(e.substring(n+2,r).trim()===t&&(o--,0===o))return{tagContent:e.substring(s,n),i:r};n=r}else if("?"===e[n+1])n=y(e,"?>",n+1,"StopNode is not closed.");else if("!--"===e.substr(n+1,3))n=y(e,"--\x3e",n+3,"StopNode is not closed.");else if("!["===e.substr(n+1,2))n=y(e,"]]>",n,"StopNode is not closed.")-2;else{const s=w(e,n,">");s&&((s&&s.tagName)===t&&"/"!==s.tagExp[s.tagExp.length-1]&&o++,n=s.closeIndex)}}function x(e,t,n){if(t&&"string"==typeof e){const t=e.trim();return"true"===t||"false"!==t&&a(e,n)}return s.isExist(e)?e:""}e.exports=class{constructor(e){this.options=e,this.currentNode=null,this.tagsNodeStack=[],this.docTypeEntities={},this.lastEntities={apos:{regex:/&(apos|#39|#x27);/g,val:"'"},gt:{regex:/&(gt|#62|#x3E);/g,val:">"},lt:{regex:/&(lt|#60|#x3C);/g,val:"<"},quot:{regex:/&(quot|#34|#x22);/g,val:'"'}},this.ampEntity={regex:/&(amp|#38|#x26);/g,val:"&"},this.htmlEntities={space:{regex:/&(nbsp|#160);/g,val:" "},cent:{regex:/&(cent|#162);/g,val:"¢"},pound:{regex:/&(pound|#163);/g,val:"£"},yen:{regex:/&(yen|#165);/g,val:"¥"},euro:{regex:/&(euro|#8364);/g,val:"€"},copyright:{regex:/&(copy|#169);/g,val:"©"},reg:{regex:/&(reg|#174);/g,val:"®"},inr:{regex:/&(inr|#8377);/g,val:"₹"},num_dec:{regex:/&#([0-9]{1,7});/g,val:(e,t)=>String.fromCharCode(Number.parseInt(t,10))},num_hex:{regex:/&#x([0-9a-fA-F]{1,6});/g,val:(e,t)=>String.fromCharCode(Number.parseInt(t,16))}},this.addExternalEntities=i,this.parseXml=p,this.parseTextData=c,this.resolveNameSpace=u,this.buildAttributesMap=d,this.isItStopNode=g,this.replaceEntitiesValue=m,this.readStopNodeData=E,this.saveTextToParentTag=f,this.addChild=h}}},2923:(e,t,n)=>{const{buildOptions:s}=n(460),o=n(7680),{prettify:r}=n(5629),a=n(3918);e.exports=class{constructor(e){this.externalEntities={},this.options=s(e)}parse(e,t){if("string"==typeof e);else{if(!e.toString)throw new Error("XML data is accepted in String or Bytes[] form.");e=e.toString()}if(t){!0===t&&(t={});const n=a.validate(e,t);if(!0!==n)throw Error(`${n.err.msg}:${n.err.line}:${n.err.col}`)}const n=new o(this.options);n.addExternalEntities(this.externalEntities);const s=n.parseXml(e);return this.options.preserveOrder||void 0===s?s:r(s,this.options)}addEntity(e,t){if(-1!==t.indexOf("&"))throw new Error("Entity value can't have '&'");if(-1!==e.indexOf("&")||-1!==e.indexOf(";"))throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");if("&"===t)throw new Error("An entity with value '&' is not permitted");this.externalEntities[e]=t}}},5629:(e,t)=>{"use strict";function n(e,t,a){let i;const c={};for(let u=0;u<e.length;u++){const l=e[u],d=s(l);let p="";if(p=void 0===a?d:a+"."+d,d===t.textNodeName)void 0===i?i=l[d]:i+=""+l[d];else{if(void 0===d)continue;if(l[d]){let e=n(l[d],t,p);const s=r(e,t);l[":@"]?o(e,l[":@"],p,t):1!==Object.keys(e).length||void 0===e[t.textNodeName]||t.alwaysCreateTextNode?0===Object.keys(e).length&&(t.alwaysCreateTextNode?e[t.textNodeName]="":e=""):e=e[t.textNodeName],void 0!==c[d]&&c.hasOwnProperty(d)?(Array.isArray(c[d])||(c[d]=[c[d]]),c[d].push(e)):t.isArray(d,p,s)?c[d]=[e]:c[d]=e}}}return"string"==typeof i?i.length>0&&(c[t.textNodeName]=i):void 0!==i&&(c[t.textNodeName]=i),c}function s(e){const t=Object.keys(e);for(let e=0;e<t.length;e++){const n=t[e];if(":@"!==n)return n}}function o(e,t,n,s){if(t){const o=Object.keys(t),r=o.length;for(let a=0;a<r;a++){const r=o[a];s.isArray(r,n+"."+r,!0,!0)?e[r]=[t[r]]:e[r]=t[r]}}}function r(e,t){const{textNodeName:n}=t,s=Object.keys(e).length;return 0===s||!(1!==s||!e[n]&&"boolean"!=typeof e[n]&&0!==e[n])}t.prettify=function(e,t){return n(e,t)}},3832:e=>{"use strict";e.exports=class{constructor(e){this.tagname=e,this.child=[],this[":@"]={}}add(e,t){"__proto__"===e&&(e="#__proto__"),this.child.push({[e]:t})}addChild(e){"__proto__"===e.tagname&&(e.tagname="#__proto__"),e[":@"]&&Object.keys(e[":@"]).length>0?this.child.push({[e.tagname]:e.child,":@":e[":@"]}):this.child.push({[e.tagname]:e.child})}}},7983:e=>{const t=/^[-+]?0x[a-fA-F0-9]+$/,n=/^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;!Number.parseInt&&window.parseInt&&(Number.parseInt=window.parseInt),!Number.parseFloat&&window.parseFloat&&(Number.parseFloat=window.parseFloat);const s={hex:!0,leadingZeros:!0,decimalPoint:".",eNotation:!0};e.exports=function(e,o={}){if(o=Object.assign({},s,o),!e||"string"!=typeof e)return e;let r=e.trim();if(void 0!==o.skipLike&&o.skipLike.test(r))return e;if(o.hex&&t.test(r))return Number.parseInt(r,16);{const t=n.exec(r);if(t){const n=t[1],s=t[2];let i=(a=t[3])&&-1!==a.indexOf(".")?("."===(a=a.replace(/0+$/,""))?a="0":"."===a[0]?a="0"+a:"."===a[a.length-1]&&(a=a.substr(0,a.length-1)),a):a;const c=t[4]||t[6];if(!o.leadingZeros&&s.length>0&&n&&"."!==r[2])return e;if(!o.leadingZeros&&s.length>0&&!n&&"."!==r[1])return e;{const t=Number(r),a=""+t;return-1!==a.search(/[eE]/)||c?o.eNotation?t:e:-1!==r.indexOf(".")?"0"===a&&""===i||a===i||n&&a==="-"+i?t:e:s?i===a||n+i===a?t:e:r===a||r===n+a?t:e}}return e}var a}},181:e=>{"use strict";e.exports=require("buffer")},5317:e=>{"use strict";e.exports=require("child_process")},6982:e=>{"use strict";e.exports=require("crypto")},9896:e=>{"use strict";e.exports=require("fs")},1943:e=>{"use strict";e.exports=require("fs/promises")},8611:e=>{"use strict";e.exports=require("http")},857:e=>{"use strict";e.exports=require("os")},2203:e=>{"use strict";e.exports=require("stream")},7016:e=>{"use strict";e.exports=require("url")},9023:e=>{"use strict";e.exports=require("util")}},n={};function s(e){var o=n[e];if(void 0!==o)return o.exports;var r=n[e]={exports:{}};return t[e](r,r.exports,s),r.exports}s.m=t,s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,n)=>(s.f[n](e,t),t)),[])),s.u=e=>e+".js",s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},e={167:1},s.f.require=(t,n)=>{e[t]||(t=>{var n=t.modules,o=t.ids,r=t.runtime;for(var a in n)s.o(n,a)&&(s.m[a]=n[a]);r&&r(s);for(var i=0;i<o.length;i++)e[o[i]]=1})(require("./"+s.u(t)))};var o={};(()=>{"use strict";s.r(o),s.d(o,{default:()=>Gl});var e=s(1095),t=s(9359),n=s(8377),r=s(499),a=s(7122),i=s(7503),c=s(649),u=s(9389),l=s(4171),d=s(8156),p=s(3448),h=s(7135);const m=async(e,t,n)=>({operation:(0,h.u)(t).operation,region:await(0,h.t)(e.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()}),f=e=>{const t=[];return e.operation,t.push(function(e){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"cloudtrail",region:e.region},propertiesExtractor:(e,t)=>({signingProperties:{config:e,context:t}})}}(e)),t},g={UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}};var y=s(5122),w=s(8257),E=s(3058),x=s(1701),b=s(9987),v=s(4029),S=s(7809),P=s(3323),I=s(6228),$=s(2641),O=s(4572),A=s(3197),N=s(6652),T=s(3875);const M="required",C="fn",R="argv",k="ref",D=!0,j="isSet",F="booleanEquals",q="error",z="endpoint",L="tree",U="PartitionResult",_="stringEquals",K={[M]:!1,type:"String"},V={[M]:!0,default:!1,type:"Boolean"},B={[k]:"Endpoint"},H={[C]:F,[R]:[{[k]:"UseFIPS"},!0]},W={[C]:F,[R]:[{[k]:"UseDualStack"},!0]},G={},Q={[k]:"Region"},Z={[C]:"getAttr",[R]:[{[k]:U},"supportsFIPS"]},J={[C]:F,[R]:[!0,{[C]:"getAttr",[R]:[{[k]:U},"supportsDualStack"]}]},Y=[H],X=[W],ee=[Q],te={version:"1.0",parameters:{Region:K,UseDualStack:V,UseFIPS:V,Endpoint:K},rules:[{conditions:[{[C]:j,[R]:[B]}],rules:[{conditions:Y,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:q},{conditions:X,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:q},{endpoint:{url:B,properties:G,headers:G},type:z}],type:L},{conditions:[{[C]:j,[R]:ee}],rules:[{conditions:[{[C]:"aws.partition",[R]:ee,assign:U}],rules:[{conditions:[H,W],rules:[{conditions:[{[C]:F,[R]:[D,Z]},J],rules:[{endpoint:{url:"https://cloudtrail-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:G,headers:G},type:z}],type:L},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:q}],type:L},{conditions:Y,rules:[{conditions:[{[C]:F,[R]:[Z,D]}],rules:[{conditions:[{[C]:_,[R]:[Q,"us-gov-east-1"]}],endpoint:{url:"https://cloudtrail.us-gov-east-1.amazonaws.com",properties:G,headers:G},type:z},{conditions:[{[C]:_,[R]:[Q,"us-gov-west-1"]}],endpoint:{url:"https://cloudtrail.us-gov-west-1.amazonaws.com",properties:G,headers:G},type:z},{endpoint:{url:"https://cloudtrail-fips.{Region}.{PartitionResult#dnsSuffix}",properties:G,headers:G},type:z}],type:L},{error:"FIPS is enabled but this partition does not support FIPS",type:q}],type:L},{conditions:X,rules:[{conditions:[J],rules:[{endpoint:{url:"https://cloudtrail.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:G,headers:G},type:z}],type:L},{error:"DualStack is enabled but this partition does not support DualStack",type:q}],type:L},{endpoint:{url:"https://cloudtrail.{Region}.{PartitionResult#dnsSuffix}",properties:G,headers:G},type:z}],type:L}],type:L},{error:"Invalid Configuration: Missing Region",type:q}]},ne=(e,t={})=>(0,T.sO)(te,{endpointParams:e,logger:t.logger});T.mw.aws=N.UF;var se=s(4321);var oe=s(6928),re=s(5479);const ae=e=>{const t=e.httpAuthSchemes;let n=e.httpAuthSchemeProvider,s=e.credentials;return{setHttpAuthScheme(e){const n=t.findIndex((t=>t.schemeId===e.schemeId));-1===n?t.push(e):t.splice(n,1,e)},httpAuthSchemes:()=>t,setHttpAuthSchemeProvider(e){n=e},httpAuthSchemeProvider:()=>n,setCredentials(e){s=e},credentials:()=>s}};class ie extends d.Kj{constructor(...[s]){const o=(e=>{(0,d.I9)(process.version);const t=(0,se.I)(e),n=()=>t().then(d.lT),s=(e=>({apiVersion:"2013-11-01",base64Decoder:e?.base64Decoder??O.E,base64Encoder:e?.base64Encoder??O.n,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??ne,extensions:e?.extensions??[],httpAuthSchemeProvider:e?.httpAuthSchemeProvider??f,httpAuthSchemes:e?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:e=>e.getIdentityProvider("aws.auth#sigv4"),signer:new I.f2}],logger:e?.logger??new d.N4,serviceId:e?.serviceId??"CloudTrail",urlParser:e?.urlParser??$.D,utf8Decoder:e?.utf8Decoder??A.ar,utf8Encoder:e?.utf8Encoder??A.Pq}))(e);return(0,y.I)(process.version),{...s,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??S.n,credentialDefaultProvider:e?.credentialDefaultProvider??w.v6,defaultUserAgentProvider:e?.defaultUserAgentProvider??(0,E.mJ)({serviceId:s.serviceId,clientVersion:"3.637.0"}),maxAttempts:e?.maxAttempts??(0,b.Z)(l.qs),region:e?.region??(0,b.Z)(a.GG,a.zH),requestHandler:v.$c.create(e?.requestHandler??n),retryMode:e?.retryMode??(0,b.Z)({...l.kN,default:async()=>(await n()).retryMode||P.L0}),sha256:e?.sha256??x.V.bind(null,"sha256"),streamCollector:e?.streamCollector??v.kv,useDualstackEndpoint:e?.useDualstackEndpoint??(0,b.Z)(a.e$),useFipsEndpoint:e?.useFipsEndpoint??(0,b.Z)(a.Ko)}})(s||{}),h=(g=o,{...g,useDualstackEndpoint:g.useDualstackEndpoint??!1,useFipsEndpoint:g.useFipsEndpoint??!1,defaultSigningName:"cloudtrail"});var g;const N=(0,r.Dc)(h),T=(0,l.$z)(N),M=(0,a.TD)(T),C=(0,e.OV)(M);var R;const k=((e,t)=>{const n={...(0,oe.Rq)(e),...(0,d.xA)(e),...(0,re.eS)(e),...ae(e)};return t.forEach((e=>e.configure(n))),{...e,...(0,oe.$3)(n),...(0,d.uv)(n),...(0,re.jt)(n),...(s=n,{httpAuthSchemes:s.httpAuthSchemes(),httpAuthSchemeProvider:s.httpAuthSchemeProvider(),credentials:s.credentials()})};var s})((R=(0,u.Co)(C),{...(0,p.h)(R)}),s?.extensions||[]);super(k),this.config=k,this.middlewareStack.use((0,r.sM)(this.config)),this.middlewareStack.use((0,l.ey)(this.config)),this.middlewareStack.use((0,c.vK)(this.config)),this.middlewareStack.use((0,e.TC)(this.config)),this.middlewareStack.use((0,t.Y7)(this.config)),this.middlewareStack.use((0,n.n4)(this.config)),this.middlewareStack.use((0,i.wB)(this.config,{httpAuthSchemeParametersProvider:m,identityProviderConfigProvider:async e=>new i.h$({"aws.auth#sigv4":e.credentials})})),this.middlewareStack.use((0,i.lW)(this.config))}destroy(){super.destroy()}}var ce=s(1208),ue=s(1919);class le extends d.TJ{constructor(e){super(e),Object.setPrototypeOf(this,le.prototype)}}class de extends le{constructor(e){super({name:"AccessDeniedException",$fault:"client",...e}),this.name="AccessDeniedException",this.$fault="client",Object.setPrototypeOf(this,de.prototype),this.Message=e.Message}}class pe extends le{constructor(e){super({name:"AccountHasOngoingImportException",$fault:"client",...e}),this.name="AccountHasOngoingImportException",this.$fault="client",Object.setPrototypeOf(this,pe.prototype),this.Message=e.Message}}class he extends le{constructor(e){super({name:"AccountNotFoundException",$fault:"client",...e}),this.name="AccountNotFoundException",this.$fault="client",Object.setPrototypeOf(this,he.prototype),this.Message=e.Message}}class me extends le{constructor(e){super({name:"AccountNotRegisteredException",$fault:"client",...e}),this.name="AccountNotRegisteredException",this.$fault="client",Object.setPrototypeOf(this,me.prototype),this.Message=e.Message}}class fe extends le{constructor(e){super({name:"AccountRegisteredException",$fault:"client",...e}),this.name="AccountRegisteredException",this.$fault="client",Object.setPrototypeOf(this,fe.prototype),this.Message=e.Message}}class ge extends le{constructor(e){super({name:"ChannelARNInvalidException",$fault:"client",...e}),this.name="ChannelARNInvalidException",this.$fault="client",Object.setPrototypeOf(this,ge.prototype),this.Message=e.Message}}class ye extends le{constructor(e){super({name:"ChannelNotFoundException",$fault:"client",...e}),this.name="ChannelNotFoundException",this.$fault="client",Object.setPrototypeOf(this,ye.prototype),this.Message=e.Message}}class we extends le{constructor(e){super({name:"CloudTrailARNInvalidException",$fault:"client",...e}),this.name="CloudTrailARNInvalidException",this.$fault="client",Object.setPrototypeOf(this,we.prototype),this.Message=e.Message}}class Ee extends le{constructor(e){super({name:"ConflictException",$fault:"client",...e}),this.name="ConflictException",this.$fault="client",Object.setPrototypeOf(this,Ee.prototype),this.Message=e.Message}}class xe extends le{constructor(e){super({name:"EventDataStoreARNInvalidException",$fault:"client",...e}),this.name="EventDataStoreARNInvalidException",this.$fault="client",Object.setPrototypeOf(this,xe.prototype),this.Message=e.Message}}class be extends le{constructor(e){super({name:"EventDataStoreNotFoundException",$fault:"client",...e}),this.name="EventDataStoreNotFoundException",this.$fault="client",Object.setPrototypeOf(this,be.prototype),this.Message=e.Message}}class ve extends le{constructor(e){super({name:"InactiveEventDataStoreException",$fault:"client",...e}),this.name="InactiveEventDataStoreException",this.$fault="client",Object.setPrototypeOf(this,ve.prototype),this.Message=e.Message}}class Se extends le{constructor(e){super({name:"InvalidTagParameterException",$fault:"client",...e}),this.name="InvalidTagParameterException",this.$fault="client",Object.setPrototypeOf(this,Se.prototype),this.Message=e.Message}}class Pe extends le{constructor(e){super({name:"InvalidTrailNameException",$fault:"client",...e}),this.name="InvalidTrailNameException",this.$fault="client",Object.setPrototypeOf(this,Pe.prototype),this.Message=e.Message}}class Ie extends le{constructor(e){super({name:"NoManagementAccountSLRExistsException",$fault:"client",...e}),this.name="NoManagementAccountSLRExistsException",this.$fault="client",Object.setPrototypeOf(this,Ie.prototype),this.Message=e.Message}}class $e extends le{constructor(e){super({name:"NotOrganizationMasterAccountException",$fault:"client",...e}),this.name="NotOrganizationMasterAccountException",this.$fault="client",Object.setPrototypeOf(this,$e.prototype),this.Message=e.Message}}class Oe extends le{constructor(e){super({name:"OperationNotPermittedException",$fault:"client",...e}),this.name="OperationNotPermittedException",this.$fault="client",Object.setPrototypeOf(this,Oe.prototype),this.Message=e.Message}}class Ae extends le{constructor(e){super({name:"ResourceNotFoundException",$fault:"client",...e}),this.name="ResourceNotFoundException",this.$fault="client",Object.setPrototypeOf(this,Ae.prototype),this.Message=e.Message}}class Ne extends le{constructor(e){super({name:"ResourceTypeNotSupportedException",$fault:"client",...e}),this.name="ResourceTypeNotSupportedException",this.$fault="client",Object.setPrototypeOf(this,Ne.prototype),this.Message=e.Message}}class Te extends le{constructor(e){super({name:"TagsLimitExceededException",$fault:"client",...e}),this.name="TagsLimitExceededException",this.$fault="client",Object.setPrototypeOf(this,Te.prototype),this.Message=e.Message}}class Me extends le{constructor(e){super({name:"UnsupportedOperationException",$fault:"client",...e}),this.name="UnsupportedOperationException",this.$fault="client",Object.setPrototypeOf(this,Me.prototype),this.Message=e.Message}}class Ce extends le{constructor(e){super({name:"InactiveQueryException",$fault:"client",...e}),this.name="InactiveQueryException",this.$fault="client",Object.setPrototypeOf(this,Ce.prototype),this.Message=e.Message}}class Re extends le{constructor(e){super({name:"InvalidParameterException",$fault:"client",...e}),this.name="InvalidParameterException",this.$fault="client",Object.setPrototypeOf(this,Re.prototype),this.Message=e.Message}}class ke extends le{constructor(e){super({name:"QueryIdNotFoundException",$fault:"client",...e}),this.name="QueryIdNotFoundException",this.$fault="client",Object.setPrototypeOf(this,ke.prototype),this.Message=e.Message}}class De extends le{constructor(e){super({name:"CannotDelegateManagementAccountException",$fault:"client",...e}),this.name="CannotDelegateManagementAccountException",this.$fault="client",Object.setPrototypeOf(this,De.prototype),this.Message=e.Message}}class je extends le{constructor(e){super({name:"ChannelAlreadyExistsException",$fault:"client",...e}),this.name="ChannelAlreadyExistsException",this.$fault="client",Object.setPrototypeOf(this,je.prototype),this.Message=e.Message}}class Fe extends le{constructor(e){super({name:"ChannelExistsForEDSException",$fault:"client",...e}),this.name="ChannelExistsForEDSException",this.$fault="client",Object.setPrototypeOf(this,Fe.prototype),this.Message=e.Message}}class qe extends le{constructor(e){super({name:"ChannelMaxLimitExceededException",$fault:"client",...e}),this.name="ChannelMaxLimitExceededException",this.$fault="client",Object.setPrototypeOf(this,qe.prototype),this.Message=e.Message}}class ze extends le{constructor(e){super({name:"InvalidEventDataStoreCategoryException",$fault:"client",...e}),this.name="InvalidEventDataStoreCategoryException",this.$fault="client",Object.setPrototypeOf(this,ze.prototype),this.Message=e.Message}}class Le extends le{constructor(e){super({name:"InvalidSourceException",$fault:"client",...e}),this.name="InvalidSourceException",this.$fault="client",Object.setPrototypeOf(this,Le.prototype),this.Message=e.Message}}class Ue extends le{constructor(e){super({name:"CloudTrailAccessNotEnabledException",$fault:"client",...e}),this.name="CloudTrailAccessNotEnabledException",this.$fault="client",Object.setPrototypeOf(this,Ue.prototype),this.Message=e.Message}}class _e extends le{constructor(e){super({name:"EventDataStoreAlreadyExistsException",$fault:"client",...e}),this.name="EventDataStoreAlreadyExistsException",this.$fault="client",Object.setPrototypeOf(this,_e.prototype),this.Message=e.Message}}class Ke extends le{constructor(e){super({name:"EventDataStoreMaxLimitExceededException",$fault:"client",...e}),this.name="EventDataStoreMaxLimitExceededException",this.$fault="client",Object.setPrototypeOf(this,Ke.prototype),this.Message=e.Message}}class Ve extends le{constructor(e){super({name:"InsufficientDependencyServiceAccessPermissionException",$fault:"client",...e}),this.name="InsufficientDependencyServiceAccessPermissionException",this.$fault="client",Object.setPrototypeOf(this,Ve.prototype),this.Message=e.Message}}class Be extends le{constructor(e){super({name:"InsufficientEncryptionPolicyException",$fault:"client",...e}),this.name="InsufficientEncryptionPolicyException",this.$fault="client",Object.setPrototypeOf(this,Be.prototype),this.Message=e.Message}}class He extends le{constructor(e){super({name:"InvalidEventSelectorsException",$fault:"client",...e}),this.name="InvalidEventSelectorsException",this.$fault="client",Object.setPrototypeOf(this,He.prototype),this.Message=e.Message}}class We extends le{constructor(e){super({name:"InvalidKmsKeyIdException",$fault:"client",...e}),this.name="InvalidKmsKeyIdException",this.$fault="client",Object.setPrototypeOf(this,We.prototype),this.Message=e.Message}}class Ge extends le{constructor(e){super({name:"KmsException",$fault:"client",...e}),this.name="KmsException",this.$fault="client",Object.setPrototypeOf(this,Ge.prototype),this.Message=e.Message}}class Qe extends le{constructor(e){super({name:"KmsKeyNotFoundException",$fault:"client",...e}),this.name="KmsKeyNotFoundException",this.$fault="client",Object.setPrototypeOf(this,Qe.prototype),this.Message=e.Message}}class Ze extends le{constructor(e){super({name:"OrganizationNotInAllFeaturesModeException",$fault:"client",...e}),this.name="OrganizationNotInAllFeaturesModeException",this.$fault="client",Object.setPrototypeOf(this,Ze.prototype),this.Message=e.Message}}class Je extends le{constructor(e){super({name:"OrganizationsNotInUseException",$fault:"client",...e}),this.name="OrganizationsNotInUseException",this.$fault="client",Object.setPrototypeOf(this,Je.prototype),this.Message=e.Message}}class Ye extends le{constructor(e){super({name:"CloudTrailInvalidClientTokenIdException",$fault:"client",...e}),this.name="CloudTrailInvalidClientTokenIdException",this.$fault="client",Object.setPrototypeOf(this,Ye.prototype),this.Message=e.Message}}class Xe extends le{constructor(e){super({name:"CloudWatchLogsDeliveryUnavailableException",$fault:"client",...e}),this.name="CloudWatchLogsDeliveryUnavailableException",this.$fault="client",Object.setPrototypeOf(this,Xe.prototype),this.Message=e.Message}}class et extends le{constructor(e){super({name:"InsufficientS3BucketPolicyException",$fault:"client",...e}),this.name="InsufficientS3BucketPolicyException",this.$fault="client",Object.setPrototypeOf(this,et.prototype),this.Message=e.Message}}class tt extends le{constructor(e){super({name:"InsufficientSnsTopicPolicyException",$fault:"client",...e}),this.name="InsufficientSnsTopicPolicyException",this.$fault="client",Object.setPrototypeOf(this,tt.prototype),this.Message=e.Message}}class nt extends le{constructor(e){super({name:"InvalidCloudWatchLogsLogGroupArnException",$fault:"client",...e}),this.name="InvalidCloudWatchLogsLogGroupArnException",this.$fault="client",Object.setPrototypeOf(this,nt.prototype),this.Message=e.Message}}class st extends le{constructor(e){super({name:"InvalidCloudWatchLogsRoleArnException",$fault:"client",...e}),this.name="InvalidCloudWatchLogsRoleArnException",this.$fault="client",Object.setPrototypeOf(this,st.prototype),this.Message=e.Message}}class ot extends le{constructor(e){super({name:"InvalidParameterCombinationException",$fault:"client",...e}),this.name="InvalidParameterCombinationException",this.$fault="client",Object.setPrototypeOf(this,ot.prototype),this.Message=e.Message}}class rt extends le{constructor(e){super({name:"InvalidS3BucketNameException",$fault:"client",...e}),this.name="InvalidS3BucketNameException",this.$fault="client",Object.setPrototypeOf(this,rt.prototype),this.Message=e.Message}}class at extends le{constructor(e){super({name:"InvalidS3PrefixException",$fault:"client",...e}),this.name="InvalidS3PrefixException",this.$fault="client",Object.setPrototypeOf(this,at.prototype),this.Message=e.Message}}class it extends le{constructor(e){super({name:"InvalidSnsTopicNameException",$fault:"client",...e}),this.name="InvalidSnsTopicNameException",this.$fault="client",Object.setPrototypeOf(this,it.prototype),this.Message=e.Message}}class ct extends le{constructor(e){super({name:"KmsKeyDisabledException",$fault:"client",...e}),this.name="KmsKeyDisabledException",this.$fault="client",Object.setPrototypeOf(this,ct.prototype),this.Message=e.Message}}class ut extends le{constructor(e){super({name:"MaximumNumberOfTrailsExceededException",$fault:"client",...e}),this.name="MaximumNumberOfTrailsExceededException",this.$fault="client",Object.setPrototypeOf(this,ut.prototype),this.Message=e.Message}}class lt extends le{constructor(e){super({name:"S3BucketDoesNotExistException",$fault:"client",...e}),this.name="S3BucketDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,lt.prototype),this.Message=e.Message}}class dt extends le{constructor(e){super({name:"ThrottlingException",$fault:"client",...e}),this.name="ThrottlingException",this.$fault="client",Object.setPrototypeOf(this,dt.prototype),this.Message=e.Message}}class pt extends le{constructor(e){super({name:"TrailAlreadyExistsException",$fault:"client",...e}),this.name="TrailAlreadyExistsException",this.$fault="client",Object.setPrototypeOf(this,pt.prototype),this.Message=e.Message}}class ht extends le{constructor(e){super({name:"TrailNotProvidedException",$fault:"client",...e}),this.name="TrailNotProvidedException",this.$fault="client",Object.setPrototypeOf(this,ht.prototype),this.Message=e.Message}}class mt extends le{constructor(e){super({name:"EventDataStoreFederationEnabledException",$fault:"client",...e}),this.name="EventDataStoreFederationEnabledException",this.$fault="client",Object.setPrototypeOf(this,mt.prototype),this.Message=e.Message}}class ft extends le{constructor(e){super({name:"EventDataStoreHasOngoingImportException",$fault:"client",...e}),this.name="EventDataStoreHasOngoingImportException",this.$fault="client",Object.setPrototypeOf(this,ft.prototype),this.Message=e.Message}}class gt extends le{constructor(e){super({name:"EventDataStoreTerminationProtectedException",$fault:"client",...e}),this.name="EventDataStoreTerminationProtectedException",this.$fault="client",Object.setPrototypeOf(this,gt.prototype),this.Message=e.Message}}class yt extends le{constructor(e){super({name:"ResourceARNNotValidException",$fault:"client",...e}),this.name="ResourceARNNotValidException",this.$fault="client",Object.setPrototypeOf(this,yt.prototype),this.Message=e.Message}}class wt extends le{constructor(e){super({name:"ResourcePolicyNotFoundException",$fault:"client",...e}),this.name="ResourcePolicyNotFoundException",this.$fault="client",Object.setPrototypeOf(this,wt.prototype),this.Message=e.Message}}class Et extends le{constructor(e){super({name:"InvalidHomeRegionException",$fault:"client",...e}),this.name="InvalidHomeRegionException",this.$fault="client",Object.setPrototypeOf(this,Et.prototype),this.Message=e.Message}}class xt extends le{constructor(e){super({name:"TrailNotFoundException",$fault:"client",...e}),this.name="TrailNotFoundException",this.$fault="client",Object.setPrototypeOf(this,xt.prototype),this.Message=e.Message}}class bt extends le{constructor(e){super({name:"NotOrganizationManagementAccountException",$fault:"client",...e}),this.name="NotOrganizationManagementAccountException",this.$fault="client",Object.setPrototypeOf(this,bt.prototype),this.Message=e.Message}}class vt extends le{constructor(e){super({name:"ConcurrentModificationException",$fault:"client",...e}),this.name="ConcurrentModificationException",this.$fault="client",Object.setPrototypeOf(this,vt.prototype),this.Message=e.Message}}class St extends le{constructor(e){super({name:"ImportNotFoundException",$fault:"client",...e}),this.name="ImportNotFoundException",this.$fault="client",Object.setPrototypeOf(this,St.prototype),this.Message=e.Message}}class Pt extends le{constructor(e){super({name:"InsightNotEnabledException",$fault:"client",...e}),this.name="InsightNotEnabledException",this.$fault="client",Object.setPrototypeOf(this,Pt.prototype),this.Message=e.Message}}class It extends le{constructor(e){super({name:"InvalidMaxResultsException",$fault:"client",...e}),this.name="InvalidMaxResultsException",this.$fault="client",Object.setPrototypeOf(this,It.prototype),this.Message=e.Message}}class $t extends le{constructor(e){super({name:"InvalidNextTokenException",$fault:"client",...e}),this.name="InvalidNextTokenException",this.$fault="client",Object.setPrototypeOf(this,$t.prototype),this.Message=e.Message}}class Ot extends le{constructor(e){super({name:"InvalidTimeRangeException",$fault:"client",...e}),this.name="InvalidTimeRangeException",this.$fault="client",Object.setPrototypeOf(this,Ot.prototype),this.Message=e.Message}}class At extends le{constructor(e){super({name:"InvalidTokenException",$fault:"client",...e}),this.name="InvalidTokenException",this.$fault="client",Object.setPrototypeOf(this,At.prototype),this.Message=e.Message}}class Nt extends le{constructor(e){super({name:"InvalidDateRangeException",$fault:"client",...e}),this.name="InvalidDateRangeException",this.$fault="client",Object.setPrototypeOf(this,Nt.prototype),this.Message=e.Message}}class Tt extends le{constructor(e){super({name:"InvalidQueryStatusException",$fault:"client",...e}),this.name="InvalidQueryStatusException",this.$fault="client",Object.setPrototypeOf(this,Tt.prototype),this.Message=e.Message}}class Mt extends le{constructor(e){super({name:"InvalidEventCategoryException",$fault:"client",...e}),this.name="InvalidEventCategoryException",this.$fault="client",Object.setPrototypeOf(this,Mt.prototype),this.Message=e.Message}}class Ct extends le{constructor(e){super({name:"InvalidLookupAttributesException",$fault:"client",...e}),this.name="InvalidLookupAttributesException",this.$fault="client",Object.setPrototypeOf(this,Ct.prototype),this.Message=e.Message}}class Rt extends le{constructor(e){super({name:"InvalidInsightSelectorsException",$fault:"client",...e}),this.name="InvalidInsightSelectorsException",this.$fault="client",Object.setPrototypeOf(this,Rt.prototype),this.Message=e.Message}}class kt extends le{constructor(e){super({name:"ResourcePolicyNotValidException",$fault:"client",...e}),this.name="ResourcePolicyNotValidException",this.$fault="client",Object.setPrototypeOf(this,kt.prototype),this.Message=e.Message}}class Dt extends le{constructor(e){super({name:"DelegatedAdminAccountLimitExceededException",$fault:"client",...e}),this.name="DelegatedAdminAccountLimitExceededException",this.$fault="client",Object.setPrototypeOf(this,Dt.prototype),this.Message=e.Message}}class jt extends le{constructor(e){super({name:"InvalidEventDataStoreStatusException",$fault:"client",...e}),this.name="InvalidEventDataStoreStatusException",this.$fault="client",Object.setPrototypeOf(this,jt.prototype),this.Message=e.Message}}class Ft extends le{constructor(e){super({name:"InvalidImportSourceException",$fault:"client",...e}),this.name="InvalidImportSourceException",this.$fault="client",Object.setPrototypeOf(this,Ft.prototype),this.Message=e.Message}}class qt extends le{constructor(e){super({name:"InvalidQueryStatementException",$fault:"client",...e}),this.name="InvalidQueryStatementException",this.$fault="client",Object.setPrototypeOf(this,qt.prototype),this.Message=e.Message}}class zt extends le{constructor(e){super({name:"MaxConcurrentQueriesException",$fault:"client",...e}),this.name="MaxConcurrentQueriesException",this.$fault="client",Object.setPrototypeOf(this,zt.prototype),this.Message=e.Message}}const Lt=async(e,t)=>{const n={"content-type":"application/x-amz-json-1.1","x-amz-target":`CloudTrail_20131101.${"LookupEvents"}`};let s;return s=JSON.stringify(Es(e,t)),Ss(t,n,"/",void 0,s)},Ut=async(e,t)=>{if(e.statusCode>=300)return _t(e,t);const n=await(0,ue.Y2)(e.body,t);let s={};return s=xs(n,t),{$metadata:bs(e),...s}},_t=async(e,t)=>{const n={...e,body:await(0,ue.CG)(e.body,t)},s=(0,ue.cJ)(e,n.body);switch(s){case"ChannelARNInvalidException":case"com.amazonaws.cloudtrail#ChannelARNInvalidException":throw await Zt(n,t);case"ChannelNotFoundException":case"com.amazonaws.cloudtrail#ChannelNotFoundException":throw await Xt(n,t);case"CloudTrailARNInvalidException":case"com.amazonaws.cloudtrail#CloudTrailARNInvalidException":throw await tn(n,t);case"ConflictException":case"com.amazonaws.cloudtrail#ConflictException":throw await rn(n,t);case"EventDataStoreARNInvalidException":case"com.amazonaws.cloudtrail#EventDataStoreARNInvalidException":throw await un(n,t);case"EventDataStoreNotFoundException":case"com.amazonaws.cloudtrail#EventDataStoreNotFoundException":throw await hn(n,t);case"InactiveEventDataStoreException":case"com.amazonaws.cloudtrail#InactiveEventDataStoreException":throw await gn(n,t);case"InvalidTagParameterException":case"com.amazonaws.cloudtrail#InvalidTagParameterException":throw await Bn(n,t);case"InvalidTrailNameException":case"com.amazonaws.cloudtrail#InvalidTrailNameException":throw await Gn(n,t);case"NoManagementAccountSLRExistsException":case"com.amazonaws.cloudtrail#NoManagementAccountSLRExistsException":throw await es(n,t);case"NotOrganizationMasterAccountException":case"com.amazonaws.cloudtrail#NotOrganizationMasterAccountException":throw await ns(n,t);case"OperationNotPermittedException":case"com.amazonaws.cloudtrail#OperationNotPermittedException":throw await ss(n,t);case"ResourceNotFoundException":case"com.amazonaws.cloudtrail#ResourceNotFoundException":throw await cs(n,t);case"ResourceTypeNotSupportedException":case"com.amazonaws.cloudtrail#ResourceTypeNotSupportedException":throw await ds(n,t);case"TagsLimitExceededException":case"com.amazonaws.cloudtrail#TagsLimitExceededException":throw await hs(n,t);case"UnsupportedOperationException":case"com.amazonaws.cloudtrail#UnsupportedOperationException":throw await ws(n,t);case"InactiveQueryException":case"com.amazonaws.cloudtrail#InactiveQueryException":throw await yn(n,t);case"InvalidParameterException":case"com.amazonaws.cloudtrail#InvalidParameterException":throw await qn(n,t);case"QueryIdNotFoundException":case"com.amazonaws.cloudtrail#QueryIdNotFoundException":throw await as(n,t);case"ChannelAlreadyExistsException":case"com.amazonaws.cloudtrail#ChannelAlreadyExistsException":throw await Qt(n,t);case"ChannelMaxLimitExceededException":case"com.amazonaws.cloudtrail#ChannelMaxLimitExceededException":throw await Yt(n,t);case"InvalidEventDataStoreCategoryException":case"com.amazonaws.cloudtrail#InvalidEventDataStoreCategoryException":throw await On(n,t);case"InvalidSourceException":case"com.amazonaws.cloudtrail#InvalidSourceException":throw await Vn(n,t);case"CloudTrailAccessNotEnabledException":case"com.amazonaws.cloudtrail#CloudTrailAccessNotEnabledException":throw await en(n,t);case"EventDataStoreAlreadyExistsException":case"com.amazonaws.cloudtrail#EventDataStoreAlreadyExistsException":throw await cn(n,t);case"EventDataStoreMaxLimitExceededException":case"com.amazonaws.cloudtrail#EventDataStoreMaxLimitExceededException":throw await pn(n,t);case"InsufficientDependencyServiceAccessPermissionException":case"com.amazonaws.cloudtrail#InsufficientDependencyServiceAccessPermissionException":throw await En(n,t);case"InsufficientEncryptionPolicyException":case"com.amazonaws.cloudtrail#InsufficientEncryptionPolicyException":throw await xn(n,t);case"InvalidEventSelectorsException":case"com.amazonaws.cloudtrail#InvalidEventSelectorsException":throw await Nn(n,t);case"InvalidKmsKeyIdException":case"com.amazonaws.cloudtrail#InvalidKmsKeyIdException":throw await Rn(n,t);case"KmsException":case"com.amazonaws.cloudtrail#KmsException":throw await Qn(n,t);case"KmsKeyNotFoundException":case"com.amazonaws.cloudtrail#KmsKeyNotFoundException":throw await Jn(n,t);case"OrganizationNotInAllFeaturesModeException":case"com.amazonaws.cloudtrail#OrganizationNotInAllFeaturesModeException":throw await os(n,t);case"OrganizationsNotInUseException":case"com.amazonaws.cloudtrail#OrganizationsNotInUseException":throw await rs(n,t);case"CloudTrailInvalidClientTokenIdException":case"com.amazonaws.cloudtrail#CloudTrailInvalidClientTokenIdException":throw await nn(n,t);case"CloudWatchLogsDeliveryUnavailableException":case"com.amazonaws.cloudtrail#CloudWatchLogsDeliveryUnavailableException":throw await sn(n,t);case"InsufficientS3BucketPolicyException":case"com.amazonaws.cloudtrail#InsufficientS3BucketPolicyException":throw await bn(n,t);case"InsufficientSnsTopicPolicyException":case"com.amazonaws.cloudtrail#InsufficientSnsTopicPolicyException":throw await vn(n,t);case"InvalidCloudWatchLogsLogGroupArnException":case"com.amazonaws.cloudtrail#InvalidCloudWatchLogsLogGroupArnException":throw await Sn(n,t);case"InvalidCloudWatchLogsRoleArnException":case"com.amazonaws.cloudtrail#InvalidCloudWatchLogsRoleArnException":throw await Pn(n,t);case"InvalidParameterCombinationException":case"com.amazonaws.cloudtrail#InvalidParameterCombinationException":throw await Fn(n,t);case"InvalidS3BucketNameException":case"com.amazonaws.cloudtrail#InvalidS3BucketNameException":throw await Un(n,t);case"InvalidS3PrefixException":case"com.amazonaws.cloudtrail#InvalidS3PrefixException":throw await _n(n,t);case"InvalidSnsTopicNameException":case"com.amazonaws.cloudtrail#InvalidSnsTopicNameException":throw await Kn(n,t);case"KmsKeyDisabledException":case"com.amazonaws.cloudtrail#KmsKeyDisabledException":throw await Zn(n,t);case"MaximumNumberOfTrailsExceededException":case"com.amazonaws.cloudtrail#MaximumNumberOfTrailsExceededException":throw await Xn(n,t);case"S3BucketDoesNotExistException":case"com.amazonaws.cloudtrail#S3BucketDoesNotExistException":throw await ps(n,t);case"ThrottlingException":case"com.amazonaws.cloudtrail#ThrottlingException":throw await ms(n,t);case"TrailAlreadyExistsException":case"com.amazonaws.cloudtrail#TrailAlreadyExistsException":throw await fs(n,t);case"TrailNotProvidedException":case"com.amazonaws.cloudtrail#TrailNotProvidedException":throw await ys(n,t);case"ChannelExistsForEDSException":case"com.amazonaws.cloudtrail#ChannelExistsForEDSException":throw await Jt(n,t);case"EventDataStoreFederationEnabledException":case"com.amazonaws.cloudtrail#EventDataStoreFederationEnabledException":throw await ln(n,t);case"EventDataStoreHasOngoingImportException":case"com.amazonaws.cloudtrail#EventDataStoreHasOngoingImportException":throw await dn(n,t);case"EventDataStoreTerminationProtectedException":case"com.amazonaws.cloudtrail#EventDataStoreTerminationProtectedException":throw await mn(n,t);case"ResourceARNNotValidException":case"com.amazonaws.cloudtrail#ResourceARNNotValidException":throw await is(n,t);case"ResourcePolicyNotFoundException":case"com.amazonaws.cloudtrail#ResourcePolicyNotFoundException":throw await us(n,t);case"InvalidHomeRegionException":case"com.amazonaws.cloudtrail#InvalidHomeRegionException":throw await Tn(n,t);case"TrailNotFoundException":case"com.amazonaws.cloudtrail#TrailNotFoundException":throw await gs(n,t);case"AccountNotFoundException":case"com.amazonaws.cloudtrail#AccountNotFoundException":throw await Bt(n,t);case"AccountNotRegisteredException":case"com.amazonaws.cloudtrail#AccountNotRegisteredException":throw await Ht(n,t);case"NotOrganizationManagementAccountException":case"com.amazonaws.cloudtrail#NotOrganizationManagementAccountException":throw await ts(n,t);case"AccessDeniedException":case"com.amazonaws.cloudtrail#AccessDeniedException":throw await Kt(n,t);case"ConcurrentModificationException":case"com.amazonaws.cloudtrail#ConcurrentModificationException":throw await on(n,t);case"ImportNotFoundException":case"com.amazonaws.cloudtrail#ImportNotFoundException":throw await fn(n,t);case"InsightNotEnabledException":case"com.amazonaws.cloudtrail#InsightNotEnabledException":throw await wn(n,t);case"InvalidMaxResultsException":case"com.amazonaws.cloudtrail#InvalidMaxResultsException":throw await Dn(n,t);case"InvalidNextTokenException":case"com.amazonaws.cloudtrail#InvalidNextTokenException":throw await jn(n,t);case"InvalidTimeRangeException":case"com.amazonaws.cloudtrail#InvalidTimeRangeException":throw await Hn(n,t);case"InvalidTokenException":case"com.amazonaws.cloudtrail#InvalidTokenException":throw await Wn(n,t);case"InvalidDateRangeException":case"com.amazonaws.cloudtrail#InvalidDateRangeException":throw await In(n,t);case"InvalidQueryStatusException":case"com.amazonaws.cloudtrail#InvalidQueryStatusException":throw await Ln(n,t);case"InvalidEventCategoryException":case"com.amazonaws.cloudtrail#InvalidEventCategoryException":throw await $n(n,t);case"InvalidLookupAttributesException":case"com.amazonaws.cloudtrail#InvalidLookupAttributesException":throw await kn(n,t);case"InvalidInsightSelectorsException":case"com.amazonaws.cloudtrail#InvalidInsightSelectorsException":throw await Cn(n,t);case"ResourcePolicyNotValidException":case"com.amazonaws.cloudtrail#ResourcePolicyNotValidException":throw await ls(n,t);case"AccountRegisteredException":case"com.amazonaws.cloudtrail#AccountRegisteredException":throw await Wt(n,t);case"CannotDelegateManagementAccountException":case"com.amazonaws.cloudtrail#CannotDelegateManagementAccountException":throw await Gt(n,t);case"DelegatedAdminAccountLimitExceededException":case"com.amazonaws.cloudtrail#DelegatedAdminAccountLimitExceededException":throw await an(n,t);case"InvalidEventDataStoreStatusException":case"com.amazonaws.cloudtrail#InvalidEventDataStoreStatusException":throw await An(n,t);case"AccountHasOngoingImportException":case"com.amazonaws.cloudtrail#AccountHasOngoingImportException":throw await Vt(n,t);case"InvalidImportSourceException":case"com.amazonaws.cloudtrail#InvalidImportSourceException":throw await Mn(n,t);case"InvalidQueryStatementException":case"com.amazonaws.cloudtrail#InvalidQueryStatementException":throw await zn(n,t);case"MaxConcurrentQueriesException":case"com.amazonaws.cloudtrail#MaxConcurrentQueriesException":throw await Yn(n,t);default:const o=n.body;return vs({output:e,parsedBody:o,errorCode:s})}},Kt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new de({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Vt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new pe({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Bt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new he({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Ht=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new me({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Wt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new fe({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Gt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new De({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Qt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new je({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Zt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new ge({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Jt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Fe({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Yt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new qe({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Xt=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new ye({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},en=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Ue({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},tn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new we({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},nn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Ye({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},sn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Xe({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},on=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new vt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},rn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Ee({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},an=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Dt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},cn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new _e({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},un=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new xe({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},ln=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new mt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},dn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new ft({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},pn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Ke({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},hn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new be({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},mn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new gt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},fn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new St({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},gn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new ve({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},yn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Ce({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},wn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Pt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},En=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Ve({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},xn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Be({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},bn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new et({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},vn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new tt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Sn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new nt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Pn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new st({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},In=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Nt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},$n=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Mt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},On=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new ze({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},An=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new jt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Nn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new He({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Tn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Et({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Mn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Ft({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Cn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Rt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Rn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new We({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},kn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Ct({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Dn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new It({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},jn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new $t({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Fn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new ot({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},qn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Re({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},zn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new qt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Ln=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Tt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Un=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new rt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},_n=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new at({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Kn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new it({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Vn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Le({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Bn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Se({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Hn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Ot({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Wn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new At({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Gn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Pe({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Qn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Ge({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Zn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new ct({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Jn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Qe({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Yn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new zt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Xn=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new ut({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},es=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Ie({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},ts=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new bt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},ns=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new $e({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},ss=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Oe({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},os=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Ze({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},rs=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Je({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},as=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new ke({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},is=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new yt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},cs=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Ae({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},us=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new wt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},ls=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new kt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},ds=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Ne({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},ps=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new lt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},hs=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Te({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},ms=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new dt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},fs=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new pt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},gs=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new xt({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},ys=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new ht({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},ws=async(e,t)=>{const n=e.body,s=(0,d.Ss)(n),o=new Me({$metadata:bs(e),...s});return(0,d.Mw)(o,n)},Es=(e,t)=>(0,d.s)(e,{EndTime:e=>e.getTime()/1e3,EventCategory:[],LookupAttributes:d.Ss,MaxResults:[],NextToken:[],StartTime:e=>e.getTime()/1e3}),xs=(e,t)=>(0,d.s)(e,{Events:e=>(e=>{const t=(e||[]).filter((e=>null!=e)).map((e=>(e=>(0,d.s)(e,{AccessKeyId:d.lK,CloudTrailEvent:d.lK,EventId:d.lK,EventName:d.lK,EventSource:d.lK,EventTime:e=>(0,d.Y0)((0,d.l3)((0,d.r$)(e))),ReadOnly:d.lK,Resources:d.Ss,Username:d.lK}))(e)));return t})(e),NextToken:d.lK}),bs=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),vs=(0,d.jr)(le),Ss=async(e,t,n,s,o)=>{const{hostname:r,protocol:a="https",port:i,path:c}=await e.endpoint(),u={protocol:a,hostname:r,port:i,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==s&&(u.hostname=s),void 0!==o&&(u.body=o),new re.Kd(u)};class Ps extends(d.uB.classBuilder().ep({...g}).m((function(e,t,n,s){return[(0,ce.TM)(n,this.serialize,this.deserialize),(0,u.rD)(n,e.getEndpointParameterInstructions())]})).s("CloudTrail_20131101","LookupEvents",{}).n("CloudTrailClient","LookupEventsCommand").f(void 0,void 0).ser(Lt).de(Ut).build()){}var Is=function(e){var t=JSON.parse(e.CloudTrailEvent).userIdentity.arn.split("/").slice(1),n=t[0],s=t[1];this.iamRole=n,this.stsSession=s,this.eventTime=e.EventTime},$s=function(){function e(){this.cloudTrailClient=new ie({})}return e.prototype.retrieveQuickSightUserEvents=function(e){return t=this,n=void 0,o=function(){var t,n,s,o;return function(e,t){var n,s,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function i(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,i[0]&&(a=0)),a;)try{if(n=1,s&&(o=2&i[0]?s.return:i[0]?s.throw||((o=s.return)&&o.call(s),0):s.next)&&!(o=o.call(s,i[1])).done)return o;switch(s=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,s=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],s=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}(this,(function(r){switch(r.label){case 0:t=[],n=null,r.label=1;case 1:return s=new Ps({LookupAttributes:[{AttributeKey:"EventSource",AttributeValue:"quicksight.amazonaws.com"}],StartTime:e,NextToken:n}),[4,this.cloudTrailClient.send(s)];case 2:o=r.sent(),n=o.NextToken,o.Events.forEach((function(e){return t.push(new Is(e))})),r.label=3;case 3:if(n)return[3,1];r.label=4;case 4:return[2,t]}}))},new((s=void 0)||(s=Promise))((function(e,r){function a(e){try{c(o.next(e))}catch(e){r(e)}}function i(e){try{c(o.throw(e))}catch(e){r(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof s?n:new s((function(e){e(n)}))).then(a,i)}c((o=o.apply(t,n||[])).next())}));var t,n,s,o},e.prototype.getLastAccessDate=function(e,t){var n=t.filter((function(t){return e.iamRole===t.iamRole&&e.stsSession===t.stsSession}));if(0===n.length)return console.debug("".concat(e.iamRole,"/").concat(e.stsSession," no CloudTrail events found")),new Date(0);var s=n.sort((function(e,t){return e.eventTime<=t.eventTime?1:-1}))[0];return console.debug("".concat(e.iamRole,"/").concat(e.stsSession," latest event: ").concat(JSON.stringify(s,null,1))),s.eventTime},e}(),Os=s(8230);const As={environmentVariableSelector:e=>(0,Os.Qm)(e,"AWS_DISABLE_REQUEST_COMPRESSION",Os.cV.ENV),configFileSelector:e=>(0,Os.Qm)(e,"disable_request_compression",Os.cV.CONFIG),default:!1},Ns={environmentVariableSelector:e=>(0,Os.nB)(e,"AWS_REQUEST_MIN_COMPRESSION_SIZE_BYTES",Os.cV.ENV),configFileSelector:e=>(0,Os.nB)(e,"request_min_compression_size_bytes",Os.cV.CONFIG),default:10240},Ts=require("zlib"),Ms=async e=>e.pipe((0,Ts.createGzip)()),Cs=(0,s(9023).promisify)(Ts.gzip),Rs=async e=>{try{const t=await Cs((0,A.Fo)(e||""));return(0,A.Fo)(t)}catch(e){throw new Error("Failure during compression: "+e.message)}};var ks;!function(e){e.GZIP="gzip"}(ks||(ks={}));const Ds=[ks.GZIP];var js=s(3695);const Fs=e=>void 0!==e&&"string"!=typeof e&&!ArrayBuffer.isView(e)&&!(0,js.m)(e),qs={name:"compressionMiddleware",step:"build",tags:["REQUEST_BODY_COMPRESSION","GZIP"],override:!0,priority:"high"},zs=(e,t)=>({applyToStack:n=>{n.add(((e,t)=>n=>async s=>{if(!re.Kd.isInstance(s.request))return n(s);if(await e.disableRequestCompression())return n(s);const{request:o}=s,{body:r,headers:a}=o,{encodings:i,streamRequiresLength:c}=t;let u=r,l=a;for(const t of i)if(Ds.includes(t)){let n=!1;if(Fs(r)){if(c)throw new Error("Compression is not supported for streaming blobs that require a length.");u=await Ms(r),n=!0}else{const t=e.bodyLengthChecker(r),s=await e.requestMinCompressionSizeBytes();t&&t>=s&&(u=await Rs(r),n=!0)}if(n){l=a["Content-Encoding"]?{...a,"Content-Encoding":`${a["Content-Encoding"]},${t}`}:{...a,"Content-Encoding":t};break}}return n({...s,request:{...o,body:u,headers:l}})})(e,t),qs)}}),Ls=async(e,t,n)=>({operation:(0,h.u)(t).operation,region:await(0,h.t)(e.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()}),Us=e=>{const t=[];return e.operation,t.push(function(e){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"monitoring",region:e.region},propertiesExtractor:(e,t)=>({signingProperties:{config:e,context:t}})}}(e)),t},_s={UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}},Ks="required",Vs="fn",Bs="argv",Hs="ref",Ws=!0,Gs="isSet",Qs="booleanEquals",Zs="error",Js="endpoint",Ys="tree",Xs="PartitionResult",eo="getAttr",to={[Ks]:!1,type:"String"},no={[Ks]:!0,default:!1,type:"Boolean"},so={[Hs]:"Endpoint"},oo={[Vs]:Qs,[Bs]:[{[Hs]:"UseFIPS"},!0]},ro={[Vs]:Qs,[Bs]:[{[Hs]:"UseDualStack"},!0]},ao={},io={[Vs]:eo,[Bs]:[{[Hs]:Xs},"supportsFIPS"]},co={[Hs]:Xs},uo={[Vs]:Qs,[Bs]:[!0,{[Vs]:eo,[Bs]:[co,"supportsDualStack"]}]},lo=[oo],po=[ro],ho=[{[Hs]:"Region"}],mo={version:"1.0",parameters:{Region:to,UseDualStack:no,UseFIPS:no,Endpoint:to},rules:[{conditions:[{[Vs]:Gs,[Bs]:[so]}],rules:[{conditions:lo,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:Zs},{conditions:po,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:Zs},{endpoint:{url:so,properties:ao,headers:ao},type:Js}],type:Ys},{conditions:[{[Vs]:Gs,[Bs]:ho}],rules:[{conditions:[{[Vs]:"aws.partition",[Bs]:ho,assign:Xs}],rules:[{conditions:[oo,ro],rules:[{conditions:[{[Vs]:Qs,[Bs]:[Ws,io]},uo],rules:[{endpoint:{url:"https://monitoring-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:ao,headers:ao},type:Js}],type:Ys},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:Zs}],type:Ys},{conditions:lo,rules:[{conditions:[{[Vs]:Qs,[Bs]:[io,Ws]}],rules:[{conditions:[{[Vs]:"stringEquals",[Bs]:[{[Vs]:eo,[Bs]:[co,"name"]},"aws-us-gov"]}],endpoint:{url:"https://monitoring.{Region}.amazonaws.com",properties:ao,headers:ao},type:Js},{endpoint:{url:"https://monitoring-fips.{Region}.{PartitionResult#dnsSuffix}",properties:ao,headers:ao},type:Js}],type:Ys},{error:"FIPS is enabled but this partition does not support FIPS",type:Zs}],type:Ys},{conditions:po,rules:[{conditions:[uo],rules:[{endpoint:{url:"https://monitoring.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:ao,headers:ao},type:Js}],type:Ys},{error:"DualStack is enabled but this partition does not support DualStack",type:Zs}],type:Ys},{endpoint:{url:"https://monitoring.{Region}.{PartitionResult#dnsSuffix}",properties:ao,headers:ao},type:Js}],type:Ys}],type:Ys},{error:"Invalid Configuration: Missing Region",type:Zs}]},fo=(e,t={})=>(0,T.sO)(mo,{endpointParams:e,logger:t.logger});T.mw.aws=N.UF;const go=e=>{const t=e.httpAuthSchemes;let n=e.httpAuthSchemeProvider,s=e.credentials;return{setHttpAuthScheme(e){const n=t.findIndex((t=>t.schemeId===e.schemeId));-1===n?t.push(e):t.splice(n,1,e)},httpAuthSchemes:()=>t,setHttpAuthSchemeProvider(e){n=e},httpAuthSchemeProvider:()=>n,setCredentials(e){s=e},credentials:()=>s}};class yo extends d.Kj{constructor(...[s]){const o=(e=>{(0,d.I9)(process.version);const t=(0,se.I)(e),n=()=>t().then(d.lT),s=(e=>({apiVersion:"2010-08-01",base64Decoder:e?.base64Decoder??O.E,base64Encoder:e?.base64Encoder??O.n,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??fo,extensions:e?.extensions??[],httpAuthSchemeProvider:e?.httpAuthSchemeProvider??Us,httpAuthSchemes:e?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:e=>e.getIdentityProvider("aws.auth#sigv4"),signer:new I.f2}],logger:e?.logger??new d.N4,serviceId:e?.serviceId??"CloudWatch",urlParser:e?.urlParser??$.D,utf8Decoder:e?.utf8Decoder??A.ar,utf8Encoder:e?.utf8Encoder??A.Pq}))(e);return(0,y.I)(process.version),{...s,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??S.n,credentialDefaultProvider:e?.credentialDefaultProvider??w.v6,defaultUserAgentProvider:e?.defaultUserAgentProvider??(0,E.mJ)({serviceId:s.serviceId,clientVersion:"3.637.0"}),disableRequestCompression:e?.disableRequestCompression??(0,b.Z)(As),maxAttempts:e?.maxAttempts??(0,b.Z)(l.qs),region:e?.region??(0,b.Z)(a.GG,a.zH),requestHandler:v.$c.create(e?.requestHandler??n),requestMinCompressionSizeBytes:e?.requestMinCompressionSizeBytes??(0,b.Z)(Ns),retryMode:e?.retryMode??(0,b.Z)({...l.kN,default:async()=>(await n()).retryMode||P.L0}),sha256:e?.sha256??x.V.bind(null,"sha256"),streamCollector:e?.streamCollector??v.kv,useDualstackEndpoint:e?.useDualstackEndpoint??(0,b.Z)(a.e$),useFipsEndpoint:e?.useFipsEndpoint??(0,b.Z)(a.Ko)}})(s||{}),m=(f=o,{...f,useDualstackEndpoint:f.useDualstackEndpoint??!1,useFipsEndpoint:f.useFipsEndpoint??!1,defaultSigningName:"monitoring"});var f;const g=(0,r.Dc)(m),N=(0,l.$z)(g),T=(0,a.TD)(N),M=(0,e.OV)(T),C=(R=(0,u.Co)(M),{...(0,p.h)(R)});var R,k;const D=((e,t)=>{const n={...(0,oe.Rq)(e),...(0,d.xA)(e),...(0,re.eS)(e),...go(e)};return t.forEach((e=>e.configure(n))),{...e,...(0,oe.$3)(n),...(0,d.uv)(n),...(0,re.jt)(n),...(s=n,{httpAuthSchemes:s.httpAuthSchemes(),httpAuthSchemeProvider:s.httpAuthSchemeProvider(),credentials:s.credentials()})};var s})((k=C,{...k,disableRequestCompression:(0,h.t)(k.disableRequestCompression),requestMinCompressionSizeBytes:async()=>{const e=await(0,h.t)(k.requestMinCompressionSizeBytes)();if(e<0||e>10485760)throw new RangeError(`The value for requestMinCompressionSizeBytes must be between 0 and 10485760 inclusive. The provided value ${e} is outside this range."`);return e}}),s?.extensions||[]);super(D),this.config=D,this.middlewareStack.use((0,r.sM)(this.config)),this.middlewareStack.use((0,l.ey)(this.config)),this.middlewareStack.use((0,c.vK)(this.config)),this.middlewareStack.use((0,e.TC)(this.config)),this.middlewareStack.use((0,t.Y7)(this.config)),this.middlewareStack.use((0,n.n4)(this.config)),this.middlewareStack.use((0,i.wB)(this.config,{httpAuthSchemeParametersProvider:Ls,identityProviderConfigProvider:async e=>new i.h$({"aws.auth#sigv4":e.credentials})})),this.middlewareStack.use((0,i.lW)(this.config))}destroy(){super.destroy()}}var wo=s(5469);class Eo extends d.TJ{constructor(e){super(e),Object.setPrototypeOf(this,Eo.prototype)}}class xo extends Eo{constructor(e){super({name:"ConcurrentModificationException",$fault:"client",...e}),this.name="ConcurrentModificationException",this.$fault="client",Object.setPrototypeOf(this,xo.prototype),this.Message=e.Message}}class bo extends Eo{constructor(e){super({name:"DashboardInvalidInputError",$fault:"client",...e}),this.name="DashboardInvalidInputError",this.$fault="client",Object.setPrototypeOf(this,bo.prototype),this.dashboardValidationMessages=e.dashboardValidationMessages}}class vo extends Eo{constructor(e){super({name:"ResourceNotFound",$fault:"client",...e}),this.name="ResourceNotFound",this.$fault="client",Object.setPrototypeOf(this,vo.prototype)}}class So extends Eo{constructor(e){super({name:"InternalServiceFault",$fault:"server",...e}),this.name="InternalServiceFault",this.$fault="server",Object.setPrototypeOf(this,So.prototype),this.Message=e.Message}}class Po extends Eo{constructor(e){super({name:"InvalidParameterCombinationException",$fault:"client",...e}),this.name="InvalidParameterCombinationException",this.$fault="client",Object.setPrototypeOf(this,Po.prototype)}}class Io extends Eo{constructor(e){super({name:"InvalidParameterValueException",$fault:"client",...e}),this.name="InvalidParameterValueException",this.$fault="client",Object.setPrototypeOf(this,Io.prototype)}}class $o extends Eo{constructor(e){super({name:"MissingRequiredParameterException",$fault:"client",...e}),this.name="MissingRequiredParameterException",this.$fault="client",Object.setPrototypeOf(this,$o.prototype)}}class Oo extends Eo{constructor(e){super({name:"ResourceNotFoundException",$fault:"client",...e}),this.name="ResourceNotFoundException",this.$fault="client",Object.setPrototypeOf(this,Oo.prototype),this.ResourceType=e.ResourceType,this.ResourceId=e.ResourceId,this.Message=e.Message}}class Ao extends Eo{constructor(e){super({name:"InvalidNextToken",$fault:"client",...e}),this.name="InvalidNextToken",this.$fault="client",Object.setPrototypeOf(this,Ao.prototype)}}class No extends Eo{constructor(e){super({name:"LimitExceededException",$fault:"client",...e}),this.name="LimitExceededException",this.$fault="client",Object.setPrototypeOf(this,No.prototype),this.Message=e.Message}}class To extends Eo{constructor(e){super({name:"LimitExceededFault",$fault:"client",...e}),this.name="LimitExceededFault",this.$fault="client",Object.setPrototypeOf(this,To.prototype)}}class Mo extends Eo{constructor(e){super({name:"InvalidFormatFault",$fault:"client",...e}),this.name="InvalidFormatFault",this.$fault="client",Object.setPrototypeOf(this,Mo.prototype)}}const Co=async(e,t)=>{const n=mr;let s;return s=_r({...Qo(e,t),[gr]:Or,[jr]:fr}),hr(t,n,"/",void 0,s)},Ro=async(e,t)=>e.statusCode>=300?ko(e,t):(await(0,d.Px)(e.body,t),{$metadata:dr(e)}),ko=async(e,t)=>{const n={...e,body:await(0,wo.FI)(e.body,t)},s=Kr(e,n.body);switch(s){case"ResourceNotFound":case"com.amazonaws.cloudwatch#ResourceNotFound":throw await Bo(n,t);case"InternalServiceError":case"com.amazonaws.cloudwatch#InternalServiceFault":throw await Fo(n,t);case"InvalidParameterCombination":case"com.amazonaws.cloudwatch#InvalidParameterCombinationException":throw await Lo(n,t);case"InvalidParameterValue":case"com.amazonaws.cloudwatch#InvalidParameterValueException":throw await Uo(n,t);case"MissingParameter":case"com.amazonaws.cloudwatch#MissingRequiredParameterException":throw await Vo(n,t);case"ResourceNotFoundException":case"com.amazonaws.cloudwatch#ResourceNotFoundException":throw await Ho(n,t);case"InvalidNextToken":case"com.amazonaws.cloudwatch#InvalidNextToken":throw await zo(n,t);case"LimitExceededException":case"com.amazonaws.cloudwatch#LimitExceededException":throw await _o(n,t);case"LimitExceeded":case"com.amazonaws.cloudwatch#LimitExceededFault":throw await Ko(n,t);case"InvalidParameterInput":case"com.amazonaws.cloudwatch#DashboardInvalidInputError":throw await jo(n,t);case"ConcurrentModificationException":case"com.amazonaws.cloudwatch#ConcurrentModificationException":throw await Do(n,t);case"InvalidFormat":case"com.amazonaws.cloudwatch#InvalidFormatFault":throw await qo(n,t);default:const o=n.body;return pr({output:e,parsedBody:o.Error,errorCode:s})}},Do=async(e,t)=>{const n=e.body,s=Yo(n.Error,t),o=new xo({$metadata:dr(e),...s});return(0,d.Mw)(o,n)},jo=async(e,t)=>{const n=e.body,s=Xo(n.Error,t),o=new bo({$metadata:dr(e),...s});return(0,d.Mw)(o,n)},Fo=async(e,t)=>{const n=e.body,s=tr(n.Error,t),o=new So({$metadata:dr(e),...s});return(0,d.Mw)(o,n)},qo=async(e,t)=>{const n=e.body,s=nr(n.Error,t),o=new Mo({$metadata:dr(e),...s});return(0,d.Mw)(o,n)},zo=async(e,t)=>{const n=e.body,s=sr(n.Error,t),o=new Ao({$metadata:dr(e),...s});return(0,d.Mw)(o,n)},Lo=async(e,t)=>{const n=e.body,s=or(n.Error,t),o=new Po({$metadata:dr(e),...s});return(0,d.Mw)(o,n)},Uo=async(e,t)=>{const n=e.body,s=rr(n.Error,t),o=new Io({$metadata:dr(e),...s});return(0,d.Mw)(o,n)},_o=async(e,t)=>{const n=e.body,s=ar(n.Error,t),o=new No({$metadata:dr(e),...s});return(0,d.Mw)(o,n)},Ko=async(e,t)=>{const n=e.body,s=ir(n.Error,t),o=new To({$metadata:dr(e),...s});return(0,d.Mw)(o,n)},Vo=async(e,t)=>{const n=e.body,s=cr(n.Error,t),o=new $o({$metadata:dr(e),...s});return(0,d.Mw)(o,n)},Bo=async(e,t)=>{const n=e.body,s=ur(n.Error,t),o=new vo({$metadata:dr(e),...s});return(0,d.Mw)(o,n)},Ho=async(e,t)=>{const n=e.body,s=lr(n.Error,t),o=new Oo({$metadata:dr(e),...s});return(0,d.Mw)(o,n)},Wo=(e,t)=>{const n={};return null!=e[$r]&&(n[$r]=e[$r]),null!=e[Fr]&&(n[Fr]=e[Fr]),n},Go=(e,t)=>{const n={};if(null!=e[br]&&(n[br]=e[br]),null!=e[wr]){const t=(e=>{const t={};let n=1;for(const s of e){if(null===s)continue;const e=Wo(s);Object.entries(e).forEach((([e,s])=>{t[`member.${n}.${e}`]=s})),n++}return t})(e[wr]);0===e[wr]?.length&&(n.Dimensions=[]),Object.entries(t).forEach((([e,t])=>{n[`Dimensions.${e}`]=t}))}if(null!=e[kr]&&(n[kr]=(0,d.yI)(e[kr])),null!=e[Fr]&&(n[Fr]=(0,d.VA)(e[Fr])),null!=e[Cr]){const s=Zo(e[Cr],t);Object.entries(s).forEach((([e,t])=>{n[`StatisticValues.${e}`]=t}))}if(null!=e[qr]){const s=Jo(e[qr],t);0===e[qr]?.length&&(n.Values=[]),Object.entries(s).forEach((([e,t])=>{n[`Values.${e}`]=t}))}if(null!=e[yr]){const t=(e=>{const t={};let n=1;for(const s of e)null!==s&&(t[`member.${n}`]=(0,d.VA)(s),n++);return t})(e[yr]);0===e[yr]?.length&&(n.Counts=[]),Object.entries(t).forEach((([e,t])=>{n[`Counts.${e}`]=t}))}return null!=e[Dr]&&(n[Dr]=e[Dr]),null!=e[Mr]&&(n[Mr]=e[Mr]),n},Qo=(e,t)=>{const n={};if(null!=e[Ir]&&(n[Ir]=e[Ir]),null!=e[xr]){const s=((e,t)=>{const n={};let s=1;for(const o of e){if(null===o)continue;const e=Go(o,t);Object.entries(e).forEach((([e,t])=>{n[`member.${s}.${e}`]=t})),s++}return n})(e[xr],t);0===e[xr]?.length&&(n.MetricData=[]),Object.entries(s).forEach((([e,t])=>{n[`MetricData.${e}`]=t}))}return n},Zo=(e,t)=>{const n={};return null!=e[Tr]&&(n[Tr]=(0,d.VA)(e[Tr])),null!=e[Rr]&&(n[Rr]=(0,d.VA)(e[Rr])),null!=e[Pr]&&(n[Pr]=(0,d.VA)(e[Pr])),null!=e[vr]&&(n[vr]=(0,d.VA)(e[vr])),n},Jo=(e,t)=>{const n={};let s=1;for(const t of e)null!==t&&(n[`member.${s}`]=(0,d.VA)(t),s++);return n},Yo=(e,t)=>{const n={};return null!=e[Sr]&&(n[Sr]=(0,d.lK)(e[Sr])),n},Xo=(e,t)=>{const n={};return null!=e[Ur]&&(n[Ur]=(0,d.lK)(e[Ur])),""===e.dashboardValidationMessages?n[zr]=[]:null!=e[zr]&&null!=e[zr][Lr]&&(n[zr]=er((0,d.Yd)(e[zr][Lr]),t)),n},er=(e,t)=>(e||[]).filter((e=>null!=e)).map((e=>(e=>{const t={};return null!=e[Er]&&(t[Er]=(0,d.lK)(e[Er])),null!=e[Sr]&&(t[Sr]=(0,d.lK)(e[Sr])),t})(e))),tr=(e,t)=>{const n={};return null!=e[Sr]&&(n[Sr]=(0,d.lK)(e[Sr])),n},nr=(e,t)=>{const n={};return null!=e[Ur]&&(n[Ur]=(0,d.lK)(e[Ur])),n},sr=(e,t)=>{const n={};return null!=e[Ur]&&(n[Ur]=(0,d.lK)(e[Ur])),n},or=(e,t)=>{const n={};return null!=e[Ur]&&(n[Ur]=(0,d.lK)(e[Ur])),n},rr=(e,t)=>{const n={};return null!=e[Ur]&&(n[Ur]=(0,d.lK)(e[Ur])),n},ar=(e,t)=>{const n={};return null!=e[Sr]&&(n[Sr]=(0,d.lK)(e[Sr])),n},ir=(e,t)=>{const n={};return null!=e[Ur]&&(n[Ur]=(0,d.lK)(e[Ur])),n},cr=(e,t)=>{const n={};return null!=e[Ur]&&(n[Ur]=(0,d.lK)(e[Ur])),n},ur=(e,t)=>{const n={};return null!=e[Ur]&&(n[Ur]=(0,d.lK)(e[Ur])),n},lr=(e,t)=>{const n={};return null!=e[Nr]&&(n[Nr]=(0,d.lK)(e[Nr])),null!=e[Ar]&&(n[Ar]=(0,d.lK)(e[Ar])),null!=e[Sr]&&(n[Sr]=(0,d.lK)(e[Sr])),n},dr=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),pr=(0,d.jr)(Eo),hr=async(e,t,n,s,o)=>{const{hostname:r,protocol:a="https",port:i,path:c}=await e.endpoint(),u={protocol:a,hostname:r,port:i,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==s&&(u.hostname=s),void 0!==o&&(u.body=o),new re.Kd(u)},mr={"content-type":"application/x-www-form-urlencoded"},fr="2010-08-01",gr="Action",yr="Counts",wr="Dimensions",Er="DataPath",xr="MetricData",br="MetricName",vr="Maximum",Sr="Message",Pr="Minimum",Ir="Namespace",$r="Name",Or="PutMetricData",Ar="ResourceId",Nr="ResourceType",Tr="SampleCount",Mr="StorageResolution",Cr="StatisticValues",Rr="Sum",kr="Timestamp",Dr="Unit",jr="Version",Fr="Value",qr="Values",zr="dashboardValidationMessages",Lr="member",Ur="message",_r=e=>Object.entries(e).map((([e,t])=>(0,d.$6)(e)+"="+(0,d.$6)(t))).join("&"),Kr=(e,t)=>void 0!==t.Error?.Code?t.Error.Code:404==e.statusCode?"NotFound":void 0;class Vr extends(d.uB.classBuilder().ep({..._s}).m((function(e,t,n,s){return[(0,ce.TM)(n,this.serialize,this.deserialize),(0,u.rD)(n,e.getEndpointParameterInstructions()),zs(n,{encodings:["gzip"]})]})).s("GraniteServiceVersion20100801","PutMetricData",{}).n("CloudWatchClient","PutMetricDataCommand").f(void 0,void 0).ser(Co).de(Ro).build()){}var Br=function(){function e(){this.metricData=[],this.cloudWatchClient=new yo({})}return e.prototype.queueMetric=function(e){this.metricData.push(e)},e.prototype.emitQueuedMetrics=function(){return e=this,t=void 0,s=function(){var e;return function(e,t){var n,s,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function i(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,i[0]&&(a=0)),a;)try{if(n=1,s&&(o=2&i[0]?s.return:i[0]?s.throw||((o=s.return)&&o.call(s),0):s.next)&&!(o=o.call(s,i[1])).done)return o;switch(s=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,s=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],s=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}(this,(function(t){switch(t.label){case 0:return e=new Vr({Namespace:process.env.AWS_LAMBDA_FUNCTION_NAME,MetricData:this.metricData}),console.debug("Emitting metrics:\n".concat(JSON.stringify(e.input,null,2))),[4,this.cloudWatchClient.send(e)];case 1:return t.sent(),this.metricData=[],[2]}}))},new((n=void 0)||(n=Promise))((function(o,r){function a(e){try{c(s.next(e))}catch(e){r(e)}}function i(e){try{c(s.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,i)}c((s=s.apply(e,t||[])).next())}));var e,t,n,s},e}();const Hr=async(e,t,n)=>({operation:(0,h.u)(t).operation,region:await(0,h.t)(e.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()}),Wr=e=>{const t=[];return e.operation,t.push(function(e){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"ses",region:e.region},propertiesExtractor:(e,t)=>({signingProperties:{config:e,context:t}})}}(e)),t},Gr={UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}},Qr="required",Zr="fn",Jr="argv",Yr="ref",Xr=!0,ea="isSet",ta="booleanEquals",na="error",sa="endpoint",oa="tree",ra="PartitionResult",aa={[Qr]:!1,type:"String"},ia={[Qr]:!0,default:!1,type:"Boolean"},ca={[Yr]:"Endpoint"},ua={[Zr]:ta,[Jr]:[{[Yr]:"UseFIPS"},!0]},la={[Zr]:ta,[Jr]:[{[Yr]:"UseDualStack"},!0]},da={},pa={[Zr]:"getAttr",[Jr]:[{[Yr]:ra},"supportsFIPS"]},ha={[Zr]:ta,[Jr]:[!0,{[Zr]:"getAttr",[Jr]:[{[Yr]:ra},"supportsDualStack"]}]},ma=[ua],fa=[la],ga=[{[Yr]:"Region"}],ya={version:"1.0",parameters:{Region:aa,UseDualStack:ia,UseFIPS:ia,Endpoint:aa},rules:[{conditions:[{[Zr]:ea,[Jr]:[ca]}],rules:[{conditions:ma,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:na},{conditions:fa,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:na},{endpoint:{url:ca,properties:da,headers:da},type:sa}],type:oa},{conditions:[{[Zr]:ea,[Jr]:ga}],rules:[{conditions:[{[Zr]:"aws.partition",[Jr]:ga,assign:ra}],rules:[{conditions:[ua,la],rules:[{conditions:[{[Zr]:ta,[Jr]:[Xr,pa]},ha],rules:[{endpoint:{url:"https://email-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:da,headers:da},type:sa}],type:oa},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:na}],type:oa},{conditions:ma,rules:[{conditions:[{[Zr]:ta,[Jr]:[pa,Xr]}],rules:[{endpoint:{url:"https://email-fips.{Region}.{PartitionResult#dnsSuffix}",properties:da,headers:da},type:sa}],type:oa},{error:"FIPS is enabled but this partition does not support FIPS",type:na}],type:oa},{conditions:fa,rules:[{conditions:[ha],rules:[{endpoint:{url:"https://email.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:da,headers:da},type:sa}],type:oa},{error:"DualStack is enabled but this partition does not support DualStack",type:na}],type:oa},{endpoint:{url:"https://email.{Region}.{PartitionResult#dnsSuffix}",properties:da,headers:da},type:sa}],type:oa}],type:oa},{error:"Invalid Configuration: Missing Region",type:na}]},wa=(e,t={})=>(0,T.sO)(ya,{endpointParams:e,logger:t.logger});T.mw.aws=N.UF;const Ea=e=>{const t=e.httpAuthSchemes;let n=e.httpAuthSchemeProvider,s=e.credentials;return{setHttpAuthScheme(e){const n=t.findIndex((t=>t.schemeId===e.schemeId));-1===n?t.push(e):t.splice(n,1,e)},httpAuthSchemes:()=>t,setHttpAuthSchemeProvider(e){n=e},httpAuthSchemeProvider:()=>n,setCredentials(e){s=e},credentials:()=>s}};class xa extends d.Kj{constructor(...[s]){const o=(e=>{(0,d.I9)(process.version);const t=(0,se.I)(e),n=()=>t().then(d.lT),s=(e=>({apiVersion:"2010-12-01",base64Decoder:e?.base64Decoder??O.E,base64Encoder:e?.base64Encoder??O.n,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??wa,extensions:e?.extensions??[],httpAuthSchemeProvider:e?.httpAuthSchemeProvider??Wr,httpAuthSchemes:e?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:e=>e.getIdentityProvider("aws.auth#sigv4"),signer:new I.f2}],logger:e?.logger??new d.N4,serviceId:e?.serviceId??"SES",urlParser:e?.urlParser??$.D,utf8Decoder:e?.utf8Decoder??A.ar,utf8Encoder:e?.utf8Encoder??A.Pq}))(e);return(0,y.I)(process.version),{...s,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??S.n,credentialDefaultProvider:e?.credentialDefaultProvider??w.v6,defaultUserAgentProvider:e?.defaultUserAgentProvider??(0,E.mJ)({serviceId:s.serviceId,clientVersion:"3.637.0"}),maxAttempts:e?.maxAttempts??(0,b.Z)(l.qs),region:e?.region??(0,b.Z)(a.GG,a.zH),requestHandler:v.$c.create(e?.requestHandler??n),retryMode:e?.retryMode??(0,b.Z)({...l.kN,default:async()=>(await n()).retryMode||P.L0}),sha256:e?.sha256??x.V.bind(null,"sha256"),streamCollector:e?.streamCollector??v.kv,useDualstackEndpoint:e?.useDualstackEndpoint??(0,b.Z)(a.e$),useFipsEndpoint:e?.useFipsEndpoint??(0,b.Z)(a.Ko)}})(s||{}),h=(m=o,{...m,useDualstackEndpoint:m.useDualstackEndpoint??!1,useFipsEndpoint:m.useFipsEndpoint??!1,defaultSigningName:"ses"});var m;const f=(0,r.Dc)(h),g=(0,l.$z)(f),N=(0,a.TD)(g),T=(0,e.OV)(N);var M;const C=((e,t)=>{const n={...(0,oe.Rq)(e),...(0,d.xA)(e),...(0,re.eS)(e),...Ea(e)};return t.forEach((e=>e.configure(n))),{...e,...(0,oe.$3)(n),...(0,d.uv)(n),...(0,re.jt)(n),...(s=n,{httpAuthSchemes:s.httpAuthSchemes(),httpAuthSchemeProvider:s.httpAuthSchemeProvider(),credentials:s.credentials()})};var s})((M=(0,u.Co)(T),{...(0,p.h)(M)}),s?.extensions||[]);super(C),this.config=C,this.middlewareStack.use((0,r.sM)(this.config)),this.middlewareStack.use((0,l.ey)(this.config)),this.middlewareStack.use((0,c.vK)(this.config)),this.middlewareStack.use((0,e.TC)(this.config)),this.middlewareStack.use((0,t.Y7)(this.config)),this.middlewareStack.use((0,n.n4)(this.config)),this.middlewareStack.use((0,i.wB)(this.config,{httpAuthSchemeParametersProvider:Hr,identityProviderConfigProvider:async e=>new i.h$({"aws.auth#sigv4":e.credentials})})),this.middlewareStack.use((0,i.lW)(this.config))}destroy(){super.destroy()}}class ba extends d.TJ{constructor(e){super(e),Object.setPrototypeOf(this,ba.prototype)}}class va extends ba{constructor(e){super({name:"AccountSendingPausedException",$fault:"client",...e}),this.name="AccountSendingPausedException",this.$fault="client",Object.setPrototypeOf(this,va.prototype)}}class Sa extends ba{constructor(e){super({name:"AlreadyExistsException",$fault:"client",...e}),this.name="AlreadyExistsException",this.$fault="client",Object.setPrototypeOf(this,Sa.prototype),this.Name=e.Name}}class Pa extends ba{constructor(e){super({name:"CannotDeleteException",$fault:"client",...e}),this.name="CannotDeleteException",this.$fault="client",Object.setPrototypeOf(this,Pa.prototype),this.Name=e.Name}}class Ia extends ba{constructor(e){super({name:"LimitExceededException",$fault:"client",...e}),this.name="LimitExceededException",this.$fault="client",Object.setPrototypeOf(this,Ia.prototype)}}class $a extends ba{constructor(e){super({name:"RuleSetDoesNotExistException",$fault:"client",...e}),this.name="RuleSetDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,$a.prototype),this.Name=e.Name}}class Oa extends ba{constructor(e){super({name:"ConfigurationSetAlreadyExistsException",$fault:"client",...e}),this.name="ConfigurationSetAlreadyExistsException",this.$fault="client",Object.setPrototypeOf(this,Oa.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class Aa extends ba{constructor(e){super({name:"ConfigurationSetDoesNotExistException",$fault:"client",...e}),this.name="ConfigurationSetDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,Aa.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class Na extends ba{constructor(e){super({name:"ConfigurationSetSendingPausedException",$fault:"client",...e}),this.name="ConfigurationSetSendingPausedException",this.$fault="client",Object.setPrototypeOf(this,Na.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class Ta extends ba{constructor(e){super({name:"InvalidConfigurationSetException",$fault:"client",...e}),this.name="InvalidConfigurationSetException",this.$fault="client",Object.setPrototypeOf(this,Ta.prototype)}}class Ma extends ba{constructor(e){super({name:"EventDestinationAlreadyExistsException",$fault:"client",...e}),this.name="EventDestinationAlreadyExistsException",this.$fault="client",Object.setPrototypeOf(this,Ma.prototype),this.ConfigurationSetName=e.ConfigurationSetName,this.EventDestinationName=e.EventDestinationName}}class Ca extends ba{constructor(e){super({name:"InvalidCloudWatchDestinationException",$fault:"client",...e}),this.name="InvalidCloudWatchDestinationException",this.$fault="client",Object.setPrototypeOf(this,Ca.prototype),this.ConfigurationSetName=e.ConfigurationSetName,this.EventDestinationName=e.EventDestinationName}}class Ra extends ba{constructor(e){super({name:"InvalidFirehoseDestinationException",$fault:"client",...e}),this.name="InvalidFirehoseDestinationException",this.$fault="client",Object.setPrototypeOf(this,Ra.prototype),this.ConfigurationSetName=e.ConfigurationSetName,this.EventDestinationName=e.EventDestinationName}}class ka extends ba{constructor(e){super({name:"InvalidSNSDestinationException",$fault:"client",...e}),this.name="InvalidSNSDestinationException",this.$fault="client",Object.setPrototypeOf(this,ka.prototype),this.ConfigurationSetName=e.ConfigurationSetName,this.EventDestinationName=e.EventDestinationName}}class Da extends ba{constructor(e){super({name:"InvalidTrackingOptionsException",$fault:"client",...e}),this.name="InvalidTrackingOptionsException",this.$fault="client",Object.setPrototypeOf(this,Da.prototype)}}class ja extends ba{constructor(e){super({name:"TrackingOptionsAlreadyExistsException",$fault:"client",...e}),this.name="TrackingOptionsAlreadyExistsException",this.$fault="client",Object.setPrototypeOf(this,ja.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class Fa extends ba{constructor(e){super({name:"CustomVerificationEmailInvalidContentException",$fault:"client",...e}),this.name="CustomVerificationEmailInvalidContentException",this.$fault="client",Object.setPrototypeOf(this,Fa.prototype)}}class qa extends ba{constructor(e){super({name:"CustomVerificationEmailTemplateAlreadyExistsException",$fault:"client",...e}),this.name="CustomVerificationEmailTemplateAlreadyExistsException",this.$fault="client",Object.setPrototypeOf(this,qa.prototype),this.CustomVerificationEmailTemplateName=e.CustomVerificationEmailTemplateName}}class za extends ba{constructor(e){super({name:"FromEmailAddressNotVerifiedException",$fault:"client",...e}),this.name="FromEmailAddressNotVerifiedException",this.$fault="client",Object.setPrototypeOf(this,za.prototype),this.FromEmailAddress=e.FromEmailAddress}}class La extends ba{constructor(e){super({name:"InvalidLambdaFunctionException",$fault:"client",...e}),this.name="InvalidLambdaFunctionException",this.$fault="client",Object.setPrototypeOf(this,La.prototype),this.FunctionArn=e.FunctionArn}}class Ua extends ba{constructor(e){super({name:"InvalidS3ConfigurationException",$fault:"client",...e}),this.name="InvalidS3ConfigurationException",this.$fault="client",Object.setPrototypeOf(this,Ua.prototype),this.Bucket=e.Bucket}}class _a extends ba{constructor(e){super({name:"InvalidSnsTopicException",$fault:"client",...e}),this.name="InvalidSnsTopicException",this.$fault="client",Object.setPrototypeOf(this,_a.prototype),this.Topic=e.Topic}}class Ka extends ba{constructor(e){super({name:"RuleDoesNotExistException",$fault:"client",...e}),this.name="RuleDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,Ka.prototype),this.Name=e.Name}}class Va extends ba{constructor(e){super({name:"InvalidTemplateException",$fault:"client",...e}),this.name="InvalidTemplateException",this.$fault="client",Object.setPrototypeOf(this,Va.prototype),this.TemplateName=e.TemplateName}}class Ba extends ba{constructor(e){super({name:"CustomVerificationEmailTemplateDoesNotExistException",$fault:"client",...e}),this.name="CustomVerificationEmailTemplateDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,Ba.prototype),this.CustomVerificationEmailTemplateName=e.CustomVerificationEmailTemplateName}}class Ha extends ba{constructor(e){super({name:"EventDestinationDoesNotExistException",$fault:"client",...e}),this.name="EventDestinationDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,Ha.prototype),this.ConfigurationSetName=e.ConfigurationSetName,this.EventDestinationName=e.EventDestinationName}}class Wa extends ba{constructor(e){super({name:"TrackingOptionsDoesNotExistException",$fault:"client",...e}),this.name="TrackingOptionsDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,Wa.prototype),this.ConfigurationSetName=e.ConfigurationSetName}}class Ga extends ba{constructor(e){super({name:"TemplateDoesNotExistException",$fault:"client",...e}),this.name="TemplateDoesNotExistException",this.$fault="client",Object.setPrototypeOf(this,Ga.prototype),this.TemplateName=e.TemplateName}}class Qa extends ba{constructor(e){super({name:"InvalidDeliveryOptionsException",$fault:"client",...e}),this.name="InvalidDeliveryOptionsException",this.$fault="client",Object.setPrototypeOf(this,Qa.prototype)}}class Za extends ba{constructor(e){super({name:"InvalidPolicyException",$fault:"client",...e}),this.name="InvalidPolicyException",this.$fault="client",Object.setPrototypeOf(this,Za.prototype)}}class Ja extends ba{constructor(e){super({name:"InvalidRenderingParameterException",$fault:"client",...e}),this.name="InvalidRenderingParameterException",this.$fault="client",Object.setPrototypeOf(this,Ja.prototype),this.TemplateName=e.TemplateName}}class Ya extends ba{constructor(e){super({name:"MailFromDomainNotVerifiedException",$fault:"client",...e}),this.name="MailFromDomainNotVerifiedException",this.$fault="client",Object.setPrototypeOf(this,Ya.prototype)}}class Xa extends ba{constructor(e){super({name:"MessageRejected",$fault:"client",...e}),this.name="MessageRejected",this.$fault="client",Object.setPrototypeOf(this,Xa.prototype)}}class ei extends ba{constructor(e){super({name:"MissingRenderingAttributeException",$fault:"client",...e}),this.name="MissingRenderingAttributeException",this.$fault="client",Object.setPrototypeOf(this,ei.prototype),this.TemplateName=e.TemplateName}}class ti extends ba{constructor(e){super({name:"ProductionAccessNotGrantedException",$fault:"client",...e}),this.name="ProductionAccessNotGrantedException",this.$fault="client",Object.setPrototypeOf(this,ti.prototype)}}const ni=async(e,t)=>{const n=Oc;let s;return s=iu({..._i(e,t),[Nc]:Zc,[ou]:Ac}),$c(t,n,"/",void 0,s)},si=async(e,t)=>{if(e.statusCode>=300)return oi(e,t);const n=await(0,wo.t_)(e.body,t);let s={};return s=xc(n.SendEmailResult,t),{$metadata:Pc(e),...s}},oi=async(e,t)=>{const n={...e,body:await(0,wo.FI)(e.body,t)},s=cu(e,n.body);switch(s){case"AlreadyExists":case"com.amazonaws.ses#AlreadyExistsException":throw await ai(n,t);case"LimitExceeded":case"com.amazonaws.ses#LimitExceededException":throw await Ni(n,t);case"RuleSetDoesNotExist":case"com.amazonaws.ses#RuleSetDoesNotExistException":throw await Di(n,t);case"ConfigurationSetAlreadyExists":case"com.amazonaws.ses#ConfigurationSetAlreadyExistsException":throw await ci(n,t);case"InvalidConfigurationSet":case"com.amazonaws.ses#InvalidConfigurationSetException":throw await wi(n,t);case"ConfigurationSetDoesNotExist":case"com.amazonaws.ses#ConfigurationSetDoesNotExistException":throw await ui(n,t);case"EventDestinationAlreadyExists":case"com.amazonaws.ses#EventDestinationAlreadyExistsException":throw await mi(n,t);case"InvalidCloudWatchDestination":case"com.amazonaws.ses#InvalidCloudWatchDestinationException":throw await yi(n,t);case"InvalidFirehoseDestination":case"com.amazonaws.ses#InvalidFirehoseDestinationException":throw await xi(n,t);case"InvalidSNSDestination":case"com.amazonaws.ses#InvalidSNSDestinationException":throw await Ii(n,t);case"InvalidTrackingOptions":case"com.amazonaws.ses#InvalidTrackingOptionsException":throw await Ai(n,t);case"TrackingOptionsAlreadyExistsException":case"com.amazonaws.ses#TrackingOptionsAlreadyExistsException":throw await Fi(n,t);case"CustomVerificationEmailInvalidContent":case"com.amazonaws.ses#CustomVerificationEmailInvalidContentException":throw await di(n,t);case"CustomVerificationEmailTemplateAlreadyExists":case"com.amazonaws.ses#CustomVerificationEmailTemplateAlreadyExistsException":throw await pi(n,t);case"FromEmailAddressNotVerified":case"com.amazonaws.ses#FromEmailAddressNotVerifiedException":throw await gi(n,t);case"InvalidLambdaFunction":case"com.amazonaws.ses#InvalidLambdaFunctionException":throw await bi(n,t);case"InvalidS3Configuration":case"com.amazonaws.ses#InvalidS3ConfigurationException":throw await Pi(n,t);case"InvalidSnsTopic":case"com.amazonaws.ses#InvalidSnsTopicException":throw await $i(n,t);case"RuleDoesNotExist":case"com.amazonaws.ses#RuleDoesNotExistException":throw await ki(n,t);case"InvalidTemplate":case"com.amazonaws.ses#InvalidTemplateException":throw await Oi(n,t);case"EventDestinationDoesNotExist":case"com.amazonaws.ses#EventDestinationDoesNotExistException":throw await fi(n,t);case"TrackingOptionsDoesNotExistException":case"com.amazonaws.ses#TrackingOptionsDoesNotExistException":throw await qi(n,t);case"CannotDelete":case"com.amazonaws.ses#CannotDeleteException":throw await ii(n,t);case"CustomVerificationEmailTemplateDoesNotExist":case"com.amazonaws.ses#CustomVerificationEmailTemplateDoesNotExistException":throw await hi(n,t);case"TemplateDoesNotExist":case"com.amazonaws.ses#TemplateDoesNotExistException":throw await ji(n,t);case"InvalidDeliveryOptions":case"com.amazonaws.ses#InvalidDeliveryOptionsException":throw await Ei(n,t);case"InvalidPolicy":case"com.amazonaws.ses#InvalidPolicyException":throw await vi(n,t);case"MessageRejected":case"com.amazonaws.ses#MessageRejected":throw await Mi(n,t);case"AccountSendingPausedException":case"com.amazonaws.ses#AccountSendingPausedException":throw await ri(n,t);case"ConfigurationSetSendingPausedException":case"com.amazonaws.ses#ConfigurationSetSendingPausedException":throw await li(n,t);case"MailFromDomainNotVerifiedException":case"com.amazonaws.ses#MailFromDomainNotVerifiedException":throw await Ti(n,t);case"ProductionAccessNotGranted":case"com.amazonaws.ses#ProductionAccessNotGrantedException":throw await Ri(n,t);case"InvalidRenderingParameter":case"com.amazonaws.ses#InvalidRenderingParameterException":throw await Si(n,t);case"MissingRenderingAttribute":case"com.amazonaws.ses#MissingRenderingAttributeException":throw await Ci(n,t);default:const o=n.body;return Ic({output:e,parsedBody:o.Error,errorCode:s})}},ri=async(e,t)=>{const n=e.body,s=Ki(n.Error,t),o=new va({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},ai=async(e,t)=>{const n=e.body,s=Vi(n.Error,t),o=new Sa({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},ii=async(e,t)=>{const n=e.body,s=Bi(n.Error,t),o=new Pa({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},ci=async(e,t)=>{const n=e.body,s=Hi(n.Error,t),o=new Oa({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},ui=async(e,t)=>{const n=e.body,s=Wi(n.Error,t),o=new Aa({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},li=async(e,t)=>{const n=e.body,s=Gi(n.Error,t),o=new Na({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},di=async(e,t)=>{const n=e.body,s=Qi(n.Error,t),o=new Fa({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},pi=async(e,t)=>{const n=e.body,s=Zi(n.Error,t),o=new qa({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},hi=async(e,t)=>{const n=e.body,s=Ji(n.Error,t),o=new Ba({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},mi=async(e,t)=>{const n=e.body,s=Yi(n.Error,t),o=new Ma({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},fi=async(e,t)=>{const n=e.body,s=Xi(n.Error,t),o=new Ha({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},gi=async(e,t)=>{const n=e.body,s=ec(n.Error,t),o=new za({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},yi=async(e,t)=>{const n=e.body,s=tc(n.Error,t),o=new Ca({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},wi=async(e,t)=>{const n=e.body,s=nc(n.Error,t),o=new Ta({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},Ei=async(e,t)=>{const n=e.body,s=sc(n.Error,t),o=new Qa({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},xi=async(e,t)=>{const n=e.body,s=oc(n.Error,t),o=new Ra({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},bi=async(e,t)=>{const n=e.body,s=rc(n.Error,t),o=new La({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},vi=async(e,t)=>{const n=e.body,s=ac(n.Error,t),o=new Za({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},Si=async(e,t)=>{const n=e.body,s=ic(n.Error,t),o=new Ja({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},Pi=async(e,t)=>{const n=e.body,s=cc(n.Error,t),o=new Ua({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},Ii=async(e,t)=>{const n=e.body,s=uc(n.Error,t),o=new ka({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},$i=async(e,t)=>{const n=e.body,s=lc(n.Error,t),o=new _a({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},Oi=async(e,t)=>{const n=e.body,s=dc(n.Error,t),o=new Va({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},Ai=async(e,t)=>{const n=e.body,s=pc(n.Error,t),o=new Da({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},Ni=async(e,t)=>{const n=e.body,s=hc(n.Error,t),o=new Ia({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},Ti=async(e,t)=>{const n=e.body,s=mc(n.Error,t),o=new Ya({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},Mi=async(e,t)=>{const n=e.body,s=fc(n.Error,t),o=new Xa({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},Ci=async(e,t)=>{const n=e.body,s=gc(n.Error,t),o=new ei({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},Ri=async(e,t)=>{const n=e.body,s=yc(n.Error,t),o=new ti({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},ki=async(e,t)=>{const n=e.body,s=wc(n.Error,t),o=new Ka({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},Di=async(e,t)=>{const n=e.body,s=Ec(n.Error,t),o=new $a({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},ji=async(e,t)=>{const n=e.body,s=bc(n.Error,t),o=new Ga({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},Fi=async(e,t)=>{const n=e.body,s=vc(n.Error,t),o=new ja({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},qi=async(e,t)=>{const n=e.body,s=Sc(n.Error,t),o=new Wa({$metadata:Pc(e),...s});return(0,d.Mw)(o,n)},zi=(e,t)=>{const n={};let s=1;for(const t of e)null!==t&&(n[`member.${s}`]=t,s++);return n},Li=(e,t)=>{const n={};return null!=e[qc]&&(n[qc]=e[qc]),null!=e[Rc]&&(n[Rc]=e[Rc]),n},Ui=(e,t)=>{const n={};return null!=e[Bc]&&(n[Bc]=e[Bc]),null!=e[ru]&&(n[ru]=e[ru]),n},_i=(e,t)=>{const n={};if(null!=e[Jc]&&(n[Jc]=e[Jc]),null!=e[Fc]){const t=(e=>{const t={};if(null!=e[eu]){const n=zi(e[eu]);0===e[eu]?.length&&(t.ToAddresses=[]),Object.entries(n).forEach((([e,n])=>{t[`ToAddresses.${e}`]=n}))}if(null!=e[kc]){const n=zi(e[kc]);0===e[kc]?.length&&(t.CcAddresses=[]),Object.entries(n).forEach((([e,n])=>{t[`CcAddresses.${e}`]=n}))}if(null!=e[Mc]){const n=zi(e[Mc]);0===e[Mc]?.length&&(t.BccAddresses=[]),Object.entries(n).forEach((([e,n])=>{t[`BccAddresses.${e}`]=n}))}return t})(e[Fc]);Object.entries(t).forEach((([e,t])=>{n[`Destination.${e}`]=t}))}if(null!=e[Kc]){const t=(e=>{const t={};if(null!=e[Yc]){const n=Li(e[Yc]);Object.entries(n).forEach((([e,n])=>{t[`Subject.${e}`]=n}))}if(null!=e[Tc]){const n=(e=>{const t={};if(null!=e[Xc]){const n=Li(e[Xc]);Object.entries(n).forEach((([e,n])=>{t[`Text.${e}`]=n}))}if(null!=e[_c]){const n=Li(e[_c]);Object.entries(n).forEach((([e,n])=>{t[`Html.${e}`]=n}))}return t})(e[Tc]);Object.entries(n).forEach((([e,n])=>{t[`Body.${e}`]=n}))}return t})(e[Kc]);Object.entries(t).forEach((([e,t])=>{n[`Message.${e}`]=t}))}if(null!=e[Gc]){const t=zi(e[Gc]);0===e[Gc]?.length&&(n.ReplyToAddresses=[]),Object.entries(t).forEach((([e,t])=>{n[`ReplyToAddresses.${e}`]=t}))}if(null!=e[Hc]&&(n[Hc]=e[Hc]),null!=e[Qc]&&(n[Qc]=e[Qc]),null!=e[Wc]&&(n[Wc]=e[Wc]),null!=e[nu]){const t=(e=>{const t={};let n=1;for(const s of e){if(null===s)continue;const e=Ui(s);Object.entries(e).forEach((([e,s])=>{t[`member.${n}.${e}`]=s})),n++}return t})(e[nu]);0===e[nu]?.length&&(n.Tags=[]),Object.entries(t).forEach((([e,t])=>{n[`Tags.${e}`]=t}))}return null!=e[Dc]&&(n[Dc]=e[Dc]),n},Ki=(e,t)=>{const n={};return null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},Vi=(e,t)=>{const n={};return null!=e[Bc]&&(n[Bc]=(0,d.lK)(e[Bc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},Bi=(e,t)=>{const n={};return null!=e[Bc]&&(n[Bc]=(0,d.lK)(e[Bc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},Hi=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},Wi=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},Gi=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},Qi=(e,t)=>{const n={};return null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},Zi=(e,t)=>{const n={};return null!=e[jc]&&(n[jc]=(0,d.lK)(e[jc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},Ji=(e,t)=>{const n={};return null!=e[jc]&&(n[jc]=(0,d.lK)(e[jc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},Yi=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[zc]&&(n[zc]=(0,d.lK)(e[zc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},Xi=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[zc]&&(n[zc]=(0,d.lK)(e[zc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},ec=(e,t)=>{const n={};return null!=e[Uc]&&(n[Uc]=(0,d.lK)(e[Uc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},tc=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[zc]&&(n[zc]=(0,d.lK)(e[zc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},nc=(e,t)=>{const n={};return null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},sc=(e,t)=>{const n={};return null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},oc=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[zc]&&(n[zc]=(0,d.lK)(e[zc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},rc=(e,t)=>{const n={};return null!=e[Lc]&&(n[Lc]=(0,d.lK)(e[Lc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},ac=(e,t)=>{const n={};return null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},ic=(e,t)=>{const n={};return null!=e[tu]&&(n[tu]=(0,d.lK)(e[tu])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},cc=(e,t)=>{const n={};return null!=e[Cc]&&(n[Cc]=(0,d.lK)(e[Cc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},uc=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[zc]&&(n[zc]=(0,d.lK)(e[zc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},lc=(e,t)=>{const n={};return null!=e[su]&&(n[su]=(0,d.lK)(e[su])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},dc=(e,t)=>{const n={};return null!=e[tu]&&(n[tu]=(0,d.lK)(e[tu])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},pc=(e,t)=>{const n={};return null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},hc=(e,t)=>{const n={};return null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},mc=(e,t)=>{const n={};return null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},fc=(e,t)=>{const n={};return null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},gc=(e,t)=>{const n={};return null!=e[tu]&&(n[tu]=(0,d.lK)(e[tu])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},yc=(e,t)=>{const n={};return null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},wc=(e,t)=>{const n={};return null!=e[Bc]&&(n[Bc]=(0,d.lK)(e[Bc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},Ec=(e,t)=>{const n={};return null!=e[Bc]&&(n[Bc]=(0,d.lK)(e[Bc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},xc=(e,t)=>{const n={};return null!=e[Vc]&&(n[Vc]=(0,d.lK)(e[Vc])),n},bc=(e,t)=>{const n={};return null!=e[tu]&&(n[tu]=(0,d.lK)(e[tu])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},vc=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},Sc=(e,t)=>{const n={};return null!=e[Dc]&&(n[Dc]=(0,d.lK)(e[Dc])),null!=e[au]&&(n[au]=(0,d.lK)(e[au])),n},Pc=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),Ic=(0,d.jr)(ba),$c=async(e,t,n,s,o)=>{const{hostname:r,protocol:a="https",port:i,path:c}=await e.endpoint(),u={protocol:a,hostname:r,port:i,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==s&&(u.hostname=s),void 0!==o&&(u.body=o),new re.Kd(u)},Oc={"content-type":"application/x-www-form-urlencoded"},Ac="2010-12-01",Nc="Action",Tc="Body",Mc="BccAddresses",Cc="Bucket",Rc="Charset",kc="CcAddresses",Dc="ConfigurationSetName",jc="CustomVerificationEmailTemplateName",Fc="Destination",qc="Data",zc="EventDestinationName",Lc="FunctionArn",Uc="FromEmailAddress",_c="Html",Kc="Message",Vc="MessageId",Bc="Name",Hc="ReturnPath",Wc="ReturnPathArn",Gc="ReplyToAddresses",Qc="SourceArn",Zc="SendEmail",Jc="Source",Yc="Subject",Xc="Text",eu="ToAddresses",tu="TemplateName",nu="Tags",su="Topic",ou="Version",ru="Value",au="message",iu=e=>Object.entries(e).map((([e,t])=>(0,d.$6)(e)+"="+(0,d.$6)(t))).join("&"),cu=(e,t)=>void 0!==t.Error?.Code?t.Error.Code:404==e.statusCode?"NotFound":void 0;class uu extends(d.uB.classBuilder().ep({...Gr}).m((function(e,t,n,s){return[(0,ce.TM)(n,this.serialize,this.deserialize),(0,u.rD)(n,e.getEndpointParameterInstructions())]})).s("SimpleEmailService","SendEmail",{}).n("SESClient","SendEmailCommand").f(void 0,void 0).ser(ni).de(si).build()){}var lu,du=function(){function e(){this.sesClient=new xa({}),this.noLastAccessDate=new Date(0).toLocaleString()}return e.prototype.notifyUser=function(e){return t=this,n=void 0,o=function(){var t,n,s,o;return function(e,t){var n,s,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function i(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,i[0]&&(a=0)),a;)try{if(n=1,s&&(o=2&i[0]?s.return:i[0]?s.throw||((o=s.return)&&o.call(s),0):s.next)&&!(o=o.call(s,i[1])).done)return o;switch(s=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,s=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],s=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}(this,(function(r){switch(r.label){case 0:return console.debug("Notifying ".concat(JSON.stringify(e,null,1))),t=e.lastAccess.toLocaleString()===this.noLastAccessDate?"not in the last ".concat(process.env.deleteDays," days"):e.lastAccess.toLocaleDateString(),n="I: QuickSight user ".concat(e.username," in account ").concat(process.env.accountAlias," will be deleted"),s='In order to <a href="https://aws.amazon.com/quicksight/pricing/">control costs ($24/month/user)</a>,\n    your AWS QuickSight user \''.concat(e.username,"' \n    will be deleted when you have not accessed QuickSight in ").concat(process.env.deleteDays," days. \n    CloudTrail records indicate that your last access was ").concat(t,".<br /><br />\n    \n    You can keep your user by logging in and taking actions in QuickSight. \n    Alternatively, you can do nothing, and your user will be automatically deleted. \n    Never fear, you simply log back into QuickSight and enter your e-mail, and your user gets recreated. \n    No dashboards or other resources will be deleted at this time (we may clean those up in the future, with notification, of course).<br /><br />\n    \n    Account Number: ").concat(process.env.awsAccountId,"<br />\n    Account Alias: ").concat(process.env.accountAlias,"<br />\n    Assumed Role: ").concat(e.iamRole,"<br />\n    Email: ").concat(e.email,'<br /><br />\n  \n    For further assistance, contact <a href="mailto:').concat(process.env.contact,'">').concat(process.env.contact,"</a>. Thank you and have a fantastically fun-filled day 🥳.\n    "),o=new uu({Source:"".concat(process.env.accountAlias," Cloud Account Administrator<").concat(process.env.from,">"),Destination:{ToAddresses:[e.email],CcAddresses:JSON.parse(process.env.cc)},ReplyToAddresses:[process.env.replyTo],SourceArn:process.env.sesArn,Message:{Subject:{Data:n},Body:{Html:{Data:s}}}}),[4,this.sesClient.send(o)];case 1:return r.sent(),[2]}}))},new((s=void 0)||(s=Promise))((function(e,r){function a(e){try{c(o.next(e))}catch(e){r(e)}}function i(e){try{c(o.throw(e))}catch(e){r(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof s?n:new s((function(e){e(n)}))).then(a,i)}c((o=o.apply(t,n||[])).next())}));var t,n,s,o},e}(),pu=function(e){this.arn=e.Arn,this.email=e.Email,this.role=lu[e.Role],this.username=e.UserName,this.invalid="N/A"===this.username;var t=this.username.split("/"),n=t[0],s=t[1];this.iamRole=n,this.stsSession=s};!function(e){e.READER="READER",e.AUTHOR="AUTHOR",e.ADMIN="ADMIN"}(lu||(lu={}));const hu=async(e,t,n)=>({operation:(0,h.u)(t).operation,region:await(0,h.t)(e.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()}),mu=e=>{const t=[];return e.operation,t.push(function(e){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"quicksight",region:e.region},propertiesExtractor:(e,t)=>({signingProperties:{config:e,context:t}})}}(e)),t},fu={UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}},gu="required",yu="fn",wu="argv",Eu="ref",xu=!0,bu="isSet",vu="booleanEquals",Su="error",Pu="endpoint",Iu="tree",$u="PartitionResult",Ou={[gu]:!1,type:"String"},Au={[gu]:!0,default:!1,type:"Boolean"},Nu={[Eu]:"Endpoint"},Tu={[yu]:vu,[wu]:[{[Eu]:"UseFIPS"},!0]},Mu={[yu]:vu,[wu]:[{[Eu]:"UseDualStack"},!0]},Cu={},Ru={[yu]:"getAttr",[wu]:[{[Eu]:$u},"supportsFIPS"]},ku={[yu]:vu,[wu]:[!0,{[yu]:"getAttr",[wu]:[{[Eu]:$u},"supportsDualStack"]}]},Du=[Tu],ju=[Mu],Fu=[{[Eu]:"Region"}],qu={version:"1.0",parameters:{Region:Ou,UseDualStack:Au,UseFIPS:Au,Endpoint:Ou},rules:[{conditions:[{[yu]:bu,[wu]:[Nu]}],rules:[{conditions:Du,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:Su},{conditions:ju,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:Su},{endpoint:{url:Nu,properties:Cu,headers:Cu},type:Pu}],type:Iu},{conditions:[{[yu]:bu,[wu]:Fu}],rules:[{conditions:[{[yu]:"aws.partition",[wu]:Fu,assign:$u}],rules:[{conditions:[Tu,Mu],rules:[{conditions:[{[yu]:vu,[wu]:[xu,Ru]},ku],rules:[{endpoint:{url:"https://quicksight-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Cu,headers:Cu},type:Pu}],type:Iu},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:Su}],type:Iu},{conditions:Du,rules:[{conditions:[{[yu]:vu,[wu]:[Ru,xu]}],rules:[{endpoint:{url:"https://quicksight-fips.{Region}.{PartitionResult#dnsSuffix}",properties:Cu,headers:Cu},type:Pu}],type:Iu},{error:"FIPS is enabled but this partition does not support FIPS",type:Su}],type:Iu},{conditions:ju,rules:[{conditions:[ku],rules:[{endpoint:{url:"https://quicksight.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Cu,headers:Cu},type:Pu}],type:Iu},{error:"DualStack is enabled but this partition does not support DualStack",type:Su}],type:Iu},{endpoint:{url:"https://quicksight.{Region}.{PartitionResult#dnsSuffix}",properties:Cu,headers:Cu},type:Pu}],type:Iu}],type:Iu},{error:"Invalid Configuration: Missing Region",type:Su}]},zu=(e,t={})=>(0,T.sO)(qu,{endpointParams:e,logger:t.logger});T.mw.aws=N.UF;const Lu=e=>{const t=e.httpAuthSchemes;let n=e.httpAuthSchemeProvider,s=e.credentials;return{setHttpAuthScheme(e){const n=t.findIndex((t=>t.schemeId===e.schemeId));-1===n?t.push(e):t.splice(n,1,e)},httpAuthSchemes:()=>t,setHttpAuthSchemeProvider(e){n=e},httpAuthSchemeProvider:()=>n,setCredentials(e){s=e},credentials:()=>s}};class Uu extends d.Kj{constructor(...[s]){const o=(e=>{(0,d.I9)(process.version);const t=(0,se.I)(e),n=()=>t().then(d.lT),s=(e=>({apiVersion:"2018-04-01",base64Decoder:e?.base64Decoder??O.E,base64Encoder:e?.base64Encoder??O.n,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??zu,extensions:e?.extensions??[],httpAuthSchemeProvider:e?.httpAuthSchemeProvider??mu,httpAuthSchemes:e?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:e=>e.getIdentityProvider("aws.auth#sigv4"),signer:new I.f2}],logger:e?.logger??new d.N4,serviceId:e?.serviceId??"QuickSight",urlParser:e?.urlParser??$.D,utf8Decoder:e?.utf8Decoder??A.ar,utf8Encoder:e?.utf8Encoder??A.Pq}))(e);return(0,y.I)(process.version),{...s,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??S.n,credentialDefaultProvider:e?.credentialDefaultProvider??w.v6,defaultUserAgentProvider:e?.defaultUserAgentProvider??(0,E.mJ)({serviceId:s.serviceId,clientVersion:"3.637.0"}),maxAttempts:e?.maxAttempts??(0,b.Z)(l.qs),region:e?.region??(0,b.Z)(a.GG,a.zH),requestHandler:v.$c.create(e?.requestHandler??n),retryMode:e?.retryMode??(0,b.Z)({...l.kN,default:async()=>(await n()).retryMode||P.L0}),sha256:e?.sha256??x.V.bind(null,"sha256"),streamCollector:e?.streamCollector??v.kv,useDualstackEndpoint:e?.useDualstackEndpoint??(0,b.Z)(a.e$),useFipsEndpoint:e?.useFipsEndpoint??(0,b.Z)(a.Ko)}})(s||{}),h=(m=o,{...m,useDualstackEndpoint:m.useDualstackEndpoint??!1,useFipsEndpoint:m.useFipsEndpoint??!1,defaultSigningName:"quicksight"});var m;const f=(0,r.Dc)(h),g=(0,l.$z)(f),N=(0,a.TD)(g),T=(0,e.OV)(N);var M;const C=((e,t)=>{const n={...(0,oe.Rq)(e),...(0,d.xA)(e),...(0,re.eS)(e),...Lu(e)};return t.forEach((e=>e.configure(n))),{...e,...(0,oe.$3)(n),...(0,d.uv)(n),...(0,re.jt)(n),...(s=n,{httpAuthSchemes:s.httpAuthSchemes(),httpAuthSchemeProvider:s.httpAuthSchemeProvider(),credentials:s.credentials()})};var s})((M=(0,u.Co)(T),{...(0,p.h)(M)}),s?.extensions||[]);super(C),this.config=C,this.middlewareStack.use((0,r.sM)(this.config)),this.middlewareStack.use((0,l.ey)(this.config)),this.middlewareStack.use((0,c.vK)(this.config)),this.middlewareStack.use((0,e.TC)(this.config)),this.middlewareStack.use((0,t.Y7)(this.config)),this.middlewareStack.use((0,n.n4)(this.config)),this.middlewareStack.use((0,i.wB)(this.config,{httpAuthSchemeParametersProvider:hu,identityProviderConfigProvider:async e=>new i.h$({"aws.auth#sigv4":e.credentials})})),this.middlewareStack.use((0,i.lW)(this.config))}destroy(){super.destroy()}}class _u extends d.TJ{constructor(e){super(e),Object.setPrototypeOf(this,_u.prototype)}}class Ku extends _u{constructor(e){super({name:"AccessDeniedException",$fault:"client",...e}),this.name="AccessDeniedException",this.$fault="client",Object.setPrototypeOf(this,Ku.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}var Vu,Bu,Hu;!function(e){e.visit=(e,t)=>void 0!==e.AmazonElasticsearchParameters?t.AmazonElasticsearchParameters(e.AmazonElasticsearchParameters):void 0!==e.AthenaParameters?t.AthenaParameters(e.AthenaParameters):void 0!==e.AuroraParameters?t.AuroraParameters(e.AuroraParameters):void 0!==e.AuroraPostgreSqlParameters?t.AuroraPostgreSqlParameters(e.AuroraPostgreSqlParameters):void 0!==e.AwsIotAnalyticsParameters?t.AwsIotAnalyticsParameters(e.AwsIotAnalyticsParameters):void 0!==e.JiraParameters?t.JiraParameters(e.JiraParameters):void 0!==e.MariaDbParameters?t.MariaDbParameters(e.MariaDbParameters):void 0!==e.MySqlParameters?t.MySqlParameters(e.MySqlParameters):void 0!==e.OracleParameters?t.OracleParameters(e.OracleParameters):void 0!==e.PostgreSqlParameters?t.PostgreSqlParameters(e.PostgreSqlParameters):void 0!==e.PrestoParameters?t.PrestoParameters(e.PrestoParameters):void 0!==e.RdsParameters?t.RdsParameters(e.RdsParameters):void 0!==e.RedshiftParameters?t.RedshiftParameters(e.RedshiftParameters):void 0!==e.S3Parameters?t.S3Parameters(e.S3Parameters):void 0!==e.ServiceNowParameters?t.ServiceNowParameters(e.ServiceNowParameters):void 0!==e.SnowflakeParameters?t.SnowflakeParameters(e.SnowflakeParameters):void 0!==e.SparkParameters?t.SparkParameters(e.SparkParameters):void 0!==e.SqlServerParameters?t.SqlServerParameters(e.SqlServerParameters):void 0!==e.TeradataParameters?t.TeradataParameters(e.TeradataParameters):void 0!==e.TwitterParameters?t.TwitterParameters(e.TwitterParameters):void 0!==e.AmazonOpenSearchParameters?t.AmazonOpenSearchParameters(e.AmazonOpenSearchParameters):void 0!==e.ExasolParameters?t.ExasolParameters(e.ExasolParameters):void 0!==e.DatabricksParameters?t.DatabricksParameters(e.DatabricksParameters):void 0!==e.StarburstParameters?t.StarburstParameters(e.StarburstParameters):void 0!==e.TrinoParameters?t.TrinoParameters(e.TrinoParameters):void 0!==e.BigQueryParameters?t.BigQueryParameters(e.BigQueryParameters):t._(e.$unknown[0],e.$unknown[1])}(Vu||(Vu={}));class Wu extends _u{constructor(e){super({name:"InternalFailureException",$fault:"server",...e}),this.name="InternalFailureException",this.$fault="server",Object.setPrototypeOf(this,Wu.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class Gu extends _u{constructor(e){super({name:"InvalidParameterValueException",$fault:"client",...e}),this.name="InvalidParameterValueException",this.$fault="client",Object.setPrototypeOf(this,Gu.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class Qu extends _u{constructor(e){super({name:"ResourceNotFoundException",$fault:"client",...e}),this.name="ResourceNotFoundException",this.$fault="client",Object.setPrototypeOf(this,Qu.prototype),this.Message=e.Message,this.ResourceType=e.ResourceType,this.RequestId=e.RequestId}}class Zu extends _u{constructor(e){super({name:"ThrottlingException",$fault:"client",...e}),this.name="ThrottlingException",this.$fault="client",Object.setPrototypeOf(this,Zu.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class Ju extends _u{constructor(e){super({name:"ConflictException",$fault:"client",...e}),this.name="ConflictException",this.$fault="client",Object.setPrototypeOf(this,Ju.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class Yu extends _u{constructor(e){super({name:"ResourceExistsException",$fault:"client",...e}),this.name="ResourceExistsException",this.$fault="client",Object.setPrototypeOf(this,Yu.prototype),this.Message=e.Message,this.ResourceType=e.ResourceType,this.RequestId=e.RequestId}}class Xu extends _u{constructor(e){super({name:"ConcurrentUpdatingException",$fault:"server",...e}),this.name="ConcurrentUpdatingException",this.$fault="server",Object.setPrototypeOf(this,Xu.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class el extends _u{constructor(e){super({name:"ResourceUnavailableException",$fault:"server",...e}),this.name="ResourceUnavailableException",this.$fault="server",Object.setPrototypeOf(this,el.prototype),this.Message=e.Message,this.ResourceType=e.ResourceType,this.RequestId=e.RequestId}}class tl extends _u{constructor(e){super({name:"PreconditionNotMetException",$fault:"client",...e}),this.name="PreconditionNotMetException",this.$fault="client",Object.setPrototypeOf(this,tl.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class nl extends _u{constructor(e){super({name:"LimitExceededException",$fault:"client",...e}),this.name="LimitExceededException",this.$fault="client",Object.setPrototypeOf(this,nl.prototype),this.Message=e.Message,this.ResourceType=e.ResourceType,this.RequestId=e.RequestId}}class sl extends _u{constructor(e){super({name:"UnsupportedUserEditionException",$fault:"client",...e}),this.name="UnsupportedUserEditionException",this.$fault="client",Object.setPrototypeOf(this,sl.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}(Bu||(Bu={})).visit=(e,t)=>void 0!==e.ProjectOperation?t.ProjectOperation(e.ProjectOperation):void 0!==e.FilterOperation?t.FilterOperation(e.FilterOperation):void 0!==e.CreateColumnsOperation?t.CreateColumnsOperation(e.CreateColumnsOperation):void 0!==e.RenameColumnOperation?t.RenameColumnOperation(e.RenameColumnOperation):void 0!==e.CastColumnTypeOperation?t.CastColumnTypeOperation(e.CastColumnTypeOperation):void 0!==e.TagColumnOperation?t.TagColumnOperation(e.TagColumnOperation):void 0!==e.UntagColumnOperation?t.UntagColumnOperation(e.UntagColumnOperation):void 0!==e.OverrideDatasetParameterOperation?t.OverrideDatasetParameterOperation(e.OverrideDatasetParameterOperation):t._(e.$unknown[0],e.$unknown[1]),function(e){e.visit=(e,t)=>void 0!==e.RelationalTable?t.RelationalTable(e.RelationalTable):void 0!==e.CustomSql?t.CustomSql(e.CustomSql):void 0!==e.S3Source?t.S3Source(e.S3Source):t._(e.$unknown[0],e.$unknown[1])}(Hu||(Hu={}));class ol extends _u{constructor(e){super({name:"CustomerManagedKeyUnavailableException",$fault:"client",...e}),this.name="CustomerManagedKeyUnavailableException",this.$fault="client",Object.setPrototypeOf(this,ol.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class rl extends _u{constructor(e){super({name:"InvalidNextTokenException",$fault:"client",...e}),this.name="InvalidNextTokenException",this.$fault="client",Object.setPrototypeOf(this,rl.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class al extends _u{constructor(e){super({name:"DomainNotWhitelistedException",$fault:"client",...e}),this.name="DomainNotWhitelistedException",this.$fault="client",Object.setPrototypeOf(this,al.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class il extends _u{constructor(e){super({name:"SessionLifetimeInMinutesInvalidException",$fault:"client",...e}),this.name="SessionLifetimeInMinutesInvalidException",this.$fault="client",Object.setPrototypeOf(this,il.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class cl extends _u{constructor(e){super({name:"UnsupportedPricingPlanException",$fault:"client",...e}),this.name="UnsupportedPricingPlanException",this.$fault="client",Object.setPrototypeOf(this,cl.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class ul extends _u{constructor(e){super({name:"QuickSightUserNotFoundException",$fault:"client",...e}),this.name="QuickSightUserNotFoundException",this.$fault="client",Object.setPrototypeOf(this,ul.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class ll extends _u{constructor(e){super({name:"IdentityTypeNotSupportedException",$fault:"client",...e}),this.name="IdentityTypeNotSupportedException",this.$fault="client",Object.setPrototypeOf(this,ll.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}class dl extends _u{constructor(e){super({name:"InvalidRequestException",$fault:"client",...e}),this.name="InvalidRequestException",this.$fault="client",Object.setPrototypeOf(this,dl.prototype),this.Message=e.Message,this.RequestId=e.RequestId}}const pl=async(e,t)=>{const n=(0,i.lI)(e,t);return n.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}"),n.p("UserName",(()=>e.UserName),"{UserName}",!1),n.p("AwsAccountId",(()=>e.AwsAccountId),"{AwsAccountId}",!1),n.p("Namespace",(()=>e.Namespace),"{Namespace}",!1),n.m("DELETE").h({}).b(void 0),n.build()},hl=async(e,t)=>{const n=(0,i.lI)(e,t);n.bp("/accounts/{AwsAccountId}/namespaces/{Namespace}/users"),n.p("AwsAccountId",(()=>e.AwsAccountId),"{AwsAccountId}",!1),n.p("Namespace",(()=>e.Namespace),"{Namespace}",!1);const s=(0,d.Tj)({[_l]:[,e[Ll]],[Ul]:[()=>void 0!==e.MaxResults,()=>e[zl].toString()]});return n.m("GET").h({}).q(s).b(void 0),n.build()},ml=async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return gl(e,t);const n=(0,d.Tj)({$metadata:ql(e)}),s=(0,d.Y0)((0,d.Xk)(await(0,ue.Y2)(e.body,t)),"body"),o=(0,d.s)(s,{RequestId:d.lK});return Object.assign(n,o),(0,d.Tj)(n,{Status:[,e.statusCode]}),n},fl=async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return gl(e,t);const n=(0,d.Tj)({$metadata:ql(e)}),s=(0,d.Y0)((0,d.Xk)(await(0,ue.Y2)(e.body,t)),"body"),o=(0,d.s)(s,{NextToken:d.lK,RequestId:d.lK,UserList:d.Ss});return Object.assign(n,o),(0,d.Tj)(n,{Status:[,e.statusCode]}),n},gl=async(e,t)=>{const n={...e,body:await(0,ue.CG)(e.body,t)},s=(0,ue.cJ)(e,n.body);switch(s){case"AccessDeniedException":case"com.amazonaws.quicksight#AccessDeniedException":throw await wl(n,t);case"InternalFailureException":case"com.amazonaws.quicksight#InternalFailureException":throw await Pl(n,t);case"InvalidParameterValueException":case"com.amazonaws.quicksight#InvalidParameterValueException":throw await $l(n,t);case"ResourceNotFoundException":case"com.amazonaws.quicksight#ResourceNotFoundException":throw await Cl(n,t);case"ThrottlingException":case"com.amazonaws.quicksight#ThrottlingException":throw await Dl(n,t);case"ConflictException":case"com.amazonaws.quicksight#ConflictException":throw await xl(n,t);case"ResourceExistsException":case"com.amazonaws.quicksight#ResourceExistsException":throw await Ml(n,t);case"ResourceUnavailableException":case"com.amazonaws.quicksight#ResourceUnavailableException":throw await Rl(n,t);case"PreconditionNotMetException":case"com.amazonaws.quicksight#PreconditionNotMetException":throw await Nl(n,t);case"LimitExceededException":case"com.amazonaws.quicksight#LimitExceededException":throw await Al(n,t);case"UnsupportedUserEditionException":case"com.amazonaws.quicksight#UnsupportedUserEditionException":throw await Fl(n,t);case"CustomerManagedKeyUnavailableException":case"com.amazonaws.quicksight#CustomerManagedKeyUnavailableException":throw await bl(n,t);case"ConcurrentUpdatingException":case"com.amazonaws.quicksight#ConcurrentUpdatingException":throw await El(n,t);case"InvalidNextTokenException":case"com.amazonaws.quicksight#InvalidNextTokenException":throw await Il(n,t);case"SessionLifetimeInMinutesInvalidException":case"com.amazonaws.quicksight#SessionLifetimeInMinutesInvalidException":throw await kl(n,t);case"UnsupportedPricingPlanException":case"com.amazonaws.quicksight#UnsupportedPricingPlanException":throw await jl(n,t);case"QuickSightUserNotFoundException":case"com.amazonaws.quicksight#QuickSightUserNotFoundException":throw await Tl(n,t);case"DomainNotWhitelistedException":case"com.amazonaws.quicksight#DomainNotWhitelistedException":throw await vl(n,t);case"IdentityTypeNotSupportedException":case"com.amazonaws.quicksight#IdentityTypeNotSupportedException":throw await Sl(n,t);case"InvalidRequestException":case"com.amazonaws.quicksight#InvalidRequestException":throw await Ol(n,t);default:const o=n.body;return yl({output:e,parsedBody:o,errorCode:s})}},yl=(0,d.jr)(_u),wl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,o);const r=new Ku({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},El=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,o);const r=new Xu({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},xl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,o);const r=new Ju({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},bl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,o);const r=new ol({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},vl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,o);const r=new al({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},Sl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,o);const r=new ll({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},Pl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,o);const r=new Wu({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},Il=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,o);const r=new rl({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},$l=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,o);const r=new Gu({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},Ol=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,o);const r=new dl({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},Al=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK,ResourceType:d.lK});Object.assign(n,o);const r=new nl({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},Nl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,o);const r=new tl({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},Tl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,o);const r=new ul({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},Ml=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK,ResourceType:d.lK});Object.assign(n,o);const r=new Yu({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},Cl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK,ResourceType:d.lK});Object.assign(n,o);const r=new Qu({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},Rl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK,ResourceType:d.lK});Object.assign(n,o);const r=new el({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},kl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,o);const r=new il({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},Dl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,o);const r=new Zu({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},jl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,o);const r=new cl({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},Fl=async(e,t)=>{const n=(0,d.Tj)({}),s=e.body,o=(0,d.s)(s,{Message:d.lK,RequestId:d.lK});Object.assign(n,o);const r=new sl({$metadata:ql(e),...n});return(0,d.Mw)(r,e.body)},ql=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),zl="MaxResults",Ll="NextToken",Ul="max-results",_l="next-token";class Kl extends(d.uB.classBuilder().ep({...fu}).m((function(e,t,n,s){return[(0,ce.TM)(n,this.serialize,this.deserialize),(0,u.rD)(n,e.getEndpointParameterInstructions())]})).s("QuickSight_20180401","ListUsers",{}).n("QuickSightClient","ListUsersCommand").f(void 0,void 0).ser(hl).de(fl).build()){}class Vl extends(d.uB.classBuilder().ep({...fu}).m((function(e,t,n,s){return[(0,ce.TM)(n,this.serialize,this.deserialize),(0,u.rD)(n,e.getEndpointParameterInstructions())]})).s("QuickSight_20180401","DeleteUser",{}).n("QuickSightClient","DeleteUserCommand").f(void 0,void 0).ser(pl).de(ml).build()){}var Bl=function(e,t,n,s){return new(n||(n=Promise))((function(o,r){function a(e){try{c(s.next(e))}catch(e){r(e)}}function i(e){try{c(s.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,i)}c((s=s.apply(e,t||[])).next())}))},Hl=function(e,t){var n,s,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function i(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,i[0]&&(a=0)),a;)try{if(n=1,s&&(o=2&i[0]?s.return:i[0]?s.throw||((o=s.return)&&o.call(s),0):s.next)&&!(o=o.call(s,i[1])).done)return o;switch(s=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,s=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],s=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},Wl=function(){function e(){this.awsAccountId=process.env.awsAccountId,this.quickSightClient=new Uu({})}return e.prototype.retrieveUsers=function(){return Bl(this,void 0,void 0,(function(){var t,n,s,o;return Hl(this,(function(r){switch(r.label){case 0:t=[],n="",r.label=1;case 1:return s=new Kl({AwsAccountId:this.awsAccountId,Namespace:e.namespace,NextToken:n}),[4,this.quickSightClient.send(s)];case 2:o=r.sent(),n=o.NextToken,o.UserList.forEach((function(e){return t.push(new pu(e))})),r.label=3;case 3:if(n)return[3,1];r.label=4;case 4:return[2,t]}}))}))},e.prototype.deleteUser=function(t){return Bl(this,void 0,void 0,(function(){var n;return Hl(this,(function(s){switch(s.label){case 0:return console.debug("Deleting ".concat(JSON.stringify(t,null,1))),n=new Vl({AwsAccountId:this.awsAccountId,Namespace:e.namespace,UserName:t.username}),[4,this.quickSightClient.send(n)];case 1:return s.sent(),[2]}}))}))},e.namespace="default",e}();const Gl=function(){return e=void 0,t=void 0,s=function(){var e,t,n,s,o,r,a,i,c,u,l,d,p,h,m,f,g,y,w,E;return function(e,t){var n,s,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function i(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,i[0]&&(a=0)),a;)try{if(n=1,s&&(o=2&i[0]?s.return:i[0]?s.throw||((o=s.return)&&o.call(s),0):s.next)&&!(o=o.call(s,i[1])).done)return o;switch(s=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,s=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],s=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}(this,(function(x){switch(x.label){case 0:return e=process.env,t=e.deleteDays,n=e.notifyDays,s="true"===process.env.enableNotification,o=new Date,r=new Date,o.setDate(o.getDate()-parseInt(t)),r.setDate(r.getDate()-parseInt(n)),console.info("Notifying users with last access date on: ".concat(r.toLocaleDateString()," (").concat(n," days ago).")),console.info("Deleting users with last access date on or before: ".concat(o.toLocaleDateString()," (").concat(t," days ago).")),console.info("Notification enabled? ".concat(s,".")),a=new Wl,i=new $s,c=new du,u=new Br,[4,a.retrieveUsers()];case 1:return l=x.sent(),[4,i.retrieveQuickSightUserEvents(o)];case 2:for(d=x.sent(),p=0,h=l;p<h.length;p++)(E=h[p]).lastAccess=i.getLastAccessDate(E,d);console.debug("QuickSight Users:\n".concat(JSON.stringify(l,null,2))),u.queueMetric({MetricName:"PriorQuickSightUsersCount",Value:l.length}),m=0,f=0,g=0,y=0,w=l,x.label=3;case 3:return y<w.length?(E=w[y]).invalid?(console.warn("Invalid user: ".concat(JSON.stringify(E))),m++,[3,8]):[3,4]:[3,9];case 4:return E.lastAccess<o?(f++,[4,a.deleteUser(E)]):[3,6];case 5:return x.sent(),[3,8];case 6:return s&&E.role!==lu.READER&&E.lastAccess.toLocaleDateString()===r.toLocaleDateString()?(g++,[4,c.notifyUser(E)]):[3,8];case 7:x.sent(),x.label=8;case 8:return y++,[3,3];case 9:return u.queueMetric({MetricName:"InvalidUsersCount",Value:m}),u.queueMetric({MetricName:"UsersDeletedCount",Value:f}),u.queueMetric({MetricName:"NotificationsSentCount",Value:g}),u.queueMetric({MetricName:"RemainingQuickSightUsersCount",Value:l.length-f}),[4,u.emitQueuedMetrics()];case 10:return x.sent(),[2]}}))},new((n=void 0)||(n=Promise))((function(o,r){function a(e){try{c(s.next(e))}catch(e){r(e)}}function i(e){try{c(s.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,i)}c((s=s.apply(e,t||[])).next())}));var e,t,n,s}})(),module.exports=o})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,